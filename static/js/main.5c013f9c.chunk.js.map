{"version":3,"sources":["translations/i18n.js","utils/config.js","components/card/Card.js","components/dropzone/Dropzone.js","components/submitButton/SubmitButton.js","utils/useTimeout.js","components/accountRegistration/AccountRegistration.js","components/businessRegistration/businessRegistration.js","components/pagination/Pagination.js","components/transactions/Transactions.js","components/shareholder/Shareholder.js","components/shares/Shares.js","components/transfer/Balance.js","components/transfer/TransferToSelf.js","components/transfer/TransferToPerson.js","components/transfer/TransferToBusiness.js","components/purposeRegistration/PurposeRegistration.js","components/shareholderRegistration/shareholderRegistration.js","components/myBusiness/MyBusiness.js","components/userEditor/UserEditor.js","components/currencies/Currencies.js","components/currencyRegistration/CurrencyRegistration.js","components/modalMessage/ModalMessage.js","components/idleTimer/IdleTimer.js","utils/useInterval.js","utils/useEventListener.js","components/pages/summary/Summary.js","components/currencyContainer/CurrencyContainer.js","components/transfer/Transfer.js","utils/sockets.js","components/login/LogIn.js","components/signup/SignUp.js","utils/state.js","components/alert/Alert.js","components/language-selector/LanguageSelector.js","components/pages/main/Main.js","utils/requestHandler.js","utils/errorHandler.js","utils/responseHandler.js","components/validateEmail/ValidateEmail.js","components/changePassword/ChangePassword.js","components/logout/Logout.js","components/passwordReset/passwordReset.js","components/loading/Loading.js","index.js"],"names":["i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","react","wait","withRef","bindI18n","bindStore","nsMode","config","args","defaults","title","navigation","undefined","footer","header","body","headerContent","onNavigationClick","props","Object","assign","key","Footer","Header","className","Title","Nav","variant","defaultActiveKey","navigationdefaultActiveKey","map","item","Item","Link","href","link","onClick","style","color","name","Body","React","Children","children","child","cloneElement","styles","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","outline","transition","activeStyle","acceptStyle","rejectStyle","data","accountPhotoPath","barrelGetters","sendRequest","barrelFunctions","useState","setFiles","t","useTranslation","onDrop","useCallback","acceptedFiles","req","useDropzone","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useMemo","Figure","Image","width","height","alt","src","caption","request","namespace","visible","marginTop","timeout","onSubmit","setRequest","barrelSetters","showMessage","requestExpired","setRequestExpired","callback","delay","savedCallback","useRef","useEffect","current","id","setTimeout","clearTimeout","useTimeout","console","log","Button","type","block","disabled","Spinner","as","animation","size","role","aria-hidden","hidden","signedIn","accountNumber","userData","getReviser","getWorkplace","schema","yup","dropzoneHook","required","personalID","matches","RegExp","test","exclusive","params","message","value","pid","replace","split","n","parseInt","Alert","Heading","i18nKey","component","handleSubmit","handleChange","values","handleBlur","touched","errors","isValid","validateForm","setFieldValue","Form","noValidate","Group","controlId","Label","Text","Dropzone","Control","onChange","isInvalid","Feedback","InputGroup","Prepend","placeholder","aria-describedby","Check","label","terms","feedback","SubmitButton","validationSchema","reviser","workplace","email","sendAccountRegistrationRequest","initialValues","onBusinessRegistration","barrelEventHandlers","businessTitle","min","max","trim","businessDescription","optional","rows","uid","registerBusiness","pages","active","align","textAlign","Pagination","margin","First","Prev","items","number","push","Ellipsis","getPages","Next","Last","getJSX","transactions","countTransactions","activePageTransactions","transactionsPerPage","getTransactions","format","formatDate","formatPerCent","cnt","ListGroup","transaction","keyTransactions","business_title","conv_amount","created","sender_firstname","sender_lastname","purpose_id","purpose_title","recipient_id","roles","share","share_per_cent","i_am_recipient","roles_available","arrRoles","shares_available","action","float","Badge","pill","Math","ceil","purpose","shareholder","closeButton","rangeControl","sharePerCent","purposeTitle","businessOwnerFirstname","businessOwnerLastname","sharesCreated","purposeShareholders","setPurposeShareholders","userQuery","setUserQuery","delayedQuery","_","debounce","q","sendQuery","e","target","onClose","shareholder_id","ps","JSON","stringify","sharesLabelId","Toast","minWidth","firstname","lastname","Settings","fontSize","defaultValue","step","month","day","year","shares","countShares","activePageShares","sharesPerPage","getShares","keyShares","owner_firstname","owner_lastname","shares_created","shares_roles","shares_share","Shareholder","accordionView","setAccountType","setRedirectTo","setAccordionView","getAccountData","userDataParsed","onAccountTypeSelected","available","acc_curr","acc_cred","acc_save","Accordion","Toggle","Card","eventKey","cursor","Collapse","Transactions","Shares","accountType","language","currencyAbbr","parseLocaleNumber","fromAccount","toAccount","amount","custom","Intl","NumberFormat","notation","minimumFractionDigits","transferToSelf","toPersonalID","description","transferToPerson","purposeID","transferToBusiness","businessID","barrels","onPurposeRegistration","purposeDescription","RegisterPurpose","shareholderRoles","typeError","userBusinesses","activeBusiness","businessPurposes","activeBusinesPurpose","getBusinessPurposes","getPurposeShareholders","menuItems","purposes","countShareholders","keys","business","keyBusiness","keyPurpose","business_id","TogglePurpose","whiteSpace","Tab","Pane","bg","keyShareholder","Add","jsx","date","Date","businessSince","DateTimeFormat","ToggleBusiness","Container","Row","Col","sm","Content","border","PurposeRegistration","mode","editFirstname","setEditFirstname","editLastname","setEditLastname","editEmail","setEditEmail","editPassword","setEditPassword","passwordVisible","setPasswordVisible","submitButtonVisible","setSubmitButtonVisible","togglePassword","yupObject","firstName","lastName","password","Close","Edit","Append","VisibilityOff","Visibility","sendUserRegistrationRequest","currencies","countCurrencies","activePageCurrencies","currenciesPerPage","setCurrencyAbbr","getCurrencies","formatExchangeRate","onCurrencySelected","currency_id","onPageSelect","Table","responsive","striped","bordered","hover","currency","keyCUrrency","abbr","rate","region","checked","aria-label","curr_abbr","curr_title","curr_region","curr_rate","onHide","Modal","aria-labelledby","centered","timestamp","stage2","stage3","onTimeout","events","onSessionTimeout","seconds","setSeconds","modalMessageShow","setModalMessageShow","setInterval","clearInterval","useInterval","eventHandler","i","window","addEventListener","removeEventListener","useEventListener","currTime","timeFormatted","minute","second","modalMessage","fontWeight","ModalMessage","show","OverlayTrigger","placement","overlay","Tooltip","AvTimer","getBusinesses","location","useLocation","fluid","paddingRight","paddingLeft","Navbar","boxShadow","Brand","PowerSettingsNew","IdleTimer","collapseOnSelect","expand","background","pathname","aria-controls","viewBalanceOrTransfer","exact","path","Balance","AccountRegistration","UserEditor","accordionViewCurrency","setAccordionViewCurrency","Currencies","CurrencyRegistration","CurrencyContainer","BusinessRegistration","MyBusiness","transferType","onTransferTypeChange","transferCard","setTransferCard","TransferToSelf","TransferToPerson","TransferToBusiness","Transfer","dev","uri","ENDPOINT","hostname","socket","openSocket","connect","secure","reconnect","sendData","emit","sendUserLogInRequest","rememberMe","validateEmail","useStickyState","stickyValue","localStorage","getItem","parse","setValue","setItem","error","info","onAlertClose","dismissible","changeLanguage","lng","selectLanguage","setDebug","loggingOut","setLoggingOut","pageLoading","setPageLoading","uuidv4","session","setSession","connected","setConnected","setSignedIn","currencyRate","setCurrencyRate","setCurrencies","setTransactions","setShares","setCountCurrencies","setCountTransactions","setCountShares","setActivePageCurrencies","setActivePageTransactions","setActivePageShares","setCurrenciesPerPage","setTransactionsPerPage","setSharesPerPage","setUserData","setUID","setAccountNumber","setUserBusinesses","setActiveBusiness","setBusinessPurposes","setActiveBusinesPurpose","redirectTo","lastInsertId","setLastInsertId","validateTokenEmail","setValidateTokenEmail","validateTokenPasswordReset","setValidateTokenPasswordReset","passwordResetTokenValidated","setPasswordResetTokenValidated","passwordResetTokenEmail","setPasswordResetTokenEmail","tmrConnected","options","setLanguage","setTransferType","setAccountPhotoPath","setError","setInfo","responseData","setResponseData","on","useSocket","processResponse","processRequest","requestFound","onRequest","requestHandler","status","context","errorFound","onError","res","code","errorHandler","getTransactionById","onRedirect","responseFound","onResponse","results","insertId","affectedRows","currency_abbr","isNaN","currency_rate","rowNum","count_currencies","count_transaction_positions","count_shares","responseHandler","hideMessage","getUrlParam","param","queryString","search","URLSearchParams","get","sendEmailValidationRequest","token","msg","maximumFractionDigits","ts","hour","selected","newPage","page","limit","stringNumber","locale","parts_local","formatToParts","group","decimal","forEach","parseFloat","to","onSignUp","onTransferSuccess","onTransfer","onLogOut","char","endSession","clear","startSession","sendPasswordResetRequest","wrapperClass","innerClass","getContainerClass","appClass","Summary","Login","SignUp","ValidateEmail","ChangePassword","tempError","tempLanguage","Logout","PasswordReset","LanguageSelector","ReactDOM","render","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.5c013f9c.chunk.js","sourcesContent":["import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nimport Backend from \"i18next-xhr-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\n// not like to use this?\r\n// have a look at the Quick start guide\r\n// for passing in lng and translations on init\r\n\r\ni18n\r\n  // load translation using xhr -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-xhr-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    fallbackLng: \"lv\",\r\n    debug: false,\r\n    // lng: \"lv\",\r\n    ns: [\"LogIn\", \"SignUp\"],\r\n    defaultNS: \"Default\",\r\n    keySeparator: false,\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n    react: {\r\n      wait: false,\r\n      withRef: false,\r\n      bindI18n: \"languageChanged loaded\",\r\n      bindStore: \"added removed\",\r\n      nsMode: \"default\",\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","const dev = {\r\n  uri: {\r\n    ENDPOINT: \"http://localhost:9000\",\r\n    // ENDPOINT: \"http://192.168.2.100:9000\"\r\n  },\r\n};\r\n\r\nconst dev2 = {\r\n  uri: {\r\n    ENDPOINT: \"http://192.168.2.100:5000\",\r\n  },\r\n};\r\n\r\nconst staging = {\r\n  uri: {\r\n    ENDPOINT: \"https://dev.zime.lv\",\r\n  },\r\n};\r\n\r\nconst prod = {\r\n  uri: {\r\n    ENDPOINT: \"https://zime.lv\",\r\n  },\r\n};\r\n\r\nconst hostname = window && window.location && window.location.hostname;\r\n\r\nlet config;\r\nswitch (hostname) {\r\n  case \"localhost\":\r\n    config = dev;\r\n    break;\r\n  case \"192.168.2.100\":\r\n    config = dev2;\r\n    break;\r\n  case \"dev.zime.lv\":\r\n    config = staging;\r\n    break;\r\n  case \"zime.lv\":\r\n    config = prod;\r\n    break;\r\n  default:\r\n    config = dev;\r\n    break;\r\n}\r\n\r\nexport default {\r\n  ...config,\r\n};\r\n","import \"./Card.css\";\r\nimport React, { cloneElement } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n// import { Container, Row, Col, Button } from \"react-bootstrap\";\r\n// import Button from \"react-bootstrap/Button\";\r\n\r\nexport default (args) => {\r\n  let defaults = {\r\n    title: \"Untitled\",\r\n    navigation: undefined,\r\n    footer: undefined,\r\n    header: true,\r\n    body: true,\r\n    headerContent: null,\r\n    onNavigationClick: () => {},\r\n  };\r\n  let props = Object.assign(defaults, args);\r\n\r\n  let key = 0;\r\n\r\n  let footer = props.footer ? <Card.Footer>{props.footer}</Card.Footer> : \"\";\r\n\r\n  return (\r\n    <Card>\r\n      {/* <Card.Img variant=\"top\" src=\"holder.js/100px180?text=Image cap\" /> */}\r\n      {props.header && (\r\n        <Card.Header className=\"custom-card\">\r\n          {props.headerContent !== null ? (\r\n            props.headerContent\r\n          ) : (\r\n            <>\r\n              <Card.Title>{props.title}</Card.Title>\r\n              <Nav\r\n                variant=\"tabs\"\r\n                defaultActiveKey={props.navigationdefaultActiveKey}\r\n              >\r\n                {props.navigation &&\r\n                  props.navigation.map((item, key) => (\r\n                    <Nav.Item key={key}>\r\n                      <Nav.Link\r\n                        className=\"custom-card\"\r\n                        href={item.link}\r\n                        onClick={() => props.onNavigationClick(item.link)}\r\n                        style={{ color: \"black\" }}\r\n                      >\r\n                        {item.name}\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                  ))}\r\n              </Nav>\r\n            </>\r\n          )}\r\n        </Card.Header>\r\n      )}\r\n\r\n      {props.body && (\r\n        <Card.Body className=\"custom-card\">\r\n          {React.Children.map(args.children, (child) => {\r\n            if (typeof child !== \"object\") {\r\n              return child;\r\n            } else {\r\n              key++;\r\n              return cloneElement(child, {\r\n                styles: null,\r\n                key: key,\r\n              });\r\n            }\r\n          })}\r\n        </Card.Body>\r\n      )}\r\n      {footer}\r\n    </Card>\r\n  );\r\n};\r\n","import React, { useCallback, useMemo, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nimport { Figure } from \"react-bootstrap\";\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  padding: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  backgroundColor: \"#fafafa\",\r\n  color: \"#bdbdbd\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\n/**\r\n * App: Dropzone\r\n */\r\nexport default (args) => {\r\n  // console.log(\"DROPZONE\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args.data);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  let { accountPhotoPath } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [, setFiles] = useState(null);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(\"AccountRegistration\");\r\n\r\n  // let setFieldValue = data.setFieldValue;\r\n  // let data = args.data;\r\n\r\n  // let accountPhotoPath = data.accountPhotoPath;\r\n  if (accountPhotoPath !== \"\") {\r\n    baseStyle.padding = 0;\r\n    baseStyle.borderStyle = \"none\"; // \"solid\";\r\n    baseStyle.backgroundColor = \"none\";\r\n  }\r\n\r\n  // const [thisData] = useState(data);\r\n  // console.log(\"THIS DATA =====\");\r\n\r\n  // console.log(data);\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    // console.log(getRootProps());\r\n\r\n    // args.onDrop(1);\r\n    // args.context.dropzoneUntouched = false;\r\n\r\n    setFiles(acceptedFiles);\r\n    sendRequest({\r\n      req: \"upload file\",\r\n      data: acceptedFiles,\r\n    });\r\n    // setFieldValue(1);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const {\r\n    // acceptedFilesItems,\r\n    // rejectedFilesItems,\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({\r\n    accept: \"image/*\",\r\n    onDrop,\r\n  });\r\n\r\n  // const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n  // const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n  //   onDrop\r\n  // });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragAccept, isDragReject]\r\n  );\r\n\r\n  if (accountPhotoPath === \"\") {\r\n    return (\r\n      <div className=\"container\">\r\n        <div {...getRootProps({ style })}>\r\n          <input {...getInputProps()} />\r\n          <p>{t(\"Click to select the image file\")}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    // accountPhotoPath = \"http://localhost:9000/\" + accountPhotoPath;\r\n    accountPhotoPath = \"gfx/photo_id.png\";\r\n\r\n    return (\r\n      <>\r\n        <div className=\"container\">\r\n          <div {...getRootProps({ style })}>\r\n            <input {...getInputProps()} />\r\n            <Figure.Image\r\n              width={171}\r\n              height={180}\r\n              alt=\"171x180\"\r\n              src={accountPhotoPath}\r\n            />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState } from \"react\";\r\n// import { useTranslation } from \"react-i18next\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport { useTimeout } from \"../../utils/useTimeout\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    caption: \"Submit\",\r\n    request: null,\r\n    namespace: \"Button\",\r\n    visible: true,\r\n    marginTop: 0,\r\n    timeout: 7000, // milliseconds\r\n    onSubmit: () => {},\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { request } = props.barrelGetters;\r\n  const { setRequest } = props.barrelSetters;\r\n  const { showMessage } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  // const { t } = useTranslation([props.namespace]); // adjust namespace\r\n\r\n  const [requestExpired, setRequestExpired] = useState(false);\r\n\r\n  useTimeout(() => {\r\n    if (request !== props.request) return;\r\n    console.log(\"useTimeout\");\r\n\r\n    // Your custom logic here\r\n    // setSeconds(seconds - 1);\r\n    setRequestExpired(true);\r\n    setRequest(null);\r\n    showMessage(\"REQUEST_EXPIRED\", \"error\");\r\n  }, props.timeout);\r\n\r\n  // useEffect(() => {\r\n  //   if (requestExpired)\r\n  // }, [requestExpired]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    return !props.visible ? (\r\n      <></>\r\n    ) : (\r\n      <Button\r\n        type=\"submit\"\r\n        onClick={props.onSubmit}\r\n        block\r\n        disabled={request === props.request && !requestExpired}\r\n        style={{ marginTop: props.marginTop + \"px\" }}\r\n      >\r\n        <Spinner\r\n          as=\"span\"\r\n          animation=\"border\"\r\n          size=\"sm\"\r\n          role=\"status\"\r\n          aria-hidden=\"true\"\r\n          hidden={request !== props.request || requestExpired}\r\n        />\r\n        &nbsp;\r\n        {props.caption}\r\n        &nbsp;\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport const useTimeout = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setTimeout(tick, delay);\r\n      return () => clearTimeout(id);\r\n    }\r\n  }, [delay]);\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport { Form, InputGroup, Alert } from \"react-bootstrap\";\r\n// import { Redirect } from \"react-router-dom\";\r\nimport Card from \"../card\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import { useStickyState } from \"../../utils/state\";\r\nimport Dropzone from \"../dropzone\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  // console.log(\"ACCOUNT REGISTRATION ARGS:\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"register account\",\r\n    namespace: \"AccountRegistration\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    signedIn,\r\n    accountNumber,\r\n    accountPhotoPath,\r\n    userData,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    dropzoneHook: yup.string().required(t(\"Photo ID is required\")),\r\n    personalID: yup\r\n      .string()\r\n      .required(t(\"Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      )\r\n      .test({\r\n        name: \"integrity\",\r\n        exclusive: true,\r\n        params: {},\r\n        message: t(\"PersonalID must be valid\"),\r\n        test: (value) => {\r\n          if (typeof value === \"undefined\") return false;\r\n          let pid = value\r\n            .replace(\"-\", \"\")\r\n            .split(\"\")\r\n            .map(function (n) {\r\n              return parseInt(n, 10);\r\n            });\r\n          let calc =\r\n            1 * pid[0] +\r\n            6 * pid[1] +\r\n            3 * pid[2] +\r\n            7 * pid[3] +\r\n            9 * pid[4] +\r\n            10 * pid[5] +\r\n            5 * pid[6] +\r\n            8 * pid[7] +\r\n            4 * pid[8] +\r\n            2 * pid[9];\r\n          let checksum = (1101 - calc) % 11;\r\n\r\n          return checksum === pid[10];\r\n        },\r\n      }),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n\r\n  /**\r\n   * Send account registration request\r\n   * @param {object} data\r\n   */\r\n  const sendAccountRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    // data.data = userData;\r\n    // data.email = JSON.parse(userData).email;\r\n    data.email = userData.email;\r\n\r\n    return sendRequest({ req: props.request, data });\r\n    // return onAccountRegistration(data);\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    if (sendAccountRegistrationRequest(data)) {\r\n      // Account registration request was submitted\r\n    }\r\n  };\r\n\r\n  // let dropzoneUntouched = true;\r\n\r\n  const AccountRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    setFieldValue,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <Form.Group controlId=\"validationFormikPhotoId\">\r\n        <Form.Label>{t(\"Photo ID\")}</Form.Label>\r\n\r\n        <Form.Text>\r\n          <Trans i18nKey=\"AccountRegistration:Photo ID requirements\">\r\n            Photo of me holding my passport. The personal identification number\r\n            must be clearly legible.\r\n          </Trans>\r\n        </Form.Text>\r\n\r\n        <br />\r\n        <Dropzone data={props} />\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationFormikDropzoneHook\">\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"dropzoneHook\"\r\n          value={accountPhotoPath}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.dropzoneHook}\r\n          style={{ display: \"none\" }}\r\n        />\r\n\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {errors.dropzoneHook}\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n\r\n      {false && (\r\n        <Form.Group controlId=\"validationFormikCountry\">\r\n          <Form.Label>{t(\"Country\")}</Form.Label>\r\n          <Form.Control as=\"select\" custom>\r\n            <option>Latvija</option>\r\n            <option>Deutschland</option>\r\n          </Form.Control>\r\n        </Form.Group>\r\n      )}\r\n\r\n      <Form.Group controlId=\"validationFormikPersonalId\">\r\n        <Form.Label>{t(\"Personal ID\")}</Form.Label>\r\n        <InputGroup>\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"XXXXXX-XXXXX\")}\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"personalID\"\r\n            value={values.personalID}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.personalID && touched.personalID}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.personalID}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n      <Form.Group>\r\n        <Form.Check\r\n          required\r\n          name=\"terms\"\r\n          label={t(\"Agree to terms and conditions\")}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.terms && touched.terms}\r\n          feedback={errors.terms}\r\n          id=\"validationFormik0\"\r\n        />\r\n      </Form.Group>\r\n\r\n      <SubmitButton\r\n        {...args}\r\n        caption={t(\"Submit\")}\r\n        request={props.request}\r\n        namespace={props.namespace}\r\n      />\r\n    </Form>\r\n  );\r\n\r\n  if (signedIn === false)\r\n    return (\r\n      <>\r\n        <Alert variant=\"info\">\r\n          <Alert.Heading>{t(\"User not logged in\")}</Alert.Heading>\r\n          <p>\r\n            <Trans i18nKey=\"AccountRegistration:Please log in first\">\r\n              Please log in first.\r\n            </Trans>\r\n          </p>\r\n        </Alert>\r\n      </>\r\n    );\r\n\r\n  if (accountNumber !== null)\r\n    return (\r\n      <>\r\n        <Alert variant=\"info\">\r\n          <Alert.Heading>{t(\"Account successfully registered\")}</Alert.Heading>\r\n          <p>\r\n            <Trans\r\n              i18nKey=\"AccountRegistration:Account with your personal ID successfully registered\"\r\n              accountNumber={accountNumber}\r\n            >\r\n              Account with the personal ID\r\n              <strong>{{ accountNumber }}</strong>\r\n              successfully registered.\r\n            </Trans>\r\n          </p>\r\n        </Alert>\r\n      </>\r\n    );\r\n\r\n  return (\r\n    <Card title={t(\"Open account\")}>\r\n      <Formik\r\n        component={AccountRegistrationForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          personalID: \"\",\r\n          terms: \"\",\r\n          dropzoneHook: accountPhotoPath,\r\n        }}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import Card from \"../card\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const {\r\n    // format,\r\n    // parseLocaleNumber,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  const { onBusinessRegistration } = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([\"BusinessRegistration\"]);\r\n\r\n  const schema = yup.object({\r\n    businessTitle: yup\r\n      .string()\r\n      .required(t(\"Business title is a required field\"))\r\n      .min(3, t(\"Business title too short\"))\r\n      .max(70, t(\"Business title too long\"))\r\n      .trim(),\r\n    businessDescription: yup.string().optional(),\r\n  });\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const registerBusiness = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n\r\n    console.log(\"REGISTER BUSINESS DATA:\", data);\r\n\r\n    onBusinessRegistration({ req: \"register business\", data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    registerBusiness(data);\r\n  };\r\n\r\n  const RegisterBusinessForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Business Title (Business ID) */}\r\n      <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n        <Form.Label>{t(\"Business Title\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"\"\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"businessTitle\"\r\n            value={values.businessTitle}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.businessTitle && touched.businessTitle}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.businessTitle}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Business Description */}\r\n      <Form.Group\r\n        controlId=\"businessDescription\"\r\n        name=\"businessDescription\"\r\n        value={values.businessDescription}\r\n        onChange={handleChange}\r\n      >\r\n        <Form.Label>{t(\"Business Description\")}</Form.Label>\r\n        <Form.Control as=\"textarea\" rows=\"3\" />\r\n      </Form.Group>\r\n\r\n      {/* Submit button */}\r\n      <Button type=\"submit\" block>\r\n        {t(\"Submit\")}\r\n      </Button>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterBusinessForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        businessTitle: \"\",\r\n        businessDescription: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\n// import { useTranslation } from \"react-i18next\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"Pagination\",\r\n    pages: 0,\r\n    active: null,\r\n    onClick: () => {},\r\n    align: \"center\",\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  if (props.pages < 2) return <></>;\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  // const { t } = useTranslation([props.namespace]);\r\n\r\n  const getPages = () => {\r\n    let items = [];\r\n    for (let number = 1; number <= props.pages; number++) {\r\n      if (\r\n        number === 1 ||\r\n        number === props.pages ||\r\n        (number >= props.active - 2 && number <= props.active + 2)\r\n      ) {\r\n        items.push(\r\n          <Pagination.Item\r\n            key={number}\r\n            active={number === props.active}\r\n            onClick={() => props.onClick(number)}\r\n          >\r\n            {number}\r\n          </Pagination.Item>\r\n        );\r\n      } else if (number === 2 || number === props.pages - 1) {\r\n        items.push(<Pagination.Ellipsis key={number} disabled />);\r\n      }\r\n    }\r\n    return items;\r\n  };\r\n\r\n  //   <Pagination>\r\n  //   <Pagination.First />\r\n  //   <Pagination.Prev />\r\n\r\n  //   {getPages()}\r\n\r\n  //   <Pagination.Item>{1}</Pagination.Item>\r\n  //   <Pagination.Ellipsis />\r\n\r\n  //   <Pagination.Item>{10}</Pagination.Item>\r\n  //   <Pagination.Item>{11}</Pagination.Item>\r\n  //   <Pagination.Item active>{12}</Pagination.Item>\r\n  //   <Pagination.Item>{13}</Pagination.Item>\r\n  //   <Pagination.Item disabled>{14}</Pagination.Item>\r\n\r\n  //   <Pagination.Ellipsis />\r\n  //   <Pagination.Item>{20}</Pagination.Item>\r\n  //   <Pagination.Next />\r\n  //   <Pagination.Last />\r\n  // </Pagination>\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    const { align } = props;\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          textAlign: `${align}`,\r\n          // backgroundColor: \"red\",\r\n        }}\r\n      >\r\n        <span style={{ display: \"inline-block\" }}>\r\n          <Pagination style={{ padding: 0, margin: 0 }}>\r\n            {props.pages > 5 && (\r\n              <>\r\n                <Pagination.First onClick={() => props.onClick(\"First\")} />\r\n                <Pagination.Prev onClick={() => props.onClick(\"Prev\")} />\r\n              </>\r\n            )}\r\n\r\n            {getPages()}\r\n\r\n            {props.pages > 5 && (\r\n              <>\r\n                <Pagination.Next onClick={() => props.onClick(\"Next\")} />\r\n                <Pagination.Last onClick={() => props.onClick(\"Last\")} />\r\n              </>\r\n            )}\r\n          </Pagination>\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport {\r\n  // Form,\r\n  // InputGroup,\r\n  // Button,\r\n  // Table,\r\n  ListGroup,\r\n  Badge,\r\n} from \"react-bootstrap\";\r\n// import { Formik } from \"formik\";\r\n// import * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\n// import SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    request: \"get transactions\",\r\n    namespace: \"Transactions\",\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const {\r\n    transactions,\r\n    countTransactions,\r\n    activePageTransactions,\r\n    transactionsPerPage,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  // const { setActivePageTransactions } = props.barrelSetters;\r\n  const {\r\n    // getReviser,\r\n    // getWorkplace,\r\n    // sendRequest,\r\n    getTransactions,\r\n    format,\r\n    formatDate,\r\n    formatPerCent,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  const onPageSelect = (number) => {\r\n    // console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageTransactions > 1 ? activePageTransactions - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageTransactions <\r\n          Math.ceil(countTransactions / transactionsPerPage)\r\n            ? activePageTransactions + 1\r\n            : Math.ceil(countTransactions / transactionsPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countTransactions / transactionsPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getTransactions(number);\r\n  };\r\n\r\n  let cnt = 0;\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return (\r\n    <>\r\n      <ListGroup variant=\"flush\">\r\n        {transactions !== null &&\r\n          transactions.map((transaction, keyTransactions) => {\r\n            cnt++;\r\n\r\n            const {\r\n              // business_description,\r\n              // business_id,\r\n              // business_image,\r\n              // business_link,\r\n              // business_status,\r\n              business_title,\r\n              // comment,\r\n              conv_amount,\r\n              created,\r\n              // currency,\r\n              // exchange_rate,\r\n              sender_firstname,\r\n              sender_lastname,\r\n              // recipient_firstname,\r\n              // recipient_lastname,\r\n              // purpose_description,\r\n              purpose_id,\r\n              // purpose_image,\r\n              // purpose_link,\r\n              // purpose_status,\r\n              purpose_title,\r\n              recipient_id,\r\n              roles,\r\n              share,\r\n              share_per_cent,\r\n              // sender_id,\r\n              // sender_status,\r\n              // recipient_status,\r\n              // to_account,\r\n              type,\r\n            } = transaction;\r\n\r\n            // const i_am_sender = sender_id === accountNumber;\r\n            const i_am_recipient = recipient_id === accountNumber;\r\n\r\n            const roles_available =\r\n              roles !== null && roles !== \"-\" && typeof roles !== \"undefined\";\r\n            const arrRoles = roles_available ? roles.split(\",\") : [];\r\n\r\n            const shares_available =\r\n              typeof share !== \"undefined\" && share !== null && share !== \"-\";\r\n\r\n            if (type === \"transfer U2S\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {sender_firstname} {sender_lastname}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n            } else if (type === \"transfer U2U\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {sender_firstname} {sender_lastname}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n            } else if (type === \"transfer U2B\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {purpose_id}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  {business_title} &middot; {purpose_title}\r\n                  <br />\r\n                  {sender_firstname} {sender_lastname}\r\n                  {roles_available && (\r\n                    <>\r\n                      <br />\r\n                      {arrRoles.map((role, key) => {\r\n                        return (\r\n                          <span key={key}>\r\n                            {\" \"}\r\n                            <Badge pill variant=\"secondary\">\r\n                              {role}\r\n                            </Badge>\r\n                          </span>\r\n                        );\r\n                      })}\r\n                    </>\r\n                  )}{\" \"}\r\n                  {shares_available && (\r\n                    <>\r\n                      <br />\r\n                      {share} {t(\"shares\")} ({formatPerCent(share_per_cent)})\r\n                    </>\r\n                  )}\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n\r\n              // TODO: check if this works\r\n            } else {\r\n              console.log(\"Unknown transfer type\");\r\n\r\n              return <></>;\r\n            }\r\n          })}\r\n      </ListGroup>\r\n\r\n      {cnt === 0 && (\r\n        <p className=\"text-center text-muted\">{t(\"No transactions\")}</p>\r\n      )}\r\n\r\n      <br />\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countTransactions / transactionsPerPage)}\r\n        active={activePageTransactions}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState, useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, Toast, Badge } from \"react-bootstrap\";\r\nimport { Settings } from \"@material-ui/icons\";\r\nimport _ from \"lodash\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"Shareholder\",\r\n    request: \"change share\",\r\n    purpose: null,\r\n    shareholder: null,\r\n    closeButton: true,\r\n    rangeControl: true,\r\n    sharePerCent: null,\r\n    businessTitle: null,\r\n    purposeTitle: null,\r\n    businessOwnerFirstname: null,\r\n    businessOwnerLastname: null,\r\n    sharesCreated: null,\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { purposeShareholders } = props.barrelGetters;\r\n  const { setPurposeShareholders } = props.barrelSetters;\r\n  const { sendRequest, formatPerCent, formatDate } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const [userQuery, setUserQuery] = useState(props.share);\r\n  const delayedQuery = useRef(_.debounce((q) => sendQuery(q), 2000)).current;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  const onChange = (e) => {\r\n    // console.log(props.shareholder, e.target.value);\r\n    setUserQuery(e.target.value);\r\n    delayedQuery(e.target.value);\r\n  };\r\n\r\n  const onClose = () => {\r\n    // console.log(\"delete\", props.purpose, props.shareholder);\r\n    let data = {};\r\n    data.purpose_id = props.purpose;\r\n    data.shareholder_id = props.shareholder;\r\n    return sendRequest({ req: \"remove shareholder\", data });\r\n  };\r\n\r\n  const sendQuery = (delayedQuery) => {\r\n    // console.log(props.purpose, props.shareholder, delayedQuery);\r\n    const ps = purposeShareholders;\r\n    ps[props.id].share = delayedQuery;\r\n    setPurposeShareholders(JSON.stringify(ps));\r\n    let data = {};\r\n    data.purpose_id = props.purpose;\r\n    data.shareholder_id = props.shareholder;\r\n    data.share = delayedQuery;\r\n    // console.log(data);\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    const sharesLabelId = `sharesLabel${props.key}`;\r\n    return (\r\n      <Toast key={props.key} onClose={onClose} style={{ minWidth: \"100%\" }}>\r\n        <Toast.Header closeButton={props.closeButton}>\r\n          <strong className=\"mr-auto\">\r\n            {props.firstname} {props.lastname}{\" \"}\r\n            <small>\r\n              <Settings\r\n                hidden={true}\r\n                fontSize=\"small\"\r\n                style={{ color: \"var(--dark)\" }}\r\n              />\r\n            </small>\r\n          </strong>\r\n          <small>\r\n            <span id={sharesLabelId}>{userQuery}</span> {t(\"shares\")}\r\n          </small>\r\n        </Toast.Header>\r\n        <Toast.Body>\r\n          <Form>\r\n            <Form.Group controlId=\"formRoles\">\r\n              <div>\r\n                {props.roles.map((role, key) => {\r\n                  return (\r\n                    <span key={key}>\r\n                      <Badge pill variant=\"secondary\">\r\n                        {role}\r\n                      </Badge>{\" \"}\r\n                    </span>\r\n                  );\r\n                })}\r\n              </div>\r\n            </Form.Group>\r\n            {props.rangeControl && (\r\n              <Form.Group controlId=\"formBasicRange\">\r\n                <Form.Control\r\n                  type=\"range\"\r\n                  variant=\"light\"\r\n                  // value={share}\r\n                  defaultValue={userQuery}\r\n                  // value={userQuery}\r\n                  min={0}\r\n                  max={1000}\r\n                  step={1}\r\n                  // ref={this.input}\r\n                  onChange={onChange}\r\n                />\r\n              </Form.Group>\r\n            )}\r\n          </Form>\r\n          <span>\r\n            {props.sharePerCent !== null && formatPerCent(props.sharePerCent)}{\" \"}\r\n            {props.businessTitle !== null && props.businessTitle}{\" \"}\r\n            {props.businessTitle !== null && props.purposeTitle !== null && (\r\n              <> &middot; </>\r\n            )}\r\n            {props.purposeTitle !== null && props.purposeTitle}{\" \"}\r\n          </span>\r\n          {props.sharesCreated !== null && (\r\n            <>\r\n              <br />\r\n              {formatDate(props.sharesCreated, {\r\n                month: \"long\",\r\n                day: \"numeric\",\r\n                year: \"numeric\",\r\n              })}\r\n            </>\r\n          )}{\" \"}\r\n          {(props.businessOwnerFirstname !== null ||\r\n            props.businessOwnerLastname !== null) && <br />}\r\n          {props.businessOwnerFirstname !== null &&\r\n            props.businessOwnerFirstname}{\" \"}\r\n          {props.businessOwnerLastname !== null && props.businessOwnerLastname}{\" \"}\r\n        </Toast.Body>\r\n      </Toast>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\n// import { Form, InputGroup, Button, Table, ListGroup } from \"react-bootstrap\";\r\n// import { Formik } from \"formik\";\r\n// import * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n// import Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\n// import Card from \"../card\";\r\n// import SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\nimport Shareholder from \"../shareholder\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    request: \"get shares\",\r\n    namespace: \"Shares\",\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  const {\r\n    shares,\r\n    countShares,\r\n    activePageShares,\r\n    sharesPerPage,\r\n    // accountNumber,\r\n    userData,\r\n  } = props.barrelGetters;\r\n  // const {  } = props.barrelSetters;\r\n  const {\r\n    // getReviser,\r\n    // getWorkplace,\r\n    // sendRequest,\r\n    getShares,\r\n    // format,\r\n    // formatPerCent,\r\n    // formatDate,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n     * Functions\r\n     ============================================================================ */\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  const onPageSelect = (number) => {\r\n    console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageShares > 1 ? activePageShares - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageShares < Math.ceil(countShares / sharesPerPage)\r\n            ? activePageShares + 1\r\n            : Math.ceil(countShares / sharesPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countShares / sharesPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getShares(number);\r\n  };\r\n\r\n  let cnt = 0;\r\n\r\n  /**\r\n     * Return\r\n     ============================================================================ */\r\n  return (\r\n    <>\r\n      {shares !== null &&\r\n        shares.map((share, keyShares) => {\r\n          cnt++;\r\n\r\n          const {\r\n            // business_description,\r\n            // business_id,\r\n            // business_image,\r\n            // business_link,\r\n            // business_status,\r\n            business_title,\r\n            owner_firstname,\r\n            owner_lastname,\r\n            // owner_status,\r\n            // owner_uid,\r\n            // purpose_description,\r\n            purpose_id,\r\n            // purpose_image,\r\n            // purpose_link,\r\n            // purpose_status,\r\n            purpose_title,\r\n            shareholder_id,\r\n            shares_created,\r\n            // shares_description,\r\n            share_per_cent,\r\n            shares_roles,\r\n            shares_share,\r\n            // shares_status,\r\n            // shares_title,\r\n          } = share;\r\n\r\n          const arrRoles = shares_roles !== null ? shares_roles.split(\",\") : [];\r\n          // const content = `${owner_firstname} ${owner_lastname} / ${formatDate(\r\n          //   shares_created\r\n          // )}`;\r\n\r\n          // console.log(\"keyShares:\", keyShares);\r\n\r\n          return (\r\n            <Shareholder\r\n              {...args}\r\n              key={keyShares}\r\n              id={keyShares}\r\n              shareholder={shareholder_id}\r\n              purpose={purpose_id}\r\n              firstname={userData.firstname}\r\n              lastname={userData.lastname}\r\n              share={shares_share}\r\n              roles={arrRoles}\r\n              closeButton={false}\r\n              rangeControl={false}\r\n              sharePerCent={share_per_cent}\r\n              businessOwnerFirstname={owner_firstname}\r\n              businessOwnerLastname={owner_lastname}\r\n              businessTitle={business_title}\r\n              purposeTitle={purpose_title}\r\n              sharesCreated={shares_created}\r\n            />\r\n          );\r\n        })}\r\n\r\n      {cnt === 0 && <p className=\"text-center text-muted\">{t(\"No shares\")}</p>}\r\n\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countShares / sharesPerPage)}\r\n        active={activePageShares}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, Badge, Accordion, Card } from \"react-bootstrap\";\r\n// import { useAccordionToggle } from \"react-bootstrap/AccordionToggle\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import Octicon, { ChevronRight } from \"@primer/octicons-react\";\r\n// import AccessAlarmIcon from \"@material-ui/icons/AccessAlarm\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\n\r\n// import ZCard from \"../card\";\r\nimport Transactions from \"../transactions\";\r\nimport Shares from \"../shares\";\r\n\r\nexport default (args) => {\r\n  // let defaults = {};\r\n  // const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userData,\r\n    accountNumber,\r\n    accordionView,\r\n    // currencyAbbr,\r\n  } = props.barrelGetters;\r\n  const {\r\n    setAccountType,\r\n    setRedirectTo,\r\n    setAccordionView,\r\n  } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    getAccountData,\r\n    getTransactions,\r\n    getShares,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // const userData = props.data.userData;\r\n  // let format = props.format;\r\n  const { t } = useTranslation(\"Balance\");\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  // console.log(\"BALANCE DATA:\", props);\r\n  // console.log(\"BALANCE userData\", userData);\r\n  // const userDataParsed = JSON.parse(userData);\r\n  const userDataParsed = userData;\r\n\r\n  // let footer = <small className=\"text-muted\">Last updated 3 mins ago</small>;\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  // const gotoNextView = () => {\r\n  //   // console.log(props);\r\n\r\n  //   // props.data.setView(\"transfer\");\r\n  //   setRedirect(true);\r\n  // };\r\n\r\n  const onAccountTypeSelected = (type) => {\r\n    // console.log(type);\r\n\r\n    setAccountType(type);\r\n    setRedirectTo(\"/transfer\");\r\n  };\r\n\r\n  // console.log(userData);\r\n  const available =\r\n    userDataParsed !== null\r\n      ? format(\r\n          userDataParsed.acc_curr +\r\n            userDataParsed.acc_cred +\r\n            userDataParsed.acc_save\r\n        )\r\n      : null;\r\n  let acc_curr =\r\n    userDataParsed !== null ? format(userDataParsed.acc_curr) : null;\r\n  let acc_cred =\r\n    userDataParsed !== null ? format(userDataParsed.acc_cred) : null;\r\n  let acc_save =\r\n    userDataParsed !== null ? format(userDataParsed.acc_save) : null;\r\n\r\n  // if (props.data.view === \"transfer\") {\r\n  //   return <Redirect push to=\"/transfer\" />;\r\n  // }\r\n\r\n  // if (redirect) {\r\n  //   // props.data.setView(\"transfer\");\r\n  //   return <Redirect push to=\"/transfer\" />;\r\n  // }\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  const ToggleBalance = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionView(\"balance\");\r\n    getAccountData();\r\n  };\r\n\r\n  const ToggleTransactions = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionView(\"transactions\");\r\n    getTransactions(1);\r\n  };\r\n\r\n  const ToggleShares = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionView(\"shares\");\r\n    getShares(1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Accordion defaultActiveKey={accordionView}>\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"balance\"\r\n            style={{\r\n              cursor: \"pointer\",\r\n              // backgroundColor: \"#e8f6f3\",\r\n            }}\r\n            onClick={ToggleBalance}\r\n          >\r\n            {t(\"Balance\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"balance\">\r\n            <Card.Body>\r\n              <Form noValidate>\r\n                <Form.Group>\r\n                  <Form.Label>{t(\"Available\")}</Form.Label>\r\n                  <Form.Text>\r\n                    <div style={{ fontSize: \"3em\" }}>{available}</div>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Current account\")}</div>\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_curr\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_curr}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Credit account\")}</div>\r\n\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_cred\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_cred}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Savings account\")}</div>\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_save\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_save}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                  </ul>\r\n                </Form.Group>\r\n              </Form>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"transactions\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleTransactions}\r\n          >\r\n            {t(\"Transactions\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"transactions\">\r\n            <Card.Body>\r\n              <Transactions {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"shares\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleShares}\r\n          >\r\n            {t(\"Shares\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"shares\">\r\n            <Card.Body>\r\n              <Shares {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"transfer U2S\",\r\n    namespace: \"Transfer\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER TO SELF DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    // request,\r\n    userData,\r\n    accountNumber,\r\n    accountType,\r\n    language,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  // const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userData = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  // const { currency_abbr } = userData;\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    toAccount: yup.string().required(t(\"To Account is required\")),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} Form data\r\n   */\r\n  const transferToSelf = (data) => {\r\n    // console.log(\"TRANSFER U2S DATA:\", data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.amount = parseLocaleNumber(data.amount, language);\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n    }).format(data.amount);\r\n\r\n    // onTransfer({ req: props.request, data: data });\r\n    sendRequest({ req: props.request, data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    transferToSelf(data);\r\n  };\r\n\r\n  const TransferToSelfForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"validationToAccount\">\r\n          <Form.Label>{t(\"To account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"toAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.toAccount && touched.toAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option value=\"acc_curr\" hidden={accountType === \"acc_curr\"}>\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option value=\"acc_cred\" hidden={accountType === \"acc_cred\"}>\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option value=\"acc_save\" hidden={accountType === \"acc_save\"}>\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.toAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              // type=\"number\"\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              // onBlur={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request=\"transfer U2S\"\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToSelfForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        toAccount: \"\",\r\n        amount: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n * User imports\r\n */\r\nimport Card from \"../card\";\r\n\r\n/**\r\n * Component: TransferToPerson\r\n */\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"transfer U2U\", namespace: \"Transfer\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    // request,\r\n    userData,\r\n    accountNumber,\r\n    language,\r\n    accountType,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  // const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  // const { onTransfer } = props.barrelEventHandlers;\r\n\r\n  /** \r\n   * Custom hooks\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /** \r\n   * Destructuring\r\n   ============================================================================ */\r\n  // const { currency_abbr } = userData;\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    toPersonalID: yup\r\n      .string()\r\n      .required(t(\"Recipients Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      ),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const transferToPerson = (data) => {\r\n    // console.log(\"TRANSFER U2U DATA:\", data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.amount = parseLocaleNumber(data.amount, language);\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n    }).format(data.amount);\r\n\r\n    sendRequest({ req: props.request, data: data });\r\n    // onTransfer({ req: props.request, data: data });\r\n  };\r\n\r\n  // return <>test</>;\r\n\r\n  const onSubmit = (data) => {\r\n    transferToPerson(data);\r\n  };\r\n\r\n  const TransferToPersonForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        {/* Field: From account */}\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        {/* Field: Recipients Personal ID */}\r\n        <Form.Group controlId=\"validationFormikToPersonalID\">\r\n          <Form.Label>{t(\"To Personal ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"XXXXXX-XXXXX\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"toPersonalID\"\r\n              value={values.toPersonalID}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.toPersonalID && touched.toPersonalID}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.toPersonalID}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Field: Description */}\r\n        <Form.Group\r\n          controlId=\"description\"\r\n          name=\"description\"\r\n          value={values.description}\r\n          onChange={handleChange}\r\n        >\r\n          <Form.Label>{t(\"Description\")}</Form.Label>\r\n          <Form.Control as=\"textarea\" rows=\"3\" />\r\n        </Form.Group>\r\n\r\n        {/* Field: Amount */}\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              // type=\"number\"\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              // onBlur={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Button: Next */}\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToPersonForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        toPersonalID: \"\",\r\n        amount: \"\",\r\n        description: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"transfer U2B\", namespace: \"Transfer\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER TO SELF DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    // request,\r\n    userData,\r\n    accountNumber,\r\n    language,\r\n    accountType,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  // const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  // const { onTransfer } = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /** \r\n   * Destructuring\r\n   ============================================================================ */\r\n  // const { currency_abbr } = userData;\r\n\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    // businessTitle: yup\r\n    //   .string()\r\n    //   .required(t(\"Recipients Business ID is required\")),\r\n    purposeID: yup.string().required(t(\"Purpose ID is required\")),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const transferToBusiness = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.amount = parseLocaleNumber(data.amount, language);\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n    }).format(data.amount);\r\n    // data.amount = parseFloat(data.amount);\r\n    // data.amount = Number(data.amount.replace(/[^0-9.-]+/g, \"\"));\r\n\r\n    sendRequest({ req: props.request, data: data });\r\n    // onTransfer({ req: props.request, data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    transferToBusiness(data);\r\n  };\r\n\r\n  const TransferToBusinessForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      {/* From account */}\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        {/*\r\n        <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n          <Form.Label>{t(\"To Business ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"businessTitle\"\r\n              value={values.businessTitle}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.businessTitle && touched.businessTitle}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.businessTitle}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n        */}\r\n\r\n        {/* To purpose */}\r\n        <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n          <Form.Label>{t(\"To Purpose ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"purposeID\"\r\n              value={values.purposeID}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.purposeID && touched.purposeID}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.purposeID}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Field: Description */}\r\n        <Form.Group\r\n          controlId=\"description\"\r\n          name=\"description\"\r\n          value={values.description}\r\n          onChange={handleChange}\r\n        >\r\n          <Form.Label>{t(\"Description\")}</Form.Label>\r\n          <Form.Control as=\"textarea\" rows=\"3\" />\r\n        </Form.Group>\r\n\r\n        {/* Amount */}\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              type=\"string\" // do NOT change to number!!\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Submit button */}\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToBusinessForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        purposeID: \"\",\r\n        amount: \"\",\r\n        description: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import Card from \"../card\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { businessID: null };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"PURPOSE REGISTRATION PROPS:\", props);\r\n\r\n  const barrels = props.data;\r\n  const { businessID } = props;\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  // const { userData, accountNumber, language } = barrels.barrelGetters;\r\n  // const {} = barrels.barrelSetters;\r\n  const { getReviser, getWorkplace } = barrels.barrelFunctions;\r\n  const { onPurposeRegistration } = barrels.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([\"PurposeRegistration\"]);\r\n\r\n  const schema = yup.object({\r\n    purposeTitle: yup\r\n      .string()\r\n      .required(t(\"Purpose title is a required field\"))\r\n      .min(3, t(\"Purpose title too short\"))\r\n      .max(70, t(\"Purpose title too long\"))\r\n      .trim(),\r\n    purposeDescription: yup.string().optional(),\r\n  });\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const RegisterPurpose = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.businessID = businessID;\r\n\r\n    console.log(\"REGISTER PURPOSE DATA:\", data);\r\n\r\n    onPurposeRegistration({ req: \"register purpose\", data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    RegisterPurpose(data);\r\n  };\r\n\r\n  const RegisterPurposeForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Purpose Title (Purpose ID) */}\r\n      <Form.Group controlId=\"validationFormikPurposeID\">\r\n        <Form.Label>{t(\"Purpose Title\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"\"\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"purposeTitle\"\r\n            value={values.purposeTitle}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.purposeTitle && touched.purposeTitle}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.purposeTitle}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Purpose Description */}\r\n      <Form.Group\r\n        controlId=\"purposeDescription\"\r\n        name=\"purposeDescription\"\r\n        value={values.purposeDescription}\r\n        onChange={handleChange}\r\n      >\r\n        <Form.Label>{t(\"Purpose Description\")}</Form.Label>\r\n        <Form.Control as=\"textarea\" rows=\"3\" />\r\n      </Form.Group>\r\n\r\n      {/* Submit button */}\r\n      <Button type=\"submit\" block>\r\n        {t(\"Submit\")}\r\n      </Button>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterPurposeForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        purposeTitle: \"\",\r\n        purposeDescription: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Toast } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"register shareholder\",\r\n    namespace: \"ShareholderRegistration\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  const barrels = props;\r\n  const { purposeID } = props;\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber } = barrels.barrelGetters;\r\n  // const {} = barrels.barrelSetters;\r\n  const {\r\n    // format,\r\n    // parseLocaleNumber,\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n  } = barrels.barrelFunctions;\r\n  // const {} = barrels.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  // const thisRef = createRef();\r\n\r\n  const schema = yup.object({\r\n    personalID: yup\r\n      .string()\r\n      .required(t(\"Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      ),\r\n    shareholderRoles: yup.string().optional(),\r\n    shares: yup\r\n      .number()\r\n      .typeError(t(\"Shares must be a number\"))\r\n      .required(t(\"Shares is required\"))\r\n      .min(0, t(\"Shares too few\"))\r\n      .max(1000, t(\"Shares too many\")),\r\n  });\r\n\r\n  /**\r\n   * Send shareholder registration request\r\n   * @param {object} data\r\n   */\r\n  const onSubmit = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.purposeID = purposeID;\r\n\r\n    // console.log(\"REGISTER SHAREHOLDER DATA:\", data);\r\n\r\n    // onShareholderRegistration({ req: props.request, data: data });\r\n    sendRequest({ req: props.request, data: data });\r\n  };\r\n\r\n  const RegisterShareholderForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form id=\"shareholderRegistrationForm\" noValidate onSubmit={handleSubmit}>\r\n      <Toast style={{ minWidth: \"100%\" }}>\r\n        {/*\r\n        <Toast.Header closeButton={false}>\r\n          <strong className=\"mr-auto\">{t(\"Add Shareholder\")}</strong>\r\n        </Toast.Header>\r\n        */}\r\n        <Toast.Body>\r\n          <Form.Group controlId=\"validationFormikShareholderPersonalID\">\r\n            <Form.Label>{t(\"Shareholder Personal ID\")}</Form.Label>\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"XXXXXX-XXXXX\")}\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"personalID\"\r\n                value={values.personalID}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.personalID && touched.personalID}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.personalID}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n          {/* Shareholder Roles */}\r\n          <Form.Group controlId=\"validationFormikShareholderRoles\">\r\n            <Form.Label>{t(\"Shareholder Roles\")}</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"\"\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"shareholderRoles\"\r\n                value={values.shareholderRoles}\r\n                onChange={handleChange}\r\n                isInvalid={\r\n                  !!errors.shareholderRoles && touched.shareholderRoles\r\n                }\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.shareholderRoles}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          {/* Shares */}\r\n          <Form.Group controlId=\"validationFormikShareholderRoles\">\r\n            <Form.Label>{t(\"Shares\")}</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type=\"number\"\r\n                min={0}\r\n                max={1000}\r\n                step={1}\r\n                placeholder=\"\"\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"shares\"\r\n                value={values.shares}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.shares && touched.shares}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.shares}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          <SubmitButton\r\n            {...args}\r\n            caption={t(\"Submit\")}\r\n            request={props.request}\r\n            namespace={props.namespace}\r\n          />\r\n        </Toast.Body>\r\n      </Toast>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterShareholderForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        personalID: \"\",\r\n        shares: 0,\r\n        shareholderRoles: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Accordion,\r\n  Card,\r\n  Tab,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  // Nav,\r\n  // Form,\r\n  // Toast,\r\n  // Badge,\r\n  // Container,\r\n  // Button,\r\n} from \"react-bootstrap\";\r\n// import { useAccordionToggle } from \"react-bootstrap/AccordionToggle\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Octicon, { Plus, PlusSmall, Gear } from \"@primer/octicons-react\";\r\nimport { Add } from \"@material-ui/icons\";\r\n\r\n// import Dropzone from \"../dropzone\";\r\n\r\nimport BusinessRegistration from \"../businessRegistration\";\r\nimport PurposeRegistration from \"../purposeRegistration\";\r\nimport ShareholderRegistration from \"../shareholderRegistration\";\r\n// import shareholderRegistration from \"../shareholderRegistration\";\r\nimport Shareholder from \"../shareholder\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { namespace: \"MyBusiness\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER DATA\", props);\r\n\r\n  // const [businessLoaded, setBusinessLoaded] = useState(null);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userBusinesses,\r\n    activeBusiness,\r\n    businessPurposes,\r\n    activeBusinesPurpose,\r\n    purposeShareholders,\r\n    language,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  const { setRedirectTo } = props.barrelSetters;\r\n  const {\r\n    // getBusinesses,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n  } = props.barrelFunctions;\r\n  // const {  } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  useEffect(() => {\r\n    // getBusinesses();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n   * Toggle business (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  // const ToggleBusiness = ({ children, eventKey, businessID }) => {\r\n  //   const decoratedOnClick = useAccordionToggle(eventKey, () =>\r\n  //     getBusinessPurposes(businessID, eventKey)\r\n  //   );\r\n\r\n  //   return <div onClick={decoratedOnClick}>{children}</div>;\r\n  // };\r\n  const ToggleBusiness = ({ eventKey, businessID }) => {\r\n    getBusinessPurposes(businessID, eventKey);\r\n  };\r\n\r\n  /**\r\n   * Toggle purpose (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  // const TogglePurpose = ({ children, eventKey, purposeID }) => {\r\n  //   const decoratedOnClick = useAccordionToggle(eventKey, () =>\r\n  //     // getBusinessPurposes(businessID, eventKey)\r\n\r\n  //     getPurposeShareholders(purposeID, eventKey)\r\n  //   );\r\n\r\n  //   return <div onClick={decoratedOnClick}>{children}</div>;\r\n  // };\r\n\r\n  const TogglePurpose = ({ eventKey, purposeID }) => {\r\n    getPurposeShareholders(purposeID, eventKey);\r\n  };\r\n\r\n  /**\r\n   * Toggle shareholders (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  // const ToggleShareholders = ({ children, eventKey, purposeID }) => {\r\n  //   const decoratedOnClick = useAccordionToggle(eventKey, () =>\r\n  //     getPurposeShareholders(purposeID, eventKey)\r\n  //   );\r\n\r\n  //   return <div onClick={decoratedOnClick}>{children}</div>;\r\n  // };\r\n\r\n  /**\r\n   * Create:\r\n   * - business menu\r\n   * - business purposes menu\r\n   */\r\n  let menuItems = [];\r\n  let purposes = [];\r\n  let countShareholders = 0;\r\n  userBusinesses !== null &&\r\n    Object.keys(userBusinesses).map((business, keyBusiness) => {\r\n      menuItems[keyBusiness] = [];\r\n      purposes[keyBusiness] = [];\r\n      businessPurposes !== null &&\r\n        Object.keys(businessPurposes).map((purpose, keyPurpose) => {\r\n          if (\r\n            businessPurposes[purpose].business_id ===\r\n            userBusinesses[business].business_id\r\n          ) {\r\n            menuItems[keyBusiness][keyPurpose] = (\r\n              <ListGroup.Item\r\n                action\r\n                key={businessPurposes[purpose].purpose_id}\r\n                eventKey={businessPurposes[purpose].purpose_id}\r\n                onClick={() =>\r\n                  TogglePurpose({\r\n                    eventKey: keyPurpose,\r\n                    purposeID: businessPurposes[purpose].purpose_id,\r\n                  })\r\n                }\r\n              >\r\n                <span style={{ whiteSpace: \"nowrap\" }}>\r\n                  {keyBusiness + 1}.{keyPurpose + 1}{\" \"}\r\n                  {businessPurposes[purpose].title}\r\n                </span>\r\n              </ListGroup.Item>\r\n            );\r\n\r\n            purposes[keyBusiness][keyPurpose] = (\r\n              <Tab.Pane\r\n                key={businessPurposes[purpose].purpose_id}\r\n                eventKey={businessPurposes[purpose].purpose_id}\r\n              >\r\n                <Accordion defaultActiveKey=\"shareholders\">\r\n                  {/* Purpose ID */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"purpose_id\"\r\n                    >\r\n                      {t(\"Purpose ID\")}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"purpose_id\">\r\n                      <Card.Body>\r\n                        <Card.Text>\r\n                          {businessPurposes[purpose].purpose_id}\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n                  {/* Purpose description */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"description\"\r\n                    >\r\n                      {t(\"Purpose Description\")}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"description\">\r\n                      <Card.Body>\r\n                        <Card.Text>\r\n                          {businessPurposes[purpose].description}\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"shareholders\"\r\n                    >\r\n                      {t(\"Purpose Shareholders\")}\r\n                    </Accordion.Toggle>\r\n\r\n                    {/* Purpose shareholders */}\r\n                    <Accordion.Collapse eventKey=\"shareholders\">\r\n                      <Card.Body>\r\n                        {typeof purposeShareholders !== \"undefined\" &&\r\n                          purposeShareholders !== null &&\r\n                          Object.keys(purposeShareholders).map(\r\n                            (shareholder, keyShareholder) => {\r\n                              if (\r\n                                purposeShareholders[shareholder].purpose_id ===\r\n                                businessPurposes[purpose].purpose_id\r\n                              ) {\r\n                                const { purpose_id } = purposeShareholders[\r\n                                  shareholder\r\n                                ];\r\n                                const {\r\n                                  shareholder_id,\r\n                                  firstname,\r\n                                  lastname,\r\n                                  // email,\r\n                                  roles,\r\n                                  share,\r\n                                } = purposeShareholders[shareholder];\r\n\r\n                                countShareholders++;\r\n\r\n                                const arrRoles =\r\n                                  roles !== null ? roles.split(\",\") : [];\r\n\r\n                                return (\r\n                                  <Shareholder\r\n                                    {...args}\r\n                                    key={keyShareholder}\r\n                                    id={keyShareholder}\r\n                                    shareholder={shareholder_id}\r\n                                    purpose={purpose_id}\r\n                                    firstname={firstname}\r\n                                    lastname={lastname}\r\n                                    share={share}\r\n                                    roles={arrRoles}\r\n                                  />\r\n                                );\r\n                              } else {\r\n                                return \"\"; // TODO: check if this works\r\n                              }\r\n                            }\r\n                          )}\r\n                        {countShareholders === 0 && (\r\n                          <Card.Text className=\"text-muted\">\r\n                            {t(\"No shareholders\")}\r\n                          </Card.Text>\r\n                        )}\r\n\r\n                        {/* End shareholders list */}\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"2\"\r\n                    >\r\n                      <span style={{ whiteSpace: \"nowrap\" }}>\r\n                        <Add\r\n                          fontSize=\"small\"\r\n                          style={{ color: \"var(--dark)\" }}\r\n                        />\r\n                        &nbsp;{t(\"Add Shareholder\")}\r\n                      </span>\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"2\">\r\n                      <Card.Body>\r\n                        <ShareholderRegistration\r\n                          {...args}\r\n                          purposeID={businessPurposes[purpose].purpose_id}\r\n                        />\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n                </Accordion>\r\n              </Tab.Pane>\r\n            );\r\n          }\r\n          countShareholders = 0;\r\n          return true;\r\n        });\r\n      return true;\r\n    });\r\n\r\n  const jsx = (\r\n    <Accordion defaultActiveKey={activeBusiness}>\r\n      {/* List user businesses */}\r\n      {userBusinesses !== null &&\r\n        Object.keys(userBusinesses).map((business, keyBusiness) => {\r\n          const date = new Date(userBusinesses[business].created);\r\n          const businessSince = new Intl.DateTimeFormat(language).format(date);\r\n          // keyBusiness[3] = userBusinesses[business].business_id;\r\n          return (\r\n            <Card key={keyBusiness}>\r\n              <Accordion.Toggle\r\n                as={Card.Header}\r\n                eventKey={keyBusiness}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() =>\r\n                  ToggleBusiness({\r\n                    eventKey: keyBusiness,\r\n                    businessID: userBusinesses[business].business_id,\r\n                  })\r\n                }\r\n              >\r\n                {keyBusiness + 1} {userBusinesses[business].title}\r\n              </Accordion.Toggle>\r\n              <Accordion.Collapse eventKey={keyBusiness}>\r\n                <Card.Body>\r\n                  <Tab.Container\r\n                    id=\"left-tabs-example\"\r\n                    defaultActiveKey={\r\n                      activeBusinesPurpose !== null\r\n                        ? activeBusinesPurpose\r\n                        : \"aboutBusiness\"\r\n                    }\r\n                  >\r\n                    <Row>\r\n                      {/* Layout: Left side - Menu */}\r\n                      <Col sm={5}>\r\n                        <ListGroup variant=\"flush\">\r\n                          {/* Menu item: About business */}\r\n                          <ListGroup.Item action eventKey=\"aboutBusiness\">\r\n                            {t(\"About\")}\r\n                          </ListGroup.Item>\r\n\r\n                          {/* Menu items: Registered purposes */}\r\n                          {menuItems[keyBusiness]}\r\n\r\n                          {/* Menu item: Add purpose */}\r\n                          <ListGroup.Item action eventKey=\"addPurpose\">\r\n                            <span style={{ whiteSpace: \"nowrap\" }}>\r\n                              <Add\r\n                                fontSize=\"small\"\r\n                                style={{ color: \"var(--dark)\" }}\r\n                              />\r\n                              &nbsp;{t(\"Add Purpose\")}\r\n                            </span>\r\n                          </ListGroup.Item>\r\n                        </ListGroup>\r\n                      </Col>\r\n\r\n                      {/* Layout: Right side - Content */}\r\n                      <Col sm={7}>\r\n                        <Tab.Content>\r\n                          <Tab.Pane eventKey=\"aboutBusiness\">\r\n                            <Accordion defaultActiveKey=\"businessID\">\r\n                              {/* Business logo */}\r\n\r\n                              {/*\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  eventKey=\"businessLogo\"\r\n                                >\r\n                                  [LOGO]\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"businessLogo\">\r\n                                  <Card border=\"light\">\r\n                                    <Card.Body>\r\n                                      <Dropzone data={args} />\r\n                                    </Card.Body>\r\n                                  </Card>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n                              */}\r\n\r\n                              {/* Business ID */}\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  eventKey=\"businessID\"\r\n                                >\r\n                                  {t(\"Business ID\")}\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"businessID\">\r\n                                  <Card border=\"light\">\r\n                                    <Card.Body>\r\n                                      <Card.Text>\r\n                                        {userBusinesses[business].business_id}\r\n                                      </Card.Text>\r\n                                    </Card.Body>\r\n                                  </Card>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n\r\n                              {/* Business description */}\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  eventKey=\"businessDescription\"\r\n                                >\r\n                                  {t(\"Business Description\")}\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"businessDescription\">\r\n                                  <Card border=\"light\">\r\n                                    <Card.Body>\r\n                                      <Card.Text>\r\n                                        {userBusinesses[business].description}\r\n                                      </Card.Text>\r\n                                    </Card.Body>\r\n                                  </Card>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n\r\n                              {/* Business Creation Date */}\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  eventKey=\"businessCreationDate\"\r\n                                >\r\n                                  {t(\"Business Created\")}\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"businessCreationDate\">\r\n                                  <Card border=\"light\">\r\n                                    <Card.Body>\r\n                                      <Card.Text>{businessSince}</Card.Text>\r\n                                    </Card.Body>\r\n                                  </Card>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n                            </Accordion>\r\n                          </Tab.Pane>\r\n\r\n                          {/* Start Business purposes */}\r\n                          {purposes[keyBusiness]}\r\n                          {/* End Business purposes */}\r\n\r\n                          {/* Add new purpose */}\r\n                          <Tab.Pane eventKey=\"addPurpose\">\r\n                            <Accordion defaultActiveKey=\"newPurpose\">\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  eventKey=\"newPurpose\"\r\n                                >\r\n                                  {t(\"New Purpose\")}\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"newPurpose\">\r\n                                  <Card.Body>\r\n                                    <PurposeRegistration\r\n                                      data={args}\r\n                                      businessID={\r\n                                        userBusinesses[business].business_id\r\n                                      }\r\n                                    />\r\n                                  </Card.Body>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n                            </Accordion>\r\n                          </Tab.Pane>\r\n                        </Tab.Content>\r\n                      </Col>\r\n                    </Row>\r\n                  </Tab.Container>\r\n                </Card.Body>\r\n              </Accordion.Collapse>\r\n            </Card>\r\n          );\r\n          // console.log(\"BUSINESS:\", userBusinesses[business]);\r\n        })}\r\n\r\n      {/* Add business */}\r\n      <Card>\r\n        <Accordion.Toggle\r\n          as={Card.Header}\r\n          eventKey=\"addBusiness\"\r\n          style={{ cursor: \"pointer\" }}\r\n        >\r\n          <span>\r\n            <Add fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n            &nbsp;\r\n            {t(\"Add Business\")}\r\n          </span>\r\n        </Accordion.Toggle>\r\n        <Accordion.Collapse eventKey=\"addBusiness\">\r\n          <Card.Body>\r\n            <BusinessRegistration {...args} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  );\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  return <>{jsx}</>;\r\n};\r\n","import \"./UserEditor.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ListGroup, Form, InputGroup } from \"react-bootstrap\";\r\nimport {\r\n  Visibility,\r\n  VisibilityOff,\r\n  Close,\r\n  Edit,\r\n  // Done,\r\n} from \"@material-ui/icons\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    namespace: \"UserEditor\",\r\n    request: \"update user\",\r\n    mode: \"label\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"USER EDITOR PROPS:\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userData,\r\n    accountNumber,\r\n    // currencies,\r\n    // currencyAbbr,\r\n    // language,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest, getReviser, getWorkplace } = props.barrelFunctions;\r\n  // const {  } = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [editFirstname, setEditFirstname] = useState(false);\r\n  const [editLastname, setEditLastname] = useState(false);\r\n  const [editEmail, setEditEmail] = useState(false);\r\n  const [editPassword, setEditPassword] = useState(false);\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  const [submitButtonVisible, setSubmitButtonVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (editFirstname || editLastname || editEmail || editPassword) {\r\n      setSubmitButtonVisible(true);\r\n    } else {\r\n      setSubmitButtonVisible(false);\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [editFirstname, editLastname, editEmail, editPassword]);\r\n\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  const sendUserRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    // data.language = language;\r\n    // data.email = userData.email;\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    data.personalID = accountNumber;\r\n    if (!editFirstname) data.firstname = null;\r\n    if (!editLastname) data.lastname = null;\r\n    if (!editEmail) data.email = userData.email;\r\n    if (!editPassword) data.password = null;\r\n\r\n    // console.log(\"onSubmit:\", data);\r\n\r\n    if (sendUserRegistrationRequest(data)) {\r\n      // User registration request was submitted\r\n    }\r\n  };\r\n\r\n  const yupObject = {\r\n    firstName: editFirstname\r\n      ? yup.string().required(t(\"First name is required\"))\r\n      : yup.string().optional(),\r\n    lastName: editLastname\r\n      ? yup.string().required(t(\"Last name is required\"))\r\n      : yup.string().optional(),\r\n    email: editEmail\r\n      ? yup\r\n          .string()\r\n          .email(t(\"Invalid email address\"))\r\n          .required(t(\"Email is required\"))\r\n      : yup.string().optional(),\r\n    password: editPassword\r\n      ? yup\r\n          .string()\r\n          .required(t(\"No password provided\"))\r\n          .min(8, t(\"Password is too short\"))\r\n          // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n          .matches(\r\n            /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n            t(\"Password is too weak\")\r\n          )\r\n      : yup.string().optional(),\r\n  };\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object(yupObject);\r\n\r\n  /**\r\n   * Data consistency tests\r\n   */\r\n  if (userData === null) return <></>;\r\n\r\n  /**\r\n   * Destructuring\r\n   */\r\n  const { mode } = props;\r\n  const {\r\n    firstname,\r\n    lastname,\r\n    email,\r\n    // language,\r\n    // currency_name,\r\n    // currency_abbr,\r\n  } = userData;\r\n  // const currency = `${currency_name} (${currency_abbr})`;\r\n\r\n  const UserEditorForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <Card title={t(\"Profile\")}>\r\n        {/* First name */}\r\n        <ListGroup variant=\"flush\">\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"First name\")}</Form.Label>\r\n            {!editFirstname ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditFirstname(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n                <br />\r\n                <small>{firstname}</small>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditFirstname(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editFirstname && (\r\n              <Form.Group controlId=\"validationFormikFirstName\">\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Enter first name\")}\r\n                    name=\"firstName\"\r\n                    value={values.firstName}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.firstName && touched.firstName}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.firstName}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n            )}\r\n          </ListGroup.Item>\r\n\r\n          {/* Last name */}\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"Last name\")}</Form.Label>\r\n            {!editLastname ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditLastname(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n                <br />\r\n                <small>{lastname}</small>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditLastname(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editLastname && (\r\n              <Form.Group controlId=\"validationFormikLastName\">\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Enter last name\")}\r\n                    name=\"lastName\"\r\n                    value={values.lastName}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.lastName && touched.lastName}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.lastName}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n            )}\r\n          </ListGroup.Item>\r\n\r\n          {/* Email */}\r\n          {accountNumber !== null && (\r\n            <ListGroup.Item as=\"div\" action>\r\n              <Form.Label>{t(\"Email address\")}</Form.Label>\r\n              {!editEmail ? (\r\n                <>\r\n                  <span style={{ float: \"right\" }}>\r\n                    <Edit\r\n                      onClick={() => setEditEmail(true)}\r\n                      fontSize=\"small\"\r\n                      style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                    />\r\n                  </span>\r\n                  <br />\r\n                  <small>{email}</small>\r\n                </>\r\n              ) : (\r\n                <span style={{ float: \"right\" }}>\r\n                  <Close\r\n                    onClick={() => setEditEmail(false)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n              )}\r\n\r\n              {editEmail && (\r\n                <Form.Group controlId=\"validationFormikEmail\">\r\n                  <InputGroup>\r\n                    <Form.Control\r\n                      placeholder={t(\"Enter email\")}\r\n                      name=\"email\"\r\n                      value={values.email}\r\n                      onChange={handleChange}\r\n                      // onBlur={handleChange}\r\n                      isInvalid={!!errors.email && touched.email}\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.email}\r\n                    </Form.Control.Feedback>\r\n                  </InputGroup>\r\n                </Form.Group>\r\n              )}\r\n            </ListGroup.Item>\r\n          )}\r\n\r\n          {/* Password */}\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"Password\")}</Form.Label>\r\n            {!editPassword ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditPassword(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditPassword(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editPassword && (\r\n              <>\r\n                {/* New password */}\r\n                <Form.Group controlId=\"validationFormikPassword\">\r\n                  <InputGroup>\r\n                    <Form.Control\r\n                      type={passwordVisible ? \"text\" : \"password\"}\r\n                      placeholder={t(\"Enter new password\")}\r\n                      name=\"password\"\r\n                      value={values.password}\r\n                      onChange={handleChange}\r\n                      // onBlur={handleChange}\r\n                      isInvalid={!!errors.password && touched.password}\r\n                    />\r\n                    <InputGroup.Append>\r\n                      <InputGroup.Text\r\n                        id=\"inputGroupAppend\"\r\n                        onClick={togglePassword}\r\n                        style={{\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        {passwordVisible ? (\r\n                          <VisibilityOff\r\n                            fontSize=\"small\"\r\n                            style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                          />\r\n                        ) : (\r\n                          <Visibility\r\n                            fontSize=\"small\"\r\n                            style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                          />\r\n                        )}\r\n                      </InputGroup.Text>\r\n                    </InputGroup.Append>\r\n\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.password}\r\n                    </Form.Control.Feedback>\r\n                  </InputGroup>\r\n                </Form.Group>\r\n              </>\r\n            )}\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n\r\n        <Form.Group controlId=\"validationSubmitButton\">\r\n          <SubmitButton\r\n            {...args}\r\n            caption={t(\"Submit\")}\r\n            visible={submitButtonVisible}\r\n            marginTop={20}\r\n            request={props.request}\r\n            namespace={props.namespace}\r\n          />\r\n        </Form.Group>\r\n      </Card>\r\n    </Form>\r\n  );\r\n\r\n  const jsx =\r\n    mode === \"label\" ? (\r\n      <span style={{ whiteSpace: \"nowrap\" }}>\r\n        {firstname} {lastname}\r\n      </span>\r\n    ) : (\r\n      <Formik\r\n        component={UserEditorForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          firstName: userData.firstname,\r\n          lastName: userData.lastname,\r\n          email: userData.email,\r\n          password: \"\",\r\n        }}\r\n      />\r\n    );\r\n\r\n  return <>{jsx}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, Table } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\n// import * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\n// import Card from \"../card\";\r\n// import SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {\r\n    request: \"register currency\",\r\n    namespace: \"Currencies\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    currencies,\r\n    countCurrencies,\r\n    activePageCurrencies,\r\n    currenciesPerPage,\r\n    currencyAbbr,\r\n    userData,\r\n  } = props.barrelGetters;\r\n  const { setCurrencyAbbr } = props.barrelSetters;\r\n  const {\r\n    // getReviser,\r\n    // getWorkplace,\r\n    sendRequest,\r\n    getCurrencies,\r\n    formatExchangeRate,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Destructured vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  const onCurrencySelected = (e) => {\r\n    setCurrencyAbbr(e.target.id);\r\n    sendRequest({\r\n      req: \"register user currency\",\r\n      data: { email: userData.email, currency_id: e.target.id },\r\n    });\r\n  };\r\n\r\n  const onPageSelect = (number) => {\r\n    console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageCurrencies > 1 ? activePageCurrencies - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageCurrencies < Math.ceil(countCurrencies / currenciesPerPage)\r\n            ? activePageCurrencies + 1\r\n            : Math.ceil(countCurrencies / currenciesPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countCurrencies / currenciesPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getCurrencies(number);\r\n  };\r\n\r\n  /**\r\n   * Form\r\n   ============================================================================ */\r\n  const CurrenciesForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <>\r\n      <Table responsive striped bordered hover size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Select\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Abbr\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Name\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Region\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Rate\")}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {currencies !== null &&\r\n            currencies.map((currency, keyCUrrency) => {\r\n              // console.log(\"CURRENCY\", currency);\r\n\r\n              const { name, abbr, rate, region } = currency;\r\n              return (\r\n                <tr key={keyCUrrency}>\r\n                  <td style={{ textAlign: \"center\" }}>\r\n                    <Form.Check\r\n                      type=\"radio\"\r\n                      checked={currencyAbbr === abbr}\r\n                      name=\"selected-currency\"\r\n                      id={abbr}\r\n                      aria-label=\"option 1\"\r\n                      onChange={onCurrencySelected}\r\n                    />\r\n                  </td>\r\n                  <td style={{ textAlign: \"center\" }}>{abbr}</td>\r\n                  <td style={{ textAlign: \"left\" }}>{name}</td>\r\n                  <td style={{ textAlign: \"left\" }}>{region}</td>\r\n                  <td style={{ textAlign: \"right\" }}>\r\n                    {formatExchangeRate(rate)}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </Table>\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countCurrencies / currenciesPerPage)}\r\n        active={activePageCurrencies}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n\r\n  /**\r\n   * Formik return\r\n   ============================================================================ */\r\n  // onSubmit={onSubmit}\r\n  return (\r\n    <Formik\r\n      component={CurrenciesForm}\r\n      initialValues={{\r\n        curr_abbr: \"\",\r\n        curr_title: \"\",\r\n        curr_region: \"\",\r\n        curr_rate: 1.0,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\n// import Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n// import Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"CurrencyRegistration\",\r\n    request: \"register currency\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  // const {\r\n  //   currencies,\r\n  //   countCurrencies,\r\n  //   activePageCurrencies,\r\n  //   currenciesPerPage,\r\n  // } = props.barrelGetters;\r\n  // const { setActivePageCurrencies } = props.barrelSetters;\r\n  const {\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n    // getCurrencies,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Destructured vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([\"CurrencyRegistration\"]);\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    curr_abbr: yup\r\n      .string()\r\n      .required(t(\"Currency abbreviation is required\"))\r\n      .min(3, t(\"Currency abbreviation is too short\"))\r\n      .max(5, t(\"Currency abbreviation is too long\")),\r\n    curr_title: yup\r\n      .string()\r\n      .required(t(\"Currency name is required\"))\r\n      .min(3, t(\"Currency name is too short\")) // must be at least 3 characters\r\n      .max(70, t(\"Currency name is too long\")), // must be at most 70 characters\r\n    curr_region: yup\r\n      .string()\r\n      .required(t(\"Currency region is required\"))\r\n      .min(3, t(\"Currency region is too short\")) // must be at least 3 characters\r\n      .max(70, t(\"Currency region is too long\")), // must be at most 70 characters\r\n    curr_rate: yup\r\n      .string()\r\n      .required(t(\"Exchange rate is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Exchange Rate Regex\")),\r\n        t(\"Wrong exchange rate format\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n  const onSubmit = (data) => {\r\n    console.log(data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  /**\r\n   * Form\r\n   ============================================================================ */\r\n  const CurrencyRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <>\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        {/* Currency abbreviation */}\r\n        <Form.Group controlId=\"validationFormikCurrAbbr\">\r\n          <Form.Label>{t(\"Abbreviation\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_abbr\"\r\n              value={values.curr_abbr}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_abbr && touched.curr_abbr}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_abbr}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Currency name */}\r\n        <Form.Group controlId=\"validationFormikCurrName\">\r\n          <Form.Label>{t(\"Currency Name\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_title\"\r\n              value={values.curr_title}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_title && touched.curr_title}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_title}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Currency region */}\r\n        <Form.Group controlId=\"validationFormikCurrRegion\">\r\n          <Form.Label>{t(\"Currency Region\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_region\"\r\n              value={values.curr_region}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_region && touched.curr_region}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_region}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Initial exchange rate */}\r\n        <Form.Group controlId=\"validationFormikCurrRate\">\r\n          <Form.Label>{t(\"Initial Exchange Rate\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_rate\"\r\n              value={values.curr_rate}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_rate && touched.curr_rate}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_rate}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Submit button */}\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </>\r\n  );\r\n\r\n  /**\r\n   * Formik return\r\n   ============================================================================ */\r\n  return (\r\n    <Formik\r\n      component={CurrencyRegistrationForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        curr_abbr: \"\",\r\n        curr_title: \"\",\r\n        curr_region: \"\",\r\n        curr_rate: 1.0,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"ModalMessage\", message: \"\", onHide: () => {} };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        {false && (\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              <img\r\n                src=\"gfx/zlogo_light.png\"\r\n                width=\"auto\"\r\n                height=\"30\"\r\n                className=\"d-inline-block align-top\"\r\n                alt={t(\"Logo\")}\r\n              />\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n        )}\r\n        <Modal.Body>{props.message}</Modal.Body>\r\n        {false && (\r\n          <Modal.Footer>\r\n            <Button onClick={props.onHide}>Close</Button>\r\n          </Modal.Footer>\r\n        )}\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { AvTimer } from \"@material-ui/icons\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\n\r\n//  let time = new Date().toLocaleString();\r\nimport { useInterval } from \"../../utils/useInterval\";\r\nimport { useEventListener } from \"../../utils/useEventListener\";\r\n\r\nimport ModalMessage from \"../modalMessage\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Constants\r\n     ============================================================================ */\r\n  const minute = 60; // seconds, for testing purposes\r\n\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"IdleTimer\",\r\n    timeout: 5 * minute,\r\n    timestamp: null,\r\n    stage2: 60, // show seconds (vs minutes) in stage 2\r\n    stage3: 20, // show modal message on stage 3\r\n\r\n    onTimeout: () => {},\r\n\r\n    events: [\"load\", \"mousemove\", \"mousedown\", \"click\", \"scroll\", \"keypress\"],\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { formatDate } = props.barrelFunctions;\r\n  const { onSessionTimeout } = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  const [seconds, setSeconds] = useState(props.timeout);\r\n  const [modalMessageShow, setModalMessageShow] = React.useState(false);\r\n\r\n  useInterval(() => {\r\n    // Your custom logic here\r\n    setSeconds(seconds - 1);\r\n  }, 1000);\r\n\r\n  useEventListener(() => {\r\n    setSeconds(props.timeout);\r\n  }, [\"mousedown\", \"click\", \"scroll\", \"keypress\"]);\r\n\r\n  useEffect(() => {\r\n    if (seconds === props.timeout) setModalMessageShow(false);\r\n    if (seconds === props.stage3) setModalMessageShow(true);\r\n    if (seconds === 0) onSessionTimeout();\r\n\r\n    // eslint-disable-next-line\r\n  }, [seconds]);\r\n\r\n  const getJSX = () => {\r\n    let currTime;\r\n    if (seconds > props.stage2) currTime = Math.ceil(seconds / minute);\r\n    else currTime = seconds;\r\n\r\n    const timeFormatted = formatDate(new Date(1970, 1, 1, 0, 0, currTime), {\r\n      minute: \"numeric\",\r\n      second: \"numeric\",\r\n    });\r\n\r\n    const onSessionContinue = () => {\r\n      console.log(\"onSessionContinue\");\r\n      // props.timeout = 5 * minute;\r\n      setSeconds(props.timeout);\r\n    };\r\n\r\n    const modalMessage = (\r\n      <>\r\n        <Trans\r\n          i18nKey=\"IdleTimer:Automatic logout\"\r\n          timeFormatted={timeFormatted}\r\n        >\r\n          <div className=\"text-center\">Automatic logout in</div>\r\n          <div\r\n            className=\"text-center\"\r\n            style={{ fontSize: \"4em\", fontWeight: \"bold\", color: \"#A93226\" }}\r\n          >\r\n            {{ timeFormatted }}\r\n          </div>\r\n          <div className=\"text-center\">\r\n            Do you want to continue the session?\r\n          </div>\r\n        </Trans>\r\n        <br />\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Continue now\")}\r\n          request=\"continue session\"\r\n          onSubmit={onSessionContinue}\r\n          namespace={props.namespace}\r\n        />\r\n      </>\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <ModalMessage\r\n          show={modalMessageShow}\r\n          message={modalMessage}\r\n          onHide={() => setModalMessageShow(false)}\r\n        />\r\n        <OverlayTrigger\r\n          placement=\"bottom\"\r\n          overlay={\r\n            <Tooltip>\r\n              {seconds > props.stage2 ? (\r\n                <Trans\r\n                  i18nKey=\"IdleTimer:Minutes to automatical log out\"\r\n                  currTime={currTime}\r\n                >\r\n                  You will be automatically logged out in {{ currTime }}{\" \"}\r\n                  minutes.\r\n                </Trans>\r\n              ) : (\r\n                <Trans\r\n                  i18nKey=\"IdleTimer:Seconds to automatical log out\"\r\n                  currTime={currTime}\r\n                >\r\n                  You will be automatically logged out in {{ currTime }}{\" \"}\r\n                  seconds.\r\n                </Trans>\r\n              )}\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <div style={{ whiteSpace: \"nowrap\", cursor: \"default\" }}>\r\n            <AvTimer style={{ color: \"var(--dark)\" }} />\r\n            &nbsp;\r\n            {seconds > props.stage2 ? (\r\n              <>\r\n                <span className=\"d-none d-sm-inline text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:minutes\" currTime={currTime}>\r\n                    {{ currTime }} minutes\r\n                  </Trans>\r\n                </span>\r\n                <span className=\"d-inline d-sm-none text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:min\" currTime={currTime}>\r\n                    {{ currTime }} min\r\n                  </Trans>\r\n                </span>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <span className=\"d-none d-sm-inline text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:seconds\" currTime={currTime}>\r\n                    {{ currTime }} seconds\r\n                  </Trans>\r\n                </span>\r\n                <span className=\"d-inline d-sm-none text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:sec\" currTime={currTime}>\r\n                    <span>{{ currTime }}</span> sec\r\n                  </Trans>\r\n                </span>\r\n              </>\r\n            )}\r\n          </div>\r\n        </OverlayTrigger>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return <>{getJSX()}</>;\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport const useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport { useEffect } from \"react\";\r\n// import { useTranslation, Trans } from \"react-i18next\";\r\n// import { OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\n\r\nexport const useEventListener = (callback, events) => {\r\n  let defaults = {\r\n    namespace: \"IdleTimer\",\r\n    // timeout: 5 * minute,\r\n\r\n    onTimeout: () => {},\r\n\r\n    events: [\"load\", \"mousemove\", \"mousedown\", \"click\", \"scroll\", \"keypress\"],\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, { events: events });\r\n\r\n  // const [gotEvent, setGotEvent] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // console.log(props.events);\r\n\r\n    const eventHandler = (e) => {\r\n      // setGotEvent(e);\r\n      callback(e);\r\n    };\r\n\r\n    // async () => {\r\n    for (let i in props.events) {\r\n      window.addEventListener(props.events[i], eventHandler);\r\n    }\r\n\r\n    // };\r\n\r\n    return () => {\r\n      for (let i in props.events) {\r\n        // console.log(\"REMOVE LISTENER\");\r\n        window.removeEventListener(props.events[i], eventHandler);\r\n      }\r\n    };\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n       * Return\r\n       ============================================================================ */\r\n  // return gotEvent;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import { Redirect } from \"react-router-dom\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  useLocation,\r\n  // Redirect,\r\n} from \"react-router-dom\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  // Button,\r\n  // Breadcrumb,\r\n  // NavDropdown,\r\n  // Alert,\r\n} from \"react-bootstrap\";\r\n// import Octicon, { SignOut } from \"@primer/octicons-react\";\r\nimport { PowerSettingsNew } from \"@material-ui/icons\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport AccountRegistration from \"../../accountRegistration\";\r\nimport BusinessRegistration from \"../../businessRegistration\";\r\nimport { Balance, Transfer } from \"../../transfer\";\r\nimport MyBusiness from \"../../myBusiness\";\r\nimport UserEditor from \"../../userEditor\";\r\nimport CurrencyContainer from \"../../currencyContainer\";\r\nimport IdleTimer from \"../../idleTimer\";\r\n// import useIdleTimer from \"../../../utils/useIdleTimer\";\r\n\r\n// const AccountRegistration = React.lazy(() =>\r\n//   import(\"../../accountRegistration\")\r\n// );\r\n// const BusinessRegistration = React.lazy(() =>\r\n//   import(\"../../businessRegistration\")\r\n// );\r\n// const MyBusiness = React.lazy(() => import(\"../../myBusiness\"));\r\n// const UserEditor = React.lazy(() => import(\"../../userEditor\"));\r\n// const CurrencyContainer = React.lazy(() => import(\"../../currencyContainer\"));\r\n\r\n/**\r\n * Component: Summary\r\n */\r\nexport default (args) => {\r\n  // console.log(\"SUMMARY\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { namespace: \"Summary\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getBusinesses } = props.barrelFunctions;\r\n  // const {  } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  // let tmrUpdateTimestamp = null;\r\n\r\n  // React.useEffect(() => {\r\n  //   // if (!signedIn) return;\r\n  //   updateTimestamp();\r\n  //   // eslint-disable-next-line\r\n  // }, []);\r\n\r\n  // React.useEffect(() => {\r\n  //   // if (!signedIn) return;\r\n  //   console.log(timestamp);\r\n\r\n  //   // eslint-disable-next-line\r\n  // }, [timestamp]);\r\n\r\n  // const [unmounted, setUnmounted] = useState(false);\r\n\r\n  // const onIdleTimerUnmount = () => {\r\n  //   setIdleTimerUnmounted(true);\r\n  // };\r\n\r\n  /**\r\n   * Data consistency tests\r\n   */\r\n  // if (accountNumber === null) return <>{t(\"Something went wrong\")}</>;\r\n\r\n  // const idleTimer = useIdleTimer({ ...args, onTimeout: onSessionTimeout });\r\n  // <IdleTimer {...args} onTimeout={onSessionTimeout} />\r\n\r\n  // const topMenuBackColor = \"var(--light)\";\r\n\r\n  const location = useLocation();\r\n\r\n  // console.log(\"location:\", location);\r\n\r\n  const navigation = (\r\n    <>\r\n      <Container\r\n        fluid\r\n        style={{\r\n          // backgroundColor: \"green\",\r\n          paddingRight: \"0\",\r\n          paddingLeft: \"0\",\r\n        }}\r\n      >\r\n        <Row>\r\n          {/*\r\n           * Top Menu\r\n           */}\r\n          <Col>\r\n            <Navbar\r\n              // className=\"card-header\"\r\n              // className=\"navbar-trans\"\r\n              // bg=\"light\"\r\n              // variant=\"light\"\r\n              style={{\r\n                borderRadius: \"5px\",\r\n                // background: \"transparent !important\",\r\n                // color: \"#f7f7f7\",\r\n                backgroundColor: \"var(--light)\", // e8f6f3\r\n                boxShadow: \"none\",\r\n                // whiteSpace: \"nowrap\",\r\n              }}\r\n            >\r\n              <Navbar.Brand href=\"/\">\r\n                <img\r\n                  src=\"gfx/zlogo_light.png\"\r\n                  width=\"auto\"\r\n                  height=\"30\"\r\n                  className=\"d-inline-block align-top\"\r\n                  alt={t(\"Logo\")}\r\n                />\r\n              </Navbar.Brand>\r\n              <Nav className=\"mr-auto\">\r\n                <Nav.Link eventKey=\"profile\" href=\"/profile\">\r\n                  <UserEditor {...args} />\r\n                </Nav.Link>\r\n              </Nav>\r\n              <Nav>\r\n                <Nav.Link eventKey=\"sign-out\" href=\"/sign-out\">\r\n                  <span style={{ whiteSpace: \"nowrap\" }}>\r\n                    <span>\r\n                      <PowerSettingsNew style={{ color: \"var(--dark)\" }} />\r\n                    </span>\r\n\r\n                    <span className=\"d-none d-sm-inline\">\r\n                      &nbsp;\r\n                      {t(\"Sign out\")}\r\n                    </span>\r\n                  </span>\r\n                </Nav.Link>\r\n              </Nav>\r\n              {true && (\r\n                <Nav>\r\n                  <Nav.Item>\r\n                    <IdleTimer {...args} />\r\n                  </Nav.Item>\r\n                </Nav>\r\n              )}\r\n            </Navbar>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <div style={{ height: \"7px\" }}></div>\r\n            <Navbar\r\n              collapseOnSelect\r\n              expand=\"sm\"\r\n              // className=\"card-header\"\r\n              // className=\"navbar-trans\"\r\n              // bg=\"dark\"\r\n              variant=\"dark\"\r\n              style={{\r\n                borderRadius: \"5px\",\r\n                background: \"transparent !important\",\r\n                backgroundColor: \"var(--dark)\",\r\n                boxShadow: \"none\",\r\n              }}\r\n            >\r\n              <Nav>\r\n                <Nav.Link\r\n                  className=\"nav-link-2\"\r\n                  eventKey=\"balance\"\r\n                  href=\"/balance\"\r\n                  style={{\r\n                    fontWeight:\r\n                      location.pathname === \"/balance\" ? \"bold\" : \"normal\",\r\n                  }}\r\n                >\r\n                  {t(\"Balance\")}\r\n                </Nav.Link>\r\n              </Nav>\r\n              <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n              <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                  {accountNumber !== null && (\r\n                    <>\r\n                      <Nav.Link\r\n                        className=\"nav-link-2\"\r\n                        eventKey=\"transfer\"\r\n                        href=\"/transfer\"\r\n                        style={{\r\n                          fontWeight:\r\n                            location.pathname === \"/transfer\"\r\n                              ? \"bold\"\r\n                              : \"normal\",\r\n                        }}\r\n                      >\r\n                        {t(\"Transfer\")}\r\n                      </Nav.Link>\r\n                      <Nav.Link\r\n                        className=\"nav-link-2\"\r\n                        eventKey=\"my-business\"\r\n                        onClick={getBusinesses}\r\n                        style={{\r\n                          fontWeight:\r\n                            location.pathname === \"/my-business\"\r\n                              ? \"bold\"\r\n                              : \"normal\",\r\n                        }}\r\n                        href=\"#\"\r\n                      >\r\n                        {t(\"Business\")}\r\n                      </Nav.Link>\r\n                      <Nav.Link\r\n                        className=\"nav-link-2\"\r\n                        eventKey=\"currency\"\r\n                        href=\"/currency\"\r\n                        style={{\r\n                          fontWeight:\r\n                            location.pathname === \"/currency\"\r\n                              ? \"bold\"\r\n                              : \"normal\",\r\n                        }}\r\n                      >\r\n                        {t(\"Currency\")}\r\n                      </Nav.Link>\r\n                    </>\r\n                  )}\r\n                </Nav>\r\n              </Navbar.Collapse>\r\n            </Navbar>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n\r\n  const viewBalanceOrTransfer = (\r\n    <Router>\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          component={() => {\r\n            return accountNumber !== null\r\n              ? Balance(args)\r\n              : AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/summary\"\r\n          component={() => {\r\n            return accountNumber !== null\r\n              ? Balance(args)\r\n              : AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/account-registration\"\r\n          component={() => {\r\n            return AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/profile\"\r\n          component={() => {\r\n            return UserEditor({ ...args, mode: \"profile\" });\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/currency\"\r\n          component={() => {\r\n            return CurrencyContainer({ ...args });\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/business-registration\"\r\n          component={() => {\r\n            return BusinessRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/my-business\"\r\n          component={() => {\r\n            return MyBusiness(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/balance\"\r\n          component={() => {\r\n            return Balance(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/transfer\"\r\n          component={() => {\r\n            return Transfer(args);\r\n          }}\r\n        />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {/* Header */}\r\n\r\n      {/* Content */}\r\n      {/*<h3>{t(\"Summary\")}</h3>*/}\r\n\r\n      <Container fluid=\"md\">\r\n        <Row>\r\n          <Col>\r\n            {navigation}\r\n            <div style={{ height: \"7px\" }}></div>\r\n          </Col>\r\n        </Row>\r\n        {/*\r\n        <Row>{viewAccountRegistration}</Row>\r\n        */}\r\n        <Row>\r\n          <Col>{viewBalanceOrTransfer}</Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Accordion, Card } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\nimport Currencies from \"../currencies\";\r\nimport CurrencyRegistration from \"../currencyRegistration\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"CurrencyContainer\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const {\r\n    accordionViewCurrency,\r\n    activePageCurrencies,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  const { setAccordionViewCurrency, setRedirectTo } = props.barrelSetters;\r\n  const { getCurrencies } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const ToggleCurrencies = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionViewCurrency(\"currencies\");\r\n    getCurrencies(activePageCurrencies);\r\n  };\r\n\r\n  const ToggleCurrencyRegistration = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionViewCurrency(\"currencyRegistration\");\r\n    // getTransactions(1);\r\n  };\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return (\r\n    <>\r\n      <Accordion defaultActiveKey={accordionViewCurrency}>\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"currencies\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleCurrencies}\r\n          >\r\n            {t(\"Currencies\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"currencies\">\r\n            <Card.Body>\r\n              <Currencies {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"currencyRegistration\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleCurrencyRegistration}\r\n          >\r\n            {t(\"Currency Registration\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"currencyRegistration\">\r\n            <Card.Body>\r\n              <CurrencyRegistration {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { TransferToSelf, TransferToPerson, TransferToBusiness } from \"./index\";\r\n// import { Alert } from \"react-bootstrap\";\r\n\r\n// const navigation = [\r\n//   {\r\n//     name: \"U2S\",\r\n//     link: \"#u2s\",\r\n//   },\r\n//   {\r\n//     name: \"U2U\",\r\n//     link: \"#u2u\",\r\n//   },\r\n//   {\r\n//     name: \"U2B\",\r\n//     link: \"#u2b\",\r\n//   },\r\n// ];\r\n\r\n/**\r\n * Component: Transfer\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber, transferType } = props.barrelGetters;\r\n  const { setRedirectTo } = props.barrelSetters;\r\n  const { format } = props.barrelFunctions;\r\n  const { onTransferTypeChange } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"Transfer\");\r\n\r\n  const data = props.data;\r\n  const type = transferType;\r\n  // const onTypeChange = args.onTypeChange;\r\n\r\n  // console.log(\"TRANSFER DATA TYPE:\", type);\r\n\r\n  const [transferCard, setTransferCard] = useState(null);\r\n\r\n  const onNavigationClick = (id) => {\r\n    onTransferTypeChange(id);\r\n  };\r\n\r\n  const navigation = [\r\n    {\r\n      name: t(\"U2S\"),\r\n      link: \"#u2s\",\r\n    },\r\n    {\r\n      name: t(\"U2U\"),\r\n      link: \"#u2u\",\r\n    },\r\n    {\r\n      name: t(\"U2B\"),\r\n      link: \"#u2b\",\r\n    },\r\n  ];\r\n\r\n  // console.log(\"TRANSFER DATA\", data);\r\n  // const title = t(\"Transfer to account\");\r\n\r\n  useEffect(() => {\r\n    if (type === null) return;\r\n\r\n    // setTransferCard()\r\n    switch (type) {\r\n      case \"#u2s\": // User to self\r\n        setTransferCard(\r\n          <TransferToSelf\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      case \"#u2u\": // User to user\r\n        setTransferCard(\r\n          <TransferToPerson\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      case \"#u2b\": // User to business\r\n        setTransferCard(\r\n          <TransferToBusiness\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [data, format, type]);\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  // return (\r\n  //   <>\r\n  //     <Alert variant=\"warning\">\r\n  //       <Alert.Heading>{t(\"Account not yet registered\")}</Alert.Heading>\r\n  //       <p>\r\n  //         <Trans i18nKey=\"Balance:Please set up your account first.\">\r\n  //           Please set up your account first. Use this{\" \"}\r\n  //           <a href=\"/account-registration\">link</a>.\r\n  //         </Trans>\r\n  //       </p>\r\n  //     </Alert>\r\n  //   </>\r\n  // );\r\n\r\n  return <>{transferCard}</>;\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport config from \"./config\";\r\nimport openSocket from \"socket.io-client\";\r\nlet socket = openSocket.connect(config.uri.ENDPOINT, {\r\n  secure: true,\r\n  reconnect: true,\r\n});\r\n\r\n/**\r\n * Send request to the server\r\n * @param {*} param0\r\n */\r\nexport const sendData = (data, debug = false) => {\r\n  if (debug) console.log(`request: ${data.req}`, data);\r\n\r\n  // No data - do not send\r\n  // if (req.length === 0) return false;\r\n\r\n  socket.emit(`onDataReceived`, data);\r\n  return true;\r\n};\r\n\r\n// Start a session\r\nexport const startSession = (data, session, debug = false) => {\r\n  // console.log(\"startSession\");\r\n  if (debug) console.log(`request: startSession`, data, session);\r\n\r\n  socket.emit(`start session`, {\r\n    data: data,\r\n    session: session,\r\n    req: \"start session\",\r\n  });\r\n};\r\n\r\n// End the session\r\nexport const endSession = (data, session, debug = false) => {\r\n  if (debug) console.log(`request: endSession`, data, session);\r\n  socket.emit(`end session`, {\r\n    char: data,\r\n    // uid: uid,\r\n    session: session,\r\n  });\r\n};\r\n\r\n// Custom hook: useSocket\r\nexport const useSocket = (callback) => {\r\n  const [responseData, setResponseData] = useState(null);\r\n  socket.on(`onDataReceived`, (data) => {\r\n    setResponseData(data);\r\n    // callback(data);\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (responseData === null) return;\r\n\r\n    callback(responseData);\r\n    // eslint-disable-next-line\r\n  }, [responseData]);\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport {\r\n  Form,\r\n  InputGroup,\r\n  // Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  // Spinner,\r\n} from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport SubmitButton from \"../submitButton\";\r\n// import Alert from \"../alert\";\r\n// import LanguageSelector from \"../language-selector\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"LogIn\");\r\n\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n    password: yup.string().required(t(\"No password provided\")),\r\n  });\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  const sendUserLogInRequest = (data) => {\r\n    // data.pw = data.password;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    sendRequest({ req: \"sign in user\", data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    sendUserLogInRequest(data);\r\n  };\r\n\r\n  // const languageData = { language: \"en\" };\r\n\r\n  const UserLogInForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Sign In\")}</h3>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"Password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Remember me */}\r\n      {/*\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Check\r\n          required\r\n          name=\"rememberMe\"\r\n          label={t(\"Remember me\")}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.rememberMe}\r\n          feedback={errors.rememberMe}\r\n          id=\"validationFormik0\"\r\n        />\r\n      </Form.Group>\r\n      */}\r\n\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request=\"sign in user\"\r\n          namespace=\"LogIn\"\r\n        />\r\n      </Form.Group>\r\n\r\n      <Container fluid=\"md\">\r\n        <Row>\r\n          <Col>\r\n            <p className=\"other-options text-left\">\r\n              <Trans i18nKey=\"LogIn:Not yet registered\">\r\n                Not yet <a href=\"/sign-up\">registered?</a>\r\n              </Trans>\r\n            </p>\r\n          </Col>\r\n          <Col>\r\n            <p className=\"other-options text-right\">\r\n              <Trans i18nKey=\"LogIn:Forgot password\">\r\n                Forgot <a href=\"/reset\">password?</a>\r\n              </Trans>\r\n            </p>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Form>\r\n  );\r\n\r\n  // const onAlertClose = () => {\r\n  //   setAlertVisible(false);\r\n  //   authorizedData.hideError();\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        component={UserLogInForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          email: \"\",\r\n          password: \"\",\r\n          rememberMe: \"\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","// import { Redirect } from \"react-router-dom\";\r\n// import Octicon, { Eye, EyeClosed } from \"@primer/octicons-react\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport { Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport * as yup from \"yup\";\r\n// import LanguageSelector from \"../language-selector\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"register user\", namespace: \"SignUp\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { language } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // console.log(\"SIGN UP PROPS:\", props);\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    firstName: yup.string().required(t(\"First name is required\")),\r\n    lastName: yup.string().required(t(\"Last name is required\")),\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n    password: yup\r\n      .string()\r\n      .required(t(\"No password provided\"))\r\n      .min(8, t(\"Password is too short\"))\r\n      // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n      .matches(\r\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n        t(\"Password is too weak\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  const sendUserRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.language = language;\r\n    data.validateEmail = true;\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    if (sendUserRegistrationRequest(data)) {\r\n      // User registration request was submitted\r\n    }\r\n  };\r\n\r\n  // const languageData = { language: \"en\" };\r\n\r\n  const UserRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Sign Up\")}</h3>\r\n\r\n      {/* First name */}\r\n      <Form.Group controlId=\"validationFormikFirstName\">\r\n        <Form.Label>{t(\"First name\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"Enter first name\")}\r\n            name=\"firstName\"\r\n            value={values.firstName}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.firstName && touched.firstName}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.firstName}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Last name */}\r\n      <Form.Group controlId=\"validationFormikLastName\">\r\n        <Form.Label>{t(\"Last name\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"Enter last name\")}\r\n            name=\"lastName\"\r\n            value={values.lastName}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.lastName && touched.lastName}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.lastName}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"Password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type={passwordVisible ? \"text\" : \"password\"}\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text\r\n              id=\"inputGroupAppend\"\r\n              onClick={togglePassword}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              {passwordVisible ? (\r\n                <VisibilityOff\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\" }}\r\n                />\r\n              ) : (\r\n                <Visibility fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n              )}\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationSubmitButton\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form.Group>\r\n\r\n      <p className=\"other-options text-right\">\r\n        <Trans i18nKey=\"SignUp:Already registered\">\r\n          Already registered <a href=\"/sign-in\">sign in?</a>\r\n        </Trans>\r\n      </p>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={UserRegistrationForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nexport const useStickyState = (defaultValue, key) => {\r\n  const [value, setValue] = useState(() => {\r\n    const stickyValue = window.localStorage.getItem(key);\r\n    return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\r\n  });\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n  }, [key, value]);\r\n  return [value, setValue];\r\n};\r\n","import React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args.data);\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { error, info } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  const { onAlertClose: onClose } = props.barrelEventHandlers;\r\n\r\n  // const autoClose = () => {\r\n  //   window.setTimeout(() => {\r\n  //     onClose();\r\n  //   }, 5000);\r\n  // };\r\n\r\n  if (error !== null) {\r\n    let { t } = useTranslation(\"Errors\");\r\n    return (\r\n      <Alert variant=\"danger\" onClose={() => onClose()} dismissible>\r\n        {t(error)}\r\n      </Alert>\r\n    );\r\n  } else if (info !== null) {\r\n    let { t } = useTranslation(\"Infos\");\r\n    // autoClose();\r\n    return (\r\n      <Alert variant=\"info\" onClose={() => onClose()} dismissible>\r\n        {t(info)}\r\n      </Alert>\r\n    );\r\n  }\r\n  return <></>;\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"../../translations/i18n\";\r\n// import { withNamespaces } from \"react-i18next\";\r\nimport { Form, Badge } from \"react-bootstrap\";\r\n\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"CurrencyContainer\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { userData } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"LanguageSelector\");\r\n  const changeLanguage = (lng) => {\r\n    i18n.changeLanguage(lng);\r\n  };\r\n  const languages = [\r\n    { id: 1, language: \"Latviešu\", code: \"lv\" },\r\n    { id: 2, language: \"English\", code: \"en\" },\r\n  ];\r\n  const handleLanguageSelect = (e) => {\r\n    changeLanguage(e.target.value);\r\n  };\r\n  const selectLanguage = (language) => {\r\n    changeLanguage(language);\r\n\r\n    if (userData !== null) {\r\n      sendRequest({\r\n        req: \"register user language\",\r\n        data: { email: userData.email, language },\r\n      });\r\n    }\r\n  };\r\n\r\n  if (1) {\r\n    return (\r\n      <>\r\n        <div style={{ height: \"7px\" }}></div>\r\n        <Badge\r\n          pill\r\n          variant=\"light\"\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            selectLanguage(\"lv\");\r\n          }}\r\n        >\r\n          lv\r\n        </Badge>{\" \"}\r\n        <Badge\r\n          pill\r\n          variant=\"light\"\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            selectLanguage(\"en\");\r\n          }}\r\n        >\r\n          en\r\n        </Badge>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <Form.Control\r\n        as=\"select\"\r\n        id=\"languageSelector\"\r\n        onChange={handleLanguageSelect}\r\n        custom\r\n      >\r\n        <option key=\"0\" value={props.language}>\r\n          {t(\"Language\")}\r\n        </option>\r\n        {languages.map((el) => (\r\n          <option key={el.id} value={el.code}>\r\n            {el.language}\r\n          </option>\r\n        ))}\r\n      </Form.Control>\r\n    );\r\n  }\r\n};\r\n\r\n// function selectElement(id, valueToSelect) {\r\n//   let element = document.getElementById(id);\r\n//   if (!element) return;\r\n//   element.value = valueToSelect;\r\n// }\r\n\r\n// // catch the event and make changes accordingly\r\n// i18n.on(\"languageChanged\", function (lng) {\r\n//   selectElement(\"languageSelector\", lng);\r\n// });\r\n","/**\r\n * CSS\r\n */\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Main.css\";\r\n\r\n/**\r\n * System imports\r\n */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n// import { useTranslation } from \"react-i18next\";\r\n\r\n/**\r\n * User imports\r\n */\r\nimport i18n from \"../../../translations/i18n\";\r\nimport Summary from \"../summary\";\r\nimport {\r\n  useSocket,\r\n  sendData,\r\n  startSession,\r\n  endSession,\r\n} from \"../../../utils/sockets\";\r\nimport Login from \"../../login\";\r\nimport Logout from \"../../logout\";\r\nimport SignUp from \"../../signup\";\r\nimport PasswordReset from \"../../passwordReset\";\r\nimport errorHandler from \"../../../utils/errorHandler\";\r\nimport responseHandler from \"../../../utils/responseHandler\";\r\nimport requestHandler from \"../../../utils/requestHandler\";\r\nimport { useStickyState } from \"../../../utils/state\";\r\nimport Alert from \"../../alert\";\r\nimport LanguageSelector from \"../../language-selector\";\r\nimport ValidateEmail from \"../../validateEmail\";\r\nimport ChangePassword from \"../../changePassword\";\r\n// import { useEventListener } from \"../../../utils/useEventListener\";\r\n\r\n/**\r\n * Component: Main\r\n */\r\nexport default () => {\r\n  /**\r\n   * Properties\r\n   */\r\n  // const userDataFetchInterval = 5000; // Test: 5000 | 30000;\r\n\r\n  /** \r\n   * Hooks\r\n   ============================================================================ */\r\n  const [debug, setDebug] = useState(false);\r\n  const [loggingOut, setLoggingOut] = useState(false);\r\n  // const [timestamp, setTimestamp] = useState(Date.now());\r\n  // const [timestamp, setTimestamp] = useState(Math.floor(Date.now() / 1000));\r\n  // const [tmrUpdateTimestamp, setTmrUpdateTimestamp] = useState(null);\r\n  // const [gotEvent, setGotEvent] = useState(useEventListener());\r\n  // const [startTimestamp, setStartTimestamp] = useState(\r\n  //   Math.floor(Date.now() / 1000)\r\n  // );\r\n  // const [timerActive, setTimerActive] = useState(false);\r\n  const [pageLoading, setPageLoading] = useState(true);\r\n  const [request, setRequest] = useStickyState(null, \"request\");\r\n  const [session, setSession] = useStickyState(uuidv4(), \"session\");\r\n  // const [sessionTimeout, setSessionTimeout] = useState(10);\r\n  const [connected, setConnected] = useStickyState(false, \"connected\");\r\n  const [signedIn, setSignedIn] = useStickyState(false, \"signedIn\");\r\n  const [currencyAbbr, setCurrencyAbbr] = useStickyState(\"Z\", \"currencyAbbr\");\r\n  const [currencyRate, setCurrencyRate] = useState(1, \"currencyRate\");\r\n  // const [currencyStatus, setCurrencyStatus] = useState(\"0\", \"currencyStatus\");\r\n  const [currencies, setCurrencies] = useStickyState(null, \"currencies\");\r\n  const [transactions, setTransactions] = useStickyState(null, \"transactions\");\r\n  const [shares, setShares] = useStickyState(null, \"shares\");\r\n  const [accordionView, setAccordionView] = useStickyState(\r\n    \"balance\",\r\n    \"accordionView\"\r\n  );\r\n  const [accordionViewCurrency, setAccordionViewCurrency] = useStickyState(\r\n    null,\r\n    \"accordionViewCurrency\"\r\n  );\r\n  const [countCurrencies, setCountCurrencies] = useStickyState(\r\n    null,\r\n    \"countCurrencies\"\r\n  );\r\n  const [countTransactions, setCountTransactions] = useStickyState(\r\n    null,\r\n    \"countTransactions\"\r\n  );\r\n  const [countShares, setCountShares] = useStickyState(null, \"countShares\");\r\n  const [activePageCurrencies, setActivePageCurrencies] = useStickyState(\r\n    1,\r\n    \"activePageCurrencies\"\r\n  );\r\n  const [activePageTransactions, setActivePageTransactions] = useStickyState(\r\n    1,\r\n    \"activePageTransactions\"\r\n  );\r\n  const [activePageShares, setActivePageShares] = useStickyState(\r\n    1,\r\n    \"activePageShares\"\r\n  );\r\n  const [currenciesPerPage, setCurrenciesPerPage] = useStickyState(\r\n    5,\r\n    \"currenciesPerPage\"\r\n  );\r\n  const [transactionsPerPage, setTransactionsPerPage] = useStickyState(\r\n    5,\r\n    \"transactionsPerPage\"\r\n  );\r\n  const [sharesPerPage, setSharesPerPage] = useStickyState(5, \"sharesPerPage\");\r\n  const [userData, setUserData] = useStickyState(null, \"userData\");\r\n  const [uid, setUID] = useStickyState(null, \"uid\");\r\n  const [accountNumber, setAccountNumber] = useStickyState(\r\n    null,\r\n    \"accountNumber\"\r\n  );\r\n  const [accountType, setAccountType] = useStickyState(null, \"accountType\");\r\n  const [userBusinesses, setUserBusinesses] = useStickyState(\r\n    null,\r\n    \"userBusinesses\"\r\n  );\r\n  const [activeBusiness, setActiveBusiness] = useStickyState(\r\n    null,\r\n    \"activeBusiness\"\r\n  );\r\n\r\n  const [businessPurposes, setBusinessPurposes] = useStickyState(\r\n    null,\r\n    \"businessPurposes\"\r\n  );\r\n\r\n  const [activeBusinesPurpose, setActiveBusinesPurpose] = useStickyState(\r\n    null,\r\n    \"activeBusinesPurpose\"\r\n  );\r\n\r\n  const [purposeShareholders, setPurposeShareholders] = useStickyState(\r\n    null,\r\n    \"purposeShareholders\"\r\n  );\r\n\r\n  // const [businessLoaded, setBusinessLoaded] = useState(null);\r\n  // const [redirect, setRedirect] = useState(false);\r\n  const [redirectTo, setRedirectTo] = useState(null);\r\n  const [lastInsertId, setLastInsertId] = useState(null);\r\n  // const [responseData, setResponseData] = useState(null);\r\n  const [validateTokenEmail, setValidateTokenEmail] = useState(null);\r\n  const [validateTokenPasswordReset, setValidateTokenPasswordReset] = useState(\r\n    null\r\n  );\r\n\r\n  // const [\r\n  //   passwordResetTokenValidated,\r\n  //   setPasswordResetTokenValidated,\r\n  // ] = useStickyState(\"none\", \"passwordResetTokenValidated\");\r\n\r\n  const [\r\n    passwordResetTokenValidated,\r\n    setPasswordResetTokenValidated,\r\n  ] = useState(null);\r\n  const [passwordResetTokenEmail, setPasswordResetTokenEmail] = useState(null);\r\n\r\n  const [tmrConnected] = useState(null);\r\n  const [language, setLanguage] = useStickyState(\r\n    i18n.options.fallbackLng[0],\r\n    \"language\"\r\n  ); //\r\n  const [transferType, setTransferType] = useStickyState(\r\n    \"#u2s\",\r\n    \"transferType\"\r\n  );\r\n  // const [transferSuccess, setTransferSuccess] = useStickyState(\r\n  //   false,\r\n  //   \"transferSuccess\"\r\n  // );\r\n  const [accountPhotoPath, setAccountPhotoPath] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n  const [info, setInfo] = useState(null);\r\n  // const [alertVisible, setAlertVisible] = useState(false);\r\n\r\n  // const gotEvent = useEventListener();\r\n  // console.log(gotEvent);\r\n\r\n  /**\r\n   * Barrel: Getters\r\n   */\r\n  const barrelGetters = {\r\n    debug,\r\n    loggingOut,\r\n    // timestamp,\r\n    // startTimestamp,\r\n    pageLoading,\r\n    request,\r\n    session,\r\n    // sessionTimeout,\r\n    // tmrSession,\r\n    currencies: JSON.parse(currencies),\r\n    transactions: JSON.parse(transactions),\r\n    shares: JSON.parse(shares),\r\n    accordionView,\r\n    accordionViewCurrency,\r\n    countCurrencies,\r\n    countTransactions,\r\n    countShares,\r\n    activePageCurrencies,\r\n    activePageTransactions,\r\n    activePageShares,\r\n    currenciesPerPage,\r\n    transactionsPerPage,\r\n    sharesPerPage,\r\n    userData: JSON.parse(userData),\r\n    // redirect,\r\n    redirectTo,\r\n    lastInsertId,\r\n    connected,\r\n    signedIn,\r\n    currencyAbbr,\r\n    currencyRate,\r\n    // currencyStatus,\r\n    accountNumber,\r\n    accountType,\r\n    uid,\r\n    userBusinesses: JSON.parse(userBusinesses),\r\n    activeBusiness,\r\n    businessPurposes: JSON.parse(businessPurposes),\r\n    activeBusinesPurpose,\r\n    purposeShareholders: JSON.parse(purposeShareholders),\r\n    // businessLoaded,\r\n    tmrConnected,\r\n    validateTokenEmail,\r\n    validateTokenPasswordReset,\r\n    passwordResetTokenValidated,\r\n    passwordResetTokenEmail,\r\n    language,\r\n    transferType,\r\n    // transferSuccess,\r\n    accountPhotoPath,\r\n    error,\r\n    info,\r\n    // alertVisible,\r\n  };\r\n\r\n  /**\r\n   * Barrel: Setters\r\n   */\r\n  const barrelSetters = {\r\n    setDebug,\r\n    setLoggingOut,\r\n    // setTimestamp,\r\n    // setStartTimestamp,\r\n    setPageLoading,\r\n    setRequest,\r\n    setSession,\r\n    // setSessionTimeout,\r\n    setCurrencies,\r\n    setTransactions,\r\n    setShares,\r\n    setAccordionView,\r\n    setAccordionViewCurrency,\r\n    setCountCurrencies,\r\n    setCountTransactions,\r\n    setCountShares,\r\n    setActivePageCurrencies,\r\n    setActivePageTransactions,\r\n    setActivePageShares,\r\n    setCurrenciesPerPage,\r\n    setTransactionsPerPage,\r\n    setSharesPerPage,\r\n    setConnected,\r\n    setLanguage,\r\n    setUserData,\r\n    // sendRequest,\r\n    setSignedIn,\r\n    setCurrencyAbbr,\r\n    setCurrencyRate,\r\n    // setCurrencyStatus,\r\n    setRedirectTo,\r\n    setLastInsertId,\r\n    setAccountNumber,\r\n    setAccountType,\r\n    setUID,\r\n    setUserBusinesses,\r\n    setActiveBusiness,\r\n    setBusinessPurposes,\r\n    setActiveBusinesPurpose,\r\n    setPurposeShareholders,\r\n    // setBusinessLoaded,\r\n    setAccountPhotoPath,\r\n    setValidateTokenEmail,\r\n    setValidateTokenPasswordReset,\r\n    setPasswordResetTokenValidated,\r\n    setPasswordResetTokenEmail,\r\n    // setTransferSuccess,\r\n    // setRedirect,\r\n    // showMessage,\r\n  };\r\n\r\n  /** \r\n   * Custom hooks\r\n   ============================================================================ */\r\n  // const { t } = useTranslation(\"Errors\");\r\n\r\n  useSocket((data) => {\r\n    // console.log(\"USE SOCKET:\", data);\r\n\r\n    // setResponseData(data);\r\n\r\n    processResponse({\r\n      args: data,\r\n      barrels: barrels,\r\n    });\r\n  });\r\n\r\n  /** \r\n   * Functions\r\n   ============================================================================ */\r\n\r\n  /**\r\n   * Sends requests to the server\r\n   * @param {string} request Request name\r\n   * @param {object} data Request data\r\n   */\r\n  const sendRequest = ({ req, data = null }) => {\r\n    if (processRequest({ req, data, session, uid: \"STA\", barrels })) {\r\n      // request processed successfully\r\n      return true;\r\n    } else {\r\n      console.log(\"THIS SHOULD NOT BE REACHED\");\r\n      return sendData({ req, uid: \"STA\", session, data }, debug);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Processes user request\r\n   * @param {*} param0\r\n   */\r\n  const processRequest = ({ req, data, session, uid, barrels }) => {\r\n    // showMessage(\"PROCESSING_REQUEST\", \"info\");\r\n\r\n    setRequest(req);\r\n    return requestHandler({\r\n      req,\r\n      data,\r\n      session,\r\n      uid,\r\n      barrels,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Processes server response\r\n   * @param {*} param0\r\n   */\r\n  const processResponse = ({ args, barrels }) => {\r\n    // console.log(\"PROCESS RESPONSE ARGS:\", args);\r\n\r\n    /**\r\n     * Choose a handler depending on response status:\r\n     * Error or other (success | continue | finished | pending etc.)\r\n     */\r\n    return args.status === \"error\"\r\n      ? errorHandler({\r\n          args: args,\r\n          uid: uid,\r\n          barrels: barrels,\r\n        })\r\n      : responseHandler({\r\n          args: args,\r\n          uid: uid,\r\n          barrels: barrels,\r\n        });\r\n  };\r\n\r\n  /**\r\n   * Shows a messgae (error or info)\r\n   * @param {string} msg Messgae text\r\n   * @param {string} type Message type (\"error\" | \"info\")\r\n   */\r\n  const showMessage = (msg, type = \"error\") => {\r\n    // if (type !== \"error\") {\r\n    //   hideMessage();\r\n    // }\r\n    type === \"error\" ? setError(msg) : setInfo(msg);\r\n  };\r\n\r\n  /**\r\n   * Hides the message\r\n   */\r\n  const hideMessage = () => {\r\n    setError(null);\r\n    setInfo(null);\r\n  };\r\n\r\n  // const startSessionTimeout = () => {\r\n  //   if (tmrSession.current !== false) clearInterval(tmrSession.current);\r\n  //   setSessionTimeout(10);\r\n  //   tmrSession.current = setInterval(() => {\r\n  //     console.log(\"sessionTimeout:\", sessionTimeout);\r\n\r\n  //     setSessionTimeout(sessionTimeout - 1);\r\n  //   }, 1000);\r\n  // };\r\n\r\n  // const startSessionTimeout() {\r\n  //   let [count, setCount] = useState(0);\r\n\r\n  //   useInterval(() => {\r\n  //     // Your custom logic here\r\n  //     setCount(count + 1);\r\n  //   }, 1000);\r\n\r\n  //   return <h1>{count}</h1>;\r\n  // }\r\n\r\n  // const stopSessionTimeout = () => {\r\n  //   if (tmrSession.current !== false) clearInterval(tmrSession.current);\r\n  // };\r\n\r\n  /**\r\n   * Changes the website language\r\n   */\r\n  const changeLanguage = (lng) => {\r\n    i18n.changeLanguage(lng);\r\n    setLanguage(lng);\r\n  };\r\n\r\n  /**\r\n   * Format number\r\n   * @param {number} number\r\n   */\r\n  const format = (number, currency = currencyAbbr) => {\r\n    return (\r\n      new Intl.NumberFormat(language, {\r\n        notation: \"standard\",\r\n        minimumFractionDigits: 2,\r\n      }).format(number * currencyRate) +\r\n      \" \" +\r\n      currency\r\n    );\r\n  };\r\n  //\r\n\r\n  /**\r\n   * Format per cent\r\n   * @param {number} number\r\n   */\r\n  const formatPerCent = (number) => {\r\n    return (\r\n      new Intl.NumberFormat(language, {\r\n        notation: \"standard\",\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 2,\r\n      }).format(number) + \"%\"\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Format per cent\r\n   * @param {number} number\r\n   */\r\n  const formatExchangeRate = (number) => {\r\n    return new Intl.NumberFormat(language, {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 5,\r\n      maximumFractionDigits: 5,\r\n    }).format(number);\r\n  };\r\n\r\n  const parseLocaleNumber = (stringNumber, locale) => {\r\n    let num = 123456.789,\r\n      fmt_local = new Intl.NumberFormat(locale, {\r\n        style: \"currency\",\r\n        currency: \"USD\",\r\n      }),\r\n      parts_local = fmt_local.formatToParts(num),\r\n      group = \"\",\r\n      decimal = \"\",\r\n      currency = \"\";\r\n\r\n    // separators\r\n    parts_local.forEach(function (i) {\r\n      switch (i.type) {\r\n        case \"group\":\r\n          group = i.value;\r\n          break;\r\n        case \"decimal\":\r\n          decimal = i.value;\r\n          break;\r\n        case \"currency\":\r\n          currency = i.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    return parseFloat(\r\n      stringNumber\r\n        .replace(new RegExp(\"\\\\\" + group, \"g\"), \"\")\r\n        .replace(new RegExp(\"\\\\\" + decimal), \".\")\r\n        .replace(new RegExp(\"\\\\\" + currency, \"g\"), \"\")\r\n    );\r\n  };\r\n\r\n  const formatDate = (\r\n    ts,\r\n    options = {\r\n      month: \"long\",\r\n      day: \"numeric\",\r\n      year: \"numeric\",\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n    }\r\n  ) => {\r\n    // const event = new Date(date);\r\n\r\n    // const options = {\r\n    //   weekday: \"long\",\r\n    //   year: \"numeric\",\r\n    //   month: \"long\",\r\n    //   day: \"numeric\",\r\n    // };\r\n\r\n    // return event.toLocaleDateString(language, options);\r\n\r\n    // const defaults = {\r\n    //   month: \"long\",\r\n    //   day: \"numeric\",\r\n    //   year: \"numeric\",\r\n    //   hour: \"numeric\",\r\n    //   minute: \"numeric\",\r\n    // };\r\n    // const options = Object.assign(defaults, args);\r\n    const date = new Date(ts);\r\n    return new Intl.DateTimeFormat(language, options).format(date);\r\n  };\r\n\r\n  /**\r\n   * Retrieves an URL parameter\r\n   */\r\n  const getUrlParam = (param) => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    return urlParams.get(param);\r\n  };\r\n\r\n  // /**\r\n  //  * Clear local storage (URL param ?reset)\r\n  //  */\r\n  // if (getUrlParam(\"reset\") !== null) {\r\n  //   console.log(\"Reset\");\r\n\r\n  //   window.localStorage.clear();\r\n  //   console.log(\"Local storage cleared\");\r\n  // }\r\n\r\n  const sendEmailValidationRequest = ({ token, email }) => {\r\n    // console.log(\"sendEmailValidationRequest:\", token, email);\r\n\r\n    sendRequest({\r\n      req: \"validate email token\",\r\n      data: { token, email },\r\n    });\r\n  };\r\n\r\n  const sendPasswordResetRequest = ({ token, email }) => {\r\n    // console.log(\"sendEmailValidationRequest:\", token, email);\r\n    setPasswordResetTokenEmail(email);\r\n    sendRequest({\r\n      req: \"validate password reset token\",\r\n      data: { token, email },\r\n    });\r\n  };\r\n\r\n  const getCurrencies = (newPage) => {\r\n    setCurrencies(null);\r\n    sendRequest({\r\n      req: \"get currencies\",\r\n      data: { page: newPage, limit: currenciesPerPage },\r\n    });\r\n    setActivePageCurrencies(newPage);\r\n  };\r\n\r\n  const getTransactions = (newPage) => {\r\n    setTransactions(null);\r\n    sendRequest({\r\n      req: \"get transactions\",\r\n      data: { page: newPage, limit: transactionsPerPage, uid: accountNumber },\r\n    });\r\n    setActivePageTransactions(newPage);\r\n  };\r\n\r\n  const getShares = (newPage) => {\r\n    setShares(null);\r\n    sendRequest({\r\n      req: \"get shares\",\r\n      data: { page: newPage, limit: sharesPerPage, uid: accountNumber },\r\n    });\r\n    setActivePageShares(newPage);\r\n  };\r\n\r\n  const getBusinesses = () => {\r\n    setUserBusinesses(null);\r\n    sendRequest({\r\n      req: \"get user businesses\",\r\n      data: { uid: accountNumber },\r\n    });\r\n  };\r\n\r\n  const getBusinessPurposes = (business_id, selected = null) => {\r\n    // console.log(\"BUSINESS PURPOSES FOR ID \" + business_id, businessPurposes);\r\n\r\n    if (selected !== null) {\r\n      setActiveBusiness(selected);\r\n      setActiveBusinesPurpose(null);\r\n    }\r\n    setBusinessPurposes(null);\r\n    return sendRequest({\r\n      req: \"get business purposes\",\r\n      data: { business_id: business_id },\r\n    });\r\n  };\r\n\r\n  const getPurposeShareholders = (purpose_id, selected = null) => {\r\n    if (selected !== null) {\r\n      // setActiveBusinesPurpose(selected);\r\n      setActiveBusinesPurpose(purpose_id);\r\n    }\r\n    setPurposeShareholders(null);\r\n    return sendRequest({\r\n      req: \"get purpose shareholders\",\r\n      data: { purpose_id: purpose_id },\r\n    });\r\n  };\r\n\r\n  const getAccountData = () => {\r\n    sendRequest({\r\n      req: \"get account data\",\r\n      data: { uid: accountNumber },\r\n    });\r\n  };\r\n\r\n  const getTransactionById = (id) => {\r\n    sendRequest({\r\n      req: \"get transaction by id\",\r\n      data: { id: id },\r\n    });\r\n  };\r\n\r\n  const getContainerClass = (signedIn) => {\r\n    return {\r\n      wrapperClass: signedIn\r\n        ? \"auth-wrapper auth-wrapper-summary\"\r\n        : \"auth-wrapper\",\r\n      innerClass: signedIn\r\n        ? \"auth-inner auth-inner-summary\"\r\n        : \"auth-inner autoWidth\",\r\n    };\r\n  };\r\n\r\n  const getRedirect = () => {\r\n    // if (redirectTo !== null) {\r\n    //   let link = redirectTo;\r\n\r\n    //   r = <Redirect push to={link} />;\r\n    // }\r\n    return redirectTo === null ? \"\" : <Redirect push to={redirectTo} />;\r\n  };\r\n\r\n  // const updateTimestamp = () => {\r\n  //   let tmr = setInterval(() => {\r\n  //     // console.log(timestamp);\r\n\r\n  //     setTimestamp(Math.floor(Date.now() / 1000));\r\n  //   }, 1000);\r\n  //   setTmrUpdateTimestamp(tmr);\r\n  // };\r\n\r\n  // const clearTimestamp = () => {\r\n  //   clearInterval(tmrUpdateTimestamp);\r\n  // };\r\n\r\n  const getReviser = () => {\r\n    return \"STA\";\r\n  };\r\n\r\n  const getWorkplace = () => {\r\n    return \"LAPSTA\";\r\n  };\r\n\r\n  /**\r\n   * Barrel: Functions\r\n   */\r\n  const barrelFunctions = {\r\n    sendRequest,\r\n    // processResponse,\r\n    showMessage,\r\n    hideMessage,\r\n    // startSessionTimeout,\r\n    // stopSessionTimeout,\r\n    changeLanguage,\r\n    format,\r\n    formatPerCent,\r\n    formatExchangeRate,\r\n    formatDate,\r\n    sendEmailValidationRequest,\r\n    getUrlParam,\r\n    getAccountData,\r\n    getTransactionById,\r\n    getBusinesses,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n    getCurrencies,\r\n    getTransactions,\r\n    getShares,\r\n    parseLocaleNumber,\r\n    getReviser,\r\n    getWorkplace,\r\n    // updateTimestamp,\r\n  };\r\n\r\n  /** \r\n   * Event handlers\r\n   ============================================================================ */\r\n\r\n  /**\r\n   * On language change\r\n   */\r\n  i18n.on(\"languageChanged\", function (lng) {\r\n    setLanguage(lng);\r\n  });\r\n\r\n  /**\r\n   * On redirect\r\n   * @param {string} to Redirect path (e.g. \"/sign-in\")\r\n   */\r\n  const onRedirect = (to) => {\r\n    setRedirectTo(to);\r\n  };\r\n\r\n  // /**\r\n  //  * On login\r\n  //  * @param {object} data Login data\r\n  //  */\r\n  // const onLogin = (data) => {\r\n  //   setUserData(JSON.stringify(data));\r\n  //   sendRequest({ req: \"sign in user\", data: data });\r\n  //   // setAuthorizationStep(1); // authorized session request pending\r\n  // };\r\n\r\n  /**\r\n   * On signup\r\n   * @param {object} data Signup data\r\n   */\r\n  const onSignUp = (data) => {\r\n    // console.log(\"SIGN UP (data):\", data);\r\n    /// setUserData(JSON.stringify(data));\r\n    return sendRequest({ req: \"register user\", data });\r\n  };\r\n\r\n  const onSessionTimeout = () => {\r\n    if (debug) return;\r\n    console.log(\"Session timed out...\");\r\n    // endSession(\"bye\", session);\r\n    setLoggingOut(true);\r\n    setRedirectTo(\"/sign-out\");\r\n    // Logout();\r\n  };\r\n\r\n  /**\r\n   * On account registration\r\n   * @param {object} data The account registration data\r\n   */\r\n  // const onAccountRegistration = (data) => {\r\n  //   // console.log(\"ACCOUNT REGISTRATION (data):\", data);\r\n  //   // setAccountNumber(data.personalID);\r\n  //   return sendRequest({ req: \"register account\", data });\r\n  // };\r\n\r\n  /**\r\n   * On transfer type change\r\n   * @param {string} id The transfer type id (\"U2S\", \"U2U\", \"U2B\" etc.)\r\n   */\r\n  const onTransferTypeChange = (id) => {\r\n    // console.log(\"setTransferType: \" + id);\r\n    setTransferType(id);\r\n  };\r\n\r\n  const onTransferSuccess = () => {\r\n    // console.log(\"ON TRANSFER SUCCESS\", barrels);\r\n  };\r\n\r\n  /**\r\n   * On transfer\r\n   * @param {object} data Transfer data\r\n   */\r\n  const onTransfer = (data) => {\r\n    // console.log(\"ON TRANSFER (data):\", data);\r\n    // sendRequest({ req: \"register account\", data: data });\r\n    sendRequest(data);\r\n  };\r\n\r\n  const onBusinessRegistration = (data) => {\r\n    // console.log(\"ON BUSINESS REGISTRATION (data):\", data);\r\n    // sendRequest({ req: \"register account\", data: data });\r\n    sendRequest(data);\r\n  };\r\n\r\n  const onPurposeRegistration = (data) => {\r\n    // console.log(\"ON PURPOSE REGISTRATION (data):\", data);\r\n    // sendRequest({ req: \"register account\", data: data });\r\n    sendRequest(data);\r\n    // getBusinesses();\r\n  };\r\n\r\n  // const onShareholderRegistration = (data) => {\r\n  //   console.log(\"ON SHAREHOLDER REGISTRATION (data):\", data);\r\n  //   // sendRequest({ req: \"register account\", data: data });\r\n  //   sendRequest(data);\r\n  //   // getBusinesses();\r\n  // };\r\n\r\n  /**\r\n   * On logout\r\n   */\r\n  const onLogOut = () => {\r\n    // setSession(null);\r\n    endSession(\"bye\", session, debug);\r\n    setSignedIn(false);\r\n    // setTimerActive(false);\r\n\r\n    setCurrencies(null);\r\n    setTransactions(null);\r\n    setShares(null);\r\n    setAccordionView(\"balance\");\r\n    setAccordionViewCurrency(null);\r\n    setAccountNumber(null);\r\n    setAccountType(null);\r\n    setTransferType(\"#u2s\");\r\n    setUserData(null);\r\n    setUserBusinesses(null);\r\n    setActiveBusiness(null);\r\n    setBusinessPurposes(null);\r\n    setActiveBusinesPurpose(null);\r\n    setPurposeShareholders(null);\r\n    setAccountPhotoPath(\"\");\r\n    setPasswordResetTokenValidated(null);\r\n    setPasswordResetTokenEmail(null);\r\n    // setSharesPerPage(1);\r\n    setError(null);\r\n    setInfo(null);\r\n    // setRedirectTo(\"/sign-in\"); // TODO: In production might disable that\r\n    // window.localStorage.clear(); // TODO: Remove in production remove\r\n  };\r\n\r\n  const onAlertClose = () => {\r\n    // setAlertVisible(false);\r\n    hideMessage();\r\n  };\r\n\r\n  /**\r\n   * Barrel: Event handlers\r\n   */\r\n  const barrelEventHandlers = {\r\n    onRedirect,\r\n    onSignUp,\r\n    onSessionTimeout,\r\n    // onAccountRegistration,\r\n    onTransferTypeChange,\r\n    onTransferSuccess,\r\n    onTransfer,\r\n    onBusinessRegistration,\r\n    onPurposeRegistration,\r\n    // onShareholderRegistration,\r\n    onLogOut,\r\n    onAlertClose,\r\n  };\r\n\r\n  /** \r\n   * Effect hooks\r\n   ============================================================================ */\r\n\r\n  useEffect(() => {\r\n    // console.log(\"MOUNTED\");\r\n\r\n    /**\r\n     * Clear local storage (URL param ?reset)\r\n     */\r\n    if (getUrlParam(\"reset\") !== null) {\r\n      window.localStorage.clear();\r\n      console.log(\"Local storage cleared\");\r\n    }\r\n\r\n    // updateTimestamp();\r\n\r\n    // startSessionTimeout();\r\n\r\n    return () => {\r\n      // console.log(\"UNMOUNTED\");\r\n      // stopSessionTimeout();\r\n    };\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n   * On session ID change\r\n   */\r\n  useEffect(() => {\r\n    if (session === null) return;\r\n    startSession(\"hello\", session, debug);\r\n    // eslint-disable-next-line\r\n  }, [session]);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"sessionTimeout:\", sessionTimeout);\r\n\r\n  //   // eslint-disable-next-line\r\n  // }, [sessionTimeout]);\r\n\r\n  useEffect(() => {\r\n    if (connected === false) {\r\n      // anonymize session\r\n      setSession(uuidv4());\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [connected]);\r\n\r\n  /**\r\n   * On signed in status change\r\n   */\r\n  useEffect(() => {\r\n    if (!signedIn) return;\r\n    // if (signedIn) {\r\n    //   updateTimestamp();\r\n    // } else {\r\n    //   clearTimestamp();\r\n    // }\r\n    // updateTimestamp();\r\n    // setTimerActive(true);\r\n    // eslint-disable-next-line\r\n  }, [signedIn]);\r\n\r\n  // useEffect(() => {\r\n  //   if (timerActive) {\r\n  //     console.log(\"SET INTERVAL\");\r\n  //     updateTimestamp();\r\n  //   } else {\r\n  //     console.log(\"CLEAR INTERVAL\");\r\n\r\n  //     clearInterval(tmrUpdateTimestamp);\r\n  //   }\r\n  //   // eslint-disable-next-line\r\n  // }, [timerActive]);\r\n\r\n  /**\r\n   * On account number change\r\n   */\r\n  useEffect(() => {\r\n    if (accountNumber === null) return;\r\n\r\n    // eslint-disable-next-line\r\n  }, [accountNumber]);\r\n\r\n  /**\r\n   * On email validation token\r\n   */\r\n  useEffect(() => {\r\n    if (validateTokenEmail === null) return;\r\n\r\n    sendEmailValidationRequest(JSON.parse(validateTokenEmail));\r\n\r\n    // eslint-disable-next-line\r\n  }, [validateTokenEmail]);\r\n\r\n  // useEffect(() => {\r\n  //   // console.log(\"EVENT\");\r\n  //   // eslint-disable-next-line\r\n  // }, [useEventListener()]);\r\n\r\n  /**\r\n   * On email validation token\r\n   */\r\n  useEffect(() => {\r\n    if (passwordResetTokenValidated === null) return;\r\n\r\n    // console.log(\"Validate token:\", passwordResetTokenValidated);\r\n\r\n    // sendEmailValidationRequest(JSON.parse(validateTokenEmail));\r\n    onRedirect(\"/password\");\r\n\r\n    // eslint-disable-next-line\r\n  }, [passwordResetTokenValidated]);\r\n\r\n  /**\r\n   * On password reset validation token\r\n   */\r\n  useEffect(() => {\r\n    if (validateTokenPasswordReset === null) return;\r\n\r\n    // console.log(\"Validate password reset token:\", validateTokenPasswordReset);\r\n\r\n    sendPasswordResetRequest(JSON.parse(validateTokenPasswordReset));\r\n\r\n    // eslint-disable-next-line\r\n  }, [validateTokenPasswordReset]);\r\n\r\n  const { wrapperClass, innerClass } = getContainerClass(signedIn);\r\n\r\n  /**\r\n   * Barrel of barrels\r\n   */\r\n  const barrels = {\r\n    barrelGetters,\r\n    barrelSetters,\r\n    barrelFunctions,\r\n    barrelEventHandlers,\r\n  };\r\n\r\n  const appClass = signedIn ? \"App\" : \"App bg\";\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        {getRedirect()}\r\n\r\n        <div className={appClass} style={{}}>\r\n          {/* Footer */}\r\n\r\n          {/* Layout wrapper */}\r\n\r\n          <div className={wrapperClass} style={{}}>\r\n            <div\r\n              className=\"d-none d-sm-block d-md-block d-lg-block d-xl-block\"\r\n              style={{ height: \"20px\" }}\r\n            ></div>\r\n            <div className={innerClass}>\r\n              {/**\r\n               * Separator\r\n               */}\r\n              <div style={{ height: \"16px\" }}></div>\r\n\r\n              {/**\r\n               * Alert\r\n               */}\r\n              <div>\r\n                <Alert data={barrels} />\r\n              </div>\r\n\r\n              {/**\r\n               * Routs\r\n               */}\r\n              <Switch>\r\n                <Route\r\n                  exact\r\n                  path=\"/\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                    // return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-in\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return Login(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-up\"\r\n                  component={() => {\r\n                    return SignUp(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/validate-email\"\r\n                  component={() => {\r\n                    return ValidateEmail(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/password\"\r\n                  component={() => {\r\n                    return ChangePassword(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/profile\"\r\n                  component={() => {\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/currency\"\r\n                  component={() => {\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-out\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return Logout(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/reset\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return PasswordReset(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/account-registration\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/business-registration\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/my-business\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/balance\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/transfer\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"transfer\");\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/summary\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    // return signedIn ? Summary(barrels) : Login(barrels);\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n              </Switch>\r\n\r\n              {/**\r\n               * Language selector\r\n               */}\r\n              <div className=\"text-center\">\r\n                <LanguageSelector {...barrels} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n","import { sendData } from \"../utils/sockets\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n  const { req, data, session, uid, barrels } = props;\r\n\r\n  // console.log(\"RESPONSE HANDLER: \", props, barrels);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const { debug } = barrels.barrelGetters;\r\n  const {\r\n    setUserData,\r\n    setUID,\r\n    setAccountNumber,\r\n    // setUserBusinesses,\r\n  } = barrels.barrelSetters;\r\n  // const { sendRequest, showMessage } = barrels.barrelFunctions;\r\n  //   const {} = barrels.barrelEventHandlers;\r\n\r\n  let requestFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onRequest = (req, callback) => {\r\n    if (requestFound) return;\r\n    if (req === props.req || req === \"default\") {\r\n      callback();\r\n      requestFound = true;\r\n    }\r\n  };\r\n\r\n  /** \r\n   * Request handlers\r\n  ============================================================================ */\r\n\r\n  // /**\r\n  //  * Start session (success)\r\n  //  */\r\n  // onRequest(\"start session\", (o) => {\r\n  //   // const { session } = onabort;\r\n  //   startSession(\"hello\", session);\r\n  // });\r\n\r\n  // onRequest(\"upload file\", (o) => {\r\n  //   // const { req, data } = o;\r\n  //   sendData({ req, data, uid, session });\r\n  // });\r\n\r\n  // onRequest(\"get user businesses\", (o) => {\r\n  //   // const { req } = o;\r\n  //   sendData({\r\n  //     req: req,\r\n  //     data: { uid: accountNumber },\r\n  //     uid: uid,\r\n  //     session: session,\r\n  //   });\r\n  // });\r\n\r\n  onRequest(\"sign in user\", () => {\r\n    // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n    // console.log(\"onRequest:\", data);\r\n\r\n    setUserData(JSON.stringify(data));\r\n    sendData({ req, data, uid, session }, debug);\r\n  });\r\n\r\n  onRequest(\"register account\", () => {\r\n    // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n    setUID(data.personalID);\r\n    setAccountNumber(data.personalID);\r\n    sendData({ req, data, uid, session }, debug);\r\n  });\r\n\r\n  // onRequest(\"get user businesses\", () => {\r\n  //   // setUserBusinesses(null);\r\n  //   if (userBusinesses === null) {\r\n  //     sendData({ req, data, uid, session });\r\n  //   } else {\r\n  //     //\r\n  //   }\r\n  // });\r\n\r\n  // onRequest(\"register user\", () => {\r\n  //   // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n  //   // setUserData(JSON.stringify(data));\r\n  //   sendData({ req, data, uid, session });\r\n  // });\r\n\r\n  // onRequest(\"register shareholder\", () => {\r\n  //   // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n  //   // setUserData(JSON.stringify(data));\r\n  //   sendData({ req, data, uid, session });\r\n  // });\r\n\r\n  onRequest(\"default\", () => {\r\n    sendData({ req, data, uid, session }, debug);\r\n\r\n    return true;\r\n  });\r\n\r\n  // onRequest(\"unknown\", () => {\r\n  //   showMessage(`UNKNOWN REQUEST ${req}`, \"info\");\r\n\r\n  //   return true;\r\n  // });\r\n\r\n  return requestFound;\r\n};\r\n","// import { useTranslation } from \"react-i18next\";\r\n\r\nexport default ({ args, barrels }) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {} = barrels.barrelGetters;\r\n  const { setRequest, setUID, setAccountNumber } = barrels.barrelSetters;\r\n  const { showMessage } = barrels.barrelFunctions;\r\n  // const {} = barrels.barrelEventHandlers;\r\n\r\n  //   const { t } = useTranslation(\"Errors\");\r\n  const { req, error, context } = props;\r\n  console.log(`ERROR: ${req}`, error, context, props, barrels);\r\n  // const { showMessage } = barrels.barrelFunctions;\r\n\r\n  let errorFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onError = (data, callback) => {\r\n    if (errorFound) return;\r\n    const [res, status] = data;\r\n    if ((res === req && status === error.code) || res === \"unknown\") {\r\n      callback();\r\n      setRequest(null);\r\n      errorFound = true;\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /** \r\n   * Response handlers\r\n  ============================================================================ */\r\n\r\n  /**\r\n   * Transfer errors\r\n   */\r\n  onError([\"transfer U2S\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"transfer U2U\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"transfer U2B\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_USER_REGISTRATION\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user language\", \"NO_ROWS_CHANGED\"], () => {\r\n    // user selected the same language again - just ignore\r\n    return true;\r\n  });\r\n\r\n  onError([\"validate email token\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"TOKEN_VALIDATION_FAILED\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"validate password reset token\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"TOKEN_VALIDATION_FAILED\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"reset password\", \"NO_ROWS_CHANGED\"], () => {\r\n    // showMessage(\"REQUEST_ALREADY_SENT\", \"info\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user language\", \"NO_ROWS_CHANGED\"], () => {\r\n    // User selected the same language again - that's ok\r\n    return true;\r\n  });\r\n\r\n  onError([\"register account\", \"ER_DUP_ENTRY\"], () => {\r\n    setUID(null);\r\n    setAccountNumber(null);\r\n    showMessage(\"DUPLICATE_ACCOUNT_REGISTRATION\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError(\r\n    [\"register account\", \"ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO\"],\r\n    () => {\r\n      setUID(null);\r\n      setAccountNumber(null);\r\n      showMessage(\"DUPLICATE_ACCOUNT_REGISTRATION\", \"error\");\r\n      return true;\r\n    }\r\n  );\r\n\r\n  onError([\"register shareholder\", \"ER_NO_REFERENCED_ROW_2\"], () => {\r\n    showMessage(\"USER_NOT_FOUND\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"unknown\"], () => {\r\n    showMessage(error.code, \"error\");\r\n    return true;\r\n  });\r\n\r\n  return false;\r\n};\r\n","export default ({ args, barrels }) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"RESPONSE HANDLER: \", props, barrels);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    debug,\r\n    currencies,\r\n    transactions,\r\n    shares,\r\n    // transactionsPerPage,\r\n    // sharesPerPage,\r\n    userData,\r\n    // accountNumber,\r\n    // uid,\r\n    userBusinesses,\r\n    businessPurposes,\r\n    purposeShareholders,\r\n    activeBusinesPurpose,\r\n    lastInsertId,\r\n  } = barrels.barrelGetters;\r\n  const {\r\n    setRequest,\r\n    setSession,\r\n    setCurrencies,\r\n    setTransactions,\r\n    setShares,\r\n    setCountCurrencies,\r\n    setCountTransactions,\r\n    setCountShares,\r\n    setConnected,\r\n    // setLanguage,\r\n    setUserData,\r\n    setSignedIn,\r\n    setCurrencyAbbr,\r\n    setCurrencyRate,\r\n    // setCurrencyStatus,\r\n    // setTransferSuccess,\r\n    setRedirectTo,\r\n    setLastInsertId,\r\n    setAccountNumber,\r\n    setUID,\r\n    setUserBusinesses,\r\n    setBusinessPurposes,\r\n    setPurposeShareholders,\r\n    // setBusinessLoaded,\r\n    setAccountPhotoPath,\r\n    setPasswordResetTokenValidated,\r\n    setPasswordResetTokenEmail,\r\n    // setRedirect,\r\n  } = barrels.barrelSetters;\r\n  const {\r\n    sendRequest,\r\n    // processResponse,\r\n    // getBusinesses,\r\n    getAccountData,\r\n    getTransactionById,\r\n    // getBusinessPurposes,\r\n    getPurposeShareholders,\r\n    showMessage,\r\n    changeLanguage,\r\n    // updateTimestamp,\r\n    // hideMessage,\r\n  } = barrels.barrelFunctions;\r\n  const {\r\n    // onTransferSuccess,\r\n    onRedirect,\r\n    // onLogOut,\r\n  } = barrels.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   ============================================================================ */\r\n  const { req } = props; // req, status\r\n  // const { userData, accountNumber } = barrels.barrelGetters;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  // console.log(\"USER DATA PARSED:\", userDataParsed);\r\n\r\n  /**\r\n   * Log response\r\n   */\r\n  if (debug) console.log(`response: ${req}`, props, barrels);\r\n\r\n  let responseFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onResponse = (data, callback) => {\r\n    if (responseFound) return;\r\n    const [res, status] = data;\r\n    if ((res === props.req && status === props.status) || res === \"unknown\") {\r\n      if (callback()) {\r\n        setRequest(null);\r\n      }\r\n      responseFound = true;\r\n      // return true;\r\n    }\r\n    // return false;\r\n  };\r\n\r\n  /** \r\n   * Response handlers\r\n  ============================================================================ */\r\n\r\n  /**\r\n   * Start session (success)\r\n   */\r\n  onResponse([\"start session\", \"success\"], () => {\r\n    setConnected(true);\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * End session (success)\r\n   */\r\n  onResponse([\"end session\", \"success\"], () => {\r\n    console.log(\"ON END SESSION\");\r\n\r\n    setConnected(false);\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Register user (pending)\r\n   */\r\n  onResponse([\"register user\", \"pending\"], () => {\r\n    // Might show some user feedback\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register user\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO users\") {\r\n      if (props.results.insertId > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register user (success)\r\n   */\r\n  onResponse([\"register user\", \"success\"], () => {\r\n    // console.log(\"REGISTER USER PROPS:\", props);\r\n    const noEmailValidation = false;\r\n\r\n    if (noEmailValidation) {\r\n      setSignedIn(true);\r\n      setSession(props.email);\r\n      onRedirect(\"/account-registration\");\r\n      sendRequest({ req: \"get user\", data: { email: props.email } }); // to not require a log in\r\n      return false;\r\n    } else {\r\n      onRedirect(\"/validate-email\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"validate email token\", \"continue\"], () => {\r\n    if (props.name === \"UPDATE validation tokens\") {\r\n      if (props.results.affectedRows > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        // onRedirect(\"/sign-in\");\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (props.name === \"UPDATE users\") {\r\n      if (props.results.affectedRows > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        onRedirect(\"/sign-in\");\r\n        return true;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  // onResponse([\"validate password reset token\", \"continue\"], () => {\r\n  //   if (props.name === \"UPDATE validation tokens\") {\r\n  //     if (props.results.affectedRows > 0) {\r\n  //       // onRedirect(\"/password\");\r\n  //       setPasswordResetTokenValidated(true);\r\n  //       return true;\r\n  //     } else {\r\n  //       // No row was inserted - an error was returned\r\n  //       return true;\r\n  //     }\r\n  //   }\r\n\r\n  //   return false;\r\n  // });\r\n\r\n  onResponse([\"validate password reset token\", \"success\"], () => {\r\n    setPasswordResetTokenValidated(true);\r\n\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Sign in user (continue)\r\n   */\r\n  onResponse([\"sign in user\", \"continue\"], () => {\r\n    // user with validated email\r\n    if (props.data.status === 1) {\r\n      setUserData(JSON.stringify(props.data));\r\n      setAccountNumber(props.data.uid);\r\n      setSession(props.data.email);\r\n      setCurrencyAbbr(props.data.currency_abbr);\r\n      // setCurrencyRate(props.data.currency_rate);\r\n      setCurrencyRate(\r\n        isNaN(props.data.currency_rate) ? 1 : props.data.currency_rate\r\n      );\r\n      // setCurrencyStatus(props.data.currency_status);\r\n      changeLanguage(props.data.language);\r\n      setSignedIn(true);\r\n      onRedirect(\"/summary\");\r\n      return false;\r\n    }\r\n\r\n    // user without validated email\r\n    if (props.data.status === 0) {\r\n      onRedirect(\"/validate-email\");\r\n      return true;\r\n    }\r\n\r\n    // suspended or deleted user\r\n    if (props.data.status === 2) {\r\n      // onLogOut();\r\n      setRedirectTo(\"/sign-out\");\r\n      showMessage(\"ACCOUNT_SUSPENDED\", \"error\");\r\n      return true;\r\n    }\r\n\r\n    // suspended or deleted user\r\n    if (props.data.status === 3) {\r\n      // onLogOut();\r\n      setRedirectTo(\"/sign-out\");\r\n      showMessage(\"ACCOUNT_DELETED\", \"error\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Sign in user (finished)\r\n   */\r\n  onResponse([\"sign in user\", \"finished\"], () => {\r\n    if (props.rowNum === 1) {\r\n      // setSignedIn(true);\r\n      // onRedirect(\"/summary\");\r\n      return true;\r\n    } else {\r\n      // TODO: Clean Log Out() user here\r\n      // setSignedIn(false);\r\n\r\n      // onLogOut();\r\n      showMessage(\"INVALID_SIGN_IN\", \"error\");\r\n      setRedirectTo(\"/sign-out\");\r\n\r\n      return true;\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Update user (success)\r\n   */\r\n  onResponse([\"update user\", \"success\"], () => {\r\n    // setUserData(JSON.stringify(props.data));\r\n    sendRequest({ req: \"get user\", data: { email: userData.email } });\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get user (continue)\r\n   */\r\n  onResponse([\"get user\", \"continue\"], () => {\r\n    setUserData(JSON.stringify(props.data));\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get user (finished)\r\n   */\r\n  onResponse([\"get user\", \"finished\"], () => {\r\n    if (props.rowNum === 1) {\r\n      return true;\r\n    } else {\r\n      // Something wrong with (accessing) the user data\r\n      // Probable causes:\r\n      // - user was deleted from the DB\r\n      // - user status was set to >= 2\r\n      // - multiple users with the same email address, most improbable (db constraint)\r\n      // - user changed the email address or password\r\n      // onLogOut();\r\n      setRedirectTo(\"/sign-out\");\r\n      // showMessage(\"INVALID_DATA\", \"error\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get user businesses (continue)\r\n   */\r\n  onResponse([\"get user businesses\", \"continue\"], () => {\r\n    if (userBusinesses === null) {\r\n      setUserBusinesses(JSON.stringify([props.data]));\r\n    } else {\r\n      setUserBusinesses(JSON.stringify([...userBusinesses, props.data]));\r\n    }\r\n\r\n    // getBusinessPurposes(props.data.business_id);\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get user businesses (finished)\r\n   */\r\n  onResponse([\"get user businesses\", \"finished\"], () => {\r\n    setRedirectTo(\"/my-business\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get business purposes (continue)\r\n   */\r\n  onResponse([\"get business purposes\", \"continue\"], () => {\r\n    if (businessPurposes === null) {\r\n      setBusinessPurposes(JSON.stringify([props.data]));\r\n    } else {\r\n      setBusinessPurposes(JSON.stringify([...businessPurposes, props.data]));\r\n    }\r\n\r\n    // getPurposeShareholders(props.data.purpose_id);\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get business purposes (finished)\r\n   */\r\n  onResponse([\"get business purposes\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get purpose shareholders (continue)\r\n   */\r\n  onResponse([\"get purpose shareholders\", \"continue\"], () => {\r\n    if (purposeShareholders === null) {\r\n      setPurposeShareholders(JSON.stringify([props.data]));\r\n    } else {\r\n      setPurposeShareholders(\r\n        JSON.stringify([...purposeShareholders, props.data])\r\n      );\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get purpose shareholders (finished)\r\n   */\r\n  onResponse([\"get purpose shareholders\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get user business by id (continue)\r\n   */\r\n  onResponse([\"get business by id\", \"continue\"], () => {\r\n    if (userBusinesses === null) {\r\n      setUserBusinesses(JSON.stringify([props.data]));\r\n    } else {\r\n      setUserBusinesses(JSON.stringify([...userBusinesses, props.data]));\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get business by id (finished)\r\n   */\r\n  onResponse([\"get business by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get purpose by id (continue)\r\n   */\r\n  onResponse([\"get purpose by id\", \"continue\"], () => {\r\n    if (businessPurposes === null) {\r\n      setBusinessPurposes(JSON.stringify([props.data]));\r\n    } else {\r\n      setBusinessPurposes(JSON.stringify([...businessPurposes, props.data]));\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get purpose by id (finished)\r\n   */\r\n  onResponse([\"get purpose by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get shareholder by id (continue)\r\n   */\r\n  onResponse([\"get shareholder by id\", \"continue\"], () => {\r\n    if (purposeShareholders === null) {\r\n      setPurposeShareholders(JSON.stringify([props.data]));\r\n    } else {\r\n      setPurposeShareholders(\r\n        JSON.stringify([...purposeShareholders, props.data])\r\n      );\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get shareholder by id (finished)\r\n   */\r\n  onResponse([\"get shareholder by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Upload file (ready)\r\n   */\r\n  onResponse([\"upload file\", \"continue\"], () => {\r\n    // setAccountPhotoPath(props + \"?r=\" + Math.random());\r\n    setAccountPhotoPath(\"ok\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Register account (success)\r\n   */\r\n  onResponse([\"register account\", \"continue\"], () => {\r\n    if (props.results.affectedRows < 1) {\r\n      // error registering account\r\n      setUID(null);\r\n      setAccountNumber(null);\r\n      showMessage(\"INVALID_DATA\", \"error\");\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register account (success)\r\n   */\r\n  onResponse([\"register account\", \"success\"], () => {\r\n    // setAccountNumber(props.uid);\r\n    // setUID(props.uid);\r\n    // sendRequest({\r\n    //   req: \"get account data\",\r\n    //   data: { uid: accountNumber },\r\n    // });\r\n    getAccountData();\r\n    // onRedirect(\"/balance\");\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get account data (continue)\r\n   */\r\n  onResponse([\"get account data\", \"continue\"], () => {\r\n    // setUserData(JSON.stringify(props.data));\r\n    // return false;\r\n\r\n    if (props.rowNum === 1) {\r\n      // all is good\r\n      setUserData(JSON.stringify(props.data));\r\n      return false;\r\n    } else {\r\n      // Account not reachable\r\n      showMessage(\"INVALID_DATA\", \"error\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get account data (finished)\r\n   */\r\n  onResponse([\"get account data\", \"finished\"], () => {\r\n    // if (props.rowNum === 1) {\r\n    //   // all is good\r\n    //   return true;\r\n    // } else {\r\n    //   // Account not reachable\r\n    //   showMessage(\"INVALID_DATA\", \"error\");\r\n    //   return true;\r\n    // }\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2S\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (continue)\r\n   */\r\n  onResponse([\"transfer U2S\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (success)\r\n   */\r\n  onResponse([\"transfer U2S\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2U\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (continue)\r\n   */\r\n  onResponse([\"transfer U2U\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (success)\r\n   */\r\n  onResponse([\"transfer U2U\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2B\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (continue)\r\n   */\r\n  onResponse([\"transfer U2B\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (success)\r\n   */\r\n  onResponse([\"transfer U2B\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register business\r\n   ============================================================================================*/\r\n  onResponse([\"register business\", \"continue\"], () => {\r\n    // console.log(\"RESPONSE register business:\", props);\r\n\r\n    if (props.results.insertId > 0) {\r\n      // showMessage(\"REGISTER_BUSINESS_SUCCESS\", \"info\");\r\n\r\n      // sendRequest({\r\n      //   req: \"get business by id\",\r\n      //   data: { id: props.results.insertId },\r\n      // });\r\n      setLastInsertId(props.results.insertId);\r\n      return false;\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register business\", \"success\"], () => {\r\n    // console.log(\"RESPONSE register business:\", props);\r\n\r\n    sendRequest({\r\n      req: \"get business by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    // getBusinesses();\r\n    return false;\r\n    // return true;\r\n  });\r\n\r\n  onResponse([\"register currency\", \"continue\"], () => {\r\n    // console.log(\"RESPONSE register business:\", props);\r\n\r\n    if (props.results.insertId > 0) {\r\n      setLastInsertId(props.results.insertId);\r\n\r\n      return false;\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register currency\", \"success\"], () => {\r\n    sendRequest({\r\n      req: \"get currency by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currencies (continue)\r\n   */\r\n  onResponse([\"get currencies\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT currencies\") {\r\n      if (currencies === null) {\r\n        setCurrencies(JSON.stringify([props.results]));\r\n      } else {\r\n        setCurrencies(JSON.stringify([...currencies, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT currencies\") {\r\n      setCountCurrencies(props.results.count_currencies);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currencies (finished)\r\n   */\r\n  onResponse([\"get currencies\", \"finished\"], () => {\r\n    setRedirectTo(\"/currency\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (continue)\r\n   */\r\n  onResponse([\"get currency by id\", \"continue\"], () => {\r\n    if (currencies === null) {\r\n      setCurrencies(JSON.stringify([props.data]));\r\n    } else {\r\n      setCurrencies(JSON.stringify([...currencies, props.data]));\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (finished)\r\n   */\r\n  onResponse([\"get currency by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get transactions (continue)\r\n   */\r\n  onResponse([\"get transactions\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT transactions\") {\r\n      if (transactions === null) {\r\n        setTransactions(JSON.stringify([props.results]));\r\n      } else {\r\n        setTransactions(JSON.stringify([...transactions, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT transactions\") {\r\n      setCountTransactions(props.results.count_transaction_positions);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get transactions (finished)\r\n   */\r\n  onResponse([\"get transactions\", \"finished\"], () => {\r\n    setRedirectTo(\"/balance\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get shares (continue)\r\n   */\r\n  onResponse([\"get shares\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT shares\") {\r\n      if (shares === null) {\r\n        setShares(JSON.stringify([props.results]));\r\n      } else {\r\n        setShares(JSON.stringify([...shares, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT shares\") {\r\n      setCountShares(props.results.count_shares);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get shares (finished)\r\n   */\r\n  onResponse([\"get shares\", \"finished\"], () => {\r\n    // setRedirectTo(\"/balance\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get transaction by id (continue)\r\n   */\r\n  onResponse([\"get transaction by id\", \"continue\"], () => {\r\n    if (transactions === null) {\r\n      setTransactions(JSON.stringify([props.data]));\r\n    } else {\r\n      setTransactions(JSON.stringify([...transactions, props.data]));\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (finished)\r\n   */\r\n  onResponse([\"get transaction by id\", \"finished\"], () => {\r\n    getAccountData();\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register purpose\", \"continue\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get purpose by id\",\r\n    //   data: { id: props.results.insertId },\r\n    // });\r\n    if (props.results.insertId > 0) {\r\n      setLastInsertId(props.results.insertId);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register purpose\", \"success\"], () => {\r\n    sendRequest({\r\n      req: \"get purpose by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register shareholder\", \"continue\"], () => {\r\n    if (props.results.insertId > 0) {\r\n      // showMessage(\"REGISTER_SHAREHOLDER_SUCCESS\", \"info\");\r\n\r\n      // return sendRequest({\r\n      //   req: \"get shareholder by id\",\r\n      //   data: { id: props.results.insertId },\r\n      // });\r\n      setLastInsertId(props.results.insertId);\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register shareholder\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    getPurposeShareholders(activeBusinesPurpose);\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"change share\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    // getPurposeShareholders(activeBusinesPurpose);\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"remove shareholder\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    getPurposeShareholders(activeBusinesPurpose);\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"reset password\", \"success\"], () => {\r\n    setPasswordResetTokenValidated(false);\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"change password\", \"success\"], () => {\r\n    // TOTO: If NO_ROWS_CHANGE - probably the currently saved password was submitted\r\n    setPasswordResetTokenValidated(null);\r\n    setPasswordResetTokenEmail(null);\r\n    onRedirect(\"/sign-in\");\r\n    showMessage(\"PASSWORD_CHANGE_SUCCESS\", \"info\");\r\n    return true;\r\n  });\r\n\r\n  // onResponse([\"unknown\"], () => {\r\n  //   if (\r\n  //     status === \"pending\" ||\r\n  //     status === \"continue\" ||\r\n  //     status === \"finished\" ||\r\n  //     status === \"success\"\r\n  //   ) {\r\n  //     return false;\r\n  //   } else {\r\n  //     showMessage(`${req}: ${status}`, \"info\");\r\n  //     return true;\r\n  //   }\r\n  // });\r\n\r\n  onResponse([\"unknown\"], () => {\r\n    return false;\r\n  });\r\n\r\n  return responseFound;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"ValidateEmail\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {  } = props.barrelGetters;\r\n  const { setValidateTokenEmail } = props.barrelSetters;\r\n  const { getUrlParam } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Hooks\r\n    ============================================================================ */\r\n\r\n  // setToken(getUrlParam(\"token\"));\r\n  // setEmail(getUrlParam(\"email\"));\r\n\r\n  const token = getUrlParam(\"token\");\r\n  const email = getUrlParam(\"email\");\r\n\r\n  /**\r\n    * Effects\r\n    ============================================================================ */\r\n  useEffect(() => {\r\n    if (token === null || email === null) return;\r\n\r\n    setValidateTokenEmail(\r\n      JSON.stringify({\r\n        token,\r\n        email,\r\n      })\r\n    );\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    // const queryString = window.location.search;\r\n    // const urlParams = new URLSearchParams(queryString);\r\n\r\n    return token === null ? (\r\n      <>\r\n        <h4>{t(\"A verification link has been sent to your email account.\")}</h4>\r\n        <hr />\r\n        <p>\r\n          {t(\r\n            \"Please click on the link that has just been sent to your email account\"\r\n          )}\r\n        </p>\r\n      </>\r\n    ) : (\r\n      <div className=\"text-center\">\r\n        <Spinner\r\n          as=\"span\"\r\n          animation=\"border\"\r\n          size=\"sm\"\r\n          role=\"status\"\r\n          aria-hidden=\"true\"\r\n          hidden={false}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\n// import Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"ChangePassword\",\r\n    request: \"change password\",\r\n    email: null,\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  const {\r\n    passwordResetTokenValidated,\r\n    passwordResetTokenEmail,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation([\r\n    passwordResetTokenValidated === true ? \"SignUp\" : \"ChangePassword\",\r\n  ]); // adjust namespace\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n\r\n  /**\r\n     * Functions\r\n     ============================================================================ */\r\n  const onSubmit = (data) => {\r\n    data.email = passwordResetTokenEmail;\r\n    // console.log(data);\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  /** \r\n     * Yup schema\r\n     ============================================================================ */\r\n  const schema = yup.object({\r\n    password: yup\r\n      .string()\r\n      .required(t(\"No password provided\"))\r\n      .min(8, t(\"Password is too short\"))\r\n      // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n      .matches(\r\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n        t(\"Password is too weak\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n     * Form\r\n     ============================================================================ */\r\n  const ChangePasswordForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"New password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type={passwordVisible ? \"text\" : \"password\"}\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text\r\n              id=\"inputGroupAppend\"\r\n              onClick={togglePassword}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              {passwordVisible ? (\r\n                <VisibilityOff\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\" }}\r\n                />\r\n              ) : (\r\n                <Visibility fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n              )}\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <SubmitButton\r\n        {...args}\r\n        caption={t(\"Submit\")}\r\n        request={props.request}\r\n        namespace={props.namespace}\r\n      />\r\n    </Form>\r\n  );\r\n\r\n  /**\r\n     * Return\r\n     ============================================================================ */\r\n  if (passwordResetTokenValidated === true) {\r\n    // if (true) {\r\n    return (\r\n      <Formik\r\n        component={ChangePasswordForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          password: \"\",\r\n        }}\r\n      />\r\n    );\r\n  } else {\r\n    // if (passwordResetTokenValidated === false)\r\n    return <>{t(\"Awaiting validation\")}</>;\r\n    // } else {\r\n    //   // null\r\n    //   return <>How did you land here???</>;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(\"Logout\");\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { error, language } = props.barrelGetters;\r\n  const { setLanguage } = props.barrelSetters;\r\n  const { showMessage } = props.barrelFunctions;\r\n  const { onLogOut } = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Default Properties\r\n   */\r\n  // let defaults = {};\r\n  // const props = Object.assign(defaults, authorizedData);\r\n\r\n  // const [logOut] = useState(true);\r\n\r\n  // console.log(\"sendUserLogOutRequest\", props);\r\n\r\n  useEffect(() => {\r\n    // if (logOut !== true) return;\r\n    // console.log(\"LOG OUT =============\");\r\n\r\n    const tempError = error;\r\n    const tempLanguage = language;\r\n\r\n    onLogOut();\r\n\r\n    setLanguage(tempLanguage);\r\n\r\n    if (tempError !== null) {\r\n      showMessage(tempError, \"error\");\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []); // logOut\r\n\r\n  return (\r\n    <>\r\n      <h4>{t(\"See you soon\")}</h4>\r\n      <hr />\r\n\r\n      <br />\r\n      <p className=\"text-center\">\r\n        <a href=\"/\">{t(\"Sign in\")}</a>\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Spinner } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n  * Default export\r\n  ============================================================================ */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"ResetPassword\", request: \"reset password\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { language } = props.barrelGetters;\r\n  const { setValidateTokenPasswordReset } = props.barrelSetters;\r\n  const { sendRequest, getUrlParam } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  const token = getUrlParam(\"token\");\r\n  const email = getUrlParam(\"email\");\r\n\r\n  /**\r\n    * Effects\r\n    ============================================================================ */\r\n  useEffect(() => {\r\n    if (token === null || email === null) return;\r\n\r\n    setValidateTokenPasswordReset(\r\n      JSON.stringify({\r\n        token,\r\n        email,\r\n      })\r\n    );\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n    * Event listeners\r\n    ============================================================================ */\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    // console.log(data);\r\n    data.language = language;\r\n    sendRequest({\r\n      req: props.request,\r\n      data: data,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n  });\r\n\r\n  const passwordResetForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Reset password\")}</h3>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n\r\n  // return (\r\n  //   <Formik\r\n  //     component={passwordResetForm}\r\n  //     validationSchema={schema}\r\n  //     onSubmit={onSubmit}\r\n  //     initialValues={{\r\n  //       email: \"\",\r\n  //     }}\r\n  //   />\r\n  // );\r\n\r\n  return token === null ? (\r\n    <Formik\r\n      component={passwordResetForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        email: \"\",\r\n      }}\r\n    />\r\n  ) : (\r\n    <div className=\"text-center\">\r\n      <Spinner\r\n        as=\"span\"\r\n        animation=\"border\"\r\n        size=\"sm\"\r\n        role=\"status\"\r\n        aria-hidden=\"true\"\r\n        hidden={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","// import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Loading.css\";\r\nimport React from \"react\";\r\n// import MainSkeleton from \"../pages/main\";\r\n\r\nexport default () => {\r\n  //\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"lds-hourglass\"></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./normalize.css\";\r\nimport \"./index.css\";\r\n// import UnderConstruction from \"./components/pages/underConstruction\";\r\nimport Main from \"./components/pages/main\";\r\nimport Loading from \"./components/loading\";\r\n\r\n// const Main = React.lazy(() => import(\"./components/pages/main\"));\r\n\r\nReactDOM.render(\r\n  <Suspense fallback={<Loading />}>\r\n    <Main />\r\n  </Suspense>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}