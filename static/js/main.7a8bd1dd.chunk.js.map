{"version":3,"sources":["translations/i18n.js","utils/config.js","components/card/Card.js","components/dropzone/Dropzone.js","components/submitButton/SubmitButton.js","utils/useTimeout.js","components/accountRegistration/AccountRegistration.js","components/businessRegistration/businessRegistration.js","components/pagination/Pagination.js","components/transactions/Transactions.js","components/shareholder/Shareholder.js","components/shares/Shares.js","components/transfer/Balance.js","components/transfer/TransferToSelf.js","components/transfer/TransferToPerson.js","components/transfer/TransferToBusiness.js","components/purposeRegistration/PurposeRegistration.js","components/shareholderRegistration/shareholderRegistration.js","components/myBusiness/MyBusiness.js","components/userEditor/UserEditor.js","components/currencies/Currencies.js","components/currencyRegistration/CurrencyRegistration.js","components/modalMessage/ModalMessage.js","components/idleTimer/IdleTimer.js","utils/useInterval.js","utils/useEventListener.js","components/pages/summary/Summary.js","components/currencyContainer/CurrencyContainer.js","components/transfer/Transfer.js","utils/sockets.js","components/login/LogIn.js","components/signup/SignUp.js","utils/state.js","components/alert/Alert.js","components/language-selector/LanguageSelector.js","components/pages/main/Main.js","utils/requestHandler.js","utils/errorHandler.js","utils/responseHandler.js","components/validateEmail/ValidateEmail.js","components/changePassword/ChangePassword.js","components/logout/Logout.js","components/passwordReset/passwordReset.js","components/loading/Loading.js","index.js"],"names":["i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","react","wait","withRef","bindI18n","bindStore","nsMode","config","args","defaults","title","navigation","undefined","footer","header","body","headerContent","onNavigationClick","props","Object","assign","key","Footer","Header","className","Title","Nav","variant","defaultActiveKey","navigationdefaultActiveKey","map","item","Item","Link","href","link","onClick","style","color","name","Body","React","Children","children","child","cloneElement","styles","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","outline","transition","activeStyle","acceptStyle","rejectStyle","data","accountPhotoPath","barrelGetters","sendRequest","barrelFunctions","useState","setFiles","t","useTranslation","onDrop","useCallback","acceptedFiles","req","useDropzone","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useMemo","Figure","Image","width","height","alt","src","caption","request","namespace","visible","marginTop","timeout","onSubmit","setRequest","barrelSetters","showMessage","requestExpired","setRequestExpired","callback","delay","savedCallback","useRef","useEffect","current","id","setTimeout","clearTimeout","useTimeout","console","log","Button","type","block","disabled","Spinner","as","animation","size","role","aria-hidden","hidden","signedIn","accountNumber","userData","getReviser","getWorkplace","schema","yup","dropzoneHook","required","terms","personalID","matches","RegExp","test","exclusive","params","message","value","pid","replace","split","n","parseInt","Alert","Heading","i18nKey","component","handleSubmit","handleChange","values","handleBlur","touched","errors","isValid","validateForm","setFieldValue","Form","noValidate","Group","controlId","Label","Text","Dropzone","Control","onChange","isInvalid","Feedback","InputGroup","Prepend","placeholder","aria-describedby","Check","label","feedback","SubmitButton","validationSchema","reviser","workplace","email","sendAccountRegistrationRequest","initialValues","barrelEventHandlers","onBusinessRegistration","businessTitle","min","max","trim","businessDescription","optional","rows","uid","registerBusiness","countItems","itemsPerPage","active","align","pages","Math","ceil","getPages","items","number","push","Pagination","Ellipsis","textAlign","margin","First","Prev","Next","Last","getJSX","transactions","countTransactions","activePageTransactions","transactionsPerPage","getTransactions","format","formatDate","formatPerCent","cnt","ListGroup","transaction","keyTransactions","business_title","conv_amount","created","sender_firstname","sender_lastname","purpose_id","purpose_title","recipient_id","roles","share","share_per_cent","i_am_recipient","roles_available","arrRoles","shares_available","action","float","Badge","pill","purpose","shareholder","closeButton","rangeControl","sharePerCent","purposeTitle","businessOwnerFirstname","businessOwnerLastname","sharesCreated","purposeShareholders","setPurposeShareholders","userQuery","setUserQuery","delayedQuery","_","debounce","q","sendQuery","e","target","onClose","shareholder_id","ps","JSON","stringify","sharesLabelId","Toast","minWidth","firstname","lastname","Settings","fontSize","defaultValue","step","month","day","year","shares","countShares","activePageShares","sharesPerPage","getShares","keyShares","owner_firstname","owner_lastname","shares_created","shares_roles","shares_share","Shareholder","accordionView","setAccountType","setRedirectTo","setAccordionView","getAccountData","userDataParsed","onAccountTypeSelected","available","acc_curr","acc_cred","acc_save","Accordion","Toggle","Card","eventKey","cursor","Collapse","Transactions","Shares","accountType","language","currencyAbbr","parseLocaleNumber","fromAccount","toAccount","amount","custom","Intl","NumberFormat","notation","minimumFractionDigits","transferToSelf","toPersonalID","description","transferToPerson","purposeID","currency","transferToBusiness","businessID","barrels","onPurposeRegistration","purposeDescription","RegisterPurpose","shareholderRoles","typeError","userBusinesses","countBusinesses","businessesPerPage","activePageBusinesses","userBusinessesLoaded","activeBusiness","activeBusinessID","businessPurposes","countBusinessPurposes","businessPurposesPerPage","activePageBusinessPurposes","activeBusinesPurpose","getBusinesses","getBusinessPurposes","getPurposeShareholders","menuItems","purposes","countShareholders","keys","business","keyBusiness","keyPurpose","business_id","TogglePurpose","whiteSpace","Extension","Tab","Pane","bg","keyShareholder","Add","jsx","date","Date","businessSince","DateTimeFormat","ToggleBusiness","Store","Container","Row","Col","sm","Content","border","PurposeRegistration","mode","editFirstname","setEditFirstname","editLastname","setEditLastname","editEmail","setEditEmail","editPassword","setEditPassword","passwordVisible","setPasswordVisible","submitButtonVisible","setSubmitButtonVisible","togglePassword","yupObject","firstName","lastName","password","Close","Edit","Append","VisibilityOff","Visibility","sendUserRegistrationRequest","currencies","countCurrencies","activePageCurrencies","currenciesPerPage","setCurrencyAbbr","getCurrencies","formatExchangeRate","onCurrencySelected","currency_id","onPageSelect","Table","responsive","striped","bordered","hover","keyCUrrency","abbr","rate","region","checked","aria-label","curr_abbr","curr_title","curr_region","curr_rate","onHide","Modal","aria-labelledby","centered","timestamp","stage2","stage3","onTimeout","events","onSessionTimeout","seconds","setSeconds","modalMessageShow","setModalMessageShow","setInterval","clearInterval","useInterval","eventHandler","i","window","addEventListener","removeEventListener","useEventListener","currTime","timeFormatted","minute","second","modalMessage","fontWeight","ModalMessage","show","OverlayTrigger","placement","overlay","Tooltip","AvTimer","setGotFocus","location","useLocation","fluid","paddingRight","paddingLeft","Navbar","boxShadow","Brand","PowerSettingsNew","IdleTimer","collapseOnSelect","expand","background","pathname","aria-controls","viewBalanceOrTransfer","exact","path","Balance","AccountRegistration","UserEditor","accordionViewCurrency","setAccordionViewCurrency","Currencies","CurrencyRegistration","CurrencyContainer","MyBusiness","transferType","onTransferTypeChange","transferCard","setTransferCard","TransferToSelf","TransferToPerson","TransferToBusiness","Transfer","dev","uri","ENDPOINT","hostname","socket","openSocket","connect","secure","reconnect","sendData","emit","sendUserLogInRequest","rememberMe","validateEmail","useStickyState","stickyValue","localStorage","getItem","parse","setValue","setItem","error","info","onAlertClose","dismissible","changeLanguage","lng","selectLanguage","setDebug","loggingOut","setLoggingOut","pageLoading","setPageLoading","now","instance","setInstance","uuidv4","session","setSession","connected","setConnected","setSignedIn","currencyRate","setCurrencyRate","setCurrencies","setTransactions","setShares","setCountCurrencies","setCountTransactions","setCountShares","setActivePageCurrencies","setActivePageTransactions","setActivePageShares","setCurrenciesPerPage","setTransactionsPerPage","setSharesPerPage","setUserData","setUID","setAccountNumber","setUserBusinesses","setCountBusinesses","setBusinessesPerPage","setActivePageBusinesses","setUserBusinessesLoaded","setActiveBusiness","setActiveBusinessID","setBusinessPurposes","setCountBusinessPurposes","setBusinessPurposesPerPage","setActivePageBusinessPurposes","setActiveBusinesPurpose","redirectTo","lastInsertId","setLastInsertId","validateTokenEmail","setValidateTokenEmail","validateTokenPasswordReset","setValidateTokenPasswordReset","passwordResetTokenValidated","setPasswordResetTokenValidated","passwordResetTokenEmail","setPasswordResetTokenEmail","tmrConnected","options","setLanguage","setTransferType","setAccountPhotoPath","setError","setInfo","responseData","setResponseData","on","useSocket","processResponse","processRequest","requestFound","onRequest","requestHandler","status","context","errorFound","onError","res","code","errorHandler","getTransactionById","onRedirect","responseFound","onResponse","reqData","results","insertId","affectedRows","currency_abbr","isNaN","currency_rate","queryCnt","rowNum","count_businesses","count_purposes","count_currencies","count_transaction_positions","count_shares","responseHandler","hideMessage","getUrlParam","param","queryString","search","URLSearchParams","get","sendEmailValidationRequest","token","msg","maximumFractionDigits","ts","hour","newPage","page","limit","selected","stringNumber","locale","parts_local","formatToParts","group","decimal","forEach","parseFloat","to","onSignUp","onTransferSuccess","onTransfer","onLogOut","endSession","clear","startSession","sendPasswordResetRequest","wrapperClass","innerClass","getContainerClass","appClass","Summary","Login","SignUp","ValidateEmail","ChangePassword","tempError","tempLanguage","Logout","PasswordReset","LanguageSelector","ReactDOM","render","fallback","document","getElementById"],"mappings":"ubASAA,IAGGC,IAAIC,KAGJD,IAAIE,KAEJF,IAAIG,KAGJC,KAAK,CACJC,YAAa,KACbC,OAAO,EAEPC,GAAI,CAAC,QAAS,UACdC,UAAW,UACXC,cAAc,EACdC,cAAe,CACbC,aAAa,GAEfC,MAAO,CACLC,MAAM,EACNC,SAAS,EACTC,SAAU,yBACVC,UAAW,gBACXC,OAAQ,aAIClB,ICZXmB,EDYWnB,IAAf,E,0GEhCe,WAACoB,GACd,IAAIC,EAAW,CACbC,MAAO,WACPC,gBAAYC,EACZC,YAAQD,EACRE,QAAQ,EACRC,MAAM,EACNC,cAAe,KACfC,kBAAmB,cAEjBC,EAAQC,OAAOC,OAAOX,EAAUD,GAEhCa,EAAM,EAENR,EAASK,EAAML,OAAS,kBAAC,IAAKS,OAAN,KAAcJ,EAAML,QAAwB,GAExE,OACE,kBAAC,IAAD,KAEGK,EAAMJ,QACL,kBAAC,IAAKS,OAAN,CAAaC,UAAU,eACI,OAAxBN,EAAMF,cACLE,EAAMF,cAEN,oCACE,kBAAC,IAAKS,MAAN,KAAaP,EAAMR,OACnB,kBAACgB,EAAA,EAAD,CACEC,QAAQ,OACRC,iBAAkBV,EAAMW,4BAEvBX,EAAMP,YACLO,EAAMP,WAAWmB,KAAI,SAACC,EAAMV,GAAP,OACnB,kBAACK,EAAA,EAAIM,KAAL,CAAUX,IAAKA,GACb,kBAACK,EAAA,EAAIO,KAAL,CACET,UAAU,cACVU,KAAMH,EAAKI,KACXC,QAAS,kBAAMlB,EAAMD,kBAAkBc,EAAKI,OAC5CE,MAAO,CAAEC,MAAO,UAEfP,EAAKQ,aAUvBrB,EAAMH,MACL,kBAAC,IAAKyB,KAAN,CAAWhB,UAAU,eAClBiB,IAAMC,SAASZ,IAAItB,EAAKmC,UAAU,SAACC,GAClC,MAAqB,kBAAVA,EACFA,GAEPvB,IACOwB,uBAAaD,EAAO,CACzBE,OAAQ,KACRzB,IAAKA,SAMdR,I,iCCjEDkC,EAAY,CAChBC,KAAM,EACNC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,QAAS,OACTC,YAAa,EACbC,aAAc,EACdC,YAAa,UACbC,YAAa,SACbC,gBAAiB,UACjBnB,MAAO,UACPoB,QAAS,OACTC,WAAY,2BAGRC,EAAc,CAClBL,YAAa,WAGTM,EAAc,CAClBN,YAAa,WAGTO,EAAc,CAClBP,YAAa,WAMA,WAAC/C,GAKd,IAKMU,EAAQC,OAAOC,OALN,GAKuBZ,EAAKuD,MAKrCC,EAAqB9C,EAAM+C,cAA3BD,iBAEEE,EAAgBhD,EAAMiD,gBAAtBD,YAjBe,EAuBFE,mBAAS,MAArBC,EAvBc,oBA4BfC,EAAMC,YAAe,uBAArBD,EAMiB,KAArBN,IACFjB,EAAUK,QAAU,EACpBL,EAAUS,YAAc,OACxBT,EAAUU,gBAAkB,QAQ9B,IAAMe,EAASC,uBAAY,SAACC,GAM1BL,EAASK,GAMTR,EAAY,CAAES,IAAK,cAAeZ,KADvB,CAAEW,cAAeA,OAI3B,IA5DoB,EAsEnBE,YAAY,CACdC,OAAQ,UACRL,WAPAM,EAjEqB,EAiErBA,aACAC,EAlEqB,EAkErBA,cACAC,EAnEqB,EAmErBA,aACAC,EApEqB,EAoErBA,aACAC,EArEqB,EAqErBA,aAWI7C,EAAQ8C,mBACZ,iCACKpC,EADL,GAEMiC,EAAepB,EAAc,GAFnC,GAGMqB,EAAepB,EAAc,GAHnC,GAIMqB,EAAepB,EAAc,MAEnC,CAACkB,EAAcC,EAAcC,IAG/B,MAAyB,KAArBlB,EAEA,yBAAKxC,UAAU,aACb,wBAASsD,EAAa,CAAEzC,UACtB,0BAAW0C,KACX,2BAAIT,EAAE,sCAMZN,EAAmB,mBAGjB,oCACE,yBAAKxC,UAAU,aACb,wBAASsD,EAAa,CAAEzC,UACtB,0BAAW0C,KACX,kBAACK,EAAA,EAAOC,MAAR,CACEC,MAAO,IACPC,OAAQ,IACRC,IAAI,UACJC,IAAKzB,S,kBCtIJ,WAACxD,GAId,IAaMU,EAAQC,OAAOC,OAbN,CACbsE,QAAS,SACTC,QAAS,KACTC,UAAW,SACXC,SAAS,EACTC,UAAW,EACXC,QAAS,IACTC,SAAU,cAM0BxF,GAK9BmF,EAAYzE,EAAM+C,cAAlB0B,QACAM,EAAe/E,EAAMgF,cAArBD,WACAE,EAAgBjF,EAAMiD,gBAAtBgC,YAxBe,EAgCqB/B,oBAAS,GAhC9B,mBAgChBgC,EAhCgB,KAgCAC,EAhCA,MCbC,SAACC,EAAUC,GACnC,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAEJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,YAJX,WACEL,EAAcG,YAGYJ,GAC1B,OAAO,kBAAMO,aAAaF,OAE3B,CAACL,IDgCJQ,EAAW,WACLpB,IAAYzE,EAAMyE,UACtBqB,QAAQC,IAAI,cAIZZ,GAAkB,GAClBJ,EAAW,MACXE,EAAY,kBAAmB,YAC9BjF,EAAM6E,SAsCT,OAAO,oCA5BG7E,EAAM2E,QAGZ,kBAACqB,EAAA,EAAD,CACEC,KAAK,SACL/E,QAASlB,EAAM8E,SACfoB,OAAK,EACLC,SAAU1B,IAAYzE,EAAMyE,UAAYS,EACxC/D,MAAO,CAAEyD,UAAW5E,EAAM4E,UAAY,OAEtC,kBAACwB,EAAA,EAAD,CACEC,GAAG,OACHC,UAAU,SACVC,KAAK,KACLC,KAAK,SACLC,cAAY,OACZC,OAAQjC,IAAYzE,EAAMyE,SAAWS,IAbzC,OAgBGlF,EAAMwE,QAhBT,QAFA,uCE1DS,WAAClF,GAKd,IAQMU,EAAQC,OAAOC,OARN,CACbuE,QAAS,mBACTC,UAAW,uBAMyBpF,GAbf,EAwBnBU,EAAM+C,cALR4D,EAnBqB,EAmBrBA,SACAC,EApBqB,EAoBrBA,cACA9D,EArBqB,EAqBrBA,iBACA+D,EAtBqB,EAsBrBA,SACApI,EAvBqB,EAuBrBA,MAvBqB,EA0B2BuB,EAAMiD,gBAAhD6D,EA1Be,EA0BfA,WAAYC,EA1BG,EA0BHA,aAAc/D,EA1BX,EA0BWA,YAW1BI,EAAMC,YAAerD,EAAM0E,WAA3BtB,EAKF4D,EAASC,IAAW,CACxBC,aAAcD,MAAaE,SAAS/D,EAAE,yBACtCgE,MAAOH,MAAYE,SAAS/D,EAAE,sBAC9BiE,WAAYJ,MAETE,SAAS/D,EAAE,4BACXkE,QACC,IAAIC,OAAOnE,EAAE,sBACbA,EAAE,6BAEHoE,KAAK,CACJnG,KAAM,YACNoG,WAAW,EACXC,OAAQ,GACRC,QAASvE,EAAE,4BACXoE,KAAM,SAACI,GACL,GAAqB,qBAAVA,EAAuB,OAAO,EACzC,IAAIC,EAAMD,EACPE,QAAQ,IAAK,IACbC,MAAM,IACNnH,KAAI,SAAUoH,GACb,OAAOC,SAASD,EAAG,OAevB,OAFgB,MAVd,EAAIH,EAAI,GACR,EAAIA,EAAI,GACR,EAAIA,EAAI,GACR,EAAIA,EAAI,GACR,EAAIA,EAAI,GACR,GAAKA,EAAI,GACT,EAAIA,EAAI,GACR,EAAIA,EAAI,GACR,EAAIA,EAAI,GACR,EAAIA,EAAI,KACqB,KAEXA,EAAI,SAkIhC,OAAiB,IAAblB,EAEA,oCACE,kBAACuB,EAAA,EAAD,CAAOzH,QAAQ,QACb,kBAACyH,EAAA,EAAMC,QAAP,KAAgB/E,EAAE,uBAClB,2BACE,kBAAC,IAAD,CAAOgF,QAAQ,2CAAf,2BAQL3J,GAA2B,OAAlBmI,EAoBZ,kBAAC,EAAD,CAAMpH,MAAO4D,EAAE,iBACb,kBAAC,IAAD,CACEiF,UAhI0B,SAAC,GAAD,IAC9BC,EAD8B,EAC9BA,aACAC,EAF8B,EAE9BA,aAEAC,GAJ8B,EAG9BC,WAH8B,EAI9BD,QACAE,EAL8B,EAK9BA,QAIAC,GAT8B,EAM9BC,QAN8B,EAO9BC,aAP8B,EAQ9BC,cAR8B,EAS9BH,QAT8B,OAW9B,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAAClE,SAAUwD,GACzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,2BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,aAEf,kBAAC2F,EAAA,EAAKK,KAAN,KACE,kBAAC,IAAD,CAAOhB,QAAQ,6CAAf,iGAMF,6BACA,kBAACiB,EAAD,CAAUxG,KAAM7C,KAGlB,kBAAC+I,EAAA,EAAKE,MAAN,CAAYC,UAAU,gCACpB,kBAACH,EAAA,EAAKO,QAAN,CACErD,KAAK,OACL5E,KAAK,eACLuG,MAAO9E,EACPyG,SAAUhB,EACViB,YAAab,EAAOzB,aACpB/F,MAAO,CAAEY,QAAS,UAGpB,kBAACgH,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOzB,gBAIX,EAUD,kBAAC6B,EAAA,EAAKE,MAAN,CAAYC,UAAU,8BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,gBACf,kBAACsG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWN,KAAZ,CAAiB1D,GAAG,qBAApB,OAEF,kBAACqD,EAAA,EAAKO,QAAN,CACErD,KAAK,OACL2D,YAAaxG,EAAE,gBACfyG,mBAAiB,oBACjBxI,KAAK,aACLuG,MAAOY,EAAOnB,WACdkC,SAAUhB,EACViB,YAAab,EAAOtB,YAAcqB,EAAQrB,aAE5C,kBAAC0B,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOtB,cAId,kBAAC0B,EAAA,EAAKE,MAAN,KACE,kBAACF,EAAA,EAAKe,MAAN,CACE3C,UAAQ,EACR9F,KAAK,QACL0I,MAAO3G,EAAE,iCACTmG,SAAUhB,EACViB,YAAab,EAAOvB,OAASsB,EAAQtB,MACrC4C,SAAUrB,EAAOvB,MACjB1B,GAAG,uBAIP,kBAACuE,EAAD,iBACM3K,EADN,CAEEkF,QAASpB,EAAE,UACXqB,QAASzE,EAAMyE,QACfC,UAAW1E,EAAM0E,eA0CjBwF,iBAAkBlD,EAClBlC,SA1IW,SAACjC,IAjBqB,SAACA,GACzB,OAATA,IAEJA,EAAKsH,QAAUrD,IACfjE,EAAKuH,UAAYrD,IAGjBlE,EAAKwH,MAAQxD,EAASwD,MAEfrH,EAAY,CAAES,IAAKzD,EAAMyE,QAAS5B,UASrCyH,CAA+BzH,IA0I/B0H,cAAe,CACblD,WAAY,GACZD,MAAO,GACPF,aAAcpE,MA1BlB,oCACE,kBAACoF,EAAA,EAAD,CAAOzH,QAAQ,QACb,kBAACyH,EAAA,EAAMC,QAAP,KAAgB/E,EAAE,oCAClB,2BACE,kBAAC,IAAD,CACEgF,QAAQ,4EACRxB,cAAeA,GAFjB,+BAKE,gCAAS,CAAEA,kBALb,gCCxOG,WAACtH,GAId,IAKMU,EAAQC,OAAOC,OALN,GAKuBZ,GAK9BsH,EAAkB5G,EAAM+C,cAAxB6D,cAde,EAsBnB5G,EAAMiD,gBAHRD,EAnBqB,EAmBrBA,YACA8D,EApBqB,EAoBrBA,WACAC,EArBqB,EAqBrBA,aAMM3D,GAJ2BpD,EAAMwK,oBAAjCC,uBAIMpH,YAAe,CAAC,yBAAtBD,GAEF4D,EAASC,IAAW,CACxByD,cAAezD,MAEZE,SAAS/D,EAAE,uCACXuH,IAAI,EAAGvH,EAAE,6BACTwH,IAAI,GAAIxH,EAAE,4BACVyH,OACHC,oBAAqB7D,MAAa8D,aAqEpC,OACE,kBAAC,IAAD,CACE1C,UAjDyB,SAAC,GAAD,IAC3BC,EAD2B,EAC3BA,aACAC,EAF2B,EAE3BA,aAEAC,GAJ2B,EAG3BC,WAH2B,EAI3BD,QACAE,EAL2B,EAK3BA,QAEAC,GAP2B,EAM3BC,QAN2B,EAO3BD,QAP2B,OAS3B,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAAClE,SAAUwD,GAEzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,wCACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,mBACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAK,OACL2D,YAAY,GACZC,mBAAiB,oBACjBxI,KAAK,gBACLuG,MAAOY,EAAOkC,cACdnB,SAAUhB,EACViB,YAAab,EAAO+B,eAAiBhC,EAAQgC,gBAE/C,kBAAC3B,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAO+B,iBAMd,kBAAC3B,EAAA,EAAKE,MAAN,CACEC,UAAU,sBACV7H,KAAK,sBACLuG,MAAOY,EAAOsC,oBACdvB,SAAUhB,GAEV,kBAACQ,EAAA,EAAKI,MAAN,KAAa/F,EAAE,yBACf,kBAAC2F,EAAA,EAAKO,QAAN,CAAcjD,GAAG,WAAW2E,KAAK,OAInC,kBAAChF,EAAA,EAAD,CAAQC,KAAK,SAASC,OAAK,GACxB9C,EAAE,aAQL8G,iBAAkBlD,EAClBlC,SAvDa,SAACjC,IAXO,SAACA,GACxBA,EAAKsH,QAAUrD,IACfjE,EAAKuH,UAAYrD,IACjBlE,EAAKoI,IAAMrE,EAKX5D,EAAY,CAAES,IAAK,oBAAqBZ,KAAMA,IAI9CqI,CAAiBrI,IAuDf0H,cAAe,CACbG,cAAe,GACfI,oBAAqB,O,qDCvGd,WAACxL,GAId,IAaMU,EAAQC,OAAOC,OAbN,CACbwE,UAAW,aACX6B,KAAM,KACN4E,WAAY,EACZC,aAAc,EACdC,OAAQ,EACRnK,QAAS,aACToK,MAAO,UAM6BhM,GAEhCiM,EAAQC,KAAKC,KAAKzL,EAAMmL,WAAanL,EAAMoL,cAEjD,GAAIG,EAAQ,EAAG,OAAO,qCAetB,IAyBMG,EAAW,WAEf,IADA,IAAIC,EAAQ,GADS,WAEZC,GAEM,IAAXA,GACAA,IAAWL,GACVK,GAAU5L,EAAMqL,OAAS,GAAKO,GAAU5L,EAAMqL,OAAS,EAExDM,EAAME,KACJ,kBAACC,EAAA,EAAWhL,KAAZ,CACEX,IAAKyL,EACLP,OAAQO,IAAW5L,EAAMqL,OACzBnK,QAAS,kBArCH,SAAC0K,GAEf,OAAQA,GACN,IAAK,QACHA,EAAS,EACT,MACF,IAAK,OACHA,EAAS5L,EAAMqL,OAAS,EAAIrL,EAAMqL,OAAS,EAAI,EAC/C,MACF,IAAK,OACHO,EACE5L,EAAMqL,OAASG,KAAKC,KAAKzL,EAAMmL,WAAanL,EAAMoL,cAC9CpL,EAAMqL,OAAS,EACfG,KAAKC,KAAKzL,EAAMmL,WAAanL,EAAMoL,cACzC,MACF,IAAK,OACHQ,EAASJ,KAAKC,KAAKzL,EAAMmL,WAAanL,EAAMoL,cAMhDpL,EAAMkB,QAAQ0K,GAeS1K,CAAQ0K,KAEtBA,IAGe,IAAXA,GAAgBA,IAAWL,EAAQ,GAC5CI,EAAME,KAAK,kBAACC,EAAA,EAAWC,SAAZ,CAAqB5L,IAAKyL,EAAQzF,UAAQ,MAhBhDyF,EAAS,EAAGA,GAAUL,EAAOK,IAAW,EAAxCA,GAmBT,OAAOD,GA0CT,OAAO,oCApCQ,WAAO,IACZL,EAAUtL,EAAVsL,MAER,OACE,yBACEnK,MAAO,CACL6K,UAAU,GAAD,OAAKV,KAIhB,0BAAMnK,MAAO,CAAEY,QAAS,iBACtB,kBAAC+J,EAAA,EAAD,CAAYvF,KAAMvG,EAAMuG,KAAMpF,MAAO,CAAEe,QAAS,EAAG+J,OAAQ,IACxDV,EAAQ,GACP,oCACE,kBAACO,EAAA,EAAWI,MAAZ,CAAkBhL,QAAS,kBAAMlB,EAAMkB,QAAQ,YAC/C,kBAAC4K,EAAA,EAAWK,KAAZ,CAAiBjL,QAAS,kBAAMlB,EAAMkB,QAAQ,YAIjDwK,IAEAH,EAAQ,GACP,oCACE,kBAACO,EAAA,EAAWM,KAAZ,CAAiBlL,QAAS,kBAAMlB,EAAMkB,QAAQ,WAC9C,kBAAC4K,EAAA,EAAWO,KAAZ,CAAiBnL,QAAS,kBAAMlB,EAAMkB,QAAQ,eAYlDoL,KC5GG,WAAChN,GAId,IAQMU,EAAQC,OAAOC,OARN,CACbuE,QAAS,mBACTC,UAAW,gBAMyBpF,GAZf,EAuBnBU,EAAM+C,cALRwJ,EAlBqB,EAkBrBA,aACAC,EAnBqB,EAmBrBA,kBACAC,EApBqB,EAoBrBA,uBACAC,EArBqB,EAqBrBA,oBACA9F,EAtBqB,EAsBrBA,cAtBqB,EAiCnB5G,EAAMiD,gBAJR0J,EA7BqB,EA6BrBA,gBACAC,EA9BqB,EA8BrBA,OACAC,EA/BqB,EA+BrBA,WACAC,EAhCqB,EAgCrBA,cAOM1J,EAAMC,YAAe,CAACrD,EAAM0E,YAA5BtB,EAoCJ2J,EAAM,EAKV,OACE,oCACE,kBAACC,EAAA,EAAD,CAAWvM,QAAQ,SACC,OAAjB8L,GACCA,EAAa3L,KAAI,SAACqM,EAAaC,GAC7BH,IADiD,IAS/CI,EAyBEF,EAzBFE,eAEAC,EAuBEH,EAvBFG,YACAC,EAsBEJ,EAtBFI,QAGAC,EAmBEL,EAnBFK,iBACAC,EAkBEN,EAlBFM,gBAIAC,EAcEP,EAdFO,WAIAC,EAUER,EAVFQ,cACAC,EASET,EATFS,aACAC,EAQEV,EARFU,MACAC,EAOEX,EAPFW,MACAC,EAMEZ,EANFY,eAKA5H,EACEgH,EADFhH,KAII6H,EAAiBJ,IAAiB9G,EAElCmH,EACM,OAAVJ,GAA4B,MAAVA,GAAkC,qBAAVA,EACtCK,EAAWD,EAAkBJ,EAAM5F,MAAM,KAAO,GAEhDkG,EACa,qBAAVL,GAAmC,OAAVA,GAA4B,MAAVA,EAEpD,MAAa,iBAAT3H,GAYgB,iBAATA,EAVP,kBAAC+G,EAAA,EAAUlM,KAAX,CAAgBX,IAAK+M,EAAiBgB,QAAM,GACzCZ,EADH,IACsBC,EACpB,0BAAMpM,MAAO,CAAEgN,MAAO,UACnBL,EAAiB,GAAK,IACtBlB,EAAOQ,IAEV,6BACA,+BAAQP,EAAWQ,KAeL,iBAATpH,EAEP,kBAAC+G,EAAA,EAAUlM,KAAX,CAAgBX,IAAK+M,EAAiBgB,QAAM,GACzCV,EACD,0BAAMrM,MAAO,CAAEgN,MAAO,UACnBL,EAAiB,GAAK,IACtBlB,EAAOQ,IAEV,6BACCD,EAPH,SAO6BM,EAC3B,6BACCH,EATH,IASsBC,EACnBQ,GACC,oCACE,6BACCC,EAASpN,KAAI,SAAC4F,EAAMrG,GACnB,OACE,0BAAMA,IAAKA,GACR,IACD,kBAACiO,EAAA,EAAD,CAAOC,MAAI,EAAC5N,QAAQ,aACjB+F,QAMV,IACFyH,GACC,oCACE,6BACCL,EAFH,IAEWxK,EAAE,UAFb,KAE0B0J,EAAce,GAFxC,KAKF,6BACA,+BAAQhB,EAAWQ,MAMvBvH,QAAQC,IAAI,yBAEL,0CAIN,IAARgH,GACC,uBAAGzM,UAAU,0BAA0B8C,EAAE,oBAE3C,6BAEA,kBAAC,EAAD,iBACM9D,EADN,CAEEiM,MAAOC,KAAKC,KAAKe,EAAoBE,GACrCrB,OAAQoB,EACRvL,QAhKe,SAAC0K,GAEpB,OAAQA,GACN,IAAK,QACHA,EAAS,EACT,MACF,IAAK,OACHA,EAASa,EAAyB,EAAIA,EAAyB,EAAI,EACnE,MACF,IAAK,OACHb,EACEa,EACAjB,KAAKC,KAAKe,EAAoBE,GAC1BD,EAAyB,EACzBjB,KAAKC,KAAKe,EAAoBE,GACpC,MACF,IAAK,OACHd,EAASJ,KAAKC,KAAKe,EAAoBE,GAM3CC,EAAgBf,S,qCCxFL,YAACtM,GAId,IAkBMU,EAAQC,OAAOC,OAlBN,CACbwE,UAAW,cACXD,QAAS,eACT6J,QAAS,KACTC,YAAa,KACbC,aAAa,EACbC,cAAc,EACdC,aAAc,KACdhE,cAAe,KACfiE,aAAc,KACdC,uBAAwB,KACxBC,sBAAuB,KACvBC,cAAe,MAMqBxP,GAK9ByP,EAAwB/O,EAAM+C,cAA9BgM,oBACAC,EAA2BhP,EAAMgF,cAAjCgK,uBA5Be,EA6B4BhP,EAAMiD,gBAAjDD,EA7Be,EA6BfA,YAAa8J,EA7BE,EA6BFA,cAAeD,EA7Bb,EA6BaA,WA7Bb,EAmCW3J,mBAASlD,EAAM4N,OAnC1B,mBAmChBqB,EAnCgB,KAmCLC,EAnCK,KAoCjBC,EAAe5J,iBAAO6J,KAAEC,UAAS,SAACC,GAAD,OAAOC,EAAUD,KAAI,MAAO7J,QAK3DrC,EAAMC,YAAe,CAACrD,EAAM0E,YAA5BtB,EAEFmG,EAAW,SAACiG,GAEhBN,EAAaM,EAAEC,OAAO7H,OACtBuH,EAAaK,EAAEC,OAAO7H,QAGlB8H,EAAU,WAEd,IAAI7M,EAAO,GAGX,OAFAA,EAAK2K,WAAaxN,EAAMsO,QACxBzL,EAAK8M,eAAiB3P,EAAMuO,YACrBvL,EAAY,CAAES,IAAK,qBAAsBZ,UAG5C0M,EAAY,SAACJ,GAEjB,IAAMS,EAAKb,EACXa,EAAG5P,EAAM0F,IAAIkI,MAAQuB,EACrBH,EAAuBa,KAAKC,UAAUF,IACtC,IAAI/M,EAAO,GAKX,OAJAA,EAAK2K,WAAaxN,EAAMsO,QACxBzL,EAAK8M,eAAiB3P,EAAMuO,YAC5B1L,EAAK+K,MAAQuB,EAENnM,EAAY,CAAES,IAAKzD,EAAMyE,QAAS5B,UAyF3C,OAAO,oCAnFQ,WACb,IAAMkN,EAAa,qBAAiB/P,EAAMG,KAC1C,OACE,kBAAC6P,EAAA,EAAD,CAAO7P,IAAKH,EAAMG,IAAKuP,QAASA,EAASvO,MAAO,CAAE8O,SAAU,SAC1D,kBAACD,EAAA,EAAM3P,OAAP,CAAcmO,YAAaxO,EAAMwO,aAC/B,4BAAQlO,UAAU,WACfN,EAAMkQ,UADT,IACqBlQ,EAAMmQ,SAAU,IACnC,+BACE,kBAACC,EAAA,EAAD,CACE1J,QAAQ,EACR2J,SAAS,QACTlP,MAAO,CAAEC,MAAO,mBAItB,+BACE,0BAAMsE,GAAIqK,GAAgBd,GAD5B,IAC+C7L,EAAE,YAGnD,kBAAC4M,EAAA,EAAM1O,KAAP,KACE,kBAACyH,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKE,MAAN,CAAYC,UAAU,aACpB,6BACGlJ,EAAM2N,MAAM/M,KAAI,SAAC4F,EAAMrG,GACtB,OACE,0BAAMA,IAAKA,GACT,kBAACiO,EAAA,EAAD,CAAOC,MAAI,EAAC5N,QAAQ,aACjB+F,GACM,UAOlBxG,EAAMyO,cACL,kBAAC1F,EAAA,EAAKE,MAAN,CAAYC,UAAU,kBACpB,kBAACH,EAAA,EAAKO,QAAN,CACErD,KAAK,QACLxF,QAAQ,QAER6P,aAAcrB,EAEdtE,IAAK,EACLC,IAAK,IACL2F,KAAM,EAENhH,SAAUA,MAKlB,8BAC0B,OAAvBvJ,EAAM0O,cAAyB5B,EAAc9M,EAAM0O,cAAe,IAC1C,OAAxB1O,EAAM0K,eAA0B1K,EAAM0K,cAAe,IAC7B,OAAxB1K,EAAM0K,eAAiD,OAAvB1K,EAAM2O,cACrC,8CAEsB,OAAvB3O,EAAM2O,cAAyB3O,EAAM2O,aAAc,KAE7B,OAAxB3O,EAAM8O,eACL,oCACE,6BACCjC,EAAW7M,EAAM8O,cAAe,CAC/B0B,MAAO,OACPC,IAAK,UACLC,KAAM,aAGT,KACgC,OAAjC1Q,EAAM4O,wBAC0B,OAAhC5O,EAAM6O,wBAAmC,6BACT,OAAjC7O,EAAM4O,wBACL5O,EAAM4O,uBAAwB,IACC,OAAhC5O,EAAM6O,uBAAkC7O,EAAM6O,sBAAuB,MASpEvC,KCjJG,YAAChN,GAId,IAQMU,EAAQC,OAAOC,OARN,CACbuE,QAAS,aACTC,UAAW,UAMyBpF,GAZf,EAwBnBU,EAAM+C,cANR4N,EAlBqB,EAkBrBA,OACAC,EAnBqB,EAmBrBA,YACAC,EApBqB,EAoBrBA,iBACAC,EArBqB,EAqBrBA,cAEAjK,EAvBqB,EAuBrBA,SAOAkK,EAIE/Q,EAAMiD,gBAJR8N,UAUM3N,EAAMC,YAAe,CAACrD,EAAM0E,YAA5BtB,EAmCJ2J,EAAM,EAKV,OACE,oCACc,OAAX4D,GACCA,EAAO/P,KAAI,SAACgN,EAAOoD,GACjBjE,IAD+B,IAS7BI,EAmBES,EAnBFT,eACA8D,EAkBErD,EAlBFqD,gBACAC,EAiBEtD,EAjBFsD,eAIA1D,EAaEI,EAbFJ,WAIAC,EASEG,EATFH,cACAkC,EAQE/B,EARF+B,eACAwB,EAOEvD,EAPFuD,eAEAtD,EAKED,EALFC,eACAuD,EAIExD,EAJFwD,aACAC,EAGEzD,EAHFyD,aAKIrD,EAA4B,OAAjBoD,EAAwBA,EAAarJ,MAAM,KAAO,GAOnE,OACE,kBAACuJ,GAAD,iBACMhS,EADN,CAEEa,IAAK6Q,EACLtL,GAAIsL,EACJzC,YAAaoB,EACbrB,QAASd,EACT0C,UAAWrJ,EAASqJ,UACpBC,SAAUtJ,EAASsJ,SACnBvC,MAAOyD,EACP1D,MAAOK,EACPQ,aAAa,EACbC,cAAc,EACdC,aAAcb,EACde,uBAAwBqC,EACxBpC,sBAAuBqC,EACvBxG,cAAeyC,EACfwB,aAAclB,EACdqB,cAAeqC,QAKd,IAARpE,GAAa,uBAAGzM,UAAU,0BAA0B8C,EAAE,cAEvD,kBAAC,EAAD,iBACM9D,EADN,CAEEiM,MAAOC,KAAKC,KAAKmF,EAAcE,GAC/BzF,OAAQwF,EACR3P,QAnGe,SAAC0K,GAEpB,OADA9F,QAAQC,IAAI,iBAAkB6F,GACtBA,GACN,IAAK,QACHA,EAAS,EACT,MACF,IAAK,OACHA,EAASiF,EAAmB,EAAIA,EAAmB,EAAI,EACvD,MACF,IAAK,OACHjF,EACEiF,EAAmBrF,KAAKC,KAAKmF,EAAcE,GACvCD,EAAmB,EACnBrF,KAAKC,KAAKmF,EAAcE,GAC9B,MACF,IAAK,OACHlF,EAASJ,KAAKC,KAAKmF,EAAcE,GAMrCC,EAAUnF,SCtFC,YAACtM,GAOd,IAKMU,EAAQC,OAAOC,OALN,GAKuBZ,GAZf,EAsBnBU,EAAM+C,cAJR8D,EAlBqB,EAkBrBA,SACAD,EAnBqB,EAmBrBA,cACA2K,EApBqB,EAoBrBA,cApBqB,EA2BnBvR,EAAMgF,cAHRwM,EAxBqB,EAwBrBA,eACAC,EAzBqB,EAyBrBA,cACAC,EA1BqB,EA0BrBA,iBA1BqB,EAiCnB1R,EAAMiD,gBAJR2J,EA7BqB,EA6BrBA,OACA+E,EA9BqB,EA8BrBA,eACAhF,EA/BqB,EA+BrBA,gBACAoE,EAhCqB,EAgCrBA,UAMM3N,EAAMC,YAAe,WAArBD,EAMFwO,EAAiB/K,EAejBgL,EAAwB,SAAC5L,GAG7BuL,EAAevL,GACfwL,EAAc,cAIVK,EACe,OAAnBF,EACIhF,EACEgF,EAAeG,SACbH,EAAeI,SACfJ,EAAeK,UAEnB,KACFF,EACiB,OAAnBH,EAA0BhF,EAAOgF,EAAeG,UAAY,KAC1DC,EACiB,OAAnBJ,EAA0BhF,EAAOgF,EAAeI,UAAY,KAC1DC,EACiB,OAAnBL,EAA0BhF,EAAOgF,EAAeK,UAAY,KAWxC,OAAlBrL,GAAwB6K,EAAc,aAoB1C,OACE,oCACE,kBAACS,EAAA,EAAD,CAAWxR,iBAAkB6Q,GAC3B,kBAAC,IAAD,KACE,kBAACW,EAAA,EAAUC,OAAX,CACE9L,GAAI+L,IAAK/R,OACTgS,SAAS,UACTlR,MAAO,CACLmR,OAAQ,WAGVpR,QA7BY,WAEpBwQ,EAAiB,WACjBC,MA4BSvO,EAAE,YAGL,kBAAC8O,EAAA,EAAUK,SAAX,CAAoBF,SAAS,WAC3B,kBAAC,IAAK/Q,KAAN,KACE,kBAACyH,EAAA,EAAD,CAAMC,YAAU,GACd,kBAACD,EAAA,EAAKE,MAAN,KACE,kBAACF,EAAA,EAAKI,MAAN,KAAa/F,EAAE,cACf,kBAAC2F,EAAA,EAAKK,KAAN,KACE,yBAAKjI,MAAO,CAAEkP,SAAU,QAAUyB,KAGtC,kBAAC/I,EAAA,EAAKE,MAAN,KACE,wBAAI3I,UAAU,cACZ,wBAAIA,UAAU,qEACZ,yBAAKa,MAAO,IAAKiC,EAAE,oBACnB,0BACE9C,UAAU,OACVY,QAAS,kBAAM2Q,EAAsB,cAErC,kBAACzD,EAAA,EAAD,CAAO3N,QAAQ,SAASsR,GAJ1B,OAME,kBAAC,IAAD,CAAqB5Q,MAAO,CAAEC,MAAO,mBAGzC,wBAAId,UAAU,qEACZ,yBAAKa,MAAO,IAAKiC,EAAE,mBAEnB,0BACE9C,UAAU,OACVY,QAAS,kBAAM2Q,EAAsB,cAErC,kBAACzD,EAAA,EAAD,CAAO3N,QAAQ,SAASuR,GAJ1B,OAME,kBAAC,IAAD,CAAqB7Q,MAAO,CAAEC,MAAO,mBAGzC,wBAAId,UAAU,qEACZ,yBAAKa,MAAO,IAAKiC,EAAE,oBACnB,0BACE9C,UAAU,OACVY,QAAS,kBAAM2Q,EAAsB,cAErC,kBAACzD,EAAA,EAAD,CAAO3N,QAAQ,SAASwR,GAJ1B,OAME,kBAAC,IAAD,CAAqB9Q,MAAO,CAAEC,MAAO,yBAUrD,kBAAC,IAAD,KACE,kBAAC8Q,EAAA,EAAUC,OAAX,CACE9L,GAAI+L,IAAK/R,OACTgS,SAAS,eACTlR,MAAO,CAAEmR,OAAQ,WACjBpR,QArFiB,WAEzBwQ,EAAiB,gBACjB/E,EAAgB,KAoFPvJ,EAAE,iBAGL,kBAAC8O,EAAA,EAAUK,SAAX,CAAoBF,SAAS,gBAC3B,kBAAC,IAAK/Q,KAAN,KACE,kBAACkR,EAAiBlT,MAKxB,kBAAC,IAAD,KACE,kBAAC4S,EAAA,EAAUC,OAAX,CACE9L,GAAI+L,IAAK/R,OACTgS,SAAS,SACTlR,MAAO,CAAEmR,OAAQ,WACjBpR,QAhGW,WAEnBwQ,EAAiB,UACjBX,EAAU,KA+FD3N,EAAE,WAGL,kBAAC8O,EAAA,EAAUK,SAAX,CAAoBF,SAAS,UAC3B,kBAAC,IAAK/Q,KAAN,KACE,kBAACmR,GAAWnT,SCrNX,eAMR,IALLA,EAKI,EALJA,KACAE,EAII,EAJJA,MACAC,EAGI,EAHJA,WACAkB,EAEI,EAFJA,2BACAZ,EACI,EADJA,kBAaMC,EAAQC,OAAOC,OARN,CACbuE,QAAS,eACTC,UAAW,YAMyBpF,GAZlC,EA0BAU,EAAM+C,cALR8D,EArBE,EAqBFA,SACAD,EAtBE,EAsBFA,cACA8L,EAvBE,EAuBFA,YACAC,EAxBE,EAwBFA,SACAC,EAzBE,EAyBFA,aAzBE,EAkCA5S,EAAMiD,gBALR2J,EA7BE,EA6BFA,OACAiG,EA9BE,EA8BFA,kBACA7P,EA/BE,EA+BFA,YACA8D,EAhCE,EAgCFA,WACAC,EAjCE,EAiCFA,aAMM3D,EAAMC,YAAe,CAACrD,EAAM0E,YAA5BtB,EAOF4D,EAASC,IAAW,CACxB6L,YAAa7L,MAAaE,SAAS/D,EAAE,6BACrC2P,UAAW9L,MAAaE,SAAS/D,EAAE,2BACnC4P,OAAQ/L,MAELE,SAAS/D,EAAE,uBACXkE,QAAQ,IAAIC,OAAOnE,EAAE,iBAAkBA,EAAE,0BAG1C2O,EAAW,GACXC,EAAW,GACXC,EAAW,GACE,OAAbpL,IACFkL,EAAW,KAAOnF,EAAO/F,EAASkL,UAAY,IAC9CC,EAAW,KAAOpF,EAAO/F,EAASmL,UAAY,IAC9CC,EAAW,KAAOrF,EAAO/F,EAASoL,UAAY,KA4IhD,OACE,kBAAC,IAAD,CACE5J,UApHuB,SAAC,GAAD,IACzBC,EADyB,EACzBA,aACAC,EAFyB,EAEzBA,aAEAC,GAJyB,EAGzBC,WAHyB,EAIzBD,QACAE,EALyB,EAKzBA,QAGAC,GARyB,EAMzBC,QANyB,EAOzBC,aAPyB,EAQzBF,QARyB,OAUzB,kBAAC,EAAD,CACEnJ,MAAOA,EACPC,WAAYA,EACZkB,2BAA4BA,EAC5BZ,kBAAmBA,GAEnB,kBAACgJ,EAAA,EAAD,CAAMC,YAAU,EAAClE,SAAUwD,GACzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,yBACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,iBACf,kBAAC2F,EAAA,EAAKO,QAAN,CACEjD,GAAG,SACH4M,QAAM,EACN5R,KAAK,cACLkI,SAAUhB,EACViB,YAAab,EAAOmK,aAAepK,EAAQoK,aAE3C,4BAAQlL,MAAM,IAAIxE,EAAE,cACpB,4BACEwE,MAAM,WACNlB,OAAwB,OAAhBgM,GAAwC,aAAhBA,GAE/BtP,EAAE,mBACF2O,GAEH,4BACEnK,MAAM,WACNlB,OAAwB,OAAhBgM,GAAwC,aAAhBA,GAE/BtP,EAAE,kBACF4O,GAEH,4BACEpK,MAAM,WACNlB,OAAwB,OAAhBgM,GAAwC,aAAhBA,GAE/BtP,EAAE,mBACF6O,IAGL,kBAAClJ,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOmK,cAGZ,kBAAC/J,EAAA,EAAKE,MAAN,CAAYC,UAAU,uBACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,eACf,kBAAC2F,EAAA,EAAKO,QAAN,CACEjD,GAAG,SACH4M,QAAM,EACN5R,KAAK,YACLkI,SAAUhB,EACViB,YAAab,EAAOoK,WAAarK,EAAQqK,WAEzC,4BAAQnL,MAAM,IAAIxE,EAAE,cACpB,4BAAQwE,MAAM,WAAWlB,OAAwB,aAAhBgM,GAC9BtP,EAAE,mBACF2O,GAEH,4BAAQnK,MAAM,WAAWlB,OAAwB,aAAhBgM,GAC9BtP,EAAE,kBACF4O,GAEH,4BAAQpK,MAAM,WAAWlB,OAAwB,aAAhBgM,GAC9BtP,EAAE,mBACF6O,IAGL,kBAAClJ,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOoK,YAGZ,kBAAChK,EAAA,EAAKE,MAAN,CAAYC,UAAU,0BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,WACf,kBAACsG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWN,KAAZ,CAAiB1D,GAAG,qBACjBkN,IAGL,kBAAC7J,EAAA,EAAKO,QAAN,CAEEM,YAAagD,EAAO,EAAG,IACvB/C,mBAAiB,oBACjBxI,KAAK,SACLuG,MAAOY,EAAOwK,OACdzJ,SAAUhB,EAEViB,YAAab,EAAOqK,QAAUtK,EAAQsK,SAExC,kBAACjK,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOqK,UAKd,kBAAC/I,EAAD,iBACM3K,EADN,CAEEkF,QAASpB,EAAE,UACXqB,QAAQ,eACRC,UAAW1E,EAAM0E,gBASrBwF,iBAAkBlD,EAClBlC,SA1Ha,SAACjC,IAfK,SAACA,GAEtBA,EAAKsH,QAAUrD,IACfjE,EAAKuH,UAAYrD,IACjBlE,EAAKoI,IAAMrE,EACX/D,EAAKmQ,OAASH,EAAkBhQ,EAAKmQ,OAAQL,GAC7C9P,EAAKmQ,OAAS,IAAIE,KAAKC,aAAa,QAAS,CAC3CC,SAAU,WACVC,sBAAuB,IACtBzG,OAAO/J,EAAKmQ,QAGfhQ,EAAY,CAAES,IAAKzD,EAAMyE,QAAS5B,KAAMA,IAIxCyQ,CAAezQ,IA0Hb0H,cAAe,CACbuI,YAAa,GACbC,UAAW,GACXC,OAAQ,OC7MD,eAMR,IALL1T,EAKI,EALJA,KACAE,EAII,EAJJA,MACAC,EAGI,EAHJA,WACAkB,EAEI,EAFJA,2BACAZ,EACI,EADJA,kBAUMC,EAAQC,OAAOC,OALN,CAAEuE,QAAS,eAAgBC,UAAW,YAKfpF,GATlC,EAqBAU,EAAM+C,cALR8D,EAhBE,EAgBFA,SACAD,EAjBE,EAiBFA,cACA+L,EAlBE,EAkBFA,SACAD,EAnBE,EAmBFA,YACAE,EApBE,EAoBFA,aApBE,EA6BA5S,EAAMiD,gBALR2J,EAxBE,EAwBFA,OACAiG,EAzBE,EAyBFA,kBACA7P,EA1BE,EA0BFA,YACA8D,EA3BE,EA2BFA,WACAC,EA5BE,EA4BFA,aAOM3D,EAAMC,YAAe,CAACrD,EAAM0E,YAA5BtB,EAUF4D,EAASC,IAAW,CACxB6L,YAAa7L,MAAaE,SAAS/D,EAAE,6BACrCmQ,aAActM,MAEXE,SAAS/D,EAAE,uCACXkE,QACC,IAAIC,OAAOnE,EAAE,sBACbA,EAAE,6BAEN4P,OAAQ/L,MAELE,SAAS/D,EAAE,uBACXkE,QAAQ,IAAIC,OAAOnE,EAAE,iBAAkBA,EAAE,0BAG1C2O,EAAW,GACXC,EAAW,GACXC,EAAW,GACE,OAAbpL,IACFkL,EAAW,KAAOnF,EAAO/F,EAASkL,UAAY,IAC9CC,EAAW,KAAOpF,EAAO/F,EAASmL,UAAY,IAC9CC,EAAW,KAAOrF,EAAO/F,EAASoL,UAAY,KAwJhD,OACE,kBAAC,IAAD,CACE5J,UA9HyB,SAAC,GAAD,IAC3BC,EAD2B,EAC3BA,aACAC,EAF2B,EAE3BA,aAEAC,GAJ2B,EAG3BC,WAH2B,EAI3BD,QACAE,EAL2B,EAK3BA,QAEAC,GAP2B,EAM3BC,QAN2B,EAO3BD,QAP2B,OAS3B,kBAAC,EAAD,CACEnJ,MAAOA,EACPC,WAAYA,EACZkB,2BAA4BA,EAC5BZ,kBAAmBA,GAEnB,kBAACgJ,EAAA,EAAD,CAAMC,YAAU,EAAClE,SAAUwD,GAEzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,yBACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,iBACf,kBAAC2F,EAAA,EAAKO,QAAN,CACEjD,GAAG,SACH4M,QAAM,EACN5R,KAAK,cACLkI,SAAUhB,EACViB,YAAab,EAAOmK,aAAepK,EAAQoK,aAE3C,4BAAQlL,MAAM,IAAIxE,EAAE,cACpB,4BACEwE,MAAM,WACNlB,OAAwB,OAAhBgM,GAAwC,aAAhBA,GAE/BtP,EAAE,mBACF2O,GAEH,4BACEnK,MAAM,WACNlB,OAAwB,OAAhBgM,GAAwC,aAAhBA,GAE/BtP,EAAE,kBACF4O,GAEH,4BACEpK,MAAM,WACNlB,OAAwB,OAAhBgM,GAAwC,aAAhBA,GAE/BtP,EAAE,mBACF6O,IAGL,kBAAClJ,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOmK,cAKZ,kBAAC/J,EAAA,EAAKE,MAAN,CAAYC,UAAU,gCACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,mBACf,kBAACsG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWN,KAAZ,CAAiB1D,GAAG,qBAApB,OAEF,kBAACqD,EAAA,EAAKO,QAAN,CACErD,KAAK,OACL2D,YAAY,eACZC,mBAAiB,oBACjBxI,KAAK,eACLuG,MAAOY,EAAO+K,aACdhK,SAAUhB,EACViB,YAAab,EAAO4K,cAAgB7K,EAAQ6K,eAE9C,kBAACxK,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAO4K,gBAMd,kBAACxK,EAAA,EAAKE,MAAN,CACEC,UAAU,cACV7H,KAAK,cACLuG,MAAOY,EAAOgL,YACdjK,SAAUhB,GAEV,kBAACQ,EAAA,EAAKI,MAAN,KAAa/F,EAAE,gBACf,kBAAC2F,EAAA,EAAKO,QAAN,CAAcjD,GAAG,WAAW2E,KAAK,OAInC,kBAACjC,EAAA,EAAKE,MAAN,CAAYC,UAAU,0BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,WACf,kBAACsG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWN,KAAZ,CAAiB1D,GAAG,qBACjBkN,IAGL,kBAAC7J,EAAA,EAAKO,QAAN,CAEEM,YAAagD,EAAO,EAAG,IACvB/C,mBAAiB,oBACjBxI,KAAK,SACLuG,MAAOY,EAAOwK,OACdzJ,SAAUhB,EAEViB,YAAab,EAAOqK,QAAUtK,EAAQsK,SAExC,kBAACjK,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOqK,UAOd,kBAAC/I,EAAD,iBACM3K,EADN,CAEEkF,QAASpB,EAAE,UACXqB,QAASzE,EAAMyE,QACfC,UAAW1E,EAAM0E,gBASrBwF,iBAAkBlD,EAClBlC,SApIa,SAACjC,IAjBO,SAACA,GAExBA,EAAKsH,QAAUrD,IACfjE,EAAKuH,UAAYrD,IACjBlE,EAAKoI,IAAMrE,EACX/D,EAAKmQ,OAASH,EAAkBhQ,EAAKmQ,OAAQL,GAC7C9P,EAAKmQ,OAAS,IAAIE,KAAKC,aAAa,QAAS,CAC3CC,SAAU,WACVC,sBAAuB,IACtBzG,OAAO/J,EAAKmQ,QAEfhQ,EAAY,CAAES,IAAKzD,EAAMyE,QAAS5B,KAAMA,IAOxC4Q,CAAiB5Q,IAoIf0H,cAAe,CACbuI,YAAa,GACbS,aAAc,GACdP,OAAQ,GACRQ,YAAa,OCnPN,eAMR,IALLlU,EAKI,EALJA,KACAE,EAII,EAJJA,MACAC,EAGI,EAHJA,WACAkB,EAEI,EAFJA,2BACAZ,EACI,EADJA,kBAUMC,EAAQC,OAAOC,OALN,CAAEuE,QAAS,eAAgBC,UAAW,YAKfpF,GATlC,EAuBAU,EAAM+C,cALR8D,EAlBE,EAkBFA,SACAD,EAnBE,EAmBFA,cACA+L,EApBE,EAoBFA,SACAD,EArBE,EAqBFA,YACAE,EAtBE,EAsBFA,aAtBE,EA+BA5S,EAAMiD,gBALR2J,EA1BE,EA0BFA,OACAiG,EA3BE,EA2BFA,kBACA7P,EA5BE,EA4BFA,YACA8D,EA7BE,EA6BFA,WACAC,EA9BE,EA8BFA,aAMM3D,EAAMC,YAAe,CAACrD,EAAM0E,YAA5BtB,EAOF4D,EAASC,IAAW,CACxB6L,YAAa7L,MAAaE,SAAS/D,EAAE,6BAIrCsQ,UAAWzM,MAAaE,SAAS/D,EAAE,2BACnC4P,OAAQ/L,MAELE,SAAS/D,EAAE,uBACXkE,QAAQ,IAAIC,OAAOnE,EAAE,iBAAkBA,EAAE,0BAG1C2O,EAAW,GACXC,EAAW,GACXC,EAAW,GACE,OAAbpL,IACFkL,EAAW,KAAOnF,EAAO/F,EAASkL,UAAY,IAC9CC,EAAW,KAAOpF,EAAO/F,EAASmL,UAAY,IAC9CC,EAAW,KAAOrF,EAAO/F,EAASoL,UAAY,KAuKhD,OACE,kBAAC,IAAD,CACE5J,UA7I2B,SAAC,GAAD,IAC7BC,EAD6B,EAC7BA,aACAC,EAF6B,EAE7BA,aAEAC,GAJ6B,EAG7BC,WAH6B,EAI7BD,QACAE,EAL6B,EAK7BA,QAEAC,GAP6B,EAM7BC,QAN6B,EAO7BD,QAP6B,OAS7B,kBAAC,EAAD,CACEnJ,MAAOA,EACPC,WAAYA,EACZkB,2BAA4BA,EAC5BZ,kBAAmBA,GAGnB,kBAACgJ,EAAA,EAAD,CAAMC,YAAU,EAAClE,SAAUwD,GACzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,yBACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,iBACf,kBAAC2F,EAAA,EAAKO,QAAN,CACEjD,GAAG,SACH4M,QAAM,EACN5R,KAAK,cACLkI,SAAUhB,EACViB,YAAab,EAAOmK,aAAepK,EAAQoK,aAE3C,4BAAQlL,MAAM,IAAIxE,EAAE,cACpB,4BACEwE,MAAM,WACNlB,OAAwB,OAAhBgM,GAAwC,aAAhBA,GAE/BtP,EAAE,mBACF2O,GAEH,4BACEnK,MAAM,WACNlB,OAAwB,OAAhBgM,GAAwC,aAAhBA,GAE/BtP,EAAE,kBACF4O,GAEH,4BACEpK,MAAM,WACNlB,OAAwB,OAAhBgM,GAAwC,aAAhBA,GAE/BtP,EAAE,mBACF6O,IAGL,kBAAClJ,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOmK,cAyBZ,kBAAC/J,EAAA,EAAKE,MAAN,CAAYC,UAAU,wCACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,kBACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAK,OACL2D,YAAY,GACZC,mBAAiB,oBACjBxI,KAAK,YACLuG,MAAOY,EAAOkL,UACdnK,SAAUhB,EACViB,YAAab,EAAO+K,WAAahL,EAAQgL,YAE3C,kBAAC3K,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAO+K,aAMd,kBAAC3K,EAAA,EAAKE,MAAN,CACEC,UAAU,cACV7H,KAAK,cACLuG,MAAOY,EAAOgL,YACdjK,SAAUhB,GAEV,kBAACQ,EAAA,EAAKI,MAAN,KAAa/F,EAAE,gBACf,kBAAC2F,EAAA,EAAKO,QAAN,CAAcjD,GAAG,WAAW2E,KAAK,OAInC,kBAACjC,EAAA,EAAKE,MAAN,CAAYC,UAAU,0BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,WACf,kBAACsG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWN,KAAZ,CAAiB1D,GAAG,qBACjBkN,IAGL,kBAAC7J,EAAA,EAAKO,QAAN,CACErD,KAAK,SACL2D,YAAagD,EAAO,EAAG,IACvB/C,mBAAiB,oBACjBxI,KAAK,SACLuG,MAAOY,EAAOwK,OACdzJ,SAAUhB,EACViB,YAAab,EAAOqK,QAAUtK,EAAQsK,SAExC,kBAACjK,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOqK,UAMd,kBAAC/I,EAAD,iBACM3K,EADN,CAEEkF,QAASpB,EAAE,UACXqB,QAASzE,EAAMyE,QACfC,UAAW1E,EAAM0E,gBASrBwF,iBAAkBlD,EAClBlC,SAnJa,SAACjC,IAjBS,SAACA,GAC1BA,EAAKsH,QAAUrD,IACfjE,EAAKuH,UAAYrD,IACjBlE,EAAKoI,IAAMrE,EACX/D,EAAK8Q,SAAWf,EAChB/P,EAAKmQ,OAASH,EAAkBhQ,EAAKmQ,OAAQL,GAC7C9P,EAAKmQ,OAAS,IAAIE,KAAKC,aAAa,QAAS,CAC3CC,SAAU,WACVC,sBAAuB,IACtBzG,OAAO/J,EAAKmQ,QAIfhQ,EAAY,CAAES,IAAKzD,EAAMyE,QAAS5B,KAAMA,IAKxC+Q,CAAmB/Q,IAmJjB0H,cAAe,CACbuI,YAAa,GACbY,UAAW,GACXV,OAAQ,GACRQ,YAAa,O,wCCpPN,YAAClU,GAId,IAKMU,EAAQC,OAAOC,OALN,CAAE2T,WAAY,MAKSvU,GAIhCwU,EAAU9T,EAAM6C,KACdgR,EAAe7T,EAAf6T,WAde,EAqBcC,EAAQ7Q,gBAArC6D,EArBe,EAqBfA,WAAYC,EArBG,EAqBHA,aACZgN,EAA0BD,EAAQtJ,oBAAlCuJ,sBAIA3Q,EAAMC,YAAe,CAAC,wBAAtBD,EAEF4D,EAASC,IAAW,CACxB0H,aAAc1H,MAEXE,SAAS/D,EAAE,sCACXuH,IAAI,EAAGvH,EAAE,4BACTwH,IAAI,GAAIxH,EAAE,2BACVyH,OACHmJ,mBAAoB/M,MAAa8D,aAoEnC,OACE,kBAAC,IAAD,CACE1C,UAjDwB,SAAC,GAAD,IAC1BC,EAD0B,EAC1BA,aACAC,EAF0B,EAE1BA,aAEAC,GAJ0B,EAG1BC,WAH0B,EAI1BD,QACAE,EAL0B,EAK1BA,QAEAC,GAP0B,EAM1BC,QAN0B,EAO1BD,QAP0B,OAS1B,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAAClE,SAAUwD,GAEzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,6BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,kBACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAK,OACL2D,YAAY,GACZC,mBAAiB,oBACjBxI,KAAK,eACLuG,MAAOY,EAAOmG,aACdpF,SAAUhB,EACViB,YAAab,EAAOgG,cAAgBjG,EAAQiG,eAE9C,kBAAC5F,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOgG,gBAMd,kBAAC5F,EAAA,EAAKE,MAAN,CACEC,UAAU,qBACV7H,KAAK,qBACLuG,MAAOY,EAAOwL,mBACdzK,SAAUhB,GAEV,kBAACQ,EAAA,EAAKI,MAAN,KAAa/F,EAAE,wBACf,kBAAC2F,EAAA,EAAKO,QAAN,CAAcjD,GAAG,WAAW2E,KAAK,OAInC,kBAAChF,EAAA,EAAD,CAAQC,KAAK,SAASC,OAAK,GACxB9C,EAAE,aAQL8G,iBAAkBlD,EAClBlC,SAvDa,SAACjC,IAVM,SAACA,GACvBA,EAAKsH,QAAUrD,IACfjE,EAAKuH,UAAYrD,IACjBlE,EAAKgR,WAAaA,EAIlBE,EAAsB,CAAEtQ,IAAK,mBAAoBZ,KAAMA,IAIvDoR,CAAgBpR,IAuDd0H,cAAe,CACboE,aAAc,GACdqF,mBAAoB,OC7Gb,YAAC1U,GAId,IAQMU,EAAQC,OAAOC,OARN,CACbuE,QAAS,uBACTC,UAAW,2BAMyBpF,GAEhCwU,EAAU9T,EACR0T,EAAc1T,EAAd0T,UAKA9M,EAAkBkN,EAAQ/Q,cAA1B6D,cApBe,EA4BnBkN,EAAQ7Q,gBAHV6D,EAzBqB,EAyBrBA,WACAC,EA1BqB,EA0BrBA,aACA/D,EA3BqB,EA2BrBA,YAMMI,EAAMC,YAAe,CAACrD,EAAM0E,YAA5BtB,EAIF4D,EAASC,IAAW,CACxBI,WAAYJ,MAETE,SAAS/D,EAAE,4BACXkE,QACC,IAAIC,OAAOnE,EAAE,sBACbA,EAAE,6BAEN8Q,iBAAkBjN,MAAa8D,WAC/B4F,OAAQ1J,MAELkN,UAAU/Q,EAAE,4BACZ+D,SAAS/D,EAAE,uBACXuH,IAAI,EAAGvH,EAAE,mBACTwH,IAAI,IAAMxH,EAAE,sBA8GjB,OACE,kBAAC,IAAD,CACEiF,UA7F4B,SAAC,GAAD,IAC9BC,EAD8B,EAC9BA,aACAC,EAF8B,EAE9BA,aAEAC,GAJ8B,EAG9BC,WAH8B,EAI9BD,QACAE,EAL8B,EAK9BA,QAEAC,GAP8B,EAM9BC,QAN8B,EAO9BD,QAP8B,OAS9B,kBAACI,EAAA,EAAD,CAAMrD,GAAG,8BAA8BsD,YAAU,EAAClE,SAAUwD,GAC1D,kBAAC0H,EAAA,EAAD,CAAO7O,MAAO,CAAE8O,SAAU,SAMxB,kBAACD,EAAA,EAAM1O,KAAP,KACE,kBAACyH,EAAA,EAAKE,MAAN,CAAYC,UAAU,yCACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,4BACf,kBAACsG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWN,KAAZ,CAAiB1D,GAAG,qBAApB,OAEF,kBAACqD,EAAA,EAAKO,QAAN,CACErD,KAAK,OACL2D,YAAaxG,EAAE,gBACfyG,mBAAiB,oBACjBxI,KAAK,aACLuG,MAAOY,EAAOnB,WACdkC,SAAUhB,EACViB,YAAab,EAAOtB,YAAcqB,EAAQrB,aAE5C,kBAAC0B,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOtB,cAKd,kBAAC0B,EAAA,EAAKE,MAAN,CAAYC,UAAU,oCACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,sBACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAK,OACL2D,YAAY,GACZC,mBAAiB,oBACjBxI,KAAK,mBACLuG,MAAOY,EAAO0L,iBACd3K,SAAUhB,EACViB,YACIb,EAAOuL,kBAAoBxL,EAAQwL,mBAGzC,kBAACnL,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOuL,oBAMd,kBAACnL,EAAA,EAAKE,MAAN,CAAYC,UAAU,oCACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,WACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAK,SACL0E,IAAK,EACLC,IAAK,IACL2F,KAAM,EACN3G,YAAY,GACZC,mBAAiB,oBACjBxI,KAAK,SACLuG,MAAOY,EAAOmI,OACdpH,SAAUhB,EACViB,YAAab,EAAOgI,QAAUjI,EAAQiI,SAExC,kBAAC5H,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOgI,UAKd,kBAAC1G,EAAD,iBACM3K,EADN,CAEEkF,QAASpB,EAAE,UACXqB,QAASzE,EAAMyE,QACfC,UAAW1E,EAAM0E,iBAUvBwF,iBAAkBlD,EAClBlC,SA3Ga,SAACjC,GAChBA,EAAKsH,QAAUrD,IACfjE,EAAKuH,UAAYrD,IACjBlE,EAAKoI,IAAMrE,EACX/D,EAAK6Q,UAAYA,EAKjB1Q,EAAY,CAAES,IAAKzD,EAAMyE,QAAS5B,KAAMA,KAmGtC0H,cAAe,CACblD,WAAY,GACZsJ,OAAQ,EACRuD,iBAAkB,OCpJX,YAAC5U,GAId,IAKMU,EAAQC,OAAOC,OALN,CAAEwE,UAAW,cAKUpF,GATf,EAkCnBU,EAAM+C,cAfRqR,EAnBqB,EAmBrBA,eACAC,EApBqB,EAoBrBA,gBACAC,EArBqB,EAqBrBA,kBACAC,EAtBqB,EAsBrBA,qBACAC,EAvBqB,EAuBrBA,qBACAC,EAxBqB,EAwBrBA,eACAC,EAzBqB,EAyBrBA,iBACAC,EA1BqB,EA0BrBA,iBACAC,EA3BqB,EA2BrBA,sBACAC,EA5BqB,EA4BrBA,wBACAC,EA7BqB,EA6BrBA,2BACAC,EA9BqB,EA8BrBA,qBACAhG,EA/BqB,EA+BrBA,oBACA4D,EAhCqB,EAgCrBA,SACA/L,EAjCqB,EAiCrBA,cAEM6K,EAAkBzR,EAAMgF,cAAxByM,cAnCe,EAwCnBzR,EAAMiD,gBAHR+R,EArCqB,EAqCrBA,cACAC,EAtCqB,EAsCrBA,oBACAC,EAvCqB,EAuCrBA,uBAIM9R,EAAMC,YAAe,CAACrD,EAAM0E,YAA5BtB,EAERoC,qBAAU,cAIP,IAaH,IAwFI2P,EAAY,GACZC,EAAW,GACXC,EAAoB,EACL,OAAnBjB,GACEnU,OAAOqV,KAAKlB,GAAgBxT,KAAI,SAAC2U,EAAUC,GAoKzC,OAnKAL,EAAUK,GAAe,GACzBJ,EAASI,GAAe,GACH,OAArBb,GACE1U,OAAOqV,KAAKX,GAAkB/T,KAAI,SAAC0N,EAASmH,GA8J1C,OA5JEd,EAAiBrG,GAASoH,cAC1BtB,EAAemB,GAAUG,cAEzBP,EAAUK,GAAaC,GACrB,kBAACzI,EAAA,EAAUlM,KAAX,CACEoN,QAAM,EACN/N,IAAKwU,EAAiBrG,GAASd,WAC/B6E,SAAUsC,EAAiBrG,GAASd,WACpCtM,QAAS,kBAvCD,SAAC,GAA6B,IAA3BmR,EAA0B,EAA1BA,SAAUqB,EAAgB,EAAhBA,UACjCwB,EAAuBxB,EAAWrB,GAuCpBsD,CAAc,CACZtD,SAAUoD,EACV/B,UAAWiB,EAAiBrG,GAASd,eAIzC,0BAAMrM,MAAO,CAAEyU,WAAY,WACzB,kBAACC,GAAA,EAAD,CAAW1U,MAAO,CAAEC,MAAO,iBAAoB,IAC9CuT,EAAiBrG,GAAS9O,QAKjC4V,EAASI,GAAaC,GACpB,kBAACK,GAAA,EAAIC,KAAL,CACE5V,IAAKwU,EAAiBrG,GAASd,WAC/B6E,SAAUsC,EAAiBrG,GAASd,YAEpC,kBAAC0E,EAAA,EAAD,CAAWxR,iBAAiB,gBAE1B,kBAAC,IAAD,CAAMsV,GAAG,SACP,kBAAC9D,EAAA,EAAUC,OAAX,CACE9L,GAAI+L,IAAK/R,OACTc,MAAO,CAAEmR,OAAQ,WACjBD,SAAS,cAERjP,EAAE,eAEL,kBAAC8O,EAAA,EAAUK,SAAX,CAAoBF,SAAS,cAC3B,kBAAC,IAAK/Q,KAAN,KACE,kBAAC,IAAK8H,KAAN,KACGuL,EAAiBrG,GAASd,eAMnC,kBAAC,IAAD,CAAMwI,GAAG,SACP,kBAAC9D,EAAA,EAAUC,OAAX,CACE9L,GAAI+L,IAAK/R,OACTc,MAAO,CAAEmR,OAAQ,WACjBD,SAAS,eAERjP,EAAE,wBAEL,kBAAC8O,EAAA,EAAUK,SAAX,CAAoBF,SAAS,eAC3B,kBAAC,IAAK/Q,KAAN,KACE,kBAAC,IAAK8H,KAAN,KACGuL,EAAiBrG,GAASkF,gBAKnC,kBAAC,IAAD,CAAMwC,GAAG,SACP,kBAAC9D,EAAA,EAAUC,OAAX,CACE9L,GAAI+L,IAAK/R,OACTc,MAAO,CAAEmR,OAAQ,WACjBD,SAAS,gBAERjP,EAAE,yBAIL,kBAAC8O,EAAA,EAAUK,SAAX,CAAoBF,SAAS,gBAC3B,kBAAC,IAAK/Q,KAAN,KACkC,qBAAxByN,GACkB,OAAxBA,GACA9O,OAAOqV,KAAKvG,GAAqBnO,KAC/B,SAAC2N,EAAa0H,GACZ,GACElH,EAAoBR,GAAaf,aACjCmH,EAAiBrG,GAASd,WAC1B,CAAC,IACOA,EAAeuB,EACrBR,GADMf,WADR,EAWIuB,EAAoBR,GANtBoB,EALF,EAKEA,eACAO,EANF,EAMEA,UACAC,EAPF,EAOEA,SAEAxC,EATF,EASEA,MACAC,EAVF,EAUEA,MAGFyH,IAEA,IAAMrH,EACM,OAAVL,EAAiBA,EAAM5F,MAAM,KAAO,GAEtC,OACE,kBAACuJ,GAAD,iBACMhS,EADN,CAEEa,IAAK8V,EACLvQ,GAAIuQ,EACJ1H,YAAaoB,EACbrB,QAASd,EACT0C,UAAWA,EACXC,SAAUA,EACVvC,MAAOA,EACPD,MAAOK,KAIX,MAAO,MAIQ,IAAtBqH,GACC,kBAAC,IAAKjM,KAAN,CAAW9I,UAAU,cAClB8C,EAAE,uBASb,kBAAC,IAAD,CAAM4S,GAAG,SACP,kBAAC9D,EAAA,EAAUC,OAAX,CACE9L,GAAI+L,IAAK/R,OACTc,MAAO,CAAEmR,OAAQ,WACjBD,SAAS,KAET,0BAAMlR,MAAO,CAAEyU,WAAY,WACzB,kBAACM,GAAA,EAAD,CACE7F,SAAS,QACTlP,MAAO,CAAEC,MAAO,iBAHpB,OAKSgC,EAAE,qBAGb,kBAAC8O,EAAA,EAAUK,SAAX,CAAoBF,SAAS,KAC3B,kBAAC,IAAK/Q,KAAN,KACE,kBAAC,GAAD,iBACMhC,EADN,CAEEoU,UAAWiB,EAAiBrG,GAASd,oBASrD6H,EAAoB,GACb,MAEJ,KAGX,IAAMc,EACJ,oCACE,kBAACjE,EAAA,EAAD,CACExR,iBACqB,OAAnB+T,GAA4BD,EAExB,eADAC,GAKN,kBAAC,IAAD,KACE,kBAACvC,EAAA,EAAUC,OAAX,CACE9L,GAAI+L,IAAK/R,OACTgS,SAAS,cACTlR,MAAO,CAAEmR,OAAQ,YAEjB,8BACE,kBAAC4D,GAAA,EAAD,CAAK7F,SAAS,QAAQlP,MAAO,CAAEC,MAAO,iBADxC,OAGGgC,EAAE,kBAGP,kBAAC8O,EAAA,EAAUK,SAAX,CAAoBF,SAAS,eAC3B,kBAAC,IAAK/Q,KAAN,KACE,kBAAC,EAAyBhC,MAMZ,OAAnB8U,GACCnU,OAAOqV,KAAKlB,GAAgBxT,KAAI,SAAC2U,EAAUC,GACzC,IAAMY,EAAO,IAAIC,KAAKjC,EAAemB,GAAUlI,SACzCiJ,EAAgB,IAAIpD,KAAKqD,eAAe5D,GAAU/F,OACtDwJ,GAGF,OACE,kBAAC,IAAD,CAAMjW,IAAKqV,GACT,kBAACtD,EAAA,EAAUC,OAAX,CACE9L,GAAI+L,IAAK/R,OACTgS,SAAUmD,EACVrU,MAAO,CAAEmR,OAAQ,WACjBpR,QAAS,kBA9SF,SAAC,GAA8B,IAA5BmR,EAA2B,EAA3BA,SAAUwB,EAAiB,EAAjBA,WAClCoB,EAAoBpB,EAAYxB,EAAU,GA8S1BmE,CAAe,CACbnE,SAAUmD,EACV3B,WAAYO,EAAemB,GAAUG,gBAIzC,kBAACe,GAAA,EAAD,CAAOtV,MAAO,CAAEC,MAAO,iBAAoB,IAC1CgT,EAAemB,GAAU/V,OAE5B,kBAAC0S,EAAA,EAAUK,SAAX,CAAoBF,SAAUmD,GAC5B,kBAAC,IAAKlU,KAAN,KACE,kBAACwU,GAAA,EAAIY,UAAL,CACEhR,GAAG,oBACHhF,iBAC2B,OAAzBqU,EACIA,EACA,iBAGN,kBAAC4B,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC7J,EAAA,EAAD,CAAWvM,QAAQ,SAEjB,kBAACuM,EAAA,EAAUlM,KAAX,CAAgBoN,QAAM,EAACmE,SAAS,iBAC7BjP,EAAE,UAIL,kBAAC4J,EAAA,EAAUlM,KAAX,CAAgBoN,QAAM,EAACmE,SAAS,cAC9B,0BAAMlR,MAAO,CAAEyU,WAAY,WACzB,kBAACM,GAAA,EAAD,CACE7F,SAAS,QACTlP,MAAO,CAAEC,MAAO,iBAHpB,OAKSgC,EAAE,iBAKZ+R,EAAUK,IAIc,OAA1BZ,GACC,oCACE,6BACA,kBAAC,EAAD,iBACMtV,EADN,CAEEiH,KAAK,KACL4E,WAAYyJ,EACZxJ,aAAcyJ,EACdxJ,OAAQyJ,EACR5T,QAAS,SAAC0K,GAAD,OACPqJ,EACEP,EACA,EACA9I,SASZ,kBAACgL,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACf,GAAA,EAAIgB,QAAL,KACE,kBAAChB,GAAA,EAAIC,KAAL,CAAU1D,SAAS,iBACjB,kBAACH,EAAA,EAAD,CAAWxR,iBAAiB,cAuB1B,kBAAC,IAAD,KACE,kBAACwR,EAAA,EAAUC,OAAX,CACE9L,GAAI+L,IAAK/R,OACTc,MAAO,CAAEmR,OAAQ,WACjBD,SAAS,cAERjP,EAAE,gBAEL,kBAAC8O,EAAA,EAAUK,SAAX,CAAoBF,SAAS,cAC3B,kBAAC,IAAD,CAAM0E,OAAO,SACX,kBAAC,IAAKzV,KAAN,KACE,kBAAC,IAAK8H,KAAN,KACGgL,EAAemB,GAAUG,iBAQpC,kBAAC,IAAD,KACE,kBAACxD,EAAA,EAAUC,OAAX,CACE9L,GAAI+L,IAAK/R,OACTc,MAAO,CAAEmR,OAAQ,WACjBD,SAAS,uBAERjP,EAAE,yBAEL,kBAAC8O,EAAA,EAAUK,SAAX,CAAoBF,SAAS,uBAC3B,kBAAC,IAAD,CAAM0E,OAAO,SACX,kBAAC,IAAKzV,KAAN,KACE,kBAAC,IAAK8H,KAAN,KACGgL,EAAemB,GAAU/B,iBAQpC,kBAAC,IAAD,KACE,kBAACtB,EAAA,EAAUC,OAAX,CACE9L,GAAI+L,IAAK/R,OACTc,MAAO,CAAEmR,OAAQ,WACjBD,SAAS,wBAERjP,EAAE,qBAEL,kBAAC8O,EAAA,EAAUK,SAAX,CAAoBF,SAAS,wBAC3B,kBAAC,IAAD,CAAM0E,OAAO,SACX,kBAAC,IAAKzV,KAAN,KACE,kBAAC,IAAK8H,KAAN,KAAYkN,SASvBlB,EAASI,GAIV,kBAACM,GAAA,EAAIC,KAAL,CAAU1D,SAAS,cACjB,kBAACH,EAAA,EAAD,CAAWxR,iBAAiB,cAC1B,kBAAC,IAAD,KACE,kBAACwR,EAAA,EAAUC,OAAX,CACE9L,GAAI+L,IAAK/R,OACTgS,SAAS,cAERjP,EAAE,gBAEL,kBAAC8O,EAAA,EAAUK,SAAX,CAAoBF,SAAS,cAC3B,kBAAC,IAAK/Q,KAAN,KACE,kBAAC0V,GAAD,CACEnU,KAAMvD,EACNuU,WACEO,EAAemB,GAAUG,8BAsB1D,GAkBiB,OAAnBtB,GACC,oCACE,6BAEA,kBAAC,EAAD,iBACM9U,EADN,CAEEiH,KAAK,KACL4E,WAAYkJ,EACZjJ,aAAckJ,EACdjJ,OAAQkJ,EACRrT,QAAS,SAAC0K,GAAD,OAAYoJ,EAAcpJ,SAS7C,OAFsB,OAAlBhF,GAAwB6K,EAAc,aAEnC,oCAAG0E,I,iDC/lBG,YAAC7W,GAId,IASMU,EAAQC,OAAOC,OATN,CACbwE,UAAW,aACXD,QAAS,cACTwS,KAAM,SAM8B3X,GAbf,EA0BnBU,EAAM+C,cALR8D,EArBqB,EAqBrBA,SACAD,EAtBqB,EAsBrBA,cAtBqB,EA4B2B5G,EAAMiD,gBAAhDD,EA5Be,EA4BfA,YAAa8D,EA5BE,EA4BFA,WAAYC,EA5BV,EA4BUA,aA5BV,EAkCmB7D,oBAAS,GAlC5B,mBAkChBgU,EAlCgB,KAkCDC,EAlCC,OAmCiBjU,oBAAS,GAnC1B,mBAmChBkU,EAnCgB,KAmCFC,EAnCE,OAoCWnU,oBAAS,GApCpB,mBAoChBoU,EApCgB,KAoCLC,EApCK,OAqCiBrU,oBAAS,GArC1B,mBAqChBsU,EArCgB,KAqCFC,EArCE,OAsCuBvU,oBAAS,GAtChC,mBAsChBwU,EAtCgB,KAsCCC,EAtCD,OAuC+BzU,oBAAS,GAvCxC,mBAuChB0U,EAvCgB,KAuCKC,EAvCL,KAyCvBrS,qBAAU,WAENqS,KADEX,GAAiBE,GAAgBE,GAAaE,MAOjD,CAACN,EAAeE,EAAcE,EAAWE,IAjDrB,IAmDfpU,EAAMC,YAAe,CAACrD,EAAM0E,YAA5BtB,EAMF0U,EAAiB,WACrBH,GAAoBD,IA8BhBK,EAAY,CAChBC,UAAWd,EACPjQ,MAAaE,SAAS/D,EAAE,2BACxB6D,MAAa8D,WACjBkN,SAAUb,EACNnQ,MAAaE,SAAS/D,EAAE,0BACxB6D,MAAa8D,WACjBV,MAAOiN,EACHrQ,MAEGoD,MAAMjH,EAAE,0BACR+D,SAAS/D,EAAE,sBACd6D,MAAa8D,WACjBmN,SAAUV,EACNvQ,MAEGE,SAAS/D,EAAE,yBACXuH,IAAI,EAAGvH,EAAE,0BAETkE,QACC,mEACAlE,EAAE,yBAEN6D,MAAa8D,YAMb/D,EAASC,IAAW8Q,GAK1B,GAAiB,OAAblR,EAAmB,OAAO,qCA1HP,IA+HfoQ,EAASjX,EAATiX,KAEN/G,EAMErJ,EANFqJ,UACAC,EAKEtJ,EALFsJ,SACA9F,EAIExD,EAJFwD,MA6OI8L,EACK,UAATc,EACE,0BAAM9V,MAAO,CAAEyU,WAAY,WACxB1F,EADH,IACeC,GAGf,kBAAC,IAAD,CACE9H,UA7OiB,SAAC,GAAD,IACrBC,EADqB,EACrBA,aACAC,EAFqB,EAErBA,aAEAC,GAJqB,EAGrBC,WAHqB,EAIrBD,QACAE,EALqB,EAKrBA,QAGAC,GARqB,EAMrBC,QANqB,EAOrBC,aAPqB,EAQrBF,QARqB,OAUrB,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAAClE,SAAUwD,GACzB,kBAAC,EAAD,CAAM9I,MAAO4D,EAAE,YAEb,kBAAC4J,EAAA,EAAD,CAAWvM,QAAQ,SACjB,kBAACuM,EAAA,EAAUlM,KAAX,CAAgBuF,GAAG,MAAM6H,QAAM,GAC7B,kBAACnF,EAAA,EAAKI,MAAN,KAAa/F,EAAE,eACb8T,EAaA,0BAAM/V,MAAO,CAAEgN,MAAO,UACpB,kBAACgK,GAAA,EAAD,CACEjX,QAAS,kBAAMiW,GAAiB,IAChC9G,SAAS,QACTlP,MAAO,CAAEC,MAAO,cAAekR,OAAQ,cAhB3C,oCACE,0BAAMnR,MAAO,CAAEgN,MAAO,UACpB,kBAACiK,GAAA,EAAD,CACElX,QAAS,kBAAMiW,GAAiB,IAChC9G,SAAS,QACTlP,MAAO,CAAEC,MAAO,cAAekR,OAAQ,cAG3C,6BACA,+BAAQpC,IAYXgH,GACC,kBAACnO,EAAA,EAAKE,MAAN,CAAYC,UAAU,6BACpB,kBAACQ,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAK,OACL2D,YAAaxG,EAAE,oBACf/B,KAAK,YACLuG,MAAOY,EAAOwP,UACdzO,SAAUhB,EACViB,YAAab,EAAOqP,WAAatP,EAAQsP,YAE3C,kBAACjP,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOqP,cAQlB,kBAAChL,EAAA,EAAUlM,KAAX,CAAgBuF,GAAG,MAAM6H,QAAM,GAC7B,kBAACnF,EAAA,EAAKI,MAAN,KAAa/F,EAAE,cACbgU,EAaA,0BAAMjW,MAAO,CAAEgN,MAAO,UACpB,kBAACgK,GAAA,EAAD,CACEjX,QAAS,kBAAMmW,GAAgB,IAC/BhH,SAAS,QACTlP,MAAO,CAAEC,MAAO,cAAekR,OAAQ,cAhB3C,oCACE,0BAAMnR,MAAO,CAAEgN,MAAO,UACpB,kBAACiK,GAAA,EAAD,CACElX,QAAS,kBAAMmW,GAAgB,IAC/BhH,SAAS,QACTlP,MAAO,CAAEC,MAAO,cAAekR,OAAQ,cAG3C,6BACA,+BAAQnC,IAYXiH,GACC,kBAACrO,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACQ,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAK,OACL2D,YAAaxG,EAAE,mBACf/B,KAAK,WACLuG,MAAOY,EAAOyP,SACd1O,SAAUhB,EACViB,YAAab,EAAOsP,UAAYvP,EAAQuP,WAE1C,kBAAClP,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOsP,aAQC,OAAlBrR,GACC,kBAACoG,EAAA,EAAUlM,KAAX,CAAgBuF,GAAG,MAAM6H,QAAM,GAC7B,kBAACnF,EAAA,EAAKI,MAAN,KAAa/F,EAAE,kBACbkU,EAaA,0BAAMnW,MAAO,CAAEgN,MAAO,UACpB,kBAACgK,GAAA,EAAD,CACEjX,QAAS,kBAAMqW,GAAa,IAC5BlH,SAAS,QACTlP,MAAO,CAAEC,MAAO,cAAekR,OAAQ,cAhB3C,oCACE,0BAAMnR,MAAO,CAAEgN,MAAO,UACpB,kBAACiK,GAAA,EAAD,CACElX,QAAS,kBAAMqW,GAAa,IAC5BlH,SAAS,QACTlP,MAAO,CAAEC,MAAO,cAAekR,OAAQ,cAG3C,6BACA,+BAAQjI,IAYXiN,GACC,kBAACvO,EAAA,EAAKE,MAAN,CAAYC,UAAU,yBACpB,kBAACQ,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACEM,YAAaxG,EAAE,eACf/B,KAAK,QACLuG,MAAOY,EAAO6B,MACdd,SAAUhB,EAEViB,YAAab,EAAO0B,OAAS3B,EAAQ2B,QAEvC,kBAACtB,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAO0B,UASpB,kBAAC2C,EAAA,EAAUlM,KAAX,CAAgBuF,GAAG,MAAM6H,QAAM,GAC7B,kBAACnF,EAAA,EAAKI,MAAN,KAAa/F,EAAE,aACboU,EAWA,0BAAMrW,MAAO,CAAEgN,MAAO,UACpB,kBAACgK,GAAA,EAAD,CACEjX,QAAS,kBAAMuW,GAAgB,IAC/BpH,SAAS,QACTlP,MAAO,CAAEC,MAAO,cAAekR,OAAQ,cAd3C,oCACE,0BAAMnR,MAAO,CAAEgN,MAAO,UACpB,kBAACiK,GAAA,EAAD,CACElX,QAAS,kBAAMuW,GAAgB,IAC/BpH,SAAS,QACTlP,MAAO,CAAEC,MAAO,cAAekR,OAAQ,eAc9CkF,GACC,oCAEE,kBAACzO,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACQ,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAMyR,EAAkB,OAAS,WACjC9N,YAAaxG,EAAE,sBACf/B,KAAK,WACLuG,MAAOY,EAAO0P,SACd3O,SAAUhB,EAEViB,YAAab,EAAOuP,UAAYxP,EAAQwP,WAE1C,kBAACxO,EAAA,EAAW2O,OAAZ,KACE,kBAAC3O,EAAA,EAAWN,KAAZ,CACE1D,GAAG,mBACHxE,QAAS4W,EACT3W,MAAO,CACLmR,OAAQ,YAGToF,EACC,kBAACY,GAAA,EAAD,CACEjI,SAAS,QACTlP,MAAO,CAAEC,MAAO,cAAekR,OAAQ,aAGzC,kBAACiG,GAAA,EAAD,CACElI,SAAS,QACTlP,MAAO,CAAEC,MAAO,cAAekR,OAAQ,eAM/C,kBAACvJ,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOuP,eAStB,kBAACnP,EAAA,EAAKE,MAAN,CAAYC,UAAU,0BACpB,kBAACe,EAAD,iBACM3K,EADN,CAEEkF,QAASpB,EAAE,UACXuB,QAASiT,EACThT,UAAW,GACXH,QAASzE,EAAMyE,QACfC,UAAW1E,EAAM0E,iBAerBwF,iBAAkBlD,EAClBlC,SA/SW,SAACjC,GAChBA,EAAKwE,WAAaT,EACbsQ,IAAerU,EAAKqN,UAAY,MAChCkH,IAAcvU,EAAKsN,SAAW,MAC9BmH,IAAWzU,EAAKwH,MAAQxD,EAASwD,OACjCmN,IAAc3U,EAAKqV,SAAW,MAlBD,SAACrV,GACtB,OAATA,IACJA,EAAKsH,QAAUrD,IACfjE,EAAKuH,UAAYrD,IAGV/D,EAAY,CAAES,IAAKzD,EAAMyE,QAAS5B,UAgBrC2V,CAA4B3V,IAuS5B0H,cAAe,CACbyN,UAAWnR,EAASqJ,UACpB+H,SAAUpR,EAASsJ,SACnB9F,MAAOxD,EAASwD,MAChB6N,SAAU,MAKlB,OAAO,oCAAG/B,I,UC1XG,YAAC7W,GAId,IAQMU,EAAQC,OAAOC,OARN,CACbuE,QAAS,oBACTC,UAAW,cAMyBpF,GAZf,EAwBnBU,EAAM+C,cANR0V,EAlBqB,EAkBrBA,WACAC,EAnBqB,EAmBrBA,gBACAC,EApBqB,EAoBrBA,qBACAC,EArBqB,EAqBrBA,kBACAhG,EAtBqB,EAsBrBA,aACA/L,EAvBqB,EAuBrBA,SAEMgS,EAAoB7Y,EAAMgF,cAA1B6T,gBAzBe,EAgCnB7Y,EAAMiD,gBAHRD,EA7BqB,EA6BrBA,YACA8V,EA9BqB,EA8BrBA,cACAC,EA/BqB,EA+BrBA,mBAOM3V,EAAMC,YAAe,CAACrD,EAAM0E,YAA5BtB,EAUF4V,EAAqB,SAACxJ,GAC1BqJ,EAAgBrJ,EAAEC,OAAO/J,IACzB1C,EAAY,CACVS,IAAK,yBACLZ,KAAM,CAAEwH,MAAOxD,EAASwD,MAAO4O,YAAazJ,EAAEC,OAAO/J,OAInDwT,EAAe,SAACtN,GAEpB,OAAQA,GACN,IAAK,QACHA,EAAS,EACT,MACF,IAAK,OACHA,EAAS+M,EAAuB,EAAIA,EAAuB,EAAI,EAC/D,MACF,IAAK,OACH/M,EACE+M,EAAuBnN,KAAKC,KAAKiN,EAAkBE,GAC/CD,EAAuB,EACvBnN,KAAKC,KAAKiN,EAAkBE,GAClC,MACF,IAAK,OACHhN,EAASJ,KAAKC,KAAKiN,EAAkBE,GAMzCE,EAAclN,IAqEhB,OACE,kBAAC,IAAD,CACEvD,UAjEmB,SAAC,GAAD,EACrBC,aADqB,EAErBC,aAFqB,EAGrBE,WAHqB,EAIrBD,OAJqB,EAKrBE,QALqB,EAMrBE,QANqB,EAOrBC,aAPqB,EAQrBF,OARqB,OAUrB,oCACE,kBAACwQ,GAAA,EAAD,CAAOC,YAAU,EAACC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAAChT,KAAK,MAC5C,+BACE,4BACE,wBAAIpF,MAAO,CAAE6K,UAAW,WAAa5I,EAAE,WACvC,wBAAIjC,MAAO,CAAE6K,UAAW,WAAa5I,EAAE,SACvC,wBAAIjC,MAAO,CAAE6K,UAAW,WAAa5I,EAAE,SACvC,wBAAIjC,MAAO,CAAE6K,UAAW,WAAa5I,EAAE,WACvC,wBAAIjC,MAAO,CAAE6K,UAAW,WAAa5I,EAAE,WAG3C,+BACkB,OAAfqV,GACCA,EAAW7X,KAAI,SAAC+S,EAAU6F,GAAgB,IAGhCnY,EAA6BsS,EAA7BtS,KAAMoY,EAAuB9F,EAAvB8F,KAAMC,EAAiB/F,EAAjB+F,KAAMC,EAAWhG,EAAXgG,OAC1B,OACE,wBAAIxZ,IAAKqZ,GACP,wBAAIrY,MAAO,CAAE6K,UAAW,WACtB,kBAACjD,EAAA,EAAKe,MAAN,CACE7D,KAAK,QACL2T,QAAShH,IAAiB6G,EAC1BpY,KAAK,oBACLqE,GAAI+T,EACJI,aAAW,WACXtQ,SAAUyP,KAGd,wBAAI7X,MAAO,CAAE6K,UAAW,WAAayN,GACrC,wBAAItY,MAAO,CAAE6K,UAAW,SAAW3K,GACnC,wBAAIF,MAAO,CAAE6K,UAAW,SAAW2N,GACnC,wBAAIxY,MAAO,CAAE6K,UAAW,UACrB+M,EAAmBW,UAOlC,kBAAC,EAAD,iBACMpa,EADN,CAEEiM,MAAOC,KAAKC,KAAKiN,EAAkBE,GACnCvN,OAAQsN,EACRzX,QAASgY,OAYX3O,cAAe,CACbuP,UAAW,GACXC,WAAY,GACZC,YAAa,GACbC,UAAW,MC1JJ,YAAC3a,GAId,IAQMU,EAAQC,OAAOC,OARN,CACbwE,UAAW,uBACXD,QAAS,qBAM2BnF,GAZf,EA6BnBU,EAAMiD,gBAJR6D,EAzBqB,EAyBrBA,WACAC,EA1BqB,EA0BrBA,aACA/D,EA3BqB,EA2BrBA,YAQMI,EAAMC,YAAe,CAAC,yBAAtBD,EAKF4D,EAASC,IAAW,CACxB6S,UAAW7S,MAERE,SAAS/D,EAAE,sCACXuH,IAAI,EAAGvH,EAAE,uCACTwH,IAAI,EAAGxH,EAAE,sCACZ2W,WAAY9S,MAETE,SAAS/D,EAAE,8BACXuH,IAAI,EAAGvH,EAAE,+BACTwH,IAAI,GAAIxH,EAAE,8BACb4W,YAAa/S,MAEVE,SAAS/D,EAAE,gCACXuH,IAAI,EAAGvH,EAAE,iCACTwH,IAAI,GAAIxH,EAAE,gCACb6W,UAAWhT,MAERE,SAAS/D,EAAE,8BACXkE,QACC,IAAIC,OAAOnE,EAAE,wBACbA,EAAE,iCA6HR,OACE,kBAAC,IAAD,CACEiF,UAzG6B,SAAC,GAAD,IAC/BC,EAD+B,EAC/BA,aACAC,EAF+B,EAE/BA,aAEAC,GAJ+B,EAG/BC,WAH+B,EAI/BD,QACAE,EAL+B,EAK/BA,QAGAC,GAR+B,EAM/BC,QAN+B,EAO/BC,aAP+B,EAQ/BF,QAR+B,OAU/B,oCACE,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAAClE,SAAUwD,GAEzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,iBACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAK,SACL2D,YAAa,GACbC,mBAAiB,oBACjBxI,KAAK,YACLuG,MAAOY,EAAOsR,UACdvQ,SAAUhB,EACViB,YAAab,EAAOmR,WAAapR,EAAQoR,YAE3C,kBAAC/Q,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOmR,aAMd,kBAAC/Q,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,kBACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAK,SACL2D,YAAa,GACbC,mBAAiB,oBACjBxI,KAAK,aACLuG,MAAOY,EAAOuR,WACdxQ,SAAUhB,EACViB,YAAab,EAAOoR,YAAcrR,EAAQqR,aAE5C,kBAAChR,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOoR,cAMd,kBAAChR,EAAA,EAAKE,MAAN,CAAYC,UAAU,8BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,oBACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAK,SACL2D,YAAa,GACbC,mBAAiB,oBACjBxI,KAAK,cACLuG,MAAOY,EAAOwR,YACdzQ,SAAUhB,EACViB,YAAab,EAAOqR,aAAetR,EAAQsR,cAE7C,kBAACjR,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOqR,eAMd,kBAACjR,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,0BACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAK,SACL2D,YAAa,GACbC,mBAAiB,oBACjBxI,KAAK,YACLuG,MAAOY,EAAOyR,UACd1Q,SAAUhB,EACViB,YAAab,EAAOsR,WAAavR,EAAQuR,YAE3C,kBAAClR,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOsR,aAOd,kBAAChQ,EAAD,iBACM3K,EADN,CAEEkF,QAASpB,EAAE,UACXqB,QAASzE,EAAMyE,QACfC,UAAW1E,EAAM0E,gBAYrBwF,iBAAkBlD,EAClBlC,SA1Ha,SAACjC,GAKhB,OAJAiD,QAAQC,IAAIlD,GACZA,EAAKsH,QAAUrD,IACfjE,EAAKuH,UAAYrD,IAEV/D,EAAY,CAAES,IAAKzD,EAAMyE,QAAS5B,UAsHvC0H,cAAe,CACbuP,UAAW,GACXC,WAAY,GACZC,YAAa,GACbC,UAAW,M,wCC7MJ,YAAC3a,GAId,IAKMU,EAAQC,OAAOC,OALN,CAAEwE,UAAW,eAAgBiD,QAAS,GAAIuS,OAAQ,cAK3B5a,GAaxB+D,YAAe,CAACrD,EAAM0E,YAA5BtB,EAuCR,OAAO,oCAhCH,kBAAC+W,GAAA,EAAD,iBACMna,EADN,CAEEuG,KAAK,KACL6T,kBAAgB,gCAChBC,UAAQ,KAEP,EAaD,kBAACF,GAAA,EAAM7Y,KAAP,KAAatB,EAAM2H,UAClB,KC1CM,YAACrI,GAId,IAKIC,EAAW,CACbmF,UAAW,YACXG,QAAS,IACTyV,UAAW,KACXC,OAAQ,GACRC,OAAQ,GAERC,UAAW,aAEXC,OAAQ,CAAC,OAAQ,YAAa,YAAa,QAAS,SAAU,aAM1D1a,EAAQC,OAAOC,OAAOX,EAAUD,GAO9BuN,EAAe7M,EAAMiD,gBAArB4J,WACA8N,EAAqB3a,EAAMwK,oBAA3BmQ,iBAKAvX,EAAMC,YAAerD,EAAM0E,WAA3BtB,EArCe,EAuCOF,mBAASlD,EAAM6E,SAvCtB,mBAuChB+V,EAvCgB,KAuCPC,EAvCO,OAwCyBtZ,IAAM2B,UAAS,GAxCxC,mBAwChB4X,EAxCgB,KAwCEC,EAxCF,MCpBE,SAAC3V,EAAUC,GACpC,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKsV,aAJX,WACE1V,EAAcG,YAGaJ,GAC3B,OAAO,kBAAM4V,cAAcvV,OAE5B,CAACL,ID6CJ6V,EAAY,WAEVL,EAAWD,EAAU,KACpB,KE5D2B,SAACxV,EAAUsV,GACzC,IAYM1a,EAAQC,OAAOC,OAZN,CACbwE,UAAW,YAGX+V,UAAW,aAEXC,OAAQ,CAAC,OAAQ,YAAa,YAAa,QAAS,SAAU,aAM1B,CAAEA,OAAQA,IAIhDlV,qBAAU,WAGR,IAAM2V,EAAe,SAAC3L,GAEpBpK,EAASoK,IAIX,IAAK,IAAI4L,KAAKpb,EAAM0a,OAClBW,OAAOC,iBAAiBtb,EAAM0a,OAAOU,GAAID,GAK3C,OAAO,WACL,IAAK,IAAIC,KAAKpb,EAAM0a,OAElBW,OAAOE,oBAAoBvb,EAAM0a,OAAOU,GAAID,MAI/C,IFuBHK,EAAiB,WACfX,EAAW7a,EAAM6E,WAChB,CAAC,YAAa,QAAS,SAAU,aAEpCW,qBAAU,WACJoV,IAAY5a,EAAM6E,SAASkW,GAAoB,GAC/CH,IAAY5a,EAAMwa,QAAQO,GAAoB,GAClC,IAAZH,GAAeD,MAGlB,CAACC,IAiHJ,OAAO,oCA/GQ,WACb,IAAIa,EACwBA,EAAxBb,EAAU5a,EAAMua,OAAmB/O,KAAKC,KAAKmP,EAzDpC,IA0DGA,EAEhB,IAAMc,EAAgB7O,EAAW,IAAIwJ,KAAK,KAAM,EAAG,EAAG,EAAG,EAAGoF,GAAW,CACrEE,OAAQ,UACRC,OAAQ,YASJC,EACJ,oCACE,kBAAC,IAAD,CACEzT,QAAQ,6BACRsT,cAAeA,GAEf,yBAAKpb,UAAU,eAAf,uBACA,yBACEA,UAAU,cACVa,MAAO,CAAEkP,SAAU,MAAOyL,WAAY,OAAQ1a,MAAO,YAEpD,CAAEsa,kBAEL,yBAAKpb,UAAU,eAAf,yCAIF,6BACA,kBAAC2J,EAAD,iBACM3K,EADN,CAEEkF,QAASpB,EAAE,gBACXqB,QAAQ,mBACRK,SA5BoB,WACxBgB,QAAQC,IAAI,qBAEZ8U,EAAW7a,EAAM6E,UA0BbH,UAAW1E,EAAM0E,cAKvB,OACE,oCACE,kBAACqX,GAAD,CACEC,KAAMlB,EACNnT,QAASkU,EACT3B,OAAQ,kBAAMa,GAAoB,MAEpC,kBAACkB,GAAA,EAAD,CACEC,UAAU,SACVC,QACE,kBAACC,GAAA,EAAD,KACGxB,EAAU5a,EAAMua,OACf,kBAAC,IAAD,CACEnS,QAAQ,2CACRqT,SAAUA,GAFZ,2CAI2C,CAAEA,YAAY,IAJzD,YAQA,kBAAC,IAAD,CACErT,QAAQ,2CACRqT,SAAUA,GAFZ,2CAI2C,CAAEA,YAAY,IAJzD,cAWN,yBAAKta,MAAO,CAAEyU,WAAY,SAAUtD,OAAQ,YAC1C,kBAAC+J,GAAA,EAAD,CAASlb,MAAO,CAAEC,MAAO,iBAD3B,OAGGwZ,EAAU5a,EAAMua,OACf,oCACE,0BAAMja,UAAU,iCACd,kBAAC,IAAD,CAAO8H,QAAQ,oBAAoBqT,SAAUA,GAC1C,CAAEA,YADL,aAIF,0BAAMnb,UAAU,iCACd,kBAAC,IAAD,CAAO8H,QAAQ,gBAAgBqT,SAAUA,GACtC,CAAEA,YADL,UAMJ,oCACE,0BAAMnb,UAAU,iCACd,kBAAC,IAAD,CAAO8H,QAAQ,oBAAoBqT,SAAUA,GAC1C,CAAEA,YADL,aAIF,0BAAMnb,UAAU,iCACd,kBAAC,IAAD,CAAO8H,QAAQ,gBAAgBqT,SAAUA,GACvC,8BAAO,CAAEA,aADX,aAYNnP,KG5IG,YAAChN,GAKd,IAKMU,EAAQC,OAAOC,OALN,CAAEwE,UAAW,WAKUpF,GAK9BsH,EAAkB5G,EAAM+C,cAAxB6D,cAEAoO,GADgBhV,EAAMgF,cAAtBsX,YACkBtc,EAAMiD,gBAAxB+R,eAGA5R,EAAMC,YAAerD,EAAM0E,WAA3BtB,EAiCFmZ,EAAWC,cAIX/c,EACJ,oCACE,kBAACiX,EAAA,EAAD,CACE+F,OAAK,EACLtb,MAAO,CAELub,aAAc,IACdC,YAAa,MAGf,kBAAChG,EAAA,EAAD,KAIE,kBAACC,EAAA,EAAD,KACE,kBAACgG,EAAA,EAAD,CAKEzb,MAAO,CACLiB,aAAc,MAGdG,gBAAiB,eACjBsa,UAAW,SAIb,kBAACD,EAAA,EAAOE,MAAR,CAAc9b,KAAK,KACjB,yBACEuD,IAAI,sBACJH,MAAM,OACNC,OAAO,KACP/D,UAAU,2BACVgE,IAAKlB,EAAE,WAGX,kBAAC5C,EAAA,EAAD,CAAKF,UAAU,WACb,kBAACE,EAAA,EAAIO,KAAL,CAAUsR,SAAS,UAAUrR,KAAK,YAChC,kBAAC,GAAe1B,KAGpB,kBAACkB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIO,KAAL,CAAUsR,SAAS,WAAWrR,KAAK,aACjC,0BAAMG,MAAO,CAAEyU,WAAY,WACzB,8BACE,kBAACmH,EAAA,EAAD,CAAkB5b,MAAO,CAAEC,MAAO,kBAGpC,0BAAMd,UAAU,sBAAhB,OAEG8C,EAAE,gBAMT,kBAAC5C,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIM,KAAL,KACE,kBAACkc,GAAc1d,QAO3B,kBAACqX,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yBAAKzV,MAAO,CAAEkD,OAAQ,SACtB,kBAACuY,EAAA,EAAD,CACEK,kBAAgB,EAChBC,OAAO,KAIPzc,QAAQ,OACRU,MAAO,CACLiB,aAAc,MACd+a,WAAY,yBACZ5a,gBAAiB,cACjBsa,UAAW,SAGb,kBAACrc,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIO,KAAL,CACET,UAAU,aACV+R,SAAS,UACTrR,KAAK,WACLG,MAAO,CACL2a,WACwB,aAAtBS,EAASa,SAA0B,OAAS,WAG/Cha,EAAE,aAGP,kBAACwZ,EAAA,EAAOzK,OAAR,CAAekL,gBAAc,0BAC7B,kBAACT,EAAA,EAAOrK,SAAR,CAAiB7M,GAAG,yBAClB,kBAAClF,EAAA,EAAD,CAAKF,UAAU,WACM,OAAlBsG,GACC,oCACE,kBAACpG,EAAA,EAAIO,KAAL,CACET,UAAU,aACV+R,SAAS,WACTrR,KAAK,YACLG,MAAO,CACL2a,WACwB,cAAtBS,EAASa,SACL,OACA,WAGPha,EAAE,aAEL,kBAAC5C,EAAA,EAAIO,KAAL,CACET,UAAU,aACV+R,SAAS,cAETnR,QAAS,kBAAM8T,EAAc,IAC7B7T,MAAO,CACL2a,WACwB,iBAAtBS,EAASa,SACL,OACA,WAGPha,EAAE,aAEL,kBAAC5C,EAAA,EAAIO,KAAL,CACET,UAAU,aACV+R,SAAS,WACTrR,KAAK,YACLG,MAAO,CACL2a,WACwB,cAAtBS,EAASa,SACL,OACA,WAGPha,EAAE,qBAanBka,EACJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLnV,UAAW,WACT,OAAyB,OAAlBzB,EACH6W,GAAQne,GACRoe,EAAoBpe,MAG5B,kBAAC,IAAD,CACEie,OAAK,EACLC,KAAK,WACLnV,UAAW,WACT,OAAyB,OAAlBzB,EACH6W,GAAQne,GACRoe,EAAoBpe,MAG5B,kBAAC,IAAD,CACEie,OAAK,EACLC,KAAK,wBACLnV,UAAW,WACT,OAAOqV,EAAoBpe,MAG/B,kBAAC,IAAD,CACEie,OAAK,EACLC,KAAK,WACLnV,UAAW,WACT,OAAOsV,GAAW,eAAKre,EAAN,CAAY2X,KAAM,gBAGvC,kBAAC,IAAD,CACEsG,OAAK,EACLC,KAAK,YACLnV,UAAW,WACT,OC5RG,SAAC/I,GAId,IAKMU,EAAQC,OAAOC,OALN,CAAEwE,UAAW,qBAKUpF,GATf,EAkBnBU,EAAM+C,cAHR6a,EAfqB,EAerBA,sBACAjF,EAhBqB,EAgBrBA,qBACA/R,EAjBqB,EAiBrBA,cAjBqB,EAmB6B5G,EAAMgF,cAAlD6Y,EAnBe,EAmBfA,yBAA0BpM,EAnBX,EAmBWA,cAC1BqH,EAAkB9Y,EAAMiD,gBAAxB6V,cAMA1V,EAAMC,YAAe,CAACrD,EAAM0E,YAA5BtB,EAsBR,OALsB,OAAlBwD,GAAwB6K,EAAc,aAMxC,oCACE,kBAACS,EAAA,EAAD,CAAWxR,iBAAkBkd,GAC3B,kBAAC,IAAD,KACE,kBAAC1L,EAAA,EAAUC,OAAX,CACE9L,GAAI+L,IAAK/R,OACTgS,SAAS,aACTlR,MAAO,CAAEmR,OAAQ,WACjBpR,QAzBe,WAEvB2c,EAAyB,cACzB/E,EAAcH,KAwBLvV,EAAE,eAGL,kBAAC8O,EAAA,EAAUK,SAAX,CAAoBF,SAAS,cAC3B,kBAAC,IAAK/Q,KAAN,KACE,kBAACwc,GAAexe,MAKtB,kBAAC,IAAD,KACE,kBAAC4S,EAAA,EAAUC,OAAX,CACE9L,GAAI+L,IAAK/R,OACTgS,SAAS,uBACTlR,MAAO,CAAEmR,OAAQ,WACjBpR,QApCyB,WAEjC2c,EAAyB,0BAoChBza,EAAE,0BAGL,kBAAC8O,EAAA,EAAUK,SAAX,CAAoBF,SAAS,wBAC3B,kBAAC,IAAK/Q,KAAN,KACE,kBAACyc,GAAyBze,QD4MrB0e,CAAkB,eAAK1e,OAYlC,kBAAC,IAAD,CACEie,OAAK,EACLC,KAAK,eACLnV,UAAW,WACT,OAAO4V,GAAW3e,MAGtB,kBAAC,IAAD,CACEie,OAAK,EACLC,KAAK,WACLnV,UAAW,WACT,OAAOoV,GAAQne,MAGnB,kBAAC,IAAD,CACEie,OAAK,EACLC,KAAK,YACLnV,UAAW,WACT,OEpTG,SAAC/I,GAId,IAKMU,EAAQC,OAAOC,OALN,GAKuBZ,GATf,EAgBiBU,EAAM+C,cAAtC6D,EAhBe,EAgBfA,cAAesX,EAhBA,EAgBAA,aACfzM,EAAkBzR,EAAMgF,cAAxByM,cACA7E,EAAW5M,EAAMiD,gBAAjB2J,OACAuR,EAAyBne,EAAMwK,oBAA/B2T,qBAEA/a,EAAMC,YAAe,YAArBD,EAEFP,EAAO7C,EAAM6C,KACboD,EAAOiY,EAxBU,EA6BiBhb,mBAAS,MA7B1B,mBA6BhBkb,EA7BgB,KA6BFC,EA7BE,KA+BjBte,EAAoB,SAAC2F,GACzByY,EAAqBzY,IAGjBjG,EAAa,CACjB,CACE4B,KAAM+B,EAAE,OACRnC,KAAM,QAER,CACEI,KAAM+B,EAAE,OACRnC,KAAM,QAER,CACEI,KAAM+B,EAAE,OACRnC,KAAM,SAoEV,OA7DAuE,qBAAU,WACR,GAAa,OAATS,EAGJ,OAAQA,GACN,IAAK,OACHoY,EACE,kBAACC,GAAD,CACE9e,MAAO4D,EAAE,uBACT9D,KAAMU,EACNP,WAAYA,EACZkB,2BAA4BsF,EAC5BlG,kBAAmBA,KAGvB,MACF,IAAK,OACHse,EACE,kBAACE,GAAD,CACE/e,MAAO4D,EAAE,uBACT9D,KAAMU,EACNP,WAAYA,EACZkB,2BAA4BsF,EAC5BlG,kBAAmBA,KAGvB,MACF,IAAK,OACHse,EACE,kBAACG,GAAD,CACEhf,MAAO4D,EAAE,uBACT9D,KAAMU,EACNP,WAAYA,EACZkB,2BAA4BsF,EAC5BlG,kBAAmBA,QAS1B,CAAC8C,EAAM+J,EAAQ3G,IAEI,OAAlBW,GAAwB6K,EAAc,aAgBnC,oCAAG2M,GFkMOK,CAASnf,QAO1B,OACE,oCAME,kBAACoX,EAAA,EAAD,CAAW+F,MAAM,MACf,kBAAC9F,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGnX,EACD,yBAAK0B,MAAO,CAAEkD,OAAQ,WAM1B,kBAACsS,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAM0G,OzBpWVoB,GAAM,CACVC,IAAK,CACHC,SAAU,0BA0Bd,OAHiBvD,QAAUA,OAAOkB,UAAYlB,OAAOkB,SAASsC,UAI5D,IAAK,YACHxf,EAASqf,GACT,MACF,IAAK,gBACHrf,EA1BS,CACXsf,IAAK,CACHC,SAAU,8BAyBV,MACF,IAAK,cACHvf,EAvBY,CACdsf,IAAK,CACHC,SAAU,wBAsBV,MACF,IAAK,UACHvf,EApBS,CACXsf,IAAK,CACHC,SAAU,oBAmBV,MACF,QACEvf,EAASqf,GAIE,sBACVrf,G,U4B3CDyf,G,QAASC,EAAWC,QAAQ3f,GAAOsf,IAAIC,SAAU,CACnDK,QAAQ,EACRC,WAAW,IAOAC,GAAW,SAACtc,GAAyB,IAAnBpE,EAAkB,wDAO/C,OANIA,GAAOqH,QAAQC,IAAR,mBAAwBlD,EAAKY,KAAOZ,GAK/Cic,GAAOM,KAAP,iBAA8Bvc,IACvB,GCHM,YAACvD,GAId,IAJuB,EASTW,OAAOC,OALN,GAKuBZ,GASkB2D,gBAAhD6D,EAlBe,EAkBfA,WAAYC,EAlBG,EAkBHA,aAAc/D,EAlBX,EAkBWA,YAG1BI,EAAMC,YAAe,SAArBD,EAOF4D,EAASC,IAAW,CACxBoD,MAAOpD,MAEJoD,MAAMjH,EAAE,0BACR+D,SAAS/D,EAAE,sBACd8U,SAAUjR,MAAaE,SAAS/D,EAAE,2BA4HpC,OACE,oCACE,kBAAC,IAAD,CACEiF,UAvGgB,SAAC,GAAD,IACpBC,EADoB,EACpBA,aACAC,EAFoB,EAEpBA,aAEAC,GAJoB,EAGpBC,WAHoB,EAIpBD,QACAE,EALoB,EAKpBA,QAGAC,GARoB,EAMpBC,QANoB,EAOpBC,aAPoB,EAQpBF,QARoB,OAUpB,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAAClE,SAAUwD,GACzB,4BAAKlF,EAAE,YAGP,kBAAC2F,EAAA,EAAKE,MAAN,CAAYC,UAAU,yBACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,kBACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACEM,YAAaxG,EAAE,eACf/B,KAAK,QACLuG,MAAOY,EAAO6B,MACdd,SAAUhB,EAEViB,YAAab,EAAO0B,OAAS3B,EAAQ2B,QAEvC,kBAACtB,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAO0B,SAMd,kBAACtB,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,aACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAK,WACL2D,YAAaxG,EAAE,kBACf/B,KAAK,WACLuG,MAAOY,EAAO0P,SACd3O,SAAUhB,EAEViB,YAAab,EAAOuP,UAAYxP,EAAQwP,WAE1C,kBAACnP,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOuP,YAoBd,kBAACnP,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACe,EAAD,iBACM3K,EADN,CAEEkF,QAASpB,EAAE,UACXqB,QAAQ,eACRC,UAAU,YAId,kBAACgS,EAAA,EAAD,CAAW+F,MAAM,MACf,kBAAC9F,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,uBAAGtW,UAAU,2BACX,kBAAC,IAAD,CAAO8H,QAAQ,4BAAf,WACU,uBAAGpH,KAAK,YAAR,kBAId,kBAAC4V,EAAA,EAAD,KACE,uBAAGtW,UAAU,4BACX,kBAAC,IAAD,CAAO8H,QAAQ,yBAAf,UACS,uBAAGpH,KAAK,UAAR,oBAkBfkJ,iBAAkBlD,EAClBlC,SA/GW,SAACjC,IAXW,SAACA,GAE5BA,EAAKsH,QAAUrD,IACfjE,EAAKuH,UAAYrD,IACjB/D,EAAY,CAAES,IAAK,eAAgBZ,SAQnCwc,CAAqBxc,IA+GjB0H,cAAe,CACbF,MAAO,GACP6N,SAAU,GACVoH,WAAY,QC5KP,YAAChgB,GAId,IAKMU,EAAQC,OAAOC,OALN,CAAEuE,QAAS,gBAAiBC,UAAW,UAKhBpF,GAK9BqT,EAAa3S,EAAM+C,cAAnB4P,SAde,EAgB2B3S,EAAMiD,gBAAhD6D,EAhBe,EAgBfA,WAAYC,EAhBG,EAgBHA,aAAc/D,EAhBX,EAgBWA,YAhBX,EAwBuBE,oBAAS,GAxBhC,mBAwBhBwU,EAxBgB,KAwBCC,EAxBD,KA8BfvU,EAAMC,YAAerD,EAAM0E,WAA3BtB,EAKF4D,EAASC,IAAW,CACxB+Q,UAAW/Q,MAAaE,SAAS/D,EAAE,2BACnC6U,SAAUhR,MAAaE,SAAS/D,EAAE,0BAClCiH,MAAOpD,MAEJoD,MAAMjH,EAAE,0BACR+D,SAAS/D,EAAE,sBACd8U,SAAUjR,MAEPE,SAAS/D,EAAE,yBACXuH,IAAI,EAAGvH,EAAE,0BAETkE,QACC,mEACAlE,EAAE,2BAOF0U,EAAiB,WACrBH,GAAoBD,IAsJtB,OACE,kBAAC,IAAD,CACErP,UA5HyB,SAAC,GAAD,IAC3BC,EAD2B,EAC3BA,aACAC,EAF2B,EAE3BA,aAEAC,GAJ2B,EAG3BC,WAH2B,EAI3BD,QACAE,EAL2B,EAK3BA,QAGAC,GAR2B,EAM3BC,QAN2B,EAO3BC,aAP2B,EAQ3BF,QAR2B,OAU3B,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAAClE,SAAUwD,GACzB,4BAAKlF,EAAE,YAGP,kBAAC2F,EAAA,EAAKE,MAAN,CAAYC,UAAU,6BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,eACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAK,OACL2D,YAAaxG,EAAE,oBACf/B,KAAK,YACLuG,MAAOY,EAAOwP,UACdzO,SAAUhB,EACViB,YAAab,EAAOqP,WAAatP,EAAQsP,YAE3C,kBAACjP,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOqP,aAMd,kBAACjP,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,cACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAK,OACL2D,YAAaxG,EAAE,mBACf/B,KAAK,WACLuG,MAAOY,EAAOyP,SACd1O,SAAUhB,EACViB,YAAab,EAAOsP,UAAYvP,EAAQuP,WAE1C,kBAAClP,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOsP,YAMd,kBAAClP,EAAA,EAAKE,MAAN,CAAYC,UAAU,yBACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,kBACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACEM,YAAaxG,EAAE,eACf/B,KAAK,QACLuG,MAAOY,EAAO6B,MACdd,SAAUhB,EAEViB,YAAab,EAAO0B,OAAS3B,EAAQ2B,QAEvC,kBAACtB,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAO0B,SAMd,kBAACtB,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,aACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAMyR,EAAkB,OAAS,WACjC9N,YAAaxG,EAAE,kBACf/B,KAAK,WACLuG,MAAOY,EAAO0P,SACd3O,SAAUhB,EAEViB,YAAab,EAAOuP,UAAYxP,EAAQwP,WAE1C,kBAACxO,EAAA,EAAW2O,OAAZ,KACE,kBAAC3O,EAAA,EAAWN,KAAZ,CACE1D,GAAG,mBACHxE,QAAS4W,EACT3W,MAAO,CACLmR,OAAQ,YAGToF,EACC,kBAACY,GAAA,EAAD,CACEjI,SAAS,QACTlP,MAAO,CAAEC,MAAO,iBAGlB,kBAACmX,GAAA,EAAD,CAAYlI,SAAS,QAAQlP,MAAO,CAAEC,MAAO,mBAKnD,kBAAC2H,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOuP,YAKd,kBAACnP,EAAA,EAAKE,MAAN,CAAYC,UAAU,0BACpB,kBAACe,EAAD,iBACM3K,EADN,CAEEkF,QAASpB,EAAE,UACXqB,QAASzE,EAAMyE,QACfC,UAAW1E,EAAM0E,cAIrB,uBAAGpE,UAAU,4BACX,kBAAC,IAAD,CAAO8H,QAAQ,6BAAf,sBACqB,uBAAGpH,KAAK,YAAR,gBASvBkJ,iBAAkBlD,EAClBlC,SAtIa,SAACjC,IAbkB,SAACA,GACtB,OAATA,IACJA,EAAKsH,QAAUrD,IACfjE,EAAKuH,UAAYrD,IACjBlE,EAAK8P,SAAWA,EAChB9P,EAAK0c,eAAgB,EACdvc,EAAY,CAAES,IAAKzD,EAAMyE,QAAS5B,UAQrC2V,CAA4B3V,IAsI9B0H,cAAe,CACbyN,UAAW,GACXC,SAAU,GACV5N,MAAO,GACP6N,SAAU,O,SClOLsH,GAAiB,SAAClP,EAAcnQ,GAAS,IAAD,EACzB+C,oBAAS,WACjC,IAAMuc,EAAcpE,OAAOqE,aAAaC,QAAQxf,GAChD,OAAuB,OAAhBsf,EAAuB5P,KAAK+P,MAAMH,GAAenP,KAHP,mBAC5C1I,EAD4C,KACrCiY,EADqC,KAQnD,OAHAra,qBAAU,WACR6V,OAAOqE,aAAaI,QAAQ3f,EAAK0P,KAAKC,UAAUlI,MAC/C,CAACzH,EAAKyH,IACF,CAACA,EAAOiY,ICLF,YAACvgB,GAId,IAKMU,EAAQC,OAAOC,OALN,GAKuBZ,EAAKuD,MATpB,EAgBC7C,EAAM+C,cAAtBgd,EAhBe,EAgBfA,MAAOC,EAhBQ,EAgBRA,KAGOtQ,EAAY1P,EAAMwK,oBAAhCyV,aAQR,GAAc,OAAVF,EAAgB,CAAC,IACb3c,EAAMC,YAAe,UAArBD,EACN,OACE,kBAAC8E,EAAA,EAAD,CAAOzH,QAAQ,SAASiP,QAAS,kBAAMA,KAAWwQ,aAAW,GAC1D9c,EAAE2c,IAGF,GAAa,OAATC,EAAe,CAAC,IACnB5c,EAAMC,YAAe,SAArBD,EAEN,OACE,kBAAC8E,EAAA,EAAD,CAAOzH,QAAQ,OAAOiP,QAAS,kBAAMA,KAAWwQ,aAAW,GACxD9c,EAAE4c,IAIT,OAAO,sCCxCM,YAAC1gB,GAId,IAKMU,EAAQC,OAAOC,OALN,CAAEwE,UAAW,qBAKUpF,GAK9BuH,EAAa7G,EAAM+C,cAAnB8D,SAEA7D,EAAgBhD,EAAMiD,gBAAtBD,YAIFmd,GADQ9c,YAAe,oBAArBD,EACe,SAACgd,GACtBliB,EAAKiiB,eAAeC,KAShBC,EAAiB,SAAC1N,GACtBwN,EAAexN,GAEE,OAAb9L,GACF7D,EAAY,CACVS,IAAK,yBACLZ,KAAM,CAAEwH,MAAOxD,EAASwD,MAAOsI,eAMnC,OACE,oCACE,yBAAKxR,MAAO,CAAEkD,OAAQ,SACtB,kBAAC+J,EAAA,EAAD,CACEC,MAAI,EACJ5N,QAAQ,QACRU,MAAO,CAAEmR,OAAQ,WACjBpR,QAAS,WACPmf,EAAe,QALnB,MASS,IACT,kBAACjS,EAAA,EAAD,CACEC,MAAI,EACJ5N,QAAQ,QACRU,MAAO,CAAEmR,OAAQ,WACjBpR,QAAS,WACPmf,EAAe,QALnB,QCbO,cAAM,MASOnd,oBAAS,GAThB,mBASZzE,EATY,KASL6hB,EATK,OAUiBpd,oBAAS,GAV1B,mBAUZqd,EAVY,KAUAC,EAVA,OAWmBtd,oBAAS,GAX5B,mBAWZud,EAXY,KAWCC,EAXD,OAaWlB,GAAe,KAAM,WAbhC,mBAaZ/a,EAbY,KAaHM,EAbG,OAea7B,mBAASmT,KAAKsK,OAf3B,mBAeZC,EAfY,KAeFC,EAfE,OAiBWrB,GAAesB,cAAU,WAjBpC,mBAiBZC,EAjBY,KAiBHC,EAjBG,OAkBexB,IAAe,EAAO,aAlBrC,mBAkBZyB,EAlBY,KAkBDC,EAlBC,OAmBa1B,IAAe,EAAO,YAnBnC,mBAmBZ7Y,EAnBY,KAmBFwa,EAnBE,OAoBqB3B,GAAe,IAAK,gBApBzC,mBAoBZ5M,EApBY,KAoBEiG,EApBF,OAqBqB3V,mBAAS,EAAG,gBArBjC,mBAqBZke,EArBY,KAqBEC,EArBF,QAsBiB7B,GAAe,KAAM,cAtBtC,qBAsBZ/G,GAtBY,MAsBA6I,GAtBA,SAuBqB9B,GAAe,KAAM,gBAvB1C,qBAuBZjT,GAvBY,MAuBEgV,GAvBF,SAwBS/B,GAAe,KAAM,UAxB9B,qBAwBZ7O,GAxBY,MAwBJ6Q,GAxBI,SAyBuBhC,GACxC,UACA,iBA3BiB,qBAyBZjO,GAzBY,MAyBGG,GAzBH,SA6BuC8N,GACxD,KACA,yBA/BiB,qBA6BZ5B,GA7BY,MA6BWC,GA7BX,SAiC2B2B,GAC5C,KACA,mBAnCiB,qBAiCZ9G,GAjCY,MAiCK+I,GAjCL,SAqC+BjC,GAChD,KACA,qBAvCiB,qBAqCZhT,GArCY,MAqCOkV,GArCP,SAyCmBlC,GAAe,KAAM,eAzCxC,qBAyCZ5O,GAzCY,MAyCC+Q,GAzCD,SA0CqCnC,GACtD,EACA,wBA5CiB,qBA0CZ7G,GA1CY,MA0CUiJ,GA1CV,SA8CyCpC,GAC1D,EACA,0BAhDiB,qBA8CZ/S,GA9CY,MA8CYoV,GA9CZ,SAkD6BrC,GAC9C,EACA,oBApDiB,qBAkDZ3O,GAlDY,MAkDMiR,GAlDN,SAsD+BtC,GAChD,EACA,qBAxDiB,qBAsDZ5G,GAtDY,MAsDOmJ,GAtDP,SA0DmCvC,GACpD,EACA,uBA5DiB,qBA0DZ9S,GA1DY,MA0DSsV,GA1DT,SA8DuBxC,GAAe,EAAG,iBA9DzC,qBA8DZ1O,GA9DY,MA8DGmR,GA9DH,SA+DazC,GAAe,KAAM,YA/DlC,qBA+DZ3Y,GA/DY,MA+DFqb,GA/DE,SAgEG1C,GAAe,KAAM,OAhExB,qBAgEZvU,GAhEY,MAgEPkX,GAhEO,SAiEuB3C,GACxC,KACA,iBAnEiB,qBAiEZ5Y,GAjEY,MAiEGwb,GAjEH,SAqEmB5C,GAAe,KAAM,eArExC,qBAqEZ9M,GArEY,MAqEClB,GArED,SAsEyBgO,GAC1C,KACA,kBAxEiB,qBAsEZpL,GAtEY,MAsEIiO,GAtEJ,SA0E2B7C,GAC5C,KACA,mBA5EiB,qBA0EZnL,GA1EY,MA0EKiO,GA1EL,SA8E+B9C,GAChD,EACA,qBAhFiB,qBA8EZlL,GA9EY,MA8EOiO,GA9EP,SAkFqC/C,GACtD,EACA,wBApFiB,qBAkFZjL,GAlFY,MAkFUiO,GAlFV,SAsFqChD,IACtD,EACA,wBAxFiB,qBAsFZhL,GAtFY,MAsFUiO,GAtFV,SA0FyBjD,GAC1C,KACA,kBA5FiB,qBA0FZ/K,GA1FY,MA0FIiO,GA1FJ,SA8F6BlD,GAC9C,KACA,oBAhGiB,qBA8FZ9K,GA9FY,MA8FMiO,GA9FN,SAmG6BnD,GAC9C,KACA,oBArGiB,qBAmGZ7K,GAnGY,MAmGMiO,GAnGN,SAwGuCpD,GACxD,KACA,yBA1GiB,qBAwGZ5K,GAxGY,MAwGWiO,GAxGX,SA4G2CrD,GAC5D,EACA,2BA9GiB,qBA4GZ3K,GA5GY,MA4GaiO,GA5Gb,SAmHftD,GAAe,EAAG,8BAnHH,qBAiHjB1K,GAjHiB,MAkHjBiO,GAlHiB,SAqHqCvD,GACtD,KACA,wBAvHiB,qBAqHZzK,GArHY,MAqHUiO,GArHV,SA0HmCxD,GACpD,KACA,uBA5HiB,qBA0HZzQ,GA1HY,MA0HSC,GA1HT,SAiIiB9L,mBAAS,MAjI1B,qBAiIZ+f,GAjIY,MAiIAxR,GAjIA,SAkIqBvO,mBAAS,MAlI9B,qBAkIZggB,GAlIY,MAkIEC,GAlIF,SAoIiCjgB,mBAAS,MApI1C,qBAoIZkgB,GApIY,MAoIQC,GApIR,SAqIiDngB,mBAClE,MAtIiB,qBAqIZogB,GArIY,MAqIgBC,GArIhB,SAiJfrgB,mBAAS,MAjJM,qBA+IjBsgB,GA/IiB,MAgJjBC,GAhJiB,SAkJ2CvgB,mBAAS,MAlJpD,qBAkJZwgB,GAlJY,MAkJaC,GAlJb,SAoJIzgB,mBAAS,MAAzB0gB,GApJY,wBAqJapE,GAC9BthB,EAAK2lB,QAAQrlB,YAAY,GACzB,YAvJiB,qBAqJZmU,GArJY,MAqJFmR,GArJE,SAyJqBtE,GACtC,OACA,gBA3JiB,qBAyJZtB,GAzJY,MAyJE6F,GAzJF,SAiK6B7gB,mBAAS,IAjKtC,qBAiKZJ,GAjKY,MAiKMkhB,GAjKN,SAkKO9gB,mBAAS,MAlKhB,qBAkKZ6c,GAlKY,MAkKLkE,GAlKK,SAmKK/gB,mBAAS,MAnKd,qBAmKZ8c,GAnKY,MAmKNkE,GAnKM,MA4KbnhB,GAAgB,CACpBtE,QAEA8hB,aAGAE,cACAhc,UAEAmc,WAEAG,UAGAtI,WAAY5I,KAAK+P,MAAMnH,IACvBlM,aAAcsD,KAAK+P,MAAMrT,IACzBoE,OAAQd,KAAK+P,MAAMjP,IACnBY,iBACAqM,yBACAlF,mBACAlM,qBACAoE,eACA+H,wBACAlM,0BACAoE,oBACA+H,qBACAlM,uBACAoE,iBACAjK,SAAUgJ,KAAK+P,MAAM/Y,IAErBoc,cACAC,gBACAjC,YACAta,WACAiM,eACAwO,eAEAxa,iBACA8L,eACAzH,OACAmJ,eAAgBvE,KAAK+P,MAAMxL,IAC3BC,mBACAC,qBACAC,wBACAC,wBACAC,kBACAC,oBACAC,iBAAkB9E,KAAK+P,MAAMjL,IAC7BC,yBACAC,2BACAC,8BACAC,wBACAhG,oBAAqBc,KAAK+P,MAAM7Q,IAEhC6U,gBACAR,sBACAE,8BACAE,+BACAE,2BACA/Q,YACAuL,gBAEApb,oBACAid,SACAC,SAOIhb,GAAgB,CACpBsb,WAEAE,gBAGAE,iBACA3b,aAEA8b,cAEAG,aAEAM,iBACAC,mBACAC,aACA9P,oBACAmM,4BACA4D,sBACAC,wBACAC,kBACAC,2BACAC,6BACAC,uBACAC,wBACAC,0BACAC,oBACAf,eACA4C,eACA5B,eAEAf,cACAtI,kBACAwI,kBAEA5P,iBACA0R,mBACAf,oBACA5Q,kBACA2Q,UACAE,qBACAC,sBACAC,wBACAC,2BACAC,2BACAC,qBACAC,uBACAC,uBACAC,4BACAC,8BACAC,iCACAC,2BACAhU,0BAEAgV,uBACAX,yBACAE,iCACAE,kCACAE,gCN9SqB,SAACve,GAAc,IAAD,EACGlC,mBAAS,MADZ,mBAC9BihB,EAD8B,KAChBC,EADgB,KAErCtF,GAAOuF,GAAP,kBAA4B,SAACxhB,GAC3BuhB,EAAgBvhB,MAWlB2C,qBAAU,WACa,OAAjB2e,GAEJ/e,EAAS+e,KAER,CAACA,IMsSJG,EAAU,SAACzhB,GAUT0hB,GAAgB,CACdjlB,KAAMuD,EACNiR,QAASA,QA2Bb,IAAM9Q,GAAc,SAAC,GAA0B,IAAxBS,EAAuB,EAAvBA,IAAuB,IAAlBZ,YAAkB,MAAX,KAAW,EAC5C,QAAI2hB,GAAe,CAAE/gB,MAAKZ,OAAMke,UAAS9V,IAAK,MAAO6I,eAInDhO,QAAQC,IAAI,8BACLoZ,GAAS,CAAE1b,MAAKwH,IAAK,MAAO8V,UAASle,QAAQpE,KAQlD+lB,GAAiB,SAAC,GAA0C,IAAxC/gB,EAAuC,EAAvCA,IAAKZ,EAAkC,EAAlCA,KAAMke,EAA4B,EAA5BA,QAAS9V,EAAmB,EAAnBA,IAAK6I,EAAc,EAAdA,QAUjD,OAJAjR,EAAK+d,SAAWA,EAEhB7b,EAAWtB,GCpaA,SAACnE,GAId,IAKMU,EAAQC,OAAOC,OALN,GAKuBZ,GAC9BmE,EAAqCzD,EAArCyD,IAAKZ,EAAgC7C,EAAhC6C,KAAMke,EAA0B/gB,EAA1B+gB,QAAS9V,EAAiBjL,EAAjBiL,IAAK6I,EAAY9T,EAAZ8T,QAOzBrV,EAAUqV,EAAQ/Q,cAAlBtE,MAjBe,EAuBnBqV,EAAQ9O,cAJVkd,EAnBqB,EAmBrBA,YACAC,EApBqB,EAoBrBA,OACAC,EArBqB,EAqBrBA,iBAMEqC,GAAe,EAKbC,EAAY,SAACjhB,EAAK2B,GAClBqf,GACAhhB,IAAQzD,EAAMyD,KAAe,YAARA,IACvB2B,IACAqf,GAAe,IAwDnB,OAhDAC,EAAU,gBAAgB,WAIxBxC,EAAYrS,KAAKC,UAAUjN,IAC3Bsc,GAAS,CAAE1b,MAAKZ,OAAMoI,MAAK8V,WAAWtiB,MAGxCimB,EAAU,oBAAoB,WAE5BvC,EAAOtf,EAAKwE,YACZ+a,EAAiBvf,EAAKwE,YACtB8X,GAAS,CAAE1b,MAAKZ,OAAMoI,MAAK8V,WAAWtiB,MAwBxCimB,EAAU,WAAW,WAGnB,OAFAvF,GAAS,CAAE1b,MAAKZ,OAAMoI,MAAK8V,WAAWtiB,IAE/B,KASFgmB,ED0UEE,CAAe,CACpBlhB,MACAZ,OACAke,UACA9V,MACA6I,aAQEyQ,GAAkB,SAAC,GAAuB,IAArBjlB,EAAoB,EAApBA,KAAMwU,EAAc,EAAdA,QAO/B,MAAuB,UAAhBxU,EAAKslB,OE1bD,YAAwB,IAArBtlB,EAAoB,EAApBA,KAAMwU,EAAc,EAAdA,QAShB9T,EAAQC,OAAOC,OALN,GAKuBZ,GATF,EAeawU,EAAQ9O,cAAjDD,EAf4B,EAe5BA,WAAYod,EAfgB,EAehBA,OAAQC,EAfQ,EAeRA,iBACpBnd,EAAgB6O,EAAQ7Q,gBAAxBgC,YAIAxB,EAAwBzD,EAAxByD,IAAKsc,EAAmB/f,EAAnB+f,MAAO8E,EAAY7kB,EAAZ6kB,QACpB/e,QAAQC,IAAR,iBAAsBtC,GAAOsc,EAAO8E,EAAS7kB,EAAO8T,GAGpD,IAAIgR,GAAa,EAKXC,EAAU,SAACliB,EAAMuC,GACrB,IAAI0f,EAAJ,CADkC,kBAEZjiB,EAFY,GAE3BmiB,EAF2B,KAEtBJ,EAFsB,KAGlC,OAAKI,IAAQvhB,GAAOmhB,IAAW7E,EAAMkF,MAAiB,YAARD,KAC5C5f,IACAL,EAAW,MACX+f,GAAa,GACN,KAyFX,OA7EAC,EAAQ,CAAC,eAAgB,oBAAoB,WAE3C,OADA9f,EAAY,mBAAoB,UACzB,KAGT8f,EAAQ,CAAC,eAAgB,oBAAoB,WAE3C,OADA9f,EAAY,mBAAoB,UACzB,KAGT8f,EAAQ,CAAC,eAAgB,oBAAoB,WAE3C,OADA9f,EAAY,mBAAoB,UACzB,KAGT8f,EAAQ,CAAC,gBAAiB,oBAAoB,WAE5C,OADA9f,EAAY,4BAA6B,UAClC,KAGT8f,EAAQ,CAAC,yBAA0B,oBAAoB,WAErD,OAAO,KAGTA,EAAQ,CAAC,uBAAwB,oBAAoB,WAEnD,OADA9f,EAAY,0BAA2B,UAChC,KAGT8f,EAAQ,CAAC,gCAAiC,oBAAoB,WAE5D,OADA9f,EAAY,0BAA2B,UAChC,KAGT8f,EAAQ,CAAC,iBAAkB,oBAAoB,WAE7C,OAAO,KAGTA,EAAQ,CAAC,yBAA0B,oBAAoB,WAErD,OAAO,KAGTA,EAAQ,CAAC,cAAe,oBAAoB,WAE1C,OAAO,KAGTA,EAAQ,CAAC,mBAAoB,iBAAiB,WAI5C,OAHA5C,EAAO,MACPC,EAAiB,MACjBnd,EAAY,iCAAkC,UACvC,KAGT8f,EACE,CAAC,mBAAoB,6CACrB,WAIE,OAHA5C,EAAO,MACPC,EAAiB,MACjBnd,EAAY,iCAAkC,UACvC,KAIX8f,EAAQ,CAAC,uBAAwB,2BAA2B,WAE1D,OADA9f,EAAY,iBAAkB,UACvB,KAGT8f,EAAQ,CAAC,YAAY,WAEnB,OADA9f,EAAY8a,EAAMkF,KAAM,UACjB,MAGF,EF8TDC,CAAa,CACX5lB,KAAMA,EACN2L,IAAKA,GACL6I,QAASA,IGhcJ,YAAwB,IAArBxU,EAAoB,EAApBA,KAAMwU,EAAc,EAAdA,QAShB9T,EAAQC,OAAOC,OALN,GAKuBZ,GATF,EAiChCwU,EAAQ/Q,cAhBVtE,EAjBkC,EAiBlCA,MAEAmiB,EAnBkC,EAmBlCA,SACAnI,EApBkC,EAoBlCA,WACAlM,EArBkC,EAqBlCA,aACAoE,EAtBkC,EAsBlCA,OAGA9J,EAzBkC,EAyBlCA,SAGAuN,GA5BkC,EA0BlCxN,cA1BkC,EA4BlCwN,gBACAO,EA7BkC,EA6BlCA,iBACA5F,EA9BkC,EA8BlCA,oBACAgG,EA/BkC,EA+BlCA,qBACAmO,EAhCkC,EAgClCA,aAhCkC,EAkEhCpP,EAAQ9O,cA/BVD,EAnCkC,EAmClCA,WACAic,EApCkC,EAoClCA,WACAM,EArCkC,EAqClCA,cACAC,EAtCkC,EAsClCA,gBACAC,EAvCkC,EAuClCA,UACAC,EAxCkC,EAwClCA,mBACAC,EAzCkC,EAyClCA,qBACAC,EA1CkC,EA0ClCA,eACAT,EA3CkC,EA2ClCA,aAEAgB,EA7CkC,EA6ClCA,YACAf,EA9CkC,EA8ClCA,YACAtI,EA/CkC,EA+ClCA,gBACAwI,EAhDkC,EAgDlCA,gBAGA5P,EAnDkC,EAmDlCA,cACA0R,EApDkC,EAoDlCA,gBACAf,EArDkC,EAqDlCA,iBACAD,EAtDkC,EAsDlCA,OACAE,EAvDkC,EAuDlCA,kBACAC,EAxDkC,EAwDlCA,mBACAG,EAzDkC,EAyDlCA,wBACAG,EA1DkC,EA0DlCA,oBACAC,EA3DkC,EA2DlCA,yBACA7T,EA5DkC,EA4DlCA,uBAEAgV,EA9DkC,EA8DlCA,oBACAP,EA/DkC,EA+DlCA,+BACAE,EAhEkC,EAgElCA,2BAhEkC,EA+EhC7P,EAAQ7Q,gBAXVD,EApEkC,EAoElCA,YAGA2O,GAvEkC,EAsElCqD,cAtEkC,EAuElCrD,gBACAwT,EAxEkC,EAwElCA,mBACAlQ,EAzEkC,EAyElCA,oBACAC,EA1EkC,EA0ElCA,uBACAjQ,EA3EkC,EA2ElCA,YACAkb,EA5EkC,EA4ElCA,eAMAiF,EAEEtR,EAAQtJ,oBAFV4a,WAOM3hB,EAAQzD,EAARyD,IAUJhF,GAAOqH,QAAQC,IAAR,oBAAyBtC,GAAOzD,EAAO8T,GAElD,IAAIuR,IAAgB,EAKdC,GAAa,SAACziB,EAAMuC,GACxB,IAAIigB,GAAJ,CADqC,kBAEfxiB,EAFe,GAE9BmiB,EAF8B,KAEzBJ,EAFyB,MASlChE,IAAa5gB,EAAMulB,QAAQ3E,UAC1BoE,IAAQhlB,EAAMyD,KACdmhB,IAAW5kB,EAAM4kB,QACX,YAARI,KAEI5f,KACFL,EAAW,MAEbsgB,IAAgB,KA24BpB,OA93BAC,GAAW,CAAC,gBAAiB,YAAY,WAEvC,OADApE,GAAa,IACN,KAMToE,GAAW,CAAC,cAAe,YAAY,WAIrC,OADApE,GAAa,IACN,KAMToE,GAAW,CAAC,gBAAiB,YAAY,WAEvC,OAAO,KAGTA,GAAW,CAAC,gBAAiB,aAAa,WACxC,MAAmB,sBAAftlB,EAAMqB,QACJrB,EAAMwlB,QAAQC,SAAW,MAcjCH,GAAW,CAAC,gBAAiB,YAAY,WAYrC,OADAF,EAAW,oBACJ,KAIXE,GAAW,CAAC,uBAAwB,aAAa,WAC/C,MAAmB,6BAAftlB,EAAMqB,OACJrB,EAAMwlB,QAAQE,aAAe,GAUhB,iBAAf1lB,EAAMqB,SACJrB,EAAMwlB,QAAQE,aAAe,KAE/BN,EAAW,aACJ,OAyBbE,GAAW,CAAC,gCAAiC,YAAY,WAGvD,OAFA7B,GAA+B,IAExB,KAMT6B,GAAW,CAAC,eAAgB,aAAa,WAEvC,GAAmB,iBAAftlB,EAAMqB,KAAyB,CAKjC,GAA6B,IAAzBrB,EAAMwlB,QAAQZ,OAchB,OAZA1C,EAAYrS,KAAKC,UAAU9P,EAAMwlB,UACjCpD,EAAiBpiB,EAAMwlB,QAAQva,KAC/B+V,EAAWhhB,EAAMwlB,QAAQnb,OACzBwO,EAAgB7Y,EAAMwlB,QAAQG,eAC9BtE,EACEuE,MAAM5lB,EAAMwlB,QAAQK,eAAiB,EAAI7lB,EAAMwlB,QAAQK,eAEzD1F,EAAengB,EAAMwlB,QAAQ7S,UAC7BwO,GAAY,GAGZiE,EAAW,aACJ,EAKF,GAA6B,IAAzBplB,EAAMwlB,QAAQZ,OAEvB,OADAQ,EAAW,oBACJ,EAKF,GAA6B,IAAzBplB,EAAMwlB,QAAQZ,OAGvB,OAFAnT,EAAc,aACdxM,EAAY,oBAAqB,UAC1B,EAKF,GAA6B,IAAzBjF,EAAMwlB,QAAQZ,OAGvB,OAFAnT,EAAc,aACdxM,EAAY,kBAAmB,UACxB,MAQbqgB,GAAW,CAAC,eAAgB,aAAa,WACvC,OAAItlB,EAAM8lB,SAAW,IAGnB7gB,EAAY,kBAAmB,SAC/BwM,EAAc,eAHP,KAQX6T,GAAW,CAAC,eAAgB,YAAY,WACtC,OAAO,KAMTA,GAAW,CAAC,cAAe,YAAY,WAErC,OADAtiB,EAAY,CAAES,IAAK,WAAYZ,KAAM,CAAEwH,MAAOxD,EAASwD,UAChD,KAMTib,GAAW,CAAC,WAAY,aAAa,WACnC,MAAmB,iBAAftlB,EAAMqB,OACR6gB,EAAYrS,KAAKC,UAAU9P,EAAMwlB,WAC1B,MAQXF,GAAW,CAAC,WAAY,aAAa,WACnC,MAAmB,iBAAftlB,EAAMqB,KACe,IAAnBrB,EAAM8lB,WAGoB,IAAnB9lB,EAAM8lB,WAQfrU,EAAc,cAEP,KAIU,IAAjBzR,EAAM+lB,QAURtU,EAAc,cATP,MAeX6T,GAAW,CAAC,WAAY,YAAY,WAClC,OAAO,KAMTA,GAAW,CAAC,sBAAuB,aAAa,WAC9C,GAAmB,sBAAftlB,EAAMqB,KAA8B,CACtC,IAAMkU,EAAWvV,EAAMwlB,QACf9P,EAAgBH,EAAhBG,YACe,OAAnBtB,GACFiO,EAAkBxS,KAAKC,UAAU,CAACyF,KAClCN,EAAoBS,EAAa,EAAG,IAEpC2M,EAAkBxS,KAAKC,UAAL,uBAAmBsE,GAAnB,CAAmCmB,UAE/B,qBAAfvV,EAAMqB,MACfihB,EAAmBtiB,EAAMwlB,QAAQQ,kBAGnC,OAAO,KAMTV,GAAW,CAAC,sBAAuB,aAAa,WAI9C,OAFA7C,GAAwB,GACxBhR,EAAc,iBACP,KAGT6T,GAAW,CAAC,sBAAuB,YAAY,WAE7C,OAAO,KAMTA,GAAW,CAAC,wBAAyB,aAAa,WAyBhD,MAdmB,oBAAftlB,EAAMqB,KAENuhB,EADuB,OAArBjO,EACkB9E,KAAKC,UAAU,CAAC9P,EAAMwlB,UAGxC3V,KAAKC,UAAL,uBAAmB6E,GAAnB,CAAqC3U,EAAMwlB,YAGvB,mBAAfxlB,EAAMqB,MACfwhB,EAAyB7iB,EAAMwlB,QAAQS,iBAKlC,KAMTX,GAAW,CAAC,wBAAyB,aAAa,WAChD,OAAO,KAMTA,GAAW,CAAC,2BAA4B,aAAa,WAWnD,MAVmB,kBAAftlB,EAAMqB,MAEN2N,EAD0B,OAAxBD,EACqBc,KAAKC,UAAU,CAAC9P,EAAMwlB,UAG3C3V,KAAKC,UAAL,uBAAmBf,GAAnB,CAAwC/O,EAAMwlB,aAK7C,KAMTF,GAAW,CAAC,2BAA4B,aAAa,WACnD,OAAO,KAgBTA,GAAW,CAAC,qBAAsB,aAAa,WAW7C,MARmB,sBAAftlB,EAAMqB,MAENghB,EADqB,OAAnBjO,EACgBvE,KAAKC,UAAU,CAAC9P,EAAMwlB,UAEtB3V,KAAKC,UAAL,uBAAmBsE,GAAnB,CAAmCpU,EAAMwlB,aAIxD,KAMTF,GAAW,CAAC,qBAAsB,aAAa,WAG7C,QAAItlB,EAAM8lB,SAAW,KAInBhgB,QAAQC,IAAI,iCAEL,MAIXuf,GAAW,CAAC,qBAAsB,YAAY,WAE5C,OAAO,KAMTA,GAAW,CAAC,oBAAqB,aAAa,WAW5C,MAVmB,oBAAftlB,EAAMqB,MAENuhB,EADuB,OAArBjO,EACkB9E,KAAKC,UAAU,CAAC9P,EAAMwlB,UAGxC3V,KAAKC,UAAL,uBAAmB6E,GAAnB,CAAqC3U,EAAMwlB,aAK1C,KAMTF,GAAW,CAAC,oBAAqB,aAAa,WAC5C,OAAO,KAMTA,GAAW,CAAC,wBAAyB,aAAa,WAShD,OAPEtW,EAD0B,OAAxBD,EACqBc,KAAKC,UAAU,CAAC9P,EAAMwlB,UAG3C3V,KAAKC,UAAL,uBAAmBf,GAAnB,CAAwC/O,EAAMwlB,aAI3C,KAMTF,GAAW,CAAC,wBAAyB,aAAa,WAChD,OAAO,KAMTA,GAAW,CAAC,cAAe,aAAa,WAMtC,OALAxf,QAAQC,IAAI,4BAIZie,EAAoB3N,KAAKsK,QAClB,KAKT2E,GAAW,CAAC,cAAe,aAAa,WACtC,MAAmB,aAAftlB,EAAMqB,MACe,IAAnBrB,EAAM8lB,YAWdR,GAAW,CAAC,cAAe,YAAY,WACrC,OAAO,KAMTA,GAAW,CAAC,mBAAoB,aAAa,WAC3C,OAAItlB,EAAMwlB,QAAQE,aAAe,IAE/BvD,EAAO,MACPC,EAAiB,MACjBnd,EAAY,eAAgB,UACrB,MAQXqgB,GAAW,CAAC,mBAAoB,YAAY,WAS1C,OAFA3T,KAEO,KAMT2T,GAAW,CAAC,mBAAoB,aAAa,WAIxB,iBAAftlB,EAAMqB,MACR6gB,EAAYrS,KAAKC,UAAU9P,EAAMwlB,aAiBrCF,GAAW,CAAC,mBAAoB,aAAa,WAC3C,MAAmB,iBAAftlB,EAAMqB,MACe,IAAnBrB,EAAM8lB,WAER7gB,EAAY,eAAgB,UACrB,MAiBbqgB,GAAW,CAAC,eAAgB,YAAY,WAEtC,OAAO,KAMTA,GAAW,CAAC,eAAgB,aAAa,WACvC,MAAmB,6BAAftlB,EAAMqB,SACJrB,EAAMwlB,QAAQC,SAAW,KAC3BtC,EAAgBnjB,EAAMwlB,QAAQC,WACvB,OAYbH,GAAW,CAAC,eAAgB,YAAY,WAEtC,OADAH,EAAmBjC,IACZ,KAMToC,GAAW,CAAC,eAAgB,YAAY,WAEtC,OAAO,KAMTA,GAAW,CAAC,eAAgB,aAAa,WACvC,MAAmB,6BAAftlB,EAAMqB,SACJrB,EAAMwlB,QAAQC,SAAW,KAC3BtC,EAAgBnjB,EAAMwlB,QAAQC,WACvB,OAYbH,GAAW,CAAC,eAAgB,YAAY,WAEtC,OADAH,EAAmBjC,IACZ,KAMToC,GAAW,CAAC,eAAgB,YAAY,WAEtC,OAAO,KAMTA,GAAW,CAAC,eAAgB,aAAa,WACvC,MAAmB,6BAAftlB,EAAMqB,SACJrB,EAAMwlB,QAAQC,SAAW,KAC3BtC,EAAgBnjB,EAAMwlB,QAAQC,WACvB,OAYbH,GAAW,CAAC,eAAgB,YAAY,WAEtC,OADAH,EAAmBjC,IACZ,KAMToC,GAAW,CAAC,oBAAqB,aAAa,WAG5C,QAAItlB,EAAMwlB,QAAQC,SAAW,KAC3BtC,EAAgBnjB,EAAMwlB,QAAQC,WACvB,MAOXH,GAAW,CAAC,oBAAqB,YAAY,WAS3C,OALAtiB,EAAY,CACVS,IAAK,qBACLZ,KAAM,CAAE6C,GAAIwd,MAGP,KAIToC,GAAW,CAAC,oBAAqB,aAAa,WAG5C,QAAItlB,EAAMwlB,QAAQC,SAAW,KAC3BtC,EAAgBnjB,EAAMwlB,QAAQC,WAEvB,MAOXH,GAAW,CAAC,oBAAqB,YAAY,WAK3C,OAJAtiB,EAAY,CACVS,IAAK,qBACLZ,KAAM,CAAE6C,GAAIwd,MAEP,KAMToC,GAAW,CAAC,iBAAkB,aAAa,WAazC,MAVmB,sBAAftlB,EAAMqB,KAENigB,EADiB,OAAf7I,EACY5I,KAAKC,UAAU,CAAC9P,EAAMwlB,UAEtB3V,KAAKC,UAAL,uBAAmB2I,GAAnB,CAA+BzY,EAAMwlB,YAE7B,qBAAfxlB,EAAMqB,MACfogB,EAAmBzhB,EAAMwlB,QAAQU,mBAG5B,KAMTZ,GAAW,CAAC,iBAAkB,aAAa,WAEzC,OADA7T,EAAc,cACP,KAMT6T,GAAW,CAAC,qBAAsB,aAAa,WAS7C,MARmB,sBAAftlB,EAAMqB,MAENigB,EADiB,OAAf7I,EACY5I,KAAKC,UAAU,CAAC9P,EAAMwlB,UAEtB3V,KAAKC,UAAL,uBAAmB2I,GAAnB,CAA+BzY,EAAMwlB,aAIhD,KAMTF,GAAW,CAAC,qBAAsB,aAAa,WAC7C,OAAO,KAMTA,GAAW,CAAC,mBAAoB,aAAa,WAa3C,MAVmB,wBAAftlB,EAAMqB,KAENkgB,EADmB,OAAjBhV,EACcsD,KAAKC,UAAU,CAAC9P,EAAMwlB,UAEtB3V,KAAKC,UAAL,uBAAmBvD,GAAnB,CAAiCvM,EAAMwlB,YAEjC,uBAAfxlB,EAAMqB,MACfqgB,EAAqB1hB,EAAMwlB,QAAQW,8BAG9B,KAMTb,GAAW,CAAC,mBAAoB,aAAa,WAE3C,OADA7T,EAAc,aACP,KAMT6T,GAAW,CAAC,aAAc,aAAa,WAarC,MAVmB,kBAAftlB,EAAMqB,KAENmgB,EADa,OAAX7Q,EACQd,KAAKC,UAAU,CAAC9P,EAAMwlB,UAEtB3V,KAAKC,UAAL,uBAAmBa,GAAnB,CAA2B3Q,EAAMwlB,YAErB,iBAAfxlB,EAAMqB,MACfsgB,EAAe3hB,EAAMwlB,QAAQY,eAGxB,KAMTd,GAAW,CAAC,aAAc,aAAa,WAErC,OAAO,KAMTA,GAAW,CAAC,wBAAyB,aAAa,WAOhD,OALE/D,EADmB,OAAjBhV,EACcsD,KAAKC,UAAU,CAAC9P,EAAMwlB,UAEtB3V,KAAKC,UAAL,uBAAmBvD,GAAnB,CAAiCvM,EAAMwlB,aAGlD,KAMTF,GAAW,CAAC,wBAAyB,aAAa,WAEhD,OADA3T,KACO,KAGT2T,GAAW,CAAC,mBAAoB,aAAa,WAK3C,QAAItlB,EAAMwlB,QAAQC,SAAW,KAC3BtC,EAAgBnjB,EAAMwlB,QAAQC,WACvB,MAMXH,GAAW,CAAC,mBAAoB,YAAY,WAK1C,OAJAtiB,EAAY,CACVS,IAAK,oBACLZ,KAAM,CAAE6C,GAAIwd,MAEP,KAGToC,GAAW,CAAC,uBAAwB,aAAa,WAC/C,KAAItlB,EAAMwlB,QAAQC,SAAW,GAU3B,OAAO,EAHPtC,EAAgBnjB,EAAMwlB,QAAQC,aAOlCH,GAAW,CAAC,uBAAwB,YAAY,WAO9C,OADApQ,EAAuBH,IAChB,KAGTuQ,GAAW,CAAC,eAAgB,YAAY,WAOtC,OAAO,KAGTA,GAAW,CAAC,qBAAsB,YAAY,WAO5C,OADApQ,EAAuBH,IAChB,KAGTuQ,GAAW,CAAC,iBAAkB,YAAY,WAExC,OADA7B,GAA+B,IACxB,KAGT6B,GAAW,CAAC,kBAAmB,YAAY,WAMzC,OAJA7B,EAA+B,MAC/BE,EAA2B,MAC3ByB,EAAW,YACXngB,EAAY,0BAA2B,SAChC,KAiBTqgB,GAAW,CAAC,YAAY,WACtB,OAAO,KAGFD,GHpkBDgB,CAAgB,CACd/mB,KAAMA,EACN2L,IAAKA,GACL6I,QAASA,KAmBXwS,GAAc,WAClBrC,GAAS,MACTC,GAAQ,OAsJJqC,GAAc,SAACC,GACnB,IAAMC,EAAcpL,OAAOkB,SAASmK,OAEpC,OADkB,IAAIC,gBAAgBF,GACrBG,IAAIJ,IAajBK,GAA6B,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOzc,EAAY,EAAZA,MAG3CrH,GAAY,CACVS,IAAK,uBACLZ,KAAM,CAAEikB,QAAOzc,YA+IbpH,GAAkB,CACtBD,eAEAiC,YAzUkB,SAAC8hB,GAAyB,IAApB9gB,EAAmB,uDAAZ,QAItB,UAATA,EAAmBge,GAAS8C,GAAO7C,GAAQ6C,IAsU3CT,eAGAnG,eAlSqB,SAACC,GACtBliB,EAAKiiB,eAAeC,GACpB0D,GAAY1D,IAiSZxT,OA1Ra,SAAChB,GAAqC,IAA7B+H,EAA4B,uDAAjBf,EACjC,OACE,IAAIM,KAAKC,aAAaR,GAAU,CAC9BS,SAAU,WACVC,sBAAuB,IACtBzG,OAAOhB,EAASwV,GACnB,IACAzN,GAoRF7G,cA3QoB,SAAClB,GACrB,OACE,IAAIsH,KAAKC,aAAaR,GAAU,CAC9BS,SAAU,WACVC,sBAAuB,EACvB2T,sBAAuB,IACtBpa,OAAOhB,GAAU,KAsQtBmN,mBA9PyB,SAACnN,GAC1B,OAAO,IAAIsH,KAAKC,aAAaR,GAAU,CACrCS,SAAU,WACVC,sBAAuB,EACvB2T,sBAAuB,IACtBpa,OAAOhB,IA0PViB,WAnNiB,SACjBoa,GAQI,IAPJpD,EAOG,uDAPO,CACRrT,MAAO,OACPC,IAAK,UACLC,KAAM,UACNwW,KAAM,UACNvL,OAAQ,WAsBJvF,EAAO,IAAIC,KAAK4Q,GACtB,OAAO,IAAI/T,KAAKqD,eAAe5D,GAAUkR,GAASjX,OAAOwJ,IAsLzDyQ,8BACAN,eACA5U,eAxEqB,WACrB3O,GAAY,CACVS,IAAK,mBACLZ,KAAM,CAAEoI,IAAKrE,OAsEfue,mBAlEyB,SAACzf,GAC1B1C,GAAY,CACVS,IAAK,wBACLZ,KAAM,CAAE6C,GAAIA,MAgEdsP,cAvHoB,WAAkB,IAAjBmS,EAAgB,uDAAN,EAC/B9E,GAAkB,MAClBQ,GAAyB,MACzBE,GAA8B,GAC9BJ,GAAoB,MACpB3f,GAAY,CACVS,IAAK,sBACLZ,KAAM,CAAEoI,IAAKrE,GAAewgB,KAAMD,EAASE,MAAO/S,MAEpDkO,GAAwB2E,IA+GxBlS,oBA5G0B,SAACS,GAA+C,IAAlC4R,EAAiC,uDAAtB,KAAMH,EAAgB,uDAAN,EAWnE,OARiB,OAAbG,IACF5E,GAAkB4E,GAClBtE,GAAwB,OAE1BJ,GAAoB,MACpBC,GAAyB,MACzBE,GAA8BoE,GAC9BxE,GAAoBjN,GACb1S,GAAY,CACjBS,IAAK,wBACLZ,KAAM,CACJ6S,YAAaA,EACb0R,KAAMD,EACNE,MAAOxS,OA6FXK,uBAxF6B,SAAC1H,GAAiC,IAArB8Z,EAAoB,uDAAT,KAMrD,OALiB,OAAbA,GAEFtE,GAAwBxV,GAE1BwB,GAAuB,MAChBhM,GAAY,CACjBS,IAAK,2BACLZ,KAAM,CAAE2K,WAAYA,MAiFtBsL,cArJoB,SAACqO,GACrB7F,GAAc,MACdte,GAAY,CACVS,IAAK,iBACLZ,KAAM,CAAEukB,KAAMD,EAASE,MAAOzO,MAEhCgJ,GAAwBuF,IAgJxBxa,gBA7IsB,SAACwa,GACvB5F,GAAgB,MAChBve,GAAY,CACVS,IAAK,mBACLZ,KAAM,CAAEukB,KAAMD,EAASE,MAAO3a,GAAqBzB,IAAKrE,MAE1Dib,GAA0BsF,IAwI1BpW,UArIgB,SAACoW,GACjB3F,GAAU,MACVxe,GAAY,CACVS,IAAK,aACLZ,KAAM,CAAEukB,KAAMD,EAASE,MAAOvW,GAAe7F,IAAKrE,MAEpDkb,GAAoBqF,IAgIpBtU,kBAlQwB,SAAC0U,EAAcC,GACvC,IAKEC,EAJY,IAAIvU,KAAKC,aAAaqU,EAAQ,CACxCrmB,MAAO,WACPwS,SAAU,QAEY+T,cALhB,YAMRC,EAAQ,GACRC,EAAU,GACVjU,EAAW,GAmBb,OAhBA8T,EAAYI,SAAQ,SAAUzM,GAC5B,OAAQA,EAAEnV,MACR,IAAK,QACH0hB,EAAQvM,EAAExT,MACV,MACF,IAAK,UACHggB,EAAUxM,EAAExT,MACZ,MACF,IAAK,WACH+L,EAAWyH,EAAExT,UAOZkgB,WACLP,EACGzf,QAAQ,IAAIP,OAAO,KAAOogB,EAAO,KAAM,IACvC7f,QAAQ,IAAIP,OAAO,KAAOqgB,GAAU,KACpC9f,QAAQ,IAAIP,OAAO,KAAOoM,EAAU,KAAM,MAmO/C7M,WAlCiB,WACjB,MAAO,OAkCPC,aA/BmB,WACnB,MAAO,WAyCT7I,EAAKmmB,GAAG,mBAAmB,SAAUjE,GACnC0D,GAAY1D,MAOd,IAAMgF,GAAa,SAAC2C,GAClBtW,GAAcsW,IAuIVvd,GAAsB,CAC1B4a,cACA4C,SAxHe,SAACnlB,GAGhB,OAAOG,GAAY,CAAES,IAAK,gBAAiBZ,UAsH3C8X,iBAnHuB,WACnBlc,IACJqH,QAAQC,IAAI,wBAEZya,GAAc,GACd/O,GAAc,eAgHd0M,qBA9F2B,SAACzY,GAE5Bqe,GAAgBre,IA6FhBuiB,kBA1FwB,aA2FxBC,WAnFiB,SAACrlB,GAGlBG,GAAYH,IAmFZkR,sBA1E4B,SAAClR,GAG7BG,GAAYH,IAyEZslB,SA3De,WAIf,IAAItlB,EAAO,CACXA,QAAe,OACfA,EAAK+d,SAAWA,EN13BM,SAAC/d,EAAMke,GAA4B,IAAnBtiB,EAAkB,wDACtDA,GAAOqH,QAAQC,IAAR,uBAAoClD,EAAMke,GACrDjC,GAAOM,KAAP,cAA2B,CAEzBvc,KAAMA,EAENke,QAASA,EACTtd,IAAK,gBMo3BL2kB,CAAWvlB,EAAMke,EAAStiB,GAG1B0iB,GAAY,GAGZG,GAAc,MACdC,GAAgB,MAChBC,GAAU,MACV9P,GAAiB,WACjBmM,GAAyB,MACzBuE,GAAiB,MACjB5Q,GAAe,MACfuS,GAAgB,QAChBrC,GAAqB,MACrBQ,GAAY,MACZG,GAAkB,MAClBI,IAAwB,GACxBC,GAAkB,MAClBE,GAAoB,MACpBI,GAAwB,MACxBhU,GAAuB,MACvBgV,GAAoB,IACpBP,GAA+B,MAC/BE,GAA2B,MAE3BM,GAAS,MACTC,GAAQ,OA0BRjE,aArBmB,WAEnBqG,OA0BF9gB,qBAAU,WAeR,OAT6B,OAAzB+gB,GAAY,WACdlL,OAAOqE,aAAa2I,QACpBviB,QAAQC,IAAI,0BAOP,eAKN,IAKHP,qBAAU,WACR,GAAgB,OAAZub,EAAJ,CACA,IAAIle,EAAO,CACXA,QAAe,SACfA,EAAK+d,SAAWA,ENh+BQ,SAAC/d,EAAMke,GAA4B,IAAnBtiB,EAAkB,wDAExDA,GAAOqH,QAAQC,IAAR,yBAAsClD,EAAMke,GAEvDjC,GAAOM,KAAP,gBAA6B,CAC3Bvc,KAAMA,EACNke,QAASA,EACTtd,IAAK,kBM09BL6kB,CAAazlB,EAAMke,EAAStiB,MAE3B,CAACsiB,IAQJvb,qBAAU,cAMP,CAACyb,IAKJzb,qBAAU,cAUP,CAACmB,IAiBJnB,qBAAU,cAIP,CAACoB,KAKJpB,qBAAU,WACmB,OAAvB4d,IAEJyD,GAA2BhX,KAAK+P,MAAMwD,OAGrC,CAACA,KAUJ5d,qBAAU,WAC4B,OAAhCge,IAKJ4B,GAAW,eAGV,CAAC5B,KAKJhe,qBAAU,WAC2B,OAA/B8d,IAxc2B,SAAC,GAAsB,IAApBwD,EAAmB,EAAnBA,MAAOzc,EAAY,EAAZA,MAEzCsZ,GAA2BtZ,GAC3BrH,GAAY,CACVS,IAAK,gCACLZ,KAAM,CAAEikB,QAAOzc,WAucjBke,CAAyB1Y,KAAK+P,MAAM0D,OAGnC,CAACA,KAviCe,OAurBO,SAAC3c,GACzB,MAAO,CACL6hB,aAAc7hB,EACV,oCACA,eACJ8hB,WAAY9hB,EACR,gCACA,wBA2W6B+hB,CAAkB/hB,GAA/C6hB,GAziCW,GAyiCXA,aAAcC,GAziCH,GAyiCGA,WAKhB3U,GAAU,CACd/Q,iBACAiC,iBACA/B,mBACAuH,wBAGIme,GAAWhiB,EAAW,MAAQ,SAEpC,OACE,oCACE,kBAAC,IAAD,KAjXoB,OAAfsc,GAAsB,GAAK,kBAAC,IAAD,CAAUpX,MAAI,EAACkc,GAAI9E,KAoXjD,yBAAK3iB,UAAWqoB,GAAUxnB,MAAO,IAI/B,yBAAKb,UAAWkoB,GAAcrnB,MAAO,IAInC,yBAAKb,UAAU,oBAAoBa,MAAO,CAAEkD,OAAQ,UAKpD,yBAAK/D,UAAWmoB,IAId,yBAAKtnB,MAAO,CAAEkD,OAAQ,UAKtB,6BACE,kBAAC,GAAD,CAAOxB,KAAMiR,MAMf,kBAAC,IAAD,KAIE,kBAAC,IAAD,CACEyJ,OAAK,EACLC,KAAK,IACLnV,UAAW,WACT,OAAO1B,EAAWiiB,GAAQ9U,IAAW+U,GAAM/U,OAO/C,kBAAC,IAAD,CACEyJ,OAAK,EACLC,KAAK,WACLnV,UAAW,WACT,OAAOwgB,GAAM/U,OAOjB,kBAAC,IAAD,CACEyJ,OAAK,EACLC,KAAK,WACLnV,UAAW,WACT,OAAOygB,GAAOhV,OAOlB,kBAAC,IAAD,CACEyJ,OAAK,EACLC,KAAK,kBACLnV,UAAW,WACT,OInqCL,SAAC/I,GAId,IAKMU,EAAQC,OAAOC,OALN,CAAEwE,UAAW,iBAKUpF,GAM9B+jB,EAA0BrjB,EAAMgF,cAAhCqe,sBACAkD,EAAgBvmB,EAAMiD,gBAAtBsjB,YAMAnjB,EAAMC,YAAe,CAACrD,EAAM0E,YAA5BtB,EASF0jB,EAAQP,EAAY,SACpBlc,EAAQkc,EAAY,SAK1B/gB,qBAAU,WACM,OAAVshB,GAA4B,OAAVzc,GAEtBgZ,EACExT,KAAKC,UAAU,CACbgX,QACAzc,aAIH,IAoCH,OAAO,oCA3BY,OAAVyc,EACL,oCACE,4BAAK1jB,EAAE,6DACP,6BACA,2BACGA,EACC,4EAKN,yBAAK9C,UAAU,eACb,kBAAC8F,EAAA,EAAD,CACEC,GAAG,OACHC,UAAU,SACVC,KAAK,KACLC,KAAK,SACLC,cAAY,OACZC,QAAQ,MJylCSqiB,CAAcjV,OAOzB,kBAAC,IAAD,CACEyJ,OAAK,EACLC,KAAK,YACLnV,UAAW,WACT,OK3qCL,SAAC/I,GAId,IASMU,EAAQC,OAAOC,OATN,CACbwE,UAAW,iBACXD,QAAS,kBACT4F,MAAO,MAM6B/K,GAbf,EAqBnBU,EAAM+C,cAFRygB,EAnBqB,EAmBrBA,4BACAE,EApBqB,EAoBrBA,wBAGM1gB,EAAgBhD,EAAMiD,gBAAtBD,YAMAI,EAAMC,YAAe,EACK,IAAhCmgB,EAAuC,SAAW,mBAD5CpgB,EA7Be,EAoCuBF,oBAAS,GApChC,mBAoChBwU,EApCgB,KAoCCC,EApCD,KA+CjBG,EAAiB,WACrBH,GAAoBD,IAMhB1Q,EAASC,IAAW,CACxBiR,SAAUjR,MAEPE,SAAS/D,EAAE,yBACXuH,IAAI,EAAGvH,EAAE,0BAETkE,QACC,mEACAlE,EAAE,2BAoER,OAAoC,IAAhCogB,EAGA,kBAAC,IAAD,CACEnb,UAjEqB,SAAC,GAAD,IACzBC,EADyB,EACzBA,aACAC,EAFyB,EAEzBA,aAEAC,GAJyB,EAGzBC,WAHyB,EAIzBD,QACAE,EALyB,EAKzBA,QAGAC,GARyB,EAMzBC,QANyB,EAOzBC,aAPyB,EAQzBF,QARyB,OAUzB,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAAClE,SAAUwD,GAEzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,iBACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACErD,KAAMyR,EAAkB,OAAS,WACjC9N,YAAaxG,EAAE,kBACf/B,KAAK,WACLuG,MAAOY,EAAO0P,SACd3O,SAAUhB,EAEViB,YAAab,EAAOuP,UAAYxP,EAAQwP,WAE1C,kBAACxO,EAAA,EAAW2O,OAAZ,KACE,kBAAC3O,EAAA,EAAWN,KAAZ,CACE1D,GAAG,mBACHxE,QAAS4W,EACT3W,MAAO,CACLmR,OAAQ,YAGToF,EACC,kBAACY,GAAA,EAAD,CACEjI,SAAS,QACTlP,MAAO,CAAEC,MAAO,iBAGlB,kBAACmX,GAAA,EAAD,CAAYlI,SAAS,QAAQlP,MAAO,CAAEC,MAAO,mBAKnD,kBAAC2H,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAOuP,YAKd,kBAACjO,EAAD,iBACM3K,EADN,CAEEkF,QAASpB,EAAE,UACXqB,QAASzE,EAAMyE,QACfC,UAAW1E,EAAM0E,eAajBwF,iBAAkBlD,EAClBlC,SA/FW,SAACjC,GAGhB,OAFAA,EAAKwH,MAAQqZ,EAEN1gB,EAAY,CAAES,IAAKzD,EAAMyE,QAAS5B,UA6FrC0H,cAAe,CACb2N,SAAU,MAMT,oCAAG9U,EAAE,wBL2hCW4lB,CAAelV,OAO1B,kBAAC,IAAD,CACEyJ,OAAK,EACLC,KAAK,WACLnV,UAAW,WACT,OAAO1B,EAAWiiB,GAAQ9U,IAAW+U,GAAM/U,OAO/C,kBAAC,IAAD,CACEyJ,OAAK,EACLC,KAAK,YACLnV,UAAW,WACT,OAAO1B,EAAWiiB,GAAQ9U,IAAW+U,GAAM/U,OAO/C,kBAAC,IAAD,CACEyJ,OAAK,EACLC,KAAK,YACLnV,UAAW,WACT,OM5tCL,SAAC/I,GAId,IAKMU,EAAQC,OAAOC,OALN,GAKuBZ,GAK9B8D,EAAMC,YAAe,UAArBD,EAde,EAqBKpD,EAAM+C,cAA1Bgd,EArBe,EAqBfA,MAAOpN,EArBQ,EAqBRA,SACPmR,EAAgB9jB,EAAMgF,cAAtB8e,YACA7e,EAAgBjF,EAAMiD,gBAAtBgC,YACAkjB,EAAanoB,EAAMwK,oBAAnB2d,SA6BR,OAjBA3iB,qBAAU,WAIR,IAAMyjB,EAAYlJ,EACZmJ,EAAevW,EAErBwV,IAEArE,EAAYoF,GAEM,OAAdD,GACFhkB,EAAYgkB,EAAW,WAGxB,IAGD,oCACE,4BAAK7lB,EAAE,iBACP,6BAEA,6BACA,uBAAG9C,UAAU,eACX,uBAAGU,KAAK,KAAKoC,EAAE,cNgqCI+lB,CAAOrV,OAOlB,kBAAC,IAAD,CACEyJ,OAAK,EACLC,KAAK,SACLnV,UAAW,WACT,OOztCL,SAAC/I,GAId,IAKMU,EAAQC,OAAOC,OALN,CAAEwE,UAAW,gBAAiBD,QAAS,kBAKhBnF,GAK9BqT,EAAa3S,EAAM+C,cAAnB4P,SACA4Q,EAAkCvjB,EAAMgF,cAAxCue,8BAfe,EAgBcvjB,EAAMiD,gBAAnCD,EAhBe,EAgBfA,YAAaujB,EAhBE,EAgBFA,YAMbnjB,EAAMC,YAAerD,EAAM0E,WAA3BtB,EAEF0jB,EAAQP,EAAY,SACpBlc,EAAQkc,EAAY,SAK1B/gB,qBAAU,WACM,OAAVshB,GAA4B,OAAVzc,GAEtBkZ,EACE1T,KAAKC,UAAU,CACbgX,QACAzc,aAIH,IAUH,IAYMrD,EAASC,IAAW,CACxBoD,MAAOpD,MAEJoD,MAAMjH,EAAE,0BACR+D,SAAS/D,EAAE,wBAwDhB,OAAiB,OAAV0jB,EACL,kBAAC,IAAD,CACEze,UAvDsB,SAAC,GAAD,IACxBC,EADwB,EACxBA,aACAC,EAFwB,EAExBA,aAEAC,GAJwB,EAGxBC,WAHwB,EAIxBD,QACAE,EALwB,EAKxBA,QAGAC,GARwB,EAMxBC,QANwB,EAOxBC,aAPwB,EAQxBF,QARwB,OAUxB,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAAClE,SAAUwD,GACzB,4BAAKlF,EAAE,mBAGP,kBAAC2F,EAAA,EAAKE,MAAN,CAAYC,UAAU,yBACpB,kBAACH,EAAA,EAAKI,MAAN,KAAa/F,EAAE,kBACf,kBAACsG,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACEM,YAAaxG,EAAE,eACf/B,KAAK,QACLuG,MAAOY,EAAO6B,MACdd,SAAUhB,EAEViB,YAAab,EAAO0B,OAAS3B,EAAQ2B,QAEvC,kBAACtB,EAAA,EAAKO,QAAQG,SAAd,CAAuBxD,KAAK,WACzB0C,EAAO0B,SAKd,kBAACtB,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACe,EAAD,iBACM3K,EADN,CAEEkF,QAASpB,EAAE,UACXqB,QAASzE,EAAMyE,QACfC,UAAW1E,EAAM0E,gBAoBrBwF,iBAAkBlD,EAClBlC,SA5Ea,SAACjC,GAEhBA,EAAK8P,SAAWA,EAChB3P,EAAY,CACVS,IAAKzD,EAAMyE,QACX5B,KAAMA,KAwEN0H,cAAe,CACbF,MAAO,MAIX,yBAAK/J,UAAU,eACb,kBAAC8F,EAAA,EAAD,CACEC,GAAG,OACHC,UAAU,SACVC,KAAK,KACLC,KAAK,SACLC,cAAY,OACZC,QAAQ,KP8kCW0iB,CAActV,OAOzB,kBAAC,IAAD,CACEyJ,OAAK,EACLC,KAAK,wBACLnV,UAAW,WACT,OAAOugB,GAAQ9U,OAOnB,kBAAC,IAAD,CACEyJ,OAAK,EACLC,KAAK,yBACLnV,UAAW,WACT,OAAOugB,GAAQ9U,OAOnB,kBAAC,IAAD,CACEyJ,OAAK,EACLC,KAAK,eACLnV,UAAW,WACT,OAAOugB,GAAQ9U,OAOnB,kBAAC,IAAD,CACEyJ,OAAK,EACLC,KAAK,WACLnV,UAAW,WACT,OAAOugB,GAAQ9U,OAOnB,kBAAC,IAAD,CACEyJ,OAAK,EACLC,KAAK,YACLnV,UAAW,WACT,OAAOugB,GAAQ9U,OAOnB,kBAAC,IAAD,CACEyJ,OAAK,EACLC,KAAK,WACLnV,UAAW,WACT,OAAOugB,GAAQ9U,QAQrB,yBAAKxT,UAAU,eACb,kBAAC+oB,GAAqBvV,WQhzCvB,I,OAAA,WAEb,OACE,oCACE,yBAAKxT,UAAU,aACb,yBAAKA,UAAU,sBCAvBgpB,IAASC,OACP,kBAAC,WAAD,CAAUC,SAAU,kBAAC,GAAD,OAClB,kBAAC,GAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.7a8bd1dd.chunk.js","sourcesContent":["import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nimport Backend from \"i18next-xhr-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\n// not like to use this?\r\n// have a look at the Quick start guide\r\n// for passing in lng and translations on init\r\n\r\ni18n\r\n  // load translation using xhr -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-xhr-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    fallbackLng: \"lv\",\r\n    debug: false,\r\n    // lng: \"lv\",\r\n    ns: [\"LogIn\", \"SignUp\"],\r\n    defaultNS: \"Default\",\r\n    keySeparator: false,\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n    react: {\r\n      wait: false,\r\n      withRef: false,\r\n      bindI18n: \"languageChanged loaded\",\r\n      bindStore: \"added removed\",\r\n      nsMode: \"default\",\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","const dev = {\r\n  uri: {\r\n    ENDPOINT: \"http://localhost:9000\",\r\n    // ENDPOINT: \"http://192.168.2.100:9000\"\r\n  },\r\n};\r\n\r\nconst dev2 = {\r\n  uri: {\r\n    ENDPOINT: \"http://192.168.2.100:5000\",\r\n  },\r\n};\r\n\r\nconst staging = {\r\n  uri: {\r\n    ENDPOINT: \"https://dev.zime.lv\",\r\n  },\r\n};\r\n\r\nconst prod = {\r\n  uri: {\r\n    ENDPOINT: \"https://zime.lv\",\r\n  },\r\n};\r\n\r\nconst hostname = window && window.location && window.location.hostname;\r\n\r\nlet config;\r\nswitch (hostname) {\r\n  case \"localhost\":\r\n    config = dev;\r\n    break;\r\n  case \"192.168.2.100\":\r\n    config = dev2;\r\n    break;\r\n  case \"dev.zime.lv\":\r\n    config = staging;\r\n    break;\r\n  case \"zime.lv\":\r\n    config = prod;\r\n    break;\r\n  default:\r\n    config = dev;\r\n    break;\r\n}\r\n\r\nexport default {\r\n  ...config,\r\n};\r\n","import \"./Card.css\";\r\nimport React, { cloneElement } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n// import { Container, Row, Col, Button } from \"react-bootstrap\";\r\n// import Button from \"react-bootstrap/Button\";\r\n\r\nexport default (args) => {\r\n  let defaults = {\r\n    title: \"Untitled\",\r\n    navigation: undefined,\r\n    footer: undefined,\r\n    header: true,\r\n    body: true,\r\n    headerContent: null,\r\n    onNavigationClick: () => {},\r\n  };\r\n  let props = Object.assign(defaults, args);\r\n\r\n  let key = 0;\r\n\r\n  let footer = props.footer ? <Card.Footer>{props.footer}</Card.Footer> : \"\";\r\n\r\n  return (\r\n    <Card>\r\n      {/* <Card.Img variant=\"top\" src=\"holder.js/100px180?text=Image cap\" /> */}\r\n      {props.header && (\r\n        <Card.Header className=\"custom-card\">\r\n          {props.headerContent !== null ? (\r\n            props.headerContent\r\n          ) : (\r\n            <>\r\n              <Card.Title>{props.title}</Card.Title>\r\n              <Nav\r\n                variant=\"tabs\"\r\n                defaultActiveKey={props.navigationdefaultActiveKey}\r\n              >\r\n                {props.navigation &&\r\n                  props.navigation.map((item, key) => (\r\n                    <Nav.Item key={key}>\r\n                      <Nav.Link\r\n                        className=\"custom-card\"\r\n                        href={item.link}\r\n                        onClick={() => props.onNavigationClick(item.link)}\r\n                        style={{ color: \"black\" }}\r\n                      >\r\n                        {item.name}\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                  ))}\r\n              </Nav>\r\n            </>\r\n          )}\r\n        </Card.Header>\r\n      )}\r\n\r\n      {props.body && (\r\n        <Card.Body className=\"custom-card\">\r\n          {React.Children.map(args.children, (child) => {\r\n            if (typeof child !== \"object\") {\r\n              return child;\r\n            } else {\r\n              key++;\r\n              return cloneElement(child, {\r\n                styles: null,\r\n                key: key,\r\n              });\r\n            }\r\n          })}\r\n        </Card.Body>\r\n      )}\r\n      {footer}\r\n    </Card>\r\n  );\r\n};\r\n","import React, { useCallback, useMemo, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nimport { Figure } from \"react-bootstrap\";\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  padding: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  backgroundColor: \"#fafafa\",\r\n  color: \"#bdbdbd\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\n/**\r\n * App: Dropzone\r\n */\r\nexport default (args) => {\r\n  // console.log(\"DROPZONE\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args.data);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  let { accountPhotoPath } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [, setFiles] = useState(null);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(\"AccountRegistration\");\r\n\r\n  // let setFieldValue = data.setFieldValue;\r\n  // let data = args.data;\r\n\r\n  // let accountPhotoPath = data.accountPhotoPath;\r\n  if (accountPhotoPath !== \"\") {\r\n    baseStyle.padding = 0;\r\n    baseStyle.borderStyle = \"none\"; // \"solid\";\r\n    baseStyle.backgroundColor = \"none\";\r\n  }\r\n\r\n  // const [thisData] = useState(data);\r\n  // console.log(\"THIS DATA =====\");\r\n\r\n  // console.log(data);\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    // console.log(getRootProps());\r\n\r\n    // args.onDrop(1);\r\n    // args.context.dropzoneUntouched = false;\r\n\r\n    setFiles(acceptedFiles);\r\n    // sendRequest({\r\n    //   req: \"upload file\",\r\n    //   data: { acceptedFiles: acceptedFiles },\r\n    // });\r\n    let data = { acceptedFiles: acceptedFiles };\r\n    sendRequest({ req: \"upload file\", data: data });\r\n    // setFieldValue(1);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const {\r\n    // acceptedFilesItems,\r\n    // rejectedFilesItems,\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({\r\n    accept: \"image/*\",\r\n    onDrop,\r\n  });\r\n\r\n  // const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n  // const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n  //   onDrop\r\n  // });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragAccept, isDragReject]\r\n  );\r\n\r\n  if (accountPhotoPath === \"\") {\r\n    return (\r\n      <div className=\"container\">\r\n        <div {...getRootProps({ style })}>\r\n          <input {...getInputProps()} />\r\n          <p>{t(\"Click to select the image file\")}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    // accountPhotoPath = \"http://localhost:9000/\" + accountPhotoPath;\r\n    accountPhotoPath = \"gfx/photo_id.png\";\r\n\r\n    return (\r\n      <>\r\n        <div className=\"container\">\r\n          <div {...getRootProps({ style })}>\r\n            <input {...getInputProps()} />\r\n            <Figure.Image\r\n              width={171}\r\n              height={180}\r\n              alt=\"171x180\"\r\n              src={accountPhotoPath}\r\n            />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState } from \"react\";\r\n// import { useTranslation } from \"react-i18next\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport { useTimeout } from \"../../utils/useTimeout\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    caption: \"Submit\",\r\n    request: null,\r\n    namespace: \"Button\",\r\n    visible: true,\r\n    marginTop: 0,\r\n    timeout: 7000, // milliseconds\r\n    onSubmit: () => {},\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { request } = props.barrelGetters;\r\n  const { setRequest } = props.barrelSetters;\r\n  const { showMessage } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  // const { t } = useTranslation([props.namespace]); // adjust namespace\r\n\r\n  const [requestExpired, setRequestExpired] = useState(false);\r\n\r\n  useTimeout(() => {\r\n    if (request !== props.request) return;\r\n    console.log(\"useTimeout\");\r\n\r\n    // Your custom logic here\r\n    // setSeconds(seconds - 1);\r\n    setRequestExpired(true);\r\n    setRequest(null);\r\n    showMessage(\"REQUEST_EXPIRED\", \"error\");\r\n  }, props.timeout);\r\n\r\n  // useEffect(() => {\r\n  //   if (requestExpired)\r\n  // }, [requestExpired]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    return !props.visible ? (\r\n      <></>\r\n    ) : (\r\n      <Button\r\n        type=\"submit\"\r\n        onClick={props.onSubmit}\r\n        block\r\n        disabled={request === props.request && !requestExpired}\r\n        style={{ marginTop: props.marginTop + \"px\" }}\r\n      >\r\n        <Spinner\r\n          as=\"span\"\r\n          animation=\"border\"\r\n          size=\"sm\"\r\n          role=\"status\"\r\n          aria-hidden=\"true\"\r\n          hidden={request !== props.request || requestExpired}\r\n        />\r\n        &nbsp;\r\n        {props.caption}\r\n        &nbsp;\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport const useTimeout = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setTimeout(tick, delay);\r\n      return () => clearTimeout(id);\r\n    }\r\n  }, [delay]);\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport { Form, InputGroup, Alert } from \"react-bootstrap\";\r\n// import { Redirect } from \"react-router-dom\";\r\nimport Card from \"../card\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import { useStickyState } from \"../../utils/state\";\r\nimport Dropzone from \"../dropzone\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  // console.log(\"ACCOUNT REGISTRATION ARGS:\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"register account\",\r\n    namespace: \"AccountRegistration\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    signedIn,\r\n    accountNumber,\r\n    accountPhotoPath,\r\n    userData,\r\n    debug,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    dropzoneHook: yup.string().required(t(\"Photo ID is required\")),\r\n    terms: yup.array().required(t(\"Terms is required\")),\r\n    personalID: yup\r\n      .string()\r\n      .required(t(\"Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      )\r\n      .test({\r\n        name: \"integrity\",\r\n        exclusive: true,\r\n        params: {},\r\n        message: t(\"PersonalID must be valid\"),\r\n        test: (value) => {\r\n          if (typeof value === \"undefined\") return false;\r\n          let pid = value\r\n            .replace(\"-\", \"\")\r\n            .split(\"\")\r\n            .map(function (n) {\r\n              return parseInt(n, 10);\r\n            });\r\n          let calc =\r\n            1 * pid[0] +\r\n            6 * pid[1] +\r\n            3 * pid[2] +\r\n            7 * pid[3] +\r\n            9 * pid[4] +\r\n            10 * pid[5] +\r\n            5 * pid[6] +\r\n            8 * pid[7] +\r\n            4 * pid[8] +\r\n            2 * pid[9];\r\n          let checksum = (1101 - calc) % 11;\r\n\r\n          return checksum === pid[10];\r\n        },\r\n      }),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n\r\n  /**\r\n   * Send account registration request\r\n   * @param {object} data\r\n   */\r\n  const sendAccountRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    // data.data = userData;\r\n    // data.email = JSON.parse(userData).email;\r\n    data.email = userData.email;\r\n\r\n    return sendRequest({ req: props.request, data });\r\n    // return onAccountRegistration(data);\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    if (sendAccountRegistrationRequest(data)) {\r\n      // Account registration request was submitted\r\n    }\r\n  };\r\n\r\n  // let dropzoneUntouched = true;\r\n\r\n  const AccountRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    setFieldValue,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <Form.Group controlId=\"validationFormikPhotoId\">\r\n        <Form.Label>{t(\"Photo ID\")}</Form.Label>\r\n\r\n        <Form.Text>\r\n          <Trans i18nKey=\"AccountRegistration:Photo ID requirements\">\r\n            Photo of me holding my passport. The personal identification number\r\n            must be clearly legible.\r\n          </Trans>\r\n        </Form.Text>\r\n\r\n        <br />\r\n        <Dropzone data={props} />\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationFormikDropzoneHook\">\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"dropzoneHook\"\r\n          value={accountPhotoPath}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.dropzoneHook}\r\n          style={{ display: \"none\" }}\r\n        />\r\n\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {errors.dropzoneHook}\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n\r\n      {false && (\r\n        <Form.Group controlId=\"validationFormikCountry\">\r\n          <Form.Label>{t(\"Country\")}</Form.Label>\r\n          <Form.Control as=\"select\" custom>\r\n            <option>Latvija</option>\r\n            <option>Deutschland</option>\r\n          </Form.Control>\r\n        </Form.Group>\r\n      )}\r\n\r\n      <Form.Group controlId=\"validationFormikPersonalId\">\r\n        <Form.Label>{t(\"Personal ID\")}</Form.Label>\r\n        <InputGroup>\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"XXXXXX-XXXXX\")}\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"personalID\"\r\n            value={values.personalID}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.personalID && touched.personalID}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.personalID}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n      <Form.Group>\r\n        <Form.Check\r\n          required\r\n          name=\"terms\"\r\n          label={t(\"Agree to terms and conditions\")}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.terms && touched.terms}\r\n          feedback={errors.terms}\r\n          id=\"validationFormik0\"\r\n        />\r\n      </Form.Group>\r\n\r\n      <SubmitButton\r\n        {...args}\r\n        caption={t(\"Submit\")}\r\n        request={props.request}\r\n        namespace={props.namespace}\r\n      />\r\n    </Form>\r\n  );\r\n\r\n  if (signedIn === false)\r\n    return (\r\n      <>\r\n        <Alert variant=\"info\">\r\n          <Alert.Heading>{t(\"User not logged in\")}</Alert.Heading>\r\n          <p>\r\n            <Trans i18nKey=\"AccountRegistration:Please log in first\">\r\n              Please log in first.\r\n            </Trans>\r\n          </p>\r\n        </Alert>\r\n      </>\r\n    );\r\n\r\n  if (!debug && accountNumber !== null)\r\n    return (\r\n      <>\r\n        <Alert variant=\"info\">\r\n          <Alert.Heading>{t(\"Account successfully registered\")}</Alert.Heading>\r\n          <p>\r\n            <Trans\r\n              i18nKey=\"AccountRegistration:Account with your personal ID successfully registered\"\r\n              accountNumber={accountNumber}\r\n            >\r\n              Account with the personal ID\r\n              <strong>{{ accountNumber }}</strong>\r\n              successfully registered.\r\n            </Trans>\r\n          </p>\r\n        </Alert>\r\n      </>\r\n    );\r\n\r\n  return (\r\n    <Card title={t(\"Open account\")}>\r\n      <Formik\r\n        component={AccountRegistrationForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          personalID: \"\",\r\n          terms: \"\",\r\n          dropzoneHook: accountPhotoPath,\r\n        }}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import Card from \"../card\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const {\r\n    // format,\r\n    // parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  const { onBusinessRegistration } = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([\"BusinessRegistration\"]);\r\n\r\n  const schema = yup.object({\r\n    businessTitle: yup\r\n      .string()\r\n      .required(t(\"Business title is a required field\"))\r\n      .min(3, t(\"Business title too short\"))\r\n      .max(70, t(\"Business title too long\"))\r\n      .trim(),\r\n    businessDescription: yup.string().optional(),\r\n  });\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const registerBusiness = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n\r\n    // console.log(\"REGISTER BUSINESS DATA:\", data);\r\n\r\n    // onBusinessRegistration({ req: \"register business\", data: data });\r\n    sendRequest({ req: \"register business\", data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    registerBusiness(data);\r\n  };\r\n\r\n  const RegisterBusinessForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Business Title (Business ID) */}\r\n      <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n        <Form.Label>{t(\"Business Title\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"\"\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"businessTitle\"\r\n            value={values.businessTitle}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.businessTitle && touched.businessTitle}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.businessTitle}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Business Description */}\r\n      <Form.Group\r\n        controlId=\"businessDescription\"\r\n        name=\"businessDescription\"\r\n        value={values.businessDescription}\r\n        onChange={handleChange}\r\n      >\r\n        <Form.Label>{t(\"Business Description\")}</Form.Label>\r\n        <Form.Control as=\"textarea\" rows=\"3\" />\r\n      </Form.Group>\r\n\r\n      {/* Submit button */}\r\n      <Button type=\"submit\" block>\r\n        {t(\"Submit\")}\r\n      </Button>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterBusinessForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        businessTitle: \"\",\r\n        businessDescription: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\n// import { useTranslation } from \"react-i18next\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"Pagination\",\r\n    size: \"md\",\r\n    countItems: 0,\r\n    itemsPerPage: 5,\r\n    active: 0, // active page\r\n    onClick: () => {},\r\n    align: \"center\",\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  const pages = Math.ceil(props.countItems / props.itemsPerPage);\r\n\r\n  if (pages < 2) return <></>;\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  // const { t } = useTranslation([props.namespace]);\r\n\r\n  const onClick = (number) => {\r\n    // console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = props.active > 1 ? props.active - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          props.active < Math.ceil(props.countItems / props.itemsPerPage)\r\n            ? props.active + 1\r\n            : Math.ceil(props.countItems / props.itemsPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(props.countItems / props.itemsPerPage);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    // getBusinesses(number);\r\n    props.onClick(number);\r\n  };\r\n\r\n  const getPages = () => {\r\n    let items = [];\r\n    for (let number = 1; number <= pages; number++) {\r\n      if (\r\n        number === 1 ||\r\n        number === pages ||\r\n        (number >= props.active - 2 && number <= props.active + 2)\r\n      ) {\r\n        items.push(\r\n          <Pagination.Item\r\n            key={number}\r\n            active={number === props.active}\r\n            onClick={() => onClick(number)}\r\n          >\r\n            {number}\r\n          </Pagination.Item>\r\n        );\r\n      } else if (number === 2 || number === pages - 1) {\r\n        items.push(<Pagination.Ellipsis key={number} disabled />);\r\n      }\r\n    }\r\n    return items;\r\n  };\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    const { align } = props;\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          textAlign: `${align}`,\r\n          // backgroundColor: \"red\",\r\n        }}\r\n      >\r\n        <span style={{ display: \"inline-block\" }}>\r\n          <Pagination size={props.size} style={{ padding: 0, margin: 0 }}>\r\n            {pages > 5 && (\r\n              <>\r\n                <Pagination.First onClick={() => props.onClick(\"First\")} />\r\n                <Pagination.Prev onClick={() => props.onClick(\"Prev\")} />\r\n              </>\r\n            )}\r\n\r\n            {getPages()}\r\n\r\n            {pages > 5 && (\r\n              <>\r\n                <Pagination.Next onClick={() => props.onClick(\"Next\")} />\r\n                <Pagination.Last onClick={() => props.onClick(\"Last\")} />\r\n              </>\r\n            )}\r\n          </Pagination>\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport {\r\n  // Form,\r\n  // InputGroup,\r\n  // Button,\r\n  // Table,\r\n  ListGroup,\r\n  Badge,\r\n} from \"react-bootstrap\";\r\n// import { Formik } from \"formik\";\r\n// import * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\n// import SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    request: \"get transactions\",\r\n    namespace: \"Transactions\",\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const {\r\n    transactions,\r\n    countTransactions,\r\n    activePageTransactions,\r\n    transactionsPerPage,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  // const { setActivePageTransactions } = props.barrelSetters;\r\n  const {\r\n    // getReviser,\r\n    // getWorkplace,\r\n    // sendRequest,\r\n    getTransactions,\r\n    format,\r\n    formatDate,\r\n    formatPerCent,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  const onPageSelect = (number) => {\r\n    // console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageTransactions > 1 ? activePageTransactions - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageTransactions <\r\n          Math.ceil(countTransactions / transactionsPerPage)\r\n            ? activePageTransactions + 1\r\n            : Math.ceil(countTransactions / transactionsPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countTransactions / transactionsPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getTransactions(number);\r\n  };\r\n\r\n  let cnt = 0;\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return (\r\n    <>\r\n      <ListGroup variant=\"flush\">\r\n        {transactions !== null &&\r\n          transactions.map((transaction, keyTransactions) => {\r\n            cnt++;\r\n\r\n            const {\r\n              // business_description,\r\n              // business_id,\r\n              // business_image,\r\n              // business_link,\r\n              // business_status,\r\n              business_title,\r\n              // comment,\r\n              conv_amount,\r\n              created,\r\n              // currency,\r\n              // exchange_rate,\r\n              sender_firstname,\r\n              sender_lastname,\r\n              // recipient_firstname,\r\n              // recipient_lastname,\r\n              // purpose_description,\r\n              purpose_id,\r\n              // purpose_image,\r\n              // purpose_link,\r\n              // purpose_status,\r\n              purpose_title,\r\n              recipient_id,\r\n              roles,\r\n              share,\r\n              share_per_cent,\r\n              // sender_id,\r\n              // sender_status,\r\n              // recipient_status,\r\n              // to_account,\r\n              type,\r\n            } = transaction;\r\n\r\n            // const i_am_sender = sender_id === accountNumber;\r\n            const i_am_recipient = recipient_id === accountNumber;\r\n\r\n            const roles_available =\r\n              roles !== null && roles !== \"-\" && typeof roles !== \"undefined\";\r\n            const arrRoles = roles_available ? roles.split(\",\") : [];\r\n\r\n            const shares_available =\r\n              typeof share !== \"undefined\" && share !== null && share !== \"-\";\r\n\r\n            if (type === \"transfer U2S\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {sender_firstname} {sender_lastname}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n            } else if (type === \"transfer U2U\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {sender_firstname} {sender_lastname}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n            } else if (type === \"transfer U2B\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {purpose_id}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  {business_title} &middot; {purpose_title}\r\n                  <br />\r\n                  {sender_firstname} {sender_lastname}\r\n                  {roles_available && (\r\n                    <>\r\n                      <br />\r\n                      {arrRoles.map((role, key) => {\r\n                        return (\r\n                          <span key={key}>\r\n                            {\" \"}\r\n                            <Badge pill variant=\"secondary\">\r\n                              {role}\r\n                            </Badge>\r\n                          </span>\r\n                        );\r\n                      })}\r\n                    </>\r\n                  )}{\" \"}\r\n                  {shares_available && (\r\n                    <>\r\n                      <br />\r\n                      {share} {t(\"shares\")} ({formatPerCent(share_per_cent)})\r\n                    </>\r\n                  )}\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n\r\n              // TODO: check if this works\r\n            } else {\r\n              console.log(\"Unknown transfer type\");\r\n\r\n              return <></>;\r\n            }\r\n          })}\r\n      </ListGroup>\r\n      {cnt === 0 && (\r\n        <p className=\"text-center text-muted\">{t(\"No transactions\")}</p>\r\n      )}\r\n      <br />\r\n\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countTransactions / transactionsPerPage)}\r\n        active={activePageTransactions}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState, useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, Toast, Badge } from \"react-bootstrap\";\r\nimport { Settings } from \"@material-ui/icons\";\r\nimport _ from \"lodash\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"Shareholder\",\r\n    request: \"change share\",\r\n    purpose: null,\r\n    shareholder: null,\r\n    closeButton: true,\r\n    rangeControl: true,\r\n    sharePerCent: null,\r\n    businessTitle: null,\r\n    purposeTitle: null,\r\n    businessOwnerFirstname: null,\r\n    businessOwnerLastname: null,\r\n    sharesCreated: null,\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { purposeShareholders } = props.barrelGetters;\r\n  const { setPurposeShareholders } = props.barrelSetters;\r\n  const { sendRequest, formatPerCent, formatDate } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const [userQuery, setUserQuery] = useState(props.share);\r\n  const delayedQuery = useRef(_.debounce((q) => sendQuery(q), 2000)).current;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  const onChange = (e) => {\r\n    // console.log(props.shareholder, e.target.value);\r\n    setUserQuery(e.target.value);\r\n    delayedQuery(e.target.value);\r\n  };\r\n\r\n  const onClose = () => {\r\n    // console.log(\"delete\", props.purpose, props.shareholder);\r\n    let data = {};\r\n    data.purpose_id = props.purpose;\r\n    data.shareholder_id = props.shareholder;\r\n    return sendRequest({ req: \"remove shareholder\", data });\r\n  };\r\n\r\n  const sendQuery = (delayedQuery) => {\r\n    // console.log(props.purpose, props.shareholder, delayedQuery);\r\n    const ps = purposeShareholders;\r\n    ps[props.id].share = delayedQuery;\r\n    setPurposeShareholders(JSON.stringify(ps));\r\n    let data = {};\r\n    data.purpose_id = props.purpose;\r\n    data.shareholder_id = props.shareholder;\r\n    data.share = delayedQuery;\r\n    // console.log(data);\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    const sharesLabelId = `sharesLabel${props.key}`;\r\n    return (\r\n      <Toast key={props.key} onClose={onClose} style={{ minWidth: \"100%\" }}>\r\n        <Toast.Header closeButton={props.closeButton}>\r\n          <strong className=\"mr-auto\">\r\n            {props.firstname} {props.lastname}{\" \"}\r\n            <small>\r\n              <Settings\r\n                hidden={true}\r\n                fontSize=\"small\"\r\n                style={{ color: \"var(--dark)\" }}\r\n              />\r\n            </small>\r\n          </strong>\r\n          <small>\r\n            <span id={sharesLabelId}>{userQuery}</span> {t(\"shares\")}\r\n          </small>\r\n        </Toast.Header>\r\n        <Toast.Body>\r\n          <Form>\r\n            <Form.Group controlId=\"formRoles\">\r\n              <div>\r\n                {props.roles.map((role, key) => {\r\n                  return (\r\n                    <span key={key}>\r\n                      <Badge pill variant=\"secondary\">\r\n                        {role}\r\n                      </Badge>{\" \"}\r\n                    </span>\r\n                  );\r\n                })}\r\n              </div>\r\n            </Form.Group>\r\n\r\n            {props.rangeControl && (\r\n              <Form.Group controlId=\"formBasicRange\">\r\n                <Form.Control\r\n                  type=\"range\"\r\n                  variant=\"light\"\r\n                  // value={share}\r\n                  defaultValue={userQuery}\r\n                  // value={userQuery}\r\n                  min={0}\r\n                  max={1000}\r\n                  step={1}\r\n                  // ref={this.input}\r\n                  onChange={onChange}\r\n                />\r\n              </Form.Group>\r\n            )}\r\n          </Form>\r\n          <span>\r\n            {props.sharePerCent !== null && formatPerCent(props.sharePerCent)}{\" \"}\r\n            {props.businessTitle !== null && props.businessTitle}{\" \"}\r\n            {props.businessTitle !== null && props.purposeTitle !== null && (\r\n              <> &middot; </>\r\n            )}\r\n            {props.purposeTitle !== null && props.purposeTitle}{\" \"}\r\n          </span>\r\n          {props.sharesCreated !== null && (\r\n            <>\r\n              <br />\r\n              {formatDate(props.sharesCreated, {\r\n                month: \"long\",\r\n                day: \"numeric\",\r\n                year: \"numeric\",\r\n              })}\r\n            </>\r\n          )}{\" \"}\r\n          {(props.businessOwnerFirstname !== null ||\r\n            props.businessOwnerLastname !== null) && <br />}\r\n          {props.businessOwnerFirstname !== null &&\r\n            props.businessOwnerFirstname}{\" \"}\r\n          {props.businessOwnerLastname !== null && props.businessOwnerLastname}{\" \"}\r\n        </Toast.Body>\r\n      </Toast>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\n// import { Form, InputGroup, Button, Table, ListGroup } from \"react-bootstrap\";\r\n// import { Formik } from \"formik\";\r\n// import * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n// import Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\n// import Card from \"../card\";\r\n// import SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\nimport Shareholder from \"../shareholder\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    request: \"get shares\",\r\n    namespace: \"Shares\",\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  const {\r\n    shares,\r\n    countShares,\r\n    activePageShares,\r\n    sharesPerPage,\r\n    // accountNumber,\r\n    userData,\r\n  } = props.barrelGetters;\r\n  // const {  } = props.barrelSetters;\r\n  const {\r\n    // getReviser,\r\n    // getWorkplace,\r\n    // sendRequest,\r\n    getShares,\r\n    // format,\r\n    // formatPerCent,\r\n    // formatDate,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n     * Functions\r\n     ============================================================================ */\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  const onPageSelect = (number) => {\r\n    console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageShares > 1 ? activePageShares - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageShares < Math.ceil(countShares / sharesPerPage)\r\n            ? activePageShares + 1\r\n            : Math.ceil(countShares / sharesPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countShares / sharesPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getShares(number);\r\n  };\r\n\r\n  let cnt = 0;\r\n\r\n  /**\r\n     * Return\r\n     ============================================================================ */\r\n  return (\r\n    <>\r\n      {shares !== null &&\r\n        shares.map((share, keyShares) => {\r\n          cnt++;\r\n\r\n          const {\r\n            // business_description,\r\n            // business_id,\r\n            // business_image,\r\n            // business_link,\r\n            // business_status,\r\n            business_title,\r\n            owner_firstname,\r\n            owner_lastname,\r\n            // owner_status,\r\n            // owner_uid,\r\n            // purpose_description,\r\n            purpose_id,\r\n            // purpose_image,\r\n            // purpose_link,\r\n            // purpose_status,\r\n            purpose_title,\r\n            shareholder_id,\r\n            shares_created,\r\n            // shares_description,\r\n            share_per_cent,\r\n            shares_roles,\r\n            shares_share,\r\n            // shares_status,\r\n            // shares_title,\r\n          } = share;\r\n\r\n          const arrRoles = shares_roles !== null ? shares_roles.split(\",\") : [];\r\n          // const content = `${owner_firstname} ${owner_lastname} / ${formatDate(\r\n          //   shares_created\r\n          // )}`;\r\n\r\n          // console.log(\"keyShares:\", keyShares);\r\n\r\n          return (\r\n            <Shareholder\r\n              {...args}\r\n              key={keyShares}\r\n              id={keyShares}\r\n              shareholder={shareholder_id}\r\n              purpose={purpose_id}\r\n              firstname={userData.firstname}\r\n              lastname={userData.lastname}\r\n              share={shares_share}\r\n              roles={arrRoles}\r\n              closeButton={false}\r\n              rangeControl={false}\r\n              sharePerCent={share_per_cent}\r\n              businessOwnerFirstname={owner_firstname}\r\n              businessOwnerLastname={owner_lastname}\r\n              businessTitle={business_title}\r\n              purposeTitle={purpose_title}\r\n              sharesCreated={shares_created}\r\n            />\r\n          );\r\n        })}\r\n\r\n      {cnt === 0 && <p className=\"text-center text-muted\">{t(\"No shares\")}</p>}\r\n\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countShares / sharesPerPage)}\r\n        active={activePageShares}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, Badge, Accordion, Card } from \"react-bootstrap\";\r\n// import { useAccordionToggle } from \"react-bootstrap/AccordionToggle\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import Octicon, { ChevronRight } from \"@primer/octicons-react\";\r\n// import AccessAlarmIcon from \"@material-ui/icons/AccessAlarm\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\n\r\n// import ZCard from \"../card\";\r\nimport Transactions from \"../transactions\";\r\nimport Shares from \"../shares\";\r\n\r\nexport default (args) => {\r\n  // let defaults = {};\r\n  // const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userData,\r\n    accountNumber,\r\n    accordionView,\r\n    // currencyAbbr,\r\n  } = props.barrelGetters;\r\n  const {\r\n    setAccountType,\r\n    setRedirectTo,\r\n    setAccordionView,\r\n  } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    getAccountData,\r\n    getTransactions,\r\n    getShares,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // const userData = props.data.userData;\r\n  // let format = props.format;\r\n  const { t } = useTranslation(\"Balance\");\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  // console.log(\"BALANCE DATA:\", props);\r\n  // console.log(\"BALANCE userData\", userData);\r\n  // const userDataParsed = JSON.parse(userData);\r\n  const userDataParsed = userData;\r\n\r\n  // let footer = <small className=\"text-muted\">Last updated 3 mins ago</small>;\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  // const gotoNextView = () => {\r\n  //   // console.log(props);\r\n\r\n  //   // props.data.setView(\"transfer\");\r\n  //   setRedirect(true);\r\n  // };\r\n\r\n  const onAccountTypeSelected = (type) => {\r\n    // console.log(type);\r\n\r\n    setAccountType(type);\r\n    setRedirectTo(\"/transfer\");\r\n  };\r\n\r\n  // console.log(userData);\r\n  const available =\r\n    userDataParsed !== null\r\n      ? format(\r\n          userDataParsed.acc_curr +\r\n            userDataParsed.acc_cred +\r\n            userDataParsed.acc_save\r\n        )\r\n      : null;\r\n  let acc_curr =\r\n    userDataParsed !== null ? format(userDataParsed.acc_curr) : null;\r\n  let acc_cred =\r\n    userDataParsed !== null ? format(userDataParsed.acc_cred) : null;\r\n  let acc_save =\r\n    userDataParsed !== null ? format(userDataParsed.acc_save) : null;\r\n\r\n  // if (props.data.view === \"transfer\") {\r\n  //   return <Redirect push to=\"/transfer\" />;\r\n  // }\r\n\r\n  // if (redirect) {\r\n  //   // props.data.setView(\"transfer\");\r\n  //   return <Redirect push to=\"/transfer\" />;\r\n  // }\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  const ToggleBalance = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionView(\"balance\");\r\n    getAccountData();\r\n  };\r\n\r\n  const ToggleTransactions = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionView(\"transactions\");\r\n    getTransactions(1);\r\n  };\r\n\r\n  const ToggleShares = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionView(\"shares\");\r\n    getShares(1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Accordion defaultActiveKey={accordionView}>\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"balance\"\r\n            style={{\r\n              cursor: \"pointer\",\r\n              // backgroundColor: \"#e8f6f3\",\r\n            }}\r\n            onClick={ToggleBalance}\r\n          >\r\n            {t(\"Balance\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"balance\">\r\n            <Card.Body>\r\n              <Form noValidate>\r\n                <Form.Group>\r\n                  <Form.Label>{t(\"Available\")}</Form.Label>\r\n                  <Form.Text>\r\n                    <div style={{ fontSize: \"3em\" }}>{available}</div>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Current account\")}</div>\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_curr\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_curr}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Credit account\")}</div>\r\n\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_cred\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_cred}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Savings account\")}</div>\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_save\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_save}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                  </ul>\r\n                </Form.Group>\r\n              </Form>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"transactions\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleTransactions}\r\n          >\r\n            {t(\"Transactions\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"transactions\">\r\n            <Card.Body>\r\n              <Transactions {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"shares\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleShares}\r\n          >\r\n            {t(\"Shares\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"shares\">\r\n            <Card.Body>\r\n              <Shares {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"transfer U2S\",\r\n    namespace: \"Transfer\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER TO SELF DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    // request,\r\n    userData,\r\n    accountNumber,\r\n    accountType,\r\n    language,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  // const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userData = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  // const { currency_abbr } = userData;\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    toAccount: yup.string().required(t(\"To Account is required\")),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} Form data\r\n   */\r\n  const transferToSelf = (data) => {\r\n    // console.log(\"TRANSFER U2S DATA:\", data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.amount = parseLocaleNumber(data.amount, language);\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n    }).format(data.amount);\r\n\r\n    // onTransfer({ req: props.request, data: data });\r\n    sendRequest({ req: props.request, data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    transferToSelf(data);\r\n  };\r\n\r\n  const TransferToSelfForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"validationToAccount\">\r\n          <Form.Label>{t(\"To account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"toAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.toAccount && touched.toAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option value=\"acc_curr\" hidden={accountType === \"acc_curr\"}>\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option value=\"acc_cred\" hidden={accountType === \"acc_cred\"}>\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option value=\"acc_save\" hidden={accountType === \"acc_save\"}>\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.toAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              // type=\"number\"\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              // onBlur={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request=\"transfer U2S\"\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToSelfForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        toAccount: \"\",\r\n        amount: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n * User imports\r\n */\r\nimport Card from \"../card\";\r\n\r\n/**\r\n * Component: TransferToPerson\r\n */\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"transfer U2U\", namespace: \"Transfer\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    // request,\r\n    userData,\r\n    accountNumber,\r\n    language,\r\n    accountType,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  // const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  // const { onTransfer } = props.barrelEventHandlers;\r\n\r\n  /** \r\n   * Custom hooks\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /** \r\n   * Destructuring\r\n   ============================================================================ */\r\n  // const { currency_abbr } = userData;\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    toPersonalID: yup\r\n      .string()\r\n      .required(t(\"Recipients Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      ),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const transferToPerson = (data) => {\r\n    // console.log(\"TRANSFER U2U DATA:\", data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.amount = parseLocaleNumber(data.amount, language);\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n    }).format(data.amount);\r\n\r\n    sendRequest({ req: props.request, data: data });\r\n    // onTransfer({ req: props.request, data: data });\r\n  };\r\n\r\n  // return <>test</>;\r\n\r\n  const onSubmit = (data) => {\r\n    transferToPerson(data);\r\n  };\r\n\r\n  const TransferToPersonForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        {/* Field: From account */}\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        {/* Field: Recipients Personal ID */}\r\n        <Form.Group controlId=\"validationFormikToPersonalID\">\r\n          <Form.Label>{t(\"To Personal ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"XXXXXX-XXXXX\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"toPersonalID\"\r\n              value={values.toPersonalID}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.toPersonalID && touched.toPersonalID}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.toPersonalID}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Field: Description */}\r\n        <Form.Group\r\n          controlId=\"description\"\r\n          name=\"description\"\r\n          value={values.description}\r\n          onChange={handleChange}\r\n        >\r\n          <Form.Label>{t(\"Description\")}</Form.Label>\r\n          <Form.Control as=\"textarea\" rows=\"3\" />\r\n        </Form.Group>\r\n\r\n        {/* Field: Amount */}\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              // type=\"number\"\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              // onBlur={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Button: Next */}\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToPersonForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        toPersonalID: \"\",\r\n        amount: \"\",\r\n        description: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"transfer U2B\", namespace: \"Transfer\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER TO SELF DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    // request,\r\n    userData,\r\n    accountNumber,\r\n    language,\r\n    accountType,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  // const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  // const { onTransfer } = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /** \r\n   * Destructuring\r\n   ============================================================================ */\r\n  // const { currency_abbr } = userData;\r\n\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    // businessTitle: yup\r\n    //   .string()\r\n    //   .required(t(\"Recipients Business ID is required\")),\r\n    purposeID: yup.string().required(t(\"Purpose ID is required\")),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const transferToBusiness = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.currency = currencyAbbr;\r\n    data.amount = parseLocaleNumber(data.amount, language);\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n    }).format(data.amount);\r\n    // data.amount = parseFloat(data.amount);\r\n    // data.amount = Number(data.amount.replace(/[^0-9.-]+/g, \"\"));\r\n\r\n    sendRequest({ req: props.request, data: data });\r\n    // onTransfer({ req: props.request, data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    transferToBusiness(data);\r\n  };\r\n\r\n  const TransferToBusinessForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      {/* From account */}\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        {/*\r\n        <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n          <Form.Label>{t(\"To Business ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"businessTitle\"\r\n              value={values.businessTitle}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.businessTitle && touched.businessTitle}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.businessTitle}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n        */}\r\n\r\n        {/* To purpose */}\r\n        <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n          <Form.Label>{t(\"To Purpose ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"purposeID\"\r\n              value={values.purposeID}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.purposeID && touched.purposeID}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.purposeID}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Field: Description */}\r\n        <Form.Group\r\n          controlId=\"description\"\r\n          name=\"description\"\r\n          value={values.description}\r\n          onChange={handleChange}\r\n        >\r\n          <Form.Label>{t(\"Description\")}</Form.Label>\r\n          <Form.Control as=\"textarea\" rows=\"3\" />\r\n        </Form.Group>\r\n\r\n        {/* Amount */}\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              type=\"string\" // do NOT change to number!!\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Submit button */}\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToBusinessForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        purposeID: \"\",\r\n        amount: \"\",\r\n        description: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import Card from \"../card\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { businessID: null };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"PURPOSE REGISTRATION PROPS:\", props);\r\n\r\n  const barrels = props.data;\r\n  const { businessID } = props;\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  // const { userData, accountNumber, language } = barrels.barrelGetters;\r\n  // const {} = barrels.barrelSetters;\r\n  const { getReviser, getWorkplace } = barrels.barrelFunctions;\r\n  const { onPurposeRegistration } = barrels.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([\"PurposeRegistration\"]);\r\n\r\n  const schema = yup.object({\r\n    purposeTitle: yup\r\n      .string()\r\n      .required(t(\"Purpose title is a required field\"))\r\n      .min(3, t(\"Purpose title too short\"))\r\n      .max(70, t(\"Purpose title too long\"))\r\n      .trim(),\r\n    purposeDescription: yup.string().optional(),\r\n  });\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const RegisterPurpose = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.businessID = businessID;\r\n\r\n    // console.log(\"REGISTER PURPOSE DATA:\", data);\r\n\r\n    onPurposeRegistration({ req: \"register purpose\", data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    RegisterPurpose(data);\r\n  };\r\n\r\n  const RegisterPurposeForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Purpose Title (Purpose ID) */}\r\n      <Form.Group controlId=\"validationFormikPurposeID\">\r\n        <Form.Label>{t(\"Purpose Title\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"\"\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"purposeTitle\"\r\n            value={values.purposeTitle}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.purposeTitle && touched.purposeTitle}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.purposeTitle}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Purpose Description */}\r\n      <Form.Group\r\n        controlId=\"purposeDescription\"\r\n        name=\"purposeDescription\"\r\n        value={values.purposeDescription}\r\n        onChange={handleChange}\r\n      >\r\n        <Form.Label>{t(\"Purpose Description\")}</Form.Label>\r\n        <Form.Control as=\"textarea\" rows=\"3\" />\r\n      </Form.Group>\r\n\r\n      {/* Submit button */}\r\n      <Button type=\"submit\" block>\r\n        {t(\"Submit\")}\r\n      </Button>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterPurposeForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        purposeTitle: \"\",\r\n        purposeDescription: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Toast } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"register shareholder\",\r\n    namespace: \"ShareholderRegistration\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  const barrels = props;\r\n  const { purposeID } = props;\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber } = barrels.barrelGetters;\r\n  // const {} = barrels.barrelSetters;\r\n  const {\r\n    // format,\r\n    // parseLocaleNumber,\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n  } = barrels.barrelFunctions;\r\n  // const {} = barrels.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  // const thisRef = createRef();\r\n\r\n  const schema = yup.object({\r\n    personalID: yup\r\n      .string()\r\n      .required(t(\"Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      ),\r\n    shareholderRoles: yup.string().optional(),\r\n    shares: yup\r\n      .number()\r\n      .typeError(t(\"Shares must be a number\"))\r\n      .required(t(\"Shares is required\"))\r\n      .min(0, t(\"Shares too few\"))\r\n      .max(1000, t(\"Shares too many\")),\r\n  });\r\n\r\n  /**\r\n   * Send shareholder registration request\r\n   * @param {object} data\r\n   */\r\n  const onSubmit = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.purposeID = purposeID;\r\n\r\n    // console.log(\"REGISTER SHAREHOLDER DATA:\", data);\r\n\r\n    // onShareholderRegistration({ req: props.request, data: data });\r\n    sendRequest({ req: props.request, data: data });\r\n  };\r\n\r\n  const RegisterShareholderForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form id=\"shareholderRegistrationForm\" noValidate onSubmit={handleSubmit}>\r\n      <Toast style={{ minWidth: \"100%\" }}>\r\n        {/*\r\n        <Toast.Header closeButton={false}>\r\n          <strong className=\"mr-auto\">{t(\"Add Shareholder\")}</strong>\r\n        </Toast.Header>\r\n        */}\r\n        <Toast.Body>\r\n          <Form.Group controlId=\"validationFormikShareholderPersonalID\">\r\n            <Form.Label>{t(\"Shareholder Personal ID\")}</Form.Label>\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"XXXXXX-XXXXX\")}\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"personalID\"\r\n                value={values.personalID}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.personalID && touched.personalID}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.personalID}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n          {/* Shareholder Roles */}\r\n          <Form.Group controlId=\"validationFormikShareholderRoles\">\r\n            <Form.Label>{t(\"Shareholder Roles\")}</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"\"\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"shareholderRoles\"\r\n                value={values.shareholderRoles}\r\n                onChange={handleChange}\r\n                isInvalid={\r\n                  !!errors.shareholderRoles && touched.shareholderRoles\r\n                }\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.shareholderRoles}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          {/* Shares */}\r\n          <Form.Group controlId=\"validationFormikShareholderRoles\">\r\n            <Form.Label>{t(\"Shares\")}</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type=\"number\"\r\n                min={0}\r\n                max={1000}\r\n                step={1}\r\n                placeholder=\"\"\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"shares\"\r\n                value={values.shares}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.shares && touched.shares}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.shares}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          <SubmitButton\r\n            {...args}\r\n            caption={t(\"Submit\")}\r\n            request={props.request}\r\n            namespace={props.namespace}\r\n          />\r\n        </Toast.Body>\r\n      </Toast>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterShareholderForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        personalID: \"\",\r\n        shares: 0,\r\n        shareholderRoles: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Accordion,\r\n  Card,\r\n  Tab,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  // Nav,\r\n  // Form,\r\n  // Toast,\r\n  // Badge,\r\n  // Container,\r\n  // Button,\r\n} from \"react-bootstrap\";\r\n// import { useAccordionToggle } from \"react-bootstrap/AccordionToggle\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Octicon, { Plus, PlusSmall, Gear } from \"@primer/octicons-react\";\r\nimport { Add, Extension, Store } from \"@material-ui/icons\";\r\n\r\n// import Dropzone from \"../dropzone\";\r\n\r\nimport BusinessRegistration from \"../businessRegistration\";\r\nimport PurposeRegistration from \"../purposeRegistration\";\r\nimport ShareholderRegistration from \"../shareholderRegistration\";\r\n// import shareholderRegistration from \"../shareholderRegistration\";\r\nimport Shareholder from \"../shareholder\";\r\nimport Pagination from \"../pagination\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { namespace: \"MyBusiness\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER DATA\", props);\r\n\r\n  // const [businessLoaded, setBusinessLoaded] = useState(null);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userBusinesses,\r\n    countBusinesses,\r\n    businessesPerPage,\r\n    activePageBusinesses,\r\n    userBusinessesLoaded,\r\n    activeBusiness,\r\n    activeBusinessID,\r\n    businessPurposes,\r\n    countBusinessPurposes,\r\n    businessPurposesPerPage,\r\n    activePageBusinessPurposes,\r\n    activeBusinesPurpose,\r\n    purposeShareholders,\r\n    language,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  const { setRedirectTo } = props.barrelSetters;\r\n  const {\r\n    getBusinesses,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n  } = props.barrelFunctions;\r\n  // const {  } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  useEffect(() => {\r\n    // getBusinesses();\r\n    // getBusinesses();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n   * Toggle business (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  // const ToggleBusiness = ({ children, eventKey, businessID }) => {\r\n  //   const decoratedOnClick = useAccordionToggle(eventKey, () =>\r\n  //     getBusinessPurposes(businessID, eventKey)\r\n  //   );\r\n\r\n  //   return <div onClick={decoratedOnClick}>{children}</div>;\r\n  // };\r\n  const ToggleBusiness = ({ eventKey, businessID }) => {\r\n    getBusinessPurposes(businessID, eventKey, 1);\r\n  };\r\n\r\n  // const onPageSelect = (number) => {\r\n  //   // console.log(\"on page select\", number);\r\n  //   switch (number) {\r\n  //     case \"First\":\r\n  //       number = 1;\r\n  //       break;\r\n  //     case \"Prev\":\r\n  //       number = activePageBusinesses > 1 ? activePageBusinesses - 1 : 1;\r\n  //       break;\r\n  //     case \"Next\":\r\n  //       number =\r\n  //         activePageBusinesses < Math.ceil(countBusinesses / businessesPerPage)\r\n  //           ? activePageBusinesses + 1\r\n  //           : Math.ceil(countBusinesses / businessesPerPage);\r\n  //       break;\r\n  //     case \"Last\":\r\n  //       number = Math.ceil(countBusinesses / businessesPerPage);\r\n  //       break;\r\n  //     default:\r\n  //       break;\r\n  //   }\r\n  //   getBusinesses(number);\r\n  // };\r\n\r\n  // const onPurposesPageClick = (number) => {\r\n  //   switch (number) {\r\n  //     case \"First\":\r\n  //       number = 1;\r\n  //       break;\r\n  //     case \"Prev\":\r\n  //       number =\r\n  //         activePageBusinessPurposes > 1 ? activePageBusinessPurposes - 1 : 1;\r\n  //       break;\r\n  //     case \"Next\":\r\n  //       number =\r\n  //         activePageBusinessPurposes <\r\n  //         Math.ceil(countBusinessPurposes / businessPurposesPerPage)\r\n  //           ? activePageBusinessPurposes + 1\r\n  //           : Math.ceil(countBusinessPurposes / businessPurposesPerPage);\r\n  //       break;\r\n  //     case \"Last\":\r\n  //       number = Math.ceil(countBusinessPurposes / businessPurposesPerPage);\r\n  //       break;\r\n  //     default:\r\n  //       break;\r\n  //   }\r\n  //   getBusinessPurposes(activeBusinessID, 0, number);\r\n  // };\r\n\r\n  /**\r\n   * Toggle purpose (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  // const TogglePurpose = ({ children, eventKey, purposeID }) => {\r\n  //   const decoratedOnClick = useAccordionToggle(eventKey, () =>\r\n  //     // getBusinessPurposes(businessID, eventKey)\r\n\r\n  //     getPurposeShareholders(purposeID, eventKey)\r\n  //   );\r\n\r\n  //   return <div onClick={decoratedOnClick}>{children}</div>;\r\n  // };\r\n\r\n  const TogglePurpose = ({ eventKey, purposeID }) => {\r\n    getPurposeShareholders(purposeID, eventKey);\r\n  };\r\n\r\n  /**\r\n   * Toggle shareholders (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  // const ToggleShareholders = ({ children, eventKey, purposeID }) => {\r\n  //   const decoratedOnClick = useAccordionToggle(eventKey, () =>\r\n  //     getPurposeShareholders(purposeID, eventKey)\r\n  //   );\r\n\r\n  //   return <div onClick={decoratedOnClick}>{children}</div>;\r\n  // };\r\n\r\n  /**\r\n   * Create:\r\n   * - business menu\r\n   * - business purposes menu\r\n   */\r\n  let menuItems = [];\r\n  let purposes = [];\r\n  let countShareholders = 0;\r\n  userBusinesses !== null &&\r\n    Object.keys(userBusinesses).map((business, keyBusiness) => {\r\n      menuItems[keyBusiness] = [];\r\n      purposes[keyBusiness] = [];\r\n      businessPurposes !== null &&\r\n        Object.keys(businessPurposes).map((purpose, keyPurpose) => {\r\n          if (\r\n            businessPurposes[purpose].business_id ===\r\n            userBusinesses[business].business_id\r\n          ) {\r\n            menuItems[keyBusiness][keyPurpose] = (\r\n              <ListGroup.Item\r\n                action\r\n                key={businessPurposes[purpose].purpose_id}\r\n                eventKey={businessPurposes[purpose].purpose_id}\r\n                onClick={() =>\r\n                  TogglePurpose({\r\n                    eventKey: keyPurpose,\r\n                    purposeID: businessPurposes[purpose].purpose_id,\r\n                  })\r\n                }\r\n              >\r\n                <span style={{ whiteSpace: \"nowrap\" }}>\r\n                  <Extension style={{ color: \"var(--dark)\" }} />{\" \"}\r\n                  {businessPurposes[purpose].title}\r\n                </span>\r\n              </ListGroup.Item>\r\n            );\r\n\r\n            purposes[keyBusiness][keyPurpose] = (\r\n              <Tab.Pane\r\n                key={businessPurposes[purpose].purpose_id}\r\n                eventKey={businessPurposes[purpose].purpose_id}\r\n              >\r\n                <Accordion defaultActiveKey=\"shareholders\">\r\n                  {/* Purpose ID */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"purpose_id\"\r\n                    >\r\n                      {t(\"Purpose ID\")}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"purpose_id\">\r\n                      <Card.Body>\r\n                        <Card.Text>\r\n                          {businessPurposes[purpose].purpose_id}\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n                  {/* Purpose description */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"description\"\r\n                    >\r\n                      {t(\"Purpose Description\")}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"description\">\r\n                      <Card.Body>\r\n                        <Card.Text>\r\n                          {businessPurposes[purpose].description}\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"shareholders\"\r\n                    >\r\n                      {t(\"Purpose Shareholders\")}\r\n                    </Accordion.Toggle>\r\n\r\n                    {/* Purpose shareholders */}\r\n                    <Accordion.Collapse eventKey=\"shareholders\">\r\n                      <Card.Body>\r\n                        {typeof purposeShareholders !== \"undefined\" &&\r\n                          purposeShareholders !== null &&\r\n                          Object.keys(purposeShareholders).map(\r\n                            (shareholder, keyShareholder) => {\r\n                              if (\r\n                                purposeShareholders[shareholder].purpose_id ===\r\n                                businessPurposes[purpose].purpose_id\r\n                              ) {\r\n                                const { purpose_id } = purposeShareholders[\r\n                                  shareholder\r\n                                ];\r\n                                const {\r\n                                  shareholder_id,\r\n                                  firstname,\r\n                                  lastname,\r\n                                  // email,\r\n                                  roles,\r\n                                  share,\r\n                                } = purposeShareholders[shareholder];\r\n\r\n                                countShareholders++;\r\n\r\n                                const arrRoles =\r\n                                  roles !== null ? roles.split(\",\") : [];\r\n\r\n                                return (\r\n                                  <Shareholder\r\n                                    {...args}\r\n                                    key={keyShareholder}\r\n                                    id={keyShareholder}\r\n                                    shareholder={shareholder_id}\r\n                                    purpose={purpose_id}\r\n                                    firstname={firstname}\r\n                                    lastname={lastname}\r\n                                    share={share}\r\n                                    roles={arrRoles}\r\n                                  />\r\n                                );\r\n                              } else {\r\n                                return \"\"; // TODO: check if this works\r\n                              }\r\n                            }\r\n                          )}\r\n                        {countShareholders === 0 && (\r\n                          <Card.Text className=\"text-muted\">\r\n                            {t(\"No shareholders\")}\r\n                          </Card.Text>\r\n                        )}\r\n\r\n                        {/* End shareholders list */}\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"2\"\r\n                    >\r\n                      <span style={{ whiteSpace: \"nowrap\" }}>\r\n                        <Add\r\n                          fontSize=\"small\"\r\n                          style={{ color: \"var(--dark)\" }}\r\n                        />\r\n                        &nbsp;{t(\"Add Shareholder\")}\r\n                      </span>\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"2\">\r\n                      <Card.Body>\r\n                        <ShareholderRegistration\r\n                          {...args}\r\n                          purposeID={businessPurposes[purpose].purpose_id}\r\n                        />\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n                </Accordion>\r\n              </Tab.Pane>\r\n            );\r\n          }\r\n          countShareholders = 0;\r\n          return true;\r\n        });\r\n      return true;\r\n    });\r\n\r\n  const jsx = (\r\n    <>\r\n      <Accordion\r\n        defaultActiveKey={\r\n          activeBusiness !== null || !userBusinessesLoaded\r\n            ? activeBusiness\r\n            : \"myBusinesses\"\r\n        }\r\n      >\r\n        {/* Add business */}\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"addBusiness\"\r\n            style={{ cursor: \"pointer\" }}\r\n          >\r\n            <span>\r\n              <Add fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n              &nbsp;\r\n              {t(\"Add Business\")}\r\n            </span>\r\n          </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey=\"addBusiness\">\r\n            <Card.Body>\r\n              <BusinessRegistration {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        {/* List user businesses */}\r\n        {userBusinesses !== null &&\r\n          Object.keys(userBusinesses).map((business, keyBusiness) => {\r\n            const date = new Date(userBusinesses[business].created);\r\n            const businessSince = new Intl.DateTimeFormat(language).format(\r\n              date\r\n            );\r\n            // keyBusiness[3] = userBusinesses[business].business_id;\r\n            return (\r\n              <Card key={keyBusiness}>\r\n                <Accordion.Toggle\r\n                  as={Card.Header}\r\n                  eventKey={keyBusiness}\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() =>\r\n                    ToggleBusiness({\r\n                      eventKey: keyBusiness,\r\n                      businessID: userBusinesses[business].business_id,\r\n                    })\r\n                  }\r\n                >\r\n                  <Store style={{ color: \"var(--dark)\" }} />{\" \"}\r\n                  {userBusinesses[business].title}\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={keyBusiness}>\r\n                  <Card.Body>\r\n                    <Tab.Container\r\n                      id=\"left-tabs-example\"\r\n                      defaultActiveKey={\r\n                        activeBusinesPurpose !== null\r\n                          ? activeBusinesPurpose\r\n                          : \"aboutBusiness\"\r\n                      }\r\n                    >\r\n                      <Row>\r\n                        {/* Layout: Left side - Menu */}\r\n                        <Col sm={5}>\r\n                          <ListGroup variant=\"flush\">\r\n                            {/* Menu item: About business */}\r\n                            <ListGroup.Item action eventKey=\"aboutBusiness\">\r\n                              {t(\"About\")}\r\n                            </ListGroup.Item>\r\n\r\n                            {/* Menu item: Add purpose */}\r\n                            <ListGroup.Item action eventKey=\"addPurpose\">\r\n                              <span style={{ whiteSpace: \"nowrap\" }}>\r\n                                <Add\r\n                                  fontSize=\"small\"\r\n                                  style={{ color: \"var(--dark)\" }}\r\n                                />\r\n                                &nbsp;{t(\"Add Purpose\")}\r\n                              </span>\r\n                            </ListGroup.Item>\r\n\r\n                            {/* Menu items: Registered purposes */}\r\n                            {menuItems[keyBusiness]}\r\n\r\n                            {/* old add purpose */}\r\n                          </ListGroup>\r\n                          {countBusinessPurposes !== null && (\r\n                            <>\r\n                              <br />\r\n                              <Pagination\r\n                                {...args}\r\n                                size=\"sm\"\r\n                                countItems={countBusinessPurposes}\r\n                                itemsPerPage={businessPurposesPerPage}\r\n                                active={activePageBusinessPurposes}\r\n                                onClick={(number) =>\r\n                                  getBusinessPurposes(\r\n                                    activeBusinessID,\r\n                                    0,\r\n                                    number\r\n                                  )\r\n                                }\r\n                              />\r\n                            </>\r\n                          )}\r\n                        </Col>\r\n\r\n                        {/* Layout: Right side - Content */}\r\n                        <Col sm={7}>\r\n                          <Tab.Content>\r\n                            <Tab.Pane eventKey=\"aboutBusiness\">\r\n                              <Accordion defaultActiveKey=\"businessID\">\r\n                                {/* Business logo */}\r\n\r\n                                {/*\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  eventKey=\"businessLogo\"\r\n                                >\r\n                                  [LOGO]\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"businessLogo\">\r\n                                  <Card border=\"light\">\r\n                                    <Card.Body>\r\n                                      <Dropzone data={args} />\r\n                                    </Card.Body>\r\n                                  </Card>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n                              */}\r\n\r\n                                {/* Business ID */}\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    eventKey=\"businessID\"\r\n                                  >\r\n                                    {t(\"Business ID\")}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"businessID\">\r\n                                    <Card border=\"light\">\r\n                                      <Card.Body>\r\n                                        <Card.Text>\r\n                                          {userBusinesses[business].business_id}\r\n                                        </Card.Text>\r\n                                      </Card.Body>\r\n                                    </Card>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n\r\n                                {/* Business description */}\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    eventKey=\"businessDescription\"\r\n                                  >\r\n                                    {t(\"Business Description\")}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"businessDescription\">\r\n                                    <Card border=\"light\">\r\n                                      <Card.Body>\r\n                                        <Card.Text>\r\n                                          {userBusinesses[business].description}\r\n                                        </Card.Text>\r\n                                      </Card.Body>\r\n                                    </Card>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n\r\n                                {/* Business Creation Date */}\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    eventKey=\"businessCreationDate\"\r\n                                  >\r\n                                    {t(\"Business Created\")}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"businessCreationDate\">\r\n                                    <Card border=\"light\">\r\n                                      <Card.Body>\r\n                                        <Card.Text>{businessSince}</Card.Text>\r\n                                      </Card.Body>\r\n                                    </Card>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n                              </Accordion>\r\n                            </Tab.Pane>\r\n\r\n                            {/* Start Business purposes */}\r\n                            {purposes[keyBusiness]}\r\n                            {/* End Business purposes */}\r\n\r\n                            {/* Add new purpose */}\r\n                            <Tab.Pane eventKey=\"addPurpose\">\r\n                              <Accordion defaultActiveKey=\"newPurpose\">\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    eventKey=\"newPurpose\"\r\n                                  >\r\n                                    {t(\"New Purpose\")}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"newPurpose\">\r\n                                    <Card.Body>\r\n                                      <PurposeRegistration\r\n                                        data={args}\r\n                                        businessID={\r\n                                          userBusinesses[business].business_id\r\n                                        }\r\n                                      />\r\n                                    </Card.Body>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n                              </Accordion>\r\n                            </Tab.Pane>\r\n                          </Tab.Content>\r\n                        </Col>\r\n                      </Row>\r\n                    </Tab.Container>\r\n                    {/* pagination prev */}\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            );\r\n            // console.log(\"BUSINESS:\", userBusinesses[business]);\r\n          })}\r\n\r\n        {/* Get business */}\r\n\r\n        {false && userBusinesses === null && (\r\n          <Card>\r\n            <Accordion.Toggle\r\n              as={Card.Header}\r\n              eventKey=\"myBusinesses\"\r\n              onClick={getBusinesses}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              <span>{t(\"My Businesses\")}</span>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"myBusinesses\">\r\n              <Card.Body>{t(\"No businesses\")}</Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        )}\r\n\r\n        {/* old add business */}\r\n      </Accordion>\r\n      {userBusinesses !== null && (\r\n        <>\r\n          <br />\r\n\r\n          <Pagination\r\n            {...args}\r\n            size=\"md\"\r\n            countItems={countBusinesses}\r\n            itemsPerPage={businessesPerPage}\r\n            active={activePageBusinesses}\r\n            onClick={(number) => getBusinesses(number)}\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  return <>{jsx}</>;\r\n};\r\n","import \"./UserEditor.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ListGroup, Form, InputGroup } from \"react-bootstrap\";\r\nimport {\r\n  Visibility,\r\n  VisibilityOff,\r\n  Close,\r\n  Edit,\r\n  // Done,\r\n} from \"@material-ui/icons\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    namespace: \"UserEditor\",\r\n    request: \"update user\",\r\n    mode: \"label\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"USER EDITOR PROPS:\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userData,\r\n    accountNumber,\r\n    // currencies,\r\n    // currencyAbbr,\r\n    // language,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest, getReviser, getWorkplace } = props.barrelFunctions;\r\n  // const {  } = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [editFirstname, setEditFirstname] = useState(false);\r\n  const [editLastname, setEditLastname] = useState(false);\r\n  const [editEmail, setEditEmail] = useState(false);\r\n  const [editPassword, setEditPassword] = useState(false);\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  const [submitButtonVisible, setSubmitButtonVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (editFirstname || editLastname || editEmail || editPassword) {\r\n      setSubmitButtonVisible(true);\r\n    } else {\r\n      setSubmitButtonVisible(false);\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [editFirstname, editLastname, editEmail, editPassword]);\r\n\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  const sendUserRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    // data.language = language;\r\n    // data.email = userData.email;\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    data.personalID = accountNumber;\r\n    if (!editFirstname) data.firstname = null;\r\n    if (!editLastname) data.lastname = null;\r\n    if (!editEmail) data.email = userData.email;\r\n    if (!editPassword) data.password = null;\r\n\r\n    // console.log(\"onSubmit:\", data);\r\n\r\n    if (sendUserRegistrationRequest(data)) {\r\n      // User registration request was submitted\r\n    }\r\n  };\r\n\r\n  const yupObject = {\r\n    firstName: editFirstname\r\n      ? yup.string().required(t(\"First name is required\"))\r\n      : yup.string().optional(),\r\n    lastName: editLastname\r\n      ? yup.string().required(t(\"Last name is required\"))\r\n      : yup.string().optional(),\r\n    email: editEmail\r\n      ? yup\r\n          .string()\r\n          .email(t(\"Invalid email address\"))\r\n          .required(t(\"Email is required\"))\r\n      : yup.string().optional(),\r\n    password: editPassword\r\n      ? yup\r\n          .string()\r\n          .required(t(\"No password provided\"))\r\n          .min(8, t(\"Password is too short\"))\r\n          // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n          .matches(\r\n            /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n            t(\"Password is too weak\")\r\n          )\r\n      : yup.string().optional(),\r\n  };\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object(yupObject);\r\n\r\n  /**\r\n   * Data consistency tests\r\n   */\r\n  if (userData === null) return <></>;\r\n\r\n  /**\r\n   * Destructuring\r\n   */\r\n  const { mode } = props;\r\n  const {\r\n    firstname,\r\n    lastname,\r\n    email,\r\n    // language,\r\n    // currency_name,\r\n    // currency_abbr,\r\n  } = userData;\r\n  // const currency = `${currency_name} (${currency_abbr})`;\r\n\r\n  const UserEditorForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <Card title={t(\"Profile\")}>\r\n        {/* First name */}\r\n        <ListGroup variant=\"flush\">\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"First name\")}</Form.Label>\r\n            {!editFirstname ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditFirstname(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n                <br />\r\n                <small>{firstname}</small>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditFirstname(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editFirstname && (\r\n              <Form.Group controlId=\"validationFormikFirstName\">\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Enter first name\")}\r\n                    name=\"firstName\"\r\n                    value={values.firstName}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.firstName && touched.firstName}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.firstName}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n            )}\r\n          </ListGroup.Item>\r\n\r\n          {/* Last name */}\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"Last name\")}</Form.Label>\r\n            {!editLastname ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditLastname(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n                <br />\r\n                <small>{lastname}</small>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditLastname(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editLastname && (\r\n              <Form.Group controlId=\"validationFormikLastName\">\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Enter last name\")}\r\n                    name=\"lastName\"\r\n                    value={values.lastName}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.lastName && touched.lastName}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.lastName}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n            )}\r\n          </ListGroup.Item>\r\n\r\n          {/* Email */}\r\n          {accountNumber !== null && (\r\n            <ListGroup.Item as=\"div\" action>\r\n              <Form.Label>{t(\"Email address\")}</Form.Label>\r\n              {!editEmail ? (\r\n                <>\r\n                  <span style={{ float: \"right\" }}>\r\n                    <Edit\r\n                      onClick={() => setEditEmail(true)}\r\n                      fontSize=\"small\"\r\n                      style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                    />\r\n                  </span>\r\n                  <br />\r\n                  <small>{email}</small>\r\n                </>\r\n              ) : (\r\n                <span style={{ float: \"right\" }}>\r\n                  <Close\r\n                    onClick={() => setEditEmail(false)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n              )}\r\n\r\n              {editEmail && (\r\n                <Form.Group controlId=\"validationFormikEmail\">\r\n                  <InputGroup>\r\n                    <Form.Control\r\n                      placeholder={t(\"Enter email\")}\r\n                      name=\"email\"\r\n                      value={values.email}\r\n                      onChange={handleChange}\r\n                      // onBlur={handleChange}\r\n                      isInvalid={!!errors.email && touched.email}\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.email}\r\n                    </Form.Control.Feedback>\r\n                  </InputGroup>\r\n                </Form.Group>\r\n              )}\r\n            </ListGroup.Item>\r\n          )}\r\n\r\n          {/* Password */}\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"Password\")}</Form.Label>\r\n            {!editPassword ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditPassword(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditPassword(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editPassword && (\r\n              <>\r\n                {/* New password */}\r\n                <Form.Group controlId=\"validationFormikPassword\">\r\n                  <InputGroup>\r\n                    <Form.Control\r\n                      type={passwordVisible ? \"text\" : \"password\"}\r\n                      placeholder={t(\"Enter new password\")}\r\n                      name=\"password\"\r\n                      value={values.password}\r\n                      onChange={handleChange}\r\n                      // onBlur={handleChange}\r\n                      isInvalid={!!errors.password && touched.password}\r\n                    />\r\n                    <InputGroup.Append>\r\n                      <InputGroup.Text\r\n                        id=\"inputGroupAppend\"\r\n                        onClick={togglePassword}\r\n                        style={{\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        {passwordVisible ? (\r\n                          <VisibilityOff\r\n                            fontSize=\"small\"\r\n                            style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                          />\r\n                        ) : (\r\n                          <Visibility\r\n                            fontSize=\"small\"\r\n                            style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                          />\r\n                        )}\r\n                      </InputGroup.Text>\r\n                    </InputGroup.Append>\r\n\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.password}\r\n                    </Form.Control.Feedback>\r\n                  </InputGroup>\r\n                </Form.Group>\r\n              </>\r\n            )}\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n\r\n        <Form.Group controlId=\"validationSubmitButton\">\r\n          <SubmitButton\r\n            {...args}\r\n            caption={t(\"Submit\")}\r\n            visible={submitButtonVisible}\r\n            marginTop={20}\r\n            request={props.request}\r\n            namespace={props.namespace}\r\n          />\r\n        </Form.Group>\r\n      </Card>\r\n    </Form>\r\n  );\r\n\r\n  const jsx =\r\n    mode === \"label\" ? (\r\n      <span style={{ whiteSpace: \"nowrap\" }}>\r\n        {firstname} {lastname}\r\n      </span>\r\n    ) : (\r\n      <Formik\r\n        component={UserEditorForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          firstName: userData.firstname,\r\n          lastName: userData.lastname,\r\n          email: userData.email,\r\n          password: \"\",\r\n        }}\r\n      />\r\n    );\r\n\r\n  return <>{jsx}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, Table } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\n// import * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\n// import Card from \"../card\";\r\n// import SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {\r\n    request: \"register currency\",\r\n    namespace: \"Currencies\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    currencies,\r\n    countCurrencies,\r\n    activePageCurrencies,\r\n    currenciesPerPage,\r\n    currencyAbbr,\r\n    userData,\r\n  } = props.barrelGetters;\r\n  const { setCurrencyAbbr } = props.barrelSetters;\r\n  const {\r\n    // getReviser,\r\n    // getWorkplace,\r\n    sendRequest,\r\n    getCurrencies,\r\n    formatExchangeRate,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Destructured vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  const onCurrencySelected = (e) => {\r\n    setCurrencyAbbr(e.target.id);\r\n    sendRequest({\r\n      req: \"register user currency\",\r\n      data: { email: userData.email, currency_id: e.target.id },\r\n    });\r\n  };\r\n\r\n  const onPageSelect = (number) => {\r\n    // console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageCurrencies > 1 ? activePageCurrencies - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageCurrencies < Math.ceil(countCurrencies / currenciesPerPage)\r\n            ? activePageCurrencies + 1\r\n            : Math.ceil(countCurrencies / currenciesPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countCurrencies / currenciesPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getCurrencies(number);\r\n  };\r\n\r\n  /**\r\n   * Form\r\n   ============================================================================ */\r\n  const CurrenciesForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <>\r\n      <Table responsive striped bordered hover size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Select\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Abbr\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Name\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Region\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Rate\")}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {currencies !== null &&\r\n            currencies.map((currency, keyCUrrency) => {\r\n              // console.log(\"CURRENCY\", currency);\r\n\r\n              const { name, abbr, rate, region } = currency;\r\n              return (\r\n                <tr key={keyCUrrency}>\r\n                  <td style={{ textAlign: \"center\" }}>\r\n                    <Form.Check\r\n                      type=\"radio\"\r\n                      checked={currencyAbbr === abbr}\r\n                      name=\"selected-currency\"\r\n                      id={abbr}\r\n                      aria-label=\"option 1\"\r\n                      onChange={onCurrencySelected}\r\n                    />\r\n                  </td>\r\n                  <td style={{ textAlign: \"center\" }}>{abbr}</td>\r\n                  <td style={{ textAlign: \"left\" }}>{name}</td>\r\n                  <td style={{ textAlign: \"left\" }}>{region}</td>\r\n                  <td style={{ textAlign: \"right\" }}>\r\n                    {formatExchangeRate(rate)}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </Table>\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countCurrencies / currenciesPerPage)}\r\n        active={activePageCurrencies}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n\r\n  /**\r\n   * Formik return\r\n   ============================================================================ */\r\n  // onSubmit={onSubmit}\r\n  return (\r\n    <Formik\r\n      component={CurrenciesForm}\r\n      initialValues={{\r\n        curr_abbr: \"\",\r\n        curr_title: \"\",\r\n        curr_region: \"\",\r\n        curr_rate: 1.0,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\n// import Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n// import Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"CurrencyRegistration\",\r\n    request: \"register currency\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  // const {\r\n  //   currencies,\r\n  //   countCurrencies,\r\n  //   activePageCurrencies,\r\n  //   currenciesPerPage,\r\n  // } = props.barrelGetters;\r\n  // const { setActivePageCurrencies } = props.barrelSetters;\r\n  const {\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n    // getCurrencies,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Destructured vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([\"CurrencyRegistration\"]);\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    curr_abbr: yup\r\n      .string()\r\n      .required(t(\"Currency abbreviation is required\"))\r\n      .min(3, t(\"Currency abbreviation is too short\"))\r\n      .max(5, t(\"Currency abbreviation is too long\")),\r\n    curr_title: yup\r\n      .string()\r\n      .required(t(\"Currency name is required\"))\r\n      .min(3, t(\"Currency name is too short\")) // must be at least 3 characters\r\n      .max(70, t(\"Currency name is too long\")), // must be at most 70 characters\r\n    curr_region: yup\r\n      .string()\r\n      .required(t(\"Currency region is required\"))\r\n      .min(3, t(\"Currency region is too short\")) // must be at least 3 characters\r\n      .max(70, t(\"Currency region is too long\")), // must be at most 70 characters\r\n    curr_rate: yup\r\n      .string()\r\n      .required(t(\"Exchange rate is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Exchange Rate Regex\")),\r\n        t(\"Wrong exchange rate format\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n  const onSubmit = (data) => {\r\n    console.log(data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  /**\r\n   * Form\r\n   ============================================================================ */\r\n  const CurrencyRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <>\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        {/* Currency abbreviation */}\r\n        <Form.Group controlId=\"validationFormikCurrAbbr\">\r\n          <Form.Label>{t(\"Abbreviation\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_abbr\"\r\n              value={values.curr_abbr}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_abbr && touched.curr_abbr}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_abbr}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Currency name */}\r\n        <Form.Group controlId=\"validationFormikCurrName\">\r\n          <Form.Label>{t(\"Currency Name\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_title\"\r\n              value={values.curr_title}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_title && touched.curr_title}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_title}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Currency region */}\r\n        <Form.Group controlId=\"validationFormikCurrRegion\">\r\n          <Form.Label>{t(\"Currency Region\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_region\"\r\n              value={values.curr_region}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_region && touched.curr_region}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_region}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Initial exchange rate */}\r\n        <Form.Group controlId=\"validationFormikCurrRate\">\r\n          <Form.Label>{t(\"Initial Exchange Rate\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_rate\"\r\n              value={values.curr_rate}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_rate && touched.curr_rate}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_rate}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Submit button */}\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </>\r\n  );\r\n\r\n  /**\r\n   * Formik return\r\n   ============================================================================ */\r\n  return (\r\n    <Formik\r\n      component={CurrencyRegistrationForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        curr_abbr: \"\",\r\n        curr_title: \"\",\r\n        curr_region: \"\",\r\n        curr_rate: 1.0,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"ModalMessage\", message: \"\", onHide: () => {} };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        {false && (\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              <img\r\n                src=\"gfx/zlogo_light.png\"\r\n                width=\"auto\"\r\n                height=\"30\"\r\n                className=\"d-inline-block align-top\"\r\n                alt={t(\"Logo\")}\r\n              />\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n        )}\r\n        <Modal.Body>{props.message}</Modal.Body>\r\n        {false && (\r\n          <Modal.Footer>\r\n            <Button onClick={props.onHide}>Close</Button>\r\n          </Modal.Footer>\r\n        )}\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { AvTimer } from \"@material-ui/icons\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\n\r\n//  let time = new Date().toLocaleString();\r\nimport { useInterval } from \"../../utils/useInterval\";\r\nimport { useEventListener } from \"../../utils/useEventListener\";\r\n\r\nimport ModalMessage from \"../modalMessage\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Constants\r\n     ============================================================================ */\r\n  const minute = 60; // seconds, for testing purposes\r\n\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"IdleTimer\",\r\n    timeout: 5 * minute,\r\n    timestamp: null,\r\n    stage2: 60, // show seconds (vs minutes) in stage 2\r\n    stage3: 20, // show modal message on stage 3\r\n\r\n    onTimeout: () => {},\r\n\r\n    events: [\"load\", \"mousemove\", \"mousedown\", \"click\", \"scroll\", \"keypress\"],\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { formatDate } = props.barrelFunctions;\r\n  const { onSessionTimeout } = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  const [seconds, setSeconds] = useState(props.timeout);\r\n  const [modalMessageShow, setModalMessageShow] = React.useState(false);\r\n\r\n  useInterval(() => {\r\n    // Your custom logic here\r\n    setSeconds(seconds - 1);\r\n  }, 1000);\r\n\r\n  useEventListener(() => {\r\n    setSeconds(props.timeout);\r\n  }, [\"mousedown\", \"click\", \"scroll\", \"keypress\"]);\r\n\r\n  useEffect(() => {\r\n    if (seconds === props.timeout) setModalMessageShow(false);\r\n    if (seconds === props.stage3) setModalMessageShow(true);\r\n    if (seconds === 0) onSessionTimeout();\r\n\r\n    // eslint-disable-next-line\r\n  }, [seconds]);\r\n\r\n  const getJSX = () => {\r\n    let currTime;\r\n    if (seconds > props.stage2) currTime = Math.ceil(seconds / minute);\r\n    else currTime = seconds;\r\n\r\n    const timeFormatted = formatDate(new Date(1970, 1, 1, 0, 0, currTime), {\r\n      minute: \"numeric\",\r\n      second: \"numeric\",\r\n    });\r\n\r\n    const onSessionContinue = () => {\r\n      console.log(\"onSessionContinue\");\r\n      // props.timeout = 5 * minute;\r\n      setSeconds(props.timeout);\r\n    };\r\n\r\n    const modalMessage = (\r\n      <>\r\n        <Trans\r\n          i18nKey=\"IdleTimer:Automatic logout\"\r\n          timeFormatted={timeFormatted}\r\n        >\r\n          <div className=\"text-center\">Automatic logout in</div>\r\n          <div\r\n            className=\"text-center\"\r\n            style={{ fontSize: \"4em\", fontWeight: \"bold\", color: \"#A93226\" }}\r\n          >\r\n            {{ timeFormatted }}\r\n          </div>\r\n          <div className=\"text-center\">\r\n            Do you want to continue the session?\r\n          </div>\r\n        </Trans>\r\n        <br />\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Continue now\")}\r\n          request=\"continue session\"\r\n          onSubmit={onSessionContinue}\r\n          namespace={props.namespace}\r\n        />\r\n      </>\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <ModalMessage\r\n          show={modalMessageShow}\r\n          message={modalMessage}\r\n          onHide={() => setModalMessageShow(false)}\r\n        />\r\n        <OverlayTrigger\r\n          placement=\"bottom\"\r\n          overlay={\r\n            <Tooltip>\r\n              {seconds > props.stage2 ? (\r\n                <Trans\r\n                  i18nKey=\"IdleTimer:Minutes to automatical log out\"\r\n                  currTime={currTime}\r\n                >\r\n                  You will be automatically logged out in {{ currTime }}{\" \"}\r\n                  minutes.\r\n                </Trans>\r\n              ) : (\r\n                <Trans\r\n                  i18nKey=\"IdleTimer:Seconds to automatical log out\"\r\n                  currTime={currTime}\r\n                >\r\n                  You will be automatically logged out in {{ currTime }}{\" \"}\r\n                  seconds.\r\n                </Trans>\r\n              )}\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <div style={{ whiteSpace: \"nowrap\", cursor: \"default\" }}>\r\n            <AvTimer style={{ color: \"var(--dark)\" }} />\r\n            &nbsp;\r\n            {seconds > props.stage2 ? (\r\n              <>\r\n                <span className=\"d-none d-sm-inline text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:minutes\" currTime={currTime}>\r\n                    {{ currTime }} minutes\r\n                  </Trans>\r\n                </span>\r\n                <span className=\"d-inline d-sm-none text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:min\" currTime={currTime}>\r\n                    {{ currTime }} min\r\n                  </Trans>\r\n                </span>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <span className=\"d-none d-sm-inline text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:seconds\" currTime={currTime}>\r\n                    {{ currTime }} seconds\r\n                  </Trans>\r\n                </span>\r\n                <span className=\"d-inline d-sm-none text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:sec\" currTime={currTime}>\r\n                    <span>{{ currTime }}</span> sec\r\n                  </Trans>\r\n                </span>\r\n              </>\r\n            )}\r\n          </div>\r\n        </OverlayTrigger>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return <>{getJSX()}</>;\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport const useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport { useEffect } from \"react\";\r\n// import { useTranslation, Trans } from \"react-i18next\";\r\n// import { OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\n\r\nexport const useEventListener = (callback, events) => {\r\n  let defaults = {\r\n    namespace: \"IdleTimer\",\r\n    // timeout: 5 * minute,\r\n\r\n    onTimeout: () => {},\r\n\r\n    events: [\"load\", \"mousemove\", \"mousedown\", \"click\", \"scroll\", \"keypress\"],\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, { events: events });\r\n\r\n  // const [gotEvent, setGotEvent] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // console.log(props.events);\r\n\r\n    const eventHandler = (e) => {\r\n      // setGotEvent(e);\r\n      callback(e);\r\n    };\r\n\r\n    // async () => {\r\n    for (let i in props.events) {\r\n      window.addEventListener(props.events[i], eventHandler);\r\n    }\r\n\r\n    // };\r\n\r\n    return () => {\r\n      for (let i in props.events) {\r\n        // console.log(\"REMOVE LISTENER\");\r\n        window.removeEventListener(props.events[i], eventHandler);\r\n      }\r\n    };\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n       * Return\r\n       ============================================================================ */\r\n  // return gotEvent;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import { Redirect } from \"react-router-dom\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  useLocation,\r\n  // Redirect,\r\n} from \"react-router-dom\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  // Button,\r\n  // Breadcrumb,\r\n  // NavDropdown,\r\n  // Alert,\r\n} from \"react-bootstrap\";\r\n// import Octicon, { SignOut } from \"@primer/octicons-react\";\r\nimport { PowerSettingsNew } from \"@material-ui/icons\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport AccountRegistration from \"../../accountRegistration\";\r\nimport BusinessRegistration from \"../../businessRegistration\";\r\nimport { Balance, Transfer } from \"../../transfer\";\r\nimport MyBusiness from \"../../myBusiness\";\r\nimport UserEditor from \"../../userEditor\";\r\nimport CurrencyContainer from \"../../currencyContainer\";\r\nimport IdleTimer from \"../../idleTimer\";\r\n// import useIdleTimer from \"../../../utils/useIdleTimer\";\r\n\r\n// const AccountRegistration = React.lazy(() =>\r\n//   import(\"../../accountRegistration\")\r\n// );\r\n// const BusinessRegistration = React.lazy(() =>\r\n//   import(\"../../businessRegistration\")\r\n// );\r\n// const MyBusiness = React.lazy(() => import(\"../../myBusiness\"));\r\n// const UserEditor = React.lazy(() => import(\"../../userEditor\"));\r\n// const CurrencyContainer = React.lazy(() => import(\"../../currencyContainer\"));\r\n\r\n/**\r\n * Component: Summary\r\n */\r\nexport default (args) => {\r\n  // console.log(\"SUMMARY\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { namespace: \"Summary\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber } = props.barrelGetters;\r\n  const { setGotFocus } = props.barrelSetters;\r\n  const { getBusinesses } = props.barrelFunctions;\r\n  // const {  } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  // let tmrUpdateTimestamp = null;\r\n\r\n  // React.useEffect(() => {\r\n  //   // if (!signedIn) return;\r\n  //   updateTimestamp();\r\n  //   // eslint-disable-next-line\r\n  // }, []);\r\n\r\n  // React.useEffect(() => {\r\n  //   // if (!signedIn) return;\r\n  //   console.log(timestamp);\r\n\r\n  //   // eslint-disable-next-line\r\n  // }, [timestamp]);\r\n\r\n  // const [unmounted, setUnmounted] = useState(false);\r\n\r\n  // const onIdleTimerUnmount = () => {\r\n  //   setIdleTimerUnmounted(true);\r\n  // };\r\n\r\n  /**\r\n   * Data consistency tests\r\n   */\r\n  // if (accountNumber === null) return <>{t(\"Something went wrong\")}</>;\r\n\r\n  // const idleTimer = useIdleTimer({ ...args, onTimeout: onSessionTimeout });\r\n  // <IdleTimer {...args} onTimeout={onSessionTimeout} />\r\n\r\n  // const topMenuBackColor = \"var(--light)\";\r\n\r\n  const location = useLocation();\r\n\r\n  // console.log(\"location:\", location);\r\n\r\n  const navigation = (\r\n    <>\r\n      <Container\r\n        fluid\r\n        style={{\r\n          // backgroundColor: \"green\",\r\n          paddingRight: \"0\",\r\n          paddingLeft: \"0\",\r\n        }}\r\n      >\r\n        <Row>\r\n          {/*\r\n           * Top Menu\r\n           */}\r\n          <Col>\r\n            <Navbar\r\n              // className=\"card-header\"\r\n              // className=\"navbar-trans\"\r\n              // bg=\"light\"\r\n              // variant=\"light\"\r\n              style={{\r\n                borderRadius: \"5px\",\r\n                // background: \"transparent !important\",\r\n                // color: \"#f7f7f7\",\r\n                backgroundColor: \"var(--light)\", // e8f6f3\r\n                boxShadow: \"none\",\r\n                // whiteSpace: \"nowrap\",\r\n              }}\r\n            >\r\n              <Navbar.Brand href=\"/\">\r\n                <img\r\n                  src=\"gfx/zlogo_light.png\"\r\n                  width=\"auto\"\r\n                  height=\"30\"\r\n                  className=\"d-inline-block align-top\"\r\n                  alt={t(\"Logo\")}\r\n                />\r\n              </Navbar.Brand>\r\n              <Nav className=\"mr-auto\">\r\n                <Nav.Link eventKey=\"profile\" href=\"/profile\">\r\n                  <UserEditor {...args} />\r\n                </Nav.Link>\r\n              </Nav>\r\n              <Nav>\r\n                <Nav.Link eventKey=\"sign-out\" href=\"/sign-out\">\r\n                  <span style={{ whiteSpace: \"nowrap\" }}>\r\n                    <span>\r\n                      <PowerSettingsNew style={{ color: \"var(--dark)\" }} />\r\n                    </span>\r\n\r\n                    <span className=\"d-none d-sm-inline\">\r\n                      &nbsp;\r\n                      {t(\"Sign out\")}\r\n                    </span>\r\n                  </span>\r\n                </Nav.Link>\r\n              </Nav>\r\n              {true && (\r\n                <Nav>\r\n                  <Nav.Item>\r\n                    <IdleTimer {...args} />\r\n                  </Nav.Item>\r\n                </Nav>\r\n              )}\r\n            </Navbar>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <div style={{ height: \"7px\" }}></div>\r\n            <Navbar\r\n              collapseOnSelect\r\n              expand=\"sm\"\r\n              // className=\"card-header\"\r\n              // className=\"navbar-trans\"\r\n              // bg=\"dark\"\r\n              variant=\"dark\"\r\n              style={{\r\n                borderRadius: \"5px\",\r\n                background: \"transparent !important\",\r\n                backgroundColor: \"var(--dark)\",\r\n                boxShadow: \"none\",\r\n              }}\r\n            >\r\n              <Nav>\r\n                <Nav.Link\r\n                  className=\"nav-link-2\"\r\n                  eventKey=\"balance\"\r\n                  href=\"/balance\"\r\n                  style={{\r\n                    fontWeight:\r\n                      location.pathname === \"/balance\" ? \"bold\" : \"normal\",\r\n                  }}\r\n                >\r\n                  {t(\"Balance\")}\r\n                </Nav.Link>\r\n              </Nav>\r\n              <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n              <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                  {accountNumber !== null && (\r\n                    <>\r\n                      <Nav.Link\r\n                        className=\"nav-link-2\"\r\n                        eventKey=\"transfer\"\r\n                        href=\"/transfer\"\r\n                        style={{\r\n                          fontWeight:\r\n                            location.pathname === \"/transfer\"\r\n                              ? \"bold\"\r\n                              : \"normal\",\r\n                        }}\r\n                      >\r\n                        {t(\"Transfer\")}\r\n                      </Nav.Link>\r\n                      <Nav.Link\r\n                        className=\"nav-link-2\"\r\n                        eventKey=\"my-business\"\r\n                        // href=\"/my-business\"\r\n                        onClick={() => getBusinesses(1)}\r\n                        style={{\r\n                          fontWeight:\r\n                            location.pathname === \"/my-business\"\r\n                              ? \"bold\"\r\n                              : \"normal\",\r\n                        }}\r\n                      >\r\n                        {t(\"Business\")}\r\n                      </Nav.Link>\r\n                      <Nav.Link\r\n                        className=\"nav-link-2\"\r\n                        eventKey=\"currency\"\r\n                        href=\"/currency\"\r\n                        style={{\r\n                          fontWeight:\r\n                            location.pathname === \"/currency\"\r\n                              ? \"bold\"\r\n                              : \"normal\",\r\n                        }}\r\n                      >\r\n                        {t(\"Currency\")}\r\n                      </Nav.Link>\r\n                    </>\r\n                  )}\r\n                </Nav>\r\n              </Navbar.Collapse>\r\n            </Navbar>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n\r\n  const viewBalanceOrTransfer = (\r\n    <Router>\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          component={() => {\r\n            return accountNumber !== null\r\n              ? Balance(args)\r\n              : AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/summary\"\r\n          component={() => {\r\n            return accountNumber !== null\r\n              ? Balance(args)\r\n              : AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/account-registration\"\r\n          component={() => {\r\n            return AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/profile\"\r\n          component={() => {\r\n            return UserEditor({ ...args, mode: \"profile\" });\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/currency\"\r\n          component={() => {\r\n            return CurrencyContainer({ ...args });\r\n          }}\r\n        />\r\n        {/* \r\n        <Route\r\n          exact\r\n          path=\"/business-registration\"\r\n          component={() => {\r\n            return BusinessRegistration(args);\r\n          }}\r\n        />\r\n        */}\r\n        <Route\r\n          exact\r\n          path=\"/my-business\"\r\n          component={() => {\r\n            return MyBusiness(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/balance\"\r\n          component={() => {\r\n            return Balance(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/transfer\"\r\n          component={() => {\r\n            return Transfer(args);\r\n          }}\r\n        />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {/* Header */}\r\n\r\n      {/* Content */}\r\n      {/*<h3>{t(\"Summary\")}</h3>*/}\r\n\r\n      <Container fluid=\"md\">\r\n        <Row>\r\n          <Col>\r\n            {navigation}\r\n            <div style={{ height: \"7px\" }}></div>\r\n          </Col>\r\n        </Row>\r\n        {/*\r\n        <Row>{viewAccountRegistration}</Row>\r\n        */}\r\n        <Row>\r\n          <Col>{viewBalanceOrTransfer}</Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Accordion, Card } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\nimport Currencies from \"../currencies\";\r\nimport CurrencyRegistration from \"../currencyRegistration\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"CurrencyContainer\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const {\r\n    accordionViewCurrency,\r\n    activePageCurrencies,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  const { setAccordionViewCurrency, setRedirectTo } = props.barrelSetters;\r\n  const { getCurrencies } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const ToggleCurrencies = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionViewCurrency(\"currencies\");\r\n    getCurrencies(activePageCurrencies);\r\n  };\r\n\r\n  const ToggleCurrencyRegistration = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionViewCurrency(\"currencyRegistration\");\r\n    // getTransactions(1);\r\n  };\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return (\r\n    <>\r\n      <Accordion defaultActiveKey={accordionViewCurrency}>\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"currencies\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleCurrencies}\r\n          >\r\n            {t(\"Currencies\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"currencies\">\r\n            <Card.Body>\r\n              <Currencies {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"currencyRegistration\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleCurrencyRegistration}\r\n          >\r\n            {t(\"Currency Registration\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"currencyRegistration\">\r\n            <Card.Body>\r\n              <CurrencyRegistration {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { TransferToSelf, TransferToPerson, TransferToBusiness } from \"./index\";\r\n// import { Alert } from \"react-bootstrap\";\r\n\r\n// const navigation = [\r\n//   {\r\n//     name: \"U2S\",\r\n//     link: \"#u2s\",\r\n//   },\r\n//   {\r\n//     name: \"U2U\",\r\n//     link: \"#u2u\",\r\n//   },\r\n//   {\r\n//     name: \"U2B\",\r\n//     link: \"#u2b\",\r\n//   },\r\n// ];\r\n\r\n/**\r\n * Component: Transfer\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber, transferType } = props.barrelGetters;\r\n  const { setRedirectTo } = props.barrelSetters;\r\n  const { format } = props.barrelFunctions;\r\n  const { onTransferTypeChange } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"Transfer\");\r\n\r\n  const data = props.data;\r\n  const type = transferType;\r\n  // const onTypeChange = args.onTypeChange;\r\n\r\n  // console.log(\"TRANSFER DATA TYPE:\", type);\r\n\r\n  const [transferCard, setTransferCard] = useState(null);\r\n\r\n  const onNavigationClick = (id) => {\r\n    onTransferTypeChange(id);\r\n  };\r\n\r\n  const navigation = [\r\n    {\r\n      name: t(\"U2S\"),\r\n      link: \"#u2s\",\r\n    },\r\n    {\r\n      name: t(\"U2U\"),\r\n      link: \"#u2u\",\r\n    },\r\n    {\r\n      name: t(\"U2B\"),\r\n      link: \"#u2b\",\r\n    },\r\n  ];\r\n\r\n  // console.log(\"TRANSFER DATA\", data);\r\n  // const title = t(\"Transfer to account\");\r\n\r\n  useEffect(() => {\r\n    if (type === null) return;\r\n\r\n    // setTransferCard()\r\n    switch (type) {\r\n      case \"#u2s\": // User to self\r\n        setTransferCard(\r\n          <TransferToSelf\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      case \"#u2u\": // User to user\r\n        setTransferCard(\r\n          <TransferToPerson\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      case \"#u2b\": // User to business\r\n        setTransferCard(\r\n          <TransferToBusiness\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [data, format, type]);\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  // return (\r\n  //   <>\r\n  //     <Alert variant=\"warning\">\r\n  //       <Alert.Heading>{t(\"Account not yet registered\")}</Alert.Heading>\r\n  //       <p>\r\n  //         <Trans i18nKey=\"Balance:Please set up your account first.\">\r\n  //           Please set up your account first. Use this{\" \"}\r\n  //           <a href=\"/account-registration\">link</a>.\r\n  //         </Trans>\r\n  //       </p>\r\n  //     </Alert>\r\n  //   </>\r\n  // );\r\n\r\n  return <>{transferCard}</>;\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport config from \"./config\";\r\nimport openSocket from \"socket.io-client\";\r\n\r\nlet socket = openSocket.connect(config.uri.ENDPOINT, {\r\n  secure: true,\r\n  reconnect: true,\r\n});\r\n\r\n/**\r\n * Send request to the server\r\n * @param {*} param0\r\n */\r\nexport const sendData = (data, debug = false) => {\r\n  if (debug) console.log(`request: ${data.req}`, data);\r\n\r\n  // No data - do not send\r\n  // if (req.length === 0) return false;\r\n\r\n  socket.emit(`onDataReceived`, data);\r\n  return true;\r\n};\r\n\r\n// Start a session\r\nexport const startSession = (data, session, debug = false) => {\r\n  // console.log(\"startSession\");\r\n  if (debug) console.log(`request: start session`, data, session);\r\n\r\n  socket.emit(`start session`, {\r\n    data: data,\r\n    session: session,\r\n    req: \"start session\",\r\n  });\r\n};\r\n\r\n// End the session\r\nexport const endSession = (data, session, debug = false) => {\r\n  if (debug) console.log(`request: end session`, data, session);\r\n  socket.emit(`end session`, {\r\n    // char: data,\r\n    data: data,\r\n    // uid: uid,\r\n    session: session,\r\n    req: \"end session\",\r\n  });\r\n};\r\n\r\n// Custom hook: useSocket\r\nexport const useSocket = (callback) => {\r\n  const [responseData, setResponseData] = useState(null);\r\n  socket.on(`onDataReceived`, (data) => {\r\n    setResponseData(data);\r\n    // callback(data);\r\n  });\r\n\r\n  // useEventListener(() => {\r\n  //   socket.on(`onDataReceived`, (data) => {\r\n  //     setResponseData(data);\r\n  //     // callback(data);\r\n  //   });\r\n  // }, [\"focus\"]);\r\n\r\n  useEffect(() => {\r\n    if (responseData === null) return;\r\n\r\n    callback(responseData);\r\n    // eslint-disable-next-line\r\n  }, [responseData]);\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport {\r\n  Form,\r\n  InputGroup,\r\n  // Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  // Spinner,\r\n} from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport SubmitButton from \"../submitButton\";\r\n// import Alert from \"../alert\";\r\n// import LanguageSelector from \"../language-selector\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"LogIn\");\r\n\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n    password: yup.string().required(t(\"No password provided\")),\r\n  });\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  const sendUserLogInRequest = (data) => {\r\n    // data.pw = data.password;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    sendRequest({ req: \"sign in user\", data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    sendUserLogInRequest(data);\r\n  };\r\n\r\n  // const languageData = { language: \"en\" };\r\n\r\n  const UserLogInForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Sign In\")}</h3>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"Password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Remember me */}\r\n      {/*\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Check\r\n          required\r\n          name=\"rememberMe\"\r\n          label={t(\"Remember me\")}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.rememberMe}\r\n          feedback={errors.rememberMe}\r\n          id=\"validationFormik0\"\r\n        />\r\n      </Form.Group>\r\n      */}\r\n\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request=\"sign in user\"\r\n          namespace=\"LogIn\"\r\n        />\r\n      </Form.Group>\r\n\r\n      <Container fluid=\"md\">\r\n        <Row>\r\n          <Col>\r\n            <p className=\"other-options text-left\">\r\n              <Trans i18nKey=\"LogIn:Not yet registered\">\r\n                Not yet <a href=\"/sign-up\">registered?</a>\r\n              </Trans>\r\n            </p>\r\n          </Col>\r\n          <Col>\r\n            <p className=\"other-options text-right\">\r\n              <Trans i18nKey=\"LogIn:Forgot password\">\r\n                Forgot <a href=\"/reset\">password?</a>\r\n              </Trans>\r\n            </p>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Form>\r\n  );\r\n\r\n  // const onAlertClose = () => {\r\n  //   setAlertVisible(false);\r\n  //   authorizedData.hideError();\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        component={UserLogInForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          email: \"\",\r\n          password: \"\",\r\n          rememberMe: \"\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","// import { Redirect } from \"react-router-dom\";\r\n// import Octicon, { Eye, EyeClosed } from \"@primer/octicons-react\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport { Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport * as yup from \"yup\";\r\n// import LanguageSelector from \"../language-selector\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"register user\", namespace: \"SignUp\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { language } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // console.log(\"SIGN UP PROPS:\", props);\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    firstName: yup.string().required(t(\"First name is required\")),\r\n    lastName: yup.string().required(t(\"Last name is required\")),\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n    password: yup\r\n      .string()\r\n      .required(t(\"No password provided\"))\r\n      .min(8, t(\"Password is too short\"))\r\n      // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n      .matches(\r\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n        t(\"Password is too weak\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  const sendUserRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.language = language;\r\n    data.validateEmail = true;\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    if (sendUserRegistrationRequest(data)) {\r\n      // User registration request was submitted\r\n    }\r\n  };\r\n\r\n  // const languageData = { language: \"en\" };\r\n\r\n  const UserRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Sign Up\")}</h3>\r\n\r\n      {/* First name */}\r\n      <Form.Group controlId=\"validationFormikFirstName\">\r\n        <Form.Label>{t(\"First name\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"Enter first name\")}\r\n            name=\"firstName\"\r\n            value={values.firstName}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.firstName && touched.firstName}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.firstName}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Last name */}\r\n      <Form.Group controlId=\"validationFormikLastName\">\r\n        <Form.Label>{t(\"Last name\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"Enter last name\")}\r\n            name=\"lastName\"\r\n            value={values.lastName}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.lastName && touched.lastName}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.lastName}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"Password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type={passwordVisible ? \"text\" : \"password\"}\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text\r\n              id=\"inputGroupAppend\"\r\n              onClick={togglePassword}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              {passwordVisible ? (\r\n                <VisibilityOff\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\" }}\r\n                />\r\n              ) : (\r\n                <Visibility fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n              )}\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationSubmitButton\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form.Group>\r\n\r\n      <p className=\"other-options text-right\">\r\n        <Trans i18nKey=\"SignUp:Already registered\">\r\n          Already registered <a href=\"/sign-in\">sign in?</a>\r\n        </Trans>\r\n      </p>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={UserRegistrationForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nexport const useStickyState = (defaultValue, key) => {\r\n  const [value, setValue] = useState(() => {\r\n    const stickyValue = window.localStorage.getItem(key);\r\n    return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\r\n  });\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n  }, [key, value]);\r\n  return [value, setValue];\r\n};\r\n","import React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args.data);\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { error, info } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  const { onAlertClose: onClose } = props.barrelEventHandlers;\r\n\r\n  // const autoClose = () => {\r\n  //   window.setTimeout(() => {\r\n  //     onClose();\r\n  //   }, 5000);\r\n  // };\r\n\r\n  if (error !== null) {\r\n    let { t } = useTranslation(\"Errors\");\r\n    return (\r\n      <Alert variant=\"danger\" onClose={() => onClose()} dismissible>\r\n        {t(error)}\r\n      </Alert>\r\n    );\r\n  } else if (info !== null) {\r\n    let { t } = useTranslation(\"Infos\");\r\n    // autoClose();\r\n    return (\r\n      <Alert variant=\"info\" onClose={() => onClose()} dismissible>\r\n        {t(info)}\r\n      </Alert>\r\n    );\r\n  }\r\n  return <></>;\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"../../translations/i18n\";\r\n// import { withNamespaces } from \"react-i18next\";\r\nimport { Form, Badge } from \"react-bootstrap\";\r\n\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"CurrencyContainer\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { userData } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"LanguageSelector\");\r\n  const changeLanguage = (lng) => {\r\n    i18n.changeLanguage(lng);\r\n  };\r\n  const languages = [\r\n    { id: 1, language: \"Latviešu\", code: \"lv\" },\r\n    { id: 2, language: \"English\", code: \"en\" },\r\n  ];\r\n  const handleLanguageSelect = (e) => {\r\n    changeLanguage(e.target.value);\r\n  };\r\n  const selectLanguage = (language) => {\r\n    changeLanguage(language);\r\n\r\n    if (userData !== null) {\r\n      sendRequest({\r\n        req: \"register user language\",\r\n        data: { email: userData.email, language },\r\n      });\r\n    }\r\n  };\r\n\r\n  if (1) {\r\n    return (\r\n      <>\r\n        <div style={{ height: \"7px\" }}></div>\r\n        <Badge\r\n          pill\r\n          variant=\"light\"\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            selectLanguage(\"lv\");\r\n          }}\r\n        >\r\n          lv\r\n        </Badge>{\" \"}\r\n        <Badge\r\n          pill\r\n          variant=\"light\"\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            selectLanguage(\"en\");\r\n          }}\r\n        >\r\n          en\r\n        </Badge>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <Form.Control\r\n        as=\"select\"\r\n        id=\"languageSelector\"\r\n        onChange={handleLanguageSelect}\r\n        custom\r\n      >\r\n        <option key=\"0\" value={props.language}>\r\n          {t(\"Language\")}\r\n        </option>\r\n        {languages.map((el) => (\r\n          <option key={el.id} value={el.code}>\r\n            {el.language}\r\n          </option>\r\n        ))}\r\n      </Form.Control>\r\n    );\r\n  }\r\n};\r\n\r\n// function selectElement(id, valueToSelect) {\r\n//   let element = document.getElementById(id);\r\n//   if (!element) return;\r\n//   element.value = valueToSelect;\r\n// }\r\n\r\n// // catch the event and make changes accordingly\r\n// i18n.on(\"languageChanged\", function (lng) {\r\n//   selectElement(\"languageSelector\", lng);\r\n// });\r\n","/**\r\n * CSS\r\n */\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Main.css\";\r\n\r\n/**\r\n * System imports\r\n */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n// import { useTranslation } from \"react-i18next\";\r\n\r\n/**\r\n * User imports\r\n */\r\nimport i18n from \"../../../translations/i18n\";\r\nimport Summary from \"../summary\";\r\nimport {\r\n  useSocket,\r\n  sendData,\r\n  startSession,\r\n  endSession,\r\n} from \"../../../utils/sockets\";\r\n// import { useEventListener } from \"../../../utils/useEventListener\";\r\n// import { useEventListener } from \"../../../utils/useEventListener\";\r\nimport Login from \"../../login\";\r\nimport Logout from \"../../logout\";\r\nimport SignUp from \"../../signup\";\r\nimport PasswordReset from \"../../passwordReset\";\r\nimport errorHandler from \"../../../utils/errorHandler\";\r\nimport responseHandler from \"../../../utils/responseHandler\";\r\nimport requestHandler from \"../../../utils/requestHandler\";\r\nimport { useStickyState } from \"../../../utils/state\";\r\nimport Alert from \"../../alert\";\r\nimport LanguageSelector from \"../../language-selector\";\r\nimport ValidateEmail from \"../../validateEmail\";\r\nimport ChangePassword from \"../../changePassword\";\r\n// import { useEventListener } from \"../../../utils/useEventListener\";\r\n\r\n/**\r\n * Component: Main\r\n */\r\nexport default () => {\r\n  /**\r\n   * Properties\r\n   */\r\n  // const userDataFetchInterval = 5000; // Test: 5000 | 30000;\r\n\r\n  /** \r\n   * Hooks\r\n   ============================================================================ */\r\n  const [debug, setDebug] = useState(true);\r\n  const [loggingOut, setLoggingOut] = useState(false);\r\n  const [pageLoading, setPageLoading] = useState(true);\r\n  // const [instance, setInstance] = useStickyState(0, \"instance\");\r\n  const [request, setRequest] = useStickyState(null, \"request\");\r\n  // const [requestTS, setRequestTS] = useState(null);\r\n  const [instance, setInstance] = useState(Date.now());\r\n  // const [lastRequest, setLastRequest] = useStickyState(null, \"lastRequest\");\r\n  const [session, setSession] = useStickyState(uuidv4(), \"session\");\r\n  const [connected, setConnected] = useStickyState(false, \"connected\");\r\n  const [signedIn, setSignedIn] = useStickyState(false, \"signedIn\");\r\n  const [currencyAbbr, setCurrencyAbbr] = useStickyState(\"Z\", \"currencyAbbr\");\r\n  const [currencyRate, setCurrencyRate] = useState(1, \"currencyRate\");\r\n  const [currencies, setCurrencies] = useStickyState(null, \"currencies\");\r\n  const [transactions, setTransactions] = useStickyState(null, \"transactions\");\r\n  const [shares, setShares] = useStickyState(null, \"shares\");\r\n  const [accordionView, setAccordionView] = useStickyState(\r\n    \"balance\",\r\n    \"accordionView\"\r\n  );\r\n  const [accordionViewCurrency, setAccordionViewCurrency] = useStickyState(\r\n    null,\r\n    \"accordionViewCurrency\"\r\n  );\r\n  const [countCurrencies, setCountCurrencies] = useStickyState(\r\n    null,\r\n    \"countCurrencies\"\r\n  );\r\n  const [countTransactions, setCountTransactions] = useStickyState(\r\n    null,\r\n    \"countTransactions\"\r\n  );\r\n  const [countShares, setCountShares] = useStickyState(null, \"countShares\");\r\n  const [activePageCurrencies, setActivePageCurrencies] = useStickyState(\r\n    1,\r\n    \"activePageCurrencies\"\r\n  );\r\n  const [activePageTransactions, setActivePageTransactions] = useStickyState(\r\n    1,\r\n    \"activePageTransactions\"\r\n  );\r\n  const [activePageShares, setActivePageShares] = useStickyState(\r\n    1,\r\n    \"activePageShares\"\r\n  );\r\n  const [currenciesPerPage, setCurrenciesPerPage] = useStickyState(\r\n    5,\r\n    \"currenciesPerPage\"\r\n  );\r\n  const [transactionsPerPage, setTransactionsPerPage] = useStickyState(\r\n    5,\r\n    \"transactionsPerPage\"\r\n  );\r\n  const [sharesPerPage, setSharesPerPage] = useStickyState(5, \"sharesPerPage\");\r\n  const [userData, setUserData] = useStickyState(null, \"userData\");\r\n  const [uid, setUID] = useStickyState(null, \"uid\");\r\n  const [accountNumber, setAccountNumber] = useStickyState(\r\n    null,\r\n    \"accountNumber\"\r\n  );\r\n  const [accountType, setAccountType] = useStickyState(null, \"accountType\");\r\n  const [userBusinesses, setUserBusinesses] = useStickyState(\r\n    null,\r\n    \"userBusinesses\"\r\n  );\r\n  const [countBusinesses, setCountBusinesses] = useStickyState(\r\n    null,\r\n    \"countBusinesses\"\r\n  );\r\n  const [businessesPerPage, setBusinessesPerPage] = useStickyState(\r\n    1,\r\n    \"businessesPerPage\"\r\n  );\r\n  const [activePageBusinesses, setActivePageBusinesses] = useStickyState(\r\n    1,\r\n    \"activePageBusinesses\"\r\n  );\r\n  const [userBusinessesLoaded, setUserBusinessesLoaded] = useStickyState(\r\n    false,\r\n    \"userBusinessesLoaded\"\r\n  );\r\n  const [activeBusiness, setActiveBusiness] = useStickyState(\r\n    null,\r\n    \"activeBusiness\"\r\n  );\r\n  const [activeBusinessID, setActiveBusinessID] = useStickyState(\r\n    null,\r\n    \"activeBusinessID\"\r\n  );\r\n\r\n  const [businessPurposes, setBusinessPurposes] = useStickyState(\r\n    null,\r\n    \"businessPurposes\"\r\n  );\r\n\r\n  const [countBusinessPurposes, setCountBusinessPurposes] = useStickyState(\r\n    null,\r\n    \"countBusinessPurposes\"\r\n  );\r\n  const [businessPurposesPerPage, setBusinessPurposesPerPage] = useStickyState(\r\n    2,\r\n    \"businessPurposesPerPage\"\r\n  );\r\n  const [\r\n    activePageBusinessPurposes,\r\n    setActivePageBusinessPurposes,\r\n  ] = useStickyState(1, \"activePageBusinessPurposes\");\r\n\r\n  const [activeBusinesPurpose, setActiveBusinesPurpose] = useStickyState(\r\n    null,\r\n    \"activeBusinesPurpose\"\r\n  );\r\n\r\n  const [purposeShareholders, setPurposeShareholders] = useStickyState(\r\n    null,\r\n    \"purposeShareholders\"\r\n  );\r\n\r\n  // const [businessLoaded, setBusinessLoaded] = useState(null);\r\n  // const [redirect, setRedirect] = useState(false);\r\n  const [redirectTo, setRedirectTo] = useState(null);\r\n  const [lastInsertId, setLastInsertId] = useState(null);\r\n  // const [responseData, setResponseData] = useState(null);\r\n  const [validateTokenEmail, setValidateTokenEmail] = useState(null);\r\n  const [validateTokenPasswordReset, setValidateTokenPasswordReset] = useState(\r\n    null\r\n  );\r\n\r\n  // const [\r\n  //   passwordResetTokenValidated,\r\n  //   setPasswordResetTokenValidated,\r\n  // ] = useStickyState(\"none\", \"passwordResetTokenValidated\");\r\n\r\n  const [\r\n    passwordResetTokenValidated,\r\n    setPasswordResetTokenValidated,\r\n  ] = useState(null);\r\n  const [passwordResetTokenEmail, setPasswordResetTokenEmail] = useState(null);\r\n\r\n  const [tmrConnected] = useState(null);\r\n  const [language, setLanguage] = useStickyState(\r\n    i18n.options.fallbackLng[0],\r\n    \"language\"\r\n  ); //\r\n  const [transferType, setTransferType] = useStickyState(\r\n    \"#u2s\",\r\n    \"transferType\"\r\n  );\r\n  // const [transferSuccess, setTransferSuccess] = useStickyState(\r\n  //   false,\r\n  //   \"transferSuccess\"\r\n  // );\r\n  const [accountPhotoPath, setAccountPhotoPath] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n  const [info, setInfo] = useState(null);\r\n  // const [alertVisible, setAlertVisible] = useState(false);\r\n\r\n  // const gotEvent = useEventListener();\r\n  // console.log(gotEvent);\r\n\r\n  /**\r\n   * Barrel: Getters\r\n   */\r\n  const barrelGetters = {\r\n    debug,\r\n    // instance,\r\n    loggingOut,\r\n    // timestamp,\r\n    // startTimestamp,\r\n    pageLoading,\r\n    request,\r\n    // requestTS,\r\n    instance,\r\n    // lastRequest,\r\n    session,\r\n    // sessionTimeout,\r\n    // tmrSession,\r\n    currencies: JSON.parse(currencies),\r\n    transactions: JSON.parse(transactions),\r\n    shares: JSON.parse(shares),\r\n    accordionView,\r\n    accordionViewCurrency,\r\n    countCurrencies,\r\n    countTransactions,\r\n    countShares,\r\n    activePageCurrencies,\r\n    activePageTransactions,\r\n    activePageShares,\r\n    currenciesPerPage,\r\n    transactionsPerPage,\r\n    sharesPerPage,\r\n    userData: JSON.parse(userData),\r\n    // redirect,\r\n    redirectTo,\r\n    lastInsertId,\r\n    connected,\r\n    signedIn,\r\n    currencyAbbr,\r\n    currencyRate,\r\n    // currencyStatus,\r\n    accountNumber,\r\n    accountType,\r\n    uid,\r\n    userBusinesses: JSON.parse(userBusinesses),\r\n    countBusinesses,\r\n    businessesPerPage,\r\n    activePageBusinesses,\r\n    userBusinessesLoaded,\r\n    activeBusiness,\r\n    activeBusinessID,\r\n    businessPurposes: JSON.parse(businessPurposes),\r\n    countBusinessPurposes,\r\n    businessPurposesPerPage,\r\n    activePageBusinessPurposes,\r\n    activeBusinesPurpose,\r\n    purposeShareholders: JSON.parse(purposeShareholders),\r\n    // businessLoaded,\r\n    tmrConnected,\r\n    validateTokenEmail,\r\n    validateTokenPasswordReset,\r\n    passwordResetTokenValidated,\r\n    passwordResetTokenEmail,\r\n    language,\r\n    transferType,\r\n    // transferSuccess,\r\n    accountPhotoPath,\r\n    error,\r\n    info,\r\n    // alertVisible,\r\n  };\r\n\r\n  /**\r\n   * Barrel: Setters\r\n   */\r\n  const barrelSetters = {\r\n    setDebug,\r\n    // setInstance,\r\n    setLoggingOut,\r\n    // setTimestamp,\r\n    // setStartTimestamp,\r\n    setPageLoading,\r\n    setRequest,\r\n    // setRequestTS,\r\n    setInstance,\r\n    // setLastRequest,\r\n    setSession,\r\n    // setSessionTimeout,\r\n    setCurrencies,\r\n    setTransactions,\r\n    setShares,\r\n    setAccordionView,\r\n    setAccordionViewCurrency,\r\n    setCountCurrencies,\r\n    setCountTransactions,\r\n    setCountShares,\r\n    setActivePageCurrencies,\r\n    setActivePageTransactions,\r\n    setActivePageShares,\r\n    setCurrenciesPerPage,\r\n    setTransactionsPerPage,\r\n    setSharesPerPage,\r\n    setConnected,\r\n    setLanguage,\r\n    setUserData,\r\n    // sendRequest,\r\n    setSignedIn,\r\n    setCurrencyAbbr,\r\n    setCurrencyRate,\r\n    // setCurrencyStatus,\r\n    setRedirectTo,\r\n    setLastInsertId,\r\n    setAccountNumber,\r\n    setAccountType,\r\n    setUID,\r\n    setUserBusinesses,\r\n    setCountBusinesses,\r\n    setBusinessesPerPage,\r\n    setActivePageBusinesses,\r\n    setUserBusinessesLoaded,\r\n    setActiveBusiness,\r\n    setActiveBusinessID,\r\n    setBusinessPurposes,\r\n    setCountBusinessPurposes,\r\n    setBusinessPurposesPerPage,\r\n    setActivePageBusinessPurposes,\r\n    setActiveBusinesPurpose,\r\n    setPurposeShareholders,\r\n    // setBusinessLoaded,\r\n    setAccountPhotoPath,\r\n    setValidateTokenEmail,\r\n    setValidateTokenPasswordReset,\r\n    setPasswordResetTokenValidated,\r\n    setPasswordResetTokenEmail,\r\n    // setTransferSuccess,\r\n    // setRedirect,\r\n    // showMessage,\r\n  };\r\n\r\n  /** \r\n   * Custom hooks\r\n   ============================================================================ */\r\n  // const { t } = useTranslation(\"Errors\");\r\n\r\n  useSocket((data) => {\r\n    // console.log(\"REQUEST:\", request);\r\n\r\n    // if (!gotFocus) return;\r\n    // console.log(\"USE SOCKET:\", data);\r\n\r\n    // setResponseData(data);\r\n\r\n    // console.log(\"LAST REQUEST:\", lastRequest);\r\n\r\n    processResponse({\r\n      args: data,\r\n      barrels: barrels,\r\n    });\r\n  });\r\n\r\n  // useEventListener(\r\n  //   (e) => {\r\n  //     console.log(\"EVENT:\", e.type);\r\n  //     // setGotFocus(e.type === \"focus\");\r\n  //     setInstance(e.type === \"load\" ? instance + 1 : instance - 1);\r\n  //   },\r\n  //   [\"load\", \"onbeforeunload\"] // \"blur\",\r\n  // );\r\n\r\n  // useEventListener(() => {\r\n  //   // console.log(\"LOST FOCUS\");\r\n  //   setGotFocus(false);\r\n  // }, [\"blur\"]);\r\n\r\n  /** \r\n   * Functions\r\n   ============================================================================ */\r\n\r\n  /**\r\n   * Sends requests to the server\r\n   * @param {string} request Request name\r\n   * @param {object} data Request data\r\n   */\r\n  const sendRequest = ({ req, data = null }) => {\r\n    if (processRequest({ req, data, session, uid: \"STA\", barrels })) {\r\n      // request processed successfully\r\n      return true;\r\n    } else {\r\n      console.log(\"THIS SHOULD NOT BE REACHED\");\r\n      return sendData({ req, uid: \"STA\", session, data }, debug);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Processes user request\r\n   * @param {*} param0\r\n   */\r\n  const processRequest = ({ req, data, session, uid, barrels }) => {\r\n    // showMessage(\"PROCESSING_REQUEST\", \"info\");\r\n    // console.log(\"LAST REQUEST:\", lastRequest);\r\n\r\n    // data.ts = Date.now();\r\n    // setRequestTS(data.ts);\r\n    data.instance = instance;\r\n\r\n    setRequest(req);\r\n    // setLastRequest(req);\r\n    return requestHandler({\r\n      req,\r\n      data,\r\n      session,\r\n      uid,\r\n      barrels,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Processes server response\r\n   * @param {*} param0\r\n   */\r\n  const processResponse = ({ args, barrels }) => {\r\n    // console.log(\"PROCESS RESPONSE ARGS:\", args);\r\n\r\n    /**\r\n     * Choose a handler depending on response status:\r\n     * Error or other (success | continue | finished | pending etc.)\r\n     */\r\n    return args.status === \"error\"\r\n      ? errorHandler({\r\n          args: args,\r\n          uid: uid,\r\n          barrels: barrels,\r\n        })\r\n      : responseHandler({\r\n          args: args,\r\n          uid: uid,\r\n          barrels: barrels,\r\n        });\r\n  };\r\n\r\n  /**\r\n   * Shows a messgae (error or info)\r\n   * @param {string} msg Messgae text\r\n   * @param {string} type Message type (\"error\" | \"info\")\r\n   */\r\n  const showMessage = (msg, type = \"error\") => {\r\n    // if (type !== \"error\") {\r\n    //   hideMessage();\r\n    // }\r\n    type === \"error\" ? setError(msg) : setInfo(msg);\r\n  };\r\n\r\n  /**\r\n   * Hides the message\r\n   */\r\n  const hideMessage = () => {\r\n    setError(null);\r\n    setInfo(null);\r\n  };\r\n\r\n  // const startSessionTimeout = () => {\r\n  //   if (tmrSession.current !== false) clearInterval(tmrSession.current);\r\n  //   setSessionTimeout(10);\r\n  //   tmrSession.current = setInterval(() => {\r\n  //     console.log(\"sessionTimeout:\", sessionTimeout);\r\n\r\n  //     setSessionTimeout(sessionTimeout - 1);\r\n  //   }, 1000);\r\n  // };\r\n\r\n  // const startSessionTimeout() {\r\n  //   let [count, setCount] = useState(0);\r\n\r\n  //   useInterval(() => {\r\n  //     // Your custom logic here\r\n  //     setCount(count + 1);\r\n  //   }, 1000);\r\n\r\n  //   return <h1>{count}</h1>;\r\n  // }\r\n\r\n  // const stopSessionTimeout = () => {\r\n  //   if (tmrSession.current !== false) clearInterval(tmrSession.current);\r\n  // };\r\n\r\n  /**\r\n   * Changes the website language\r\n   */\r\n  const changeLanguage = (lng) => {\r\n    i18n.changeLanguage(lng);\r\n    setLanguage(lng);\r\n  };\r\n\r\n  /**\r\n   * Format number\r\n   * @param {number} number\r\n   */\r\n  const format = (number, currency = currencyAbbr) => {\r\n    return (\r\n      new Intl.NumberFormat(language, {\r\n        notation: \"standard\",\r\n        minimumFractionDigits: 2,\r\n      }).format(number * currencyRate) +\r\n      \" \" +\r\n      currency\r\n    );\r\n  };\r\n  //\r\n\r\n  /**\r\n   * Format per cent\r\n   * @param {number} number\r\n   */\r\n  const formatPerCent = (number) => {\r\n    return (\r\n      new Intl.NumberFormat(language, {\r\n        notation: \"standard\",\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 2,\r\n      }).format(number) + \"%\"\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Format per cent\r\n   * @param {number} number\r\n   */\r\n  const formatExchangeRate = (number) => {\r\n    return new Intl.NumberFormat(language, {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 5,\r\n      maximumFractionDigits: 5,\r\n    }).format(number);\r\n  };\r\n\r\n  const parseLocaleNumber = (stringNumber, locale) => {\r\n    let num = 123456.789,\r\n      fmt_local = new Intl.NumberFormat(locale, {\r\n        style: \"currency\",\r\n        currency: \"USD\",\r\n      }),\r\n      parts_local = fmt_local.formatToParts(num),\r\n      group = \"\",\r\n      decimal = \"\",\r\n      currency = \"\";\r\n\r\n    // separators\r\n    parts_local.forEach(function (i) {\r\n      switch (i.type) {\r\n        case \"group\":\r\n          group = i.value;\r\n          break;\r\n        case \"decimal\":\r\n          decimal = i.value;\r\n          break;\r\n        case \"currency\":\r\n          currency = i.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    return parseFloat(\r\n      stringNumber\r\n        .replace(new RegExp(\"\\\\\" + group, \"g\"), \"\")\r\n        .replace(new RegExp(\"\\\\\" + decimal), \".\")\r\n        .replace(new RegExp(\"\\\\\" + currency, \"g\"), \"\")\r\n    );\r\n  };\r\n\r\n  const formatDate = (\r\n    ts,\r\n    options = {\r\n      month: \"long\",\r\n      day: \"numeric\",\r\n      year: \"numeric\",\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n    }\r\n  ) => {\r\n    // const event = new Date(date);\r\n\r\n    // const options = {\r\n    //   weekday: \"long\",\r\n    //   year: \"numeric\",\r\n    //   month: \"long\",\r\n    //   day: \"numeric\",\r\n    // };\r\n\r\n    // return event.toLocaleDateString(language, options);\r\n\r\n    // const defaults = {\r\n    //   month: \"long\",\r\n    //   day: \"numeric\",\r\n    //   year: \"numeric\",\r\n    //   hour: \"numeric\",\r\n    //   minute: \"numeric\",\r\n    // };\r\n    // const options = Object.assign(defaults, args);\r\n    const date = new Date(ts);\r\n    return new Intl.DateTimeFormat(language, options).format(date);\r\n  };\r\n\r\n  /**\r\n   * Retrieves an URL parameter\r\n   */\r\n  const getUrlParam = (param) => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    return urlParams.get(param);\r\n  };\r\n\r\n  // /**\r\n  //  * Clear local storage (URL param ?reset)\r\n  //  */\r\n  // if (getUrlParam(\"reset\") !== null) {\r\n  //   console.log(\"Reset\");\r\n\r\n  //   window.localStorage.clear();\r\n  //   console.log(\"Local storage cleared\");\r\n  // }\r\n\r\n  const sendEmailValidationRequest = ({ token, email }) => {\r\n    // console.log(\"sendEmailValidationRequest:\", token, email);\r\n\r\n    sendRequest({\r\n      req: \"validate email token\",\r\n      data: { token, email },\r\n    });\r\n  };\r\n\r\n  const sendPasswordResetRequest = ({ token, email }) => {\r\n    // console.log(\"sendEmailValidationRequest:\", token, email);\r\n    setPasswordResetTokenEmail(email);\r\n    sendRequest({\r\n      req: \"validate password reset token\",\r\n      data: { token, email },\r\n    });\r\n  };\r\n\r\n  const getCurrencies = (newPage) => {\r\n    setCurrencies(null);\r\n    sendRequest({\r\n      req: \"get currencies\",\r\n      data: { page: newPage, limit: currenciesPerPage },\r\n    });\r\n    setActivePageCurrencies(newPage);\r\n  };\r\n\r\n  const getTransactions = (newPage) => {\r\n    setTransactions(null);\r\n    sendRequest({\r\n      req: \"get transactions\",\r\n      data: { page: newPage, limit: transactionsPerPage, uid: accountNumber },\r\n    });\r\n    setActivePageTransactions(newPage);\r\n  };\r\n\r\n  const getShares = (newPage) => {\r\n    setShares(null);\r\n    sendRequest({\r\n      req: \"get shares\",\r\n      data: { page: newPage, limit: sharesPerPage, uid: accountNumber },\r\n    });\r\n    setActivePageShares(newPage);\r\n  };\r\n\r\n  const getBusinesses = (newPage = 1) => {\r\n    setUserBusinesses(null);\r\n    setCountBusinessPurposes(null);\r\n    setActivePageBusinessPurposes(1);\r\n    setActiveBusinessID(null);\r\n    sendRequest({\r\n      req: \"get user businesses\",\r\n      data: { uid: accountNumber, page: newPage, limit: businessesPerPage },\r\n    });\r\n    setActivePageBusinesses(newPage);\r\n  };\r\n\r\n  const getBusinessPurposes = (business_id, selected = null, newPage = 1) => {\r\n    // console.log(\"BUSINESS PURPOSES FOR ID \" + business_id, businessPurposes);\r\n\r\n    if (selected !== null) {\r\n      setActiveBusiness(selected);\r\n      setActiveBusinesPurpose(null);\r\n    }\r\n    setBusinessPurposes(null);\r\n    setCountBusinessPurposes(null);\r\n    setActivePageBusinessPurposes(newPage);\r\n    setActiveBusinessID(business_id);\r\n    return sendRequest({\r\n      req: \"get business purposes\",\r\n      data: {\r\n        business_id: business_id,\r\n        page: newPage,\r\n        limit: businessPurposesPerPage,\r\n      },\r\n    });\r\n  };\r\n\r\n  const getPurposeShareholders = (purpose_id, selected = null) => {\r\n    if (selected !== null) {\r\n      // setActiveBusinesPurpose(selected);\r\n      setActiveBusinesPurpose(purpose_id);\r\n    }\r\n    setPurposeShareholders(null);\r\n    return sendRequest({\r\n      req: \"get purpose shareholders\",\r\n      data: { purpose_id: purpose_id },\r\n    });\r\n  };\r\n\r\n  const getAccountData = () => {\r\n    sendRequest({\r\n      req: \"get account data\",\r\n      data: { uid: accountNumber },\r\n    });\r\n  };\r\n\r\n  const getTransactionById = (id) => {\r\n    sendRequest({\r\n      req: \"get transaction by id\",\r\n      data: { id: id },\r\n    });\r\n  };\r\n\r\n  const getContainerClass = (signedIn) => {\r\n    return {\r\n      wrapperClass: signedIn\r\n        ? \"auth-wrapper auth-wrapper-summary\"\r\n        : \"auth-wrapper\",\r\n      innerClass: signedIn\r\n        ? \"auth-inner auth-inner-summary\"\r\n        : \"auth-inner autoWidth\",\r\n    };\r\n  };\r\n\r\n  const getRedirect = () => {\r\n    // if (redirectTo !== null) {\r\n    //   let link = redirectTo;\r\n\r\n    //   r = <Redirect push to={link} />;\r\n    // }\r\n    return redirectTo === null ? \"\" : <Redirect push to={redirectTo} />;\r\n  };\r\n\r\n  // const updateTimestamp = () => {\r\n  //   let tmr = setInterval(() => {\r\n  //     // console.log(timestamp);\r\n\r\n  //     setTimestamp(Math.floor(Date.now() / 1000));\r\n  //   }, 1000);\r\n  //   setTmrUpdateTimestamp(tmr);\r\n  // };\r\n\r\n  // const clearTimestamp = () => {\r\n  //   clearInterval(tmrUpdateTimestamp);\r\n  // };\r\n\r\n  const getReviser = () => {\r\n    return \"STA\";\r\n  };\r\n\r\n  const getWorkplace = () => {\r\n    return \"LAPSTA\";\r\n  };\r\n\r\n  /**\r\n   * Barrel: Functions\r\n   */\r\n  const barrelFunctions = {\r\n    sendRequest,\r\n    // processResponse,\r\n    showMessage,\r\n    hideMessage,\r\n    // startSessionTimeout,\r\n    // stopSessionTimeout,\r\n    changeLanguage,\r\n    format,\r\n    formatPerCent,\r\n    formatExchangeRate,\r\n    formatDate,\r\n    sendEmailValidationRequest,\r\n    getUrlParam,\r\n    getAccountData,\r\n    getTransactionById,\r\n    getBusinesses,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n    getCurrencies,\r\n    getTransactions,\r\n    getShares,\r\n    parseLocaleNumber,\r\n    getReviser,\r\n    getWorkplace,\r\n    // updateTimestamp,\r\n  };\r\n\r\n  /** \r\n   * Event handlers\r\n   ============================================================================ */\r\n\r\n  /**\r\n   * On language change\r\n   */\r\n  i18n.on(\"languageChanged\", function (lng) {\r\n    setLanguage(lng);\r\n  });\r\n\r\n  /**\r\n   * On redirect\r\n   * @param {string} to Redirect path (e.g. \"/sign-in\")\r\n   */\r\n  const onRedirect = (to) => {\r\n    setRedirectTo(to);\r\n  };\r\n\r\n  // /**\r\n  //  * On login\r\n  //  * @param {object} data Login data\r\n  //  */\r\n  // const onLogin = (data) => {\r\n  //   setUserData(JSON.stringify(data));\r\n  //   sendRequest({ req: \"sign in user\", data: data });\r\n  //   // setAuthorizationStep(1); // authorized session request pending\r\n  // };\r\n\r\n  /**\r\n   * On signup\r\n   * @param {object} data Signup data\r\n   */\r\n  const onSignUp = (data) => {\r\n    // console.log(\"SIGN UP (data):\", data);\r\n    /// setUserData(JSON.stringify(data));\r\n    return sendRequest({ req: \"register user\", data });\r\n  };\r\n\r\n  const onSessionTimeout = () => {\r\n    if (debug) return;\r\n    console.log(\"Session timed out...\");\r\n    // endSession(\"bye\", session);\r\n    setLoggingOut(true);\r\n    setRedirectTo(\"/sign-out\");\r\n    // Logout();\r\n  };\r\n\r\n  /**\r\n   * On account registration\r\n   * @param {object} data The account registration data\r\n   */\r\n  // const onAccountRegistration = (data) => {\r\n  //   // console.log(\"ACCOUNT REGISTRATION (data):\", data);\r\n  //   // setAccountNumber(data.personalID);\r\n  //   return sendRequest({ req: \"register account\", data });\r\n  // };\r\n\r\n  /**\r\n   * On transfer type change\r\n   * @param {string} id The transfer type id (\"U2S\", \"U2U\", \"U2B\" etc.)\r\n   */\r\n  const onTransferTypeChange = (id) => {\r\n    // console.log(\"setTransferType: \" + id);\r\n    setTransferType(id);\r\n  };\r\n\r\n  const onTransferSuccess = () => {\r\n    // console.log(\"ON TRANSFER SUCCESS\", barrels);\r\n  };\r\n\r\n  /**\r\n   * On transfer\r\n   * @param {object} data Transfer data\r\n   */\r\n  const onTransfer = (data) => {\r\n    // console.log(\"ON TRANSFER (data):\", data);\r\n    // sendRequest({ req: \"register account\", data: data });\r\n    sendRequest(data);\r\n  };\r\n\r\n  // const onBusinessRegistration = (data) => {\r\n  //   // console.log(\"ON BUSINESS REGISTRATION (data):\", data);\r\n  //   // sendRequest({ req: \"register account\", data: data });\r\n  //   sendRequest(data);\r\n  // };\r\n\r\n  const onPurposeRegistration = (data) => {\r\n    // console.log(\"ON PURPOSE REGISTRATION (data):\", data);\r\n    // sendRequest({ req: \"register account\", data: data });\r\n    sendRequest(data);\r\n    // getBusinesses();\r\n  };\r\n\r\n  // const onShareholderRegistration = (data) => {\r\n  //   console.log(\"ON SHAREHOLDER REGISTRATION (data):\", data);\r\n  //   // sendRequest({ req: \"register account\", data: data });\r\n  //   sendRequest(data);\r\n  //   // getBusinesses();\r\n  // };\r\n\r\n  /**\r\n   * On logout\r\n   */\r\n  const onLogOut = () => {\r\n    // setSession(null);\r\n\r\n    // TODO: refactor this to separate function (as well as the startSession)\r\n    let data = {};\r\n    data.request = \"bye\";\r\n    data.instance = instance;\r\n    endSession(data, session, debug);\r\n    // setSession(null);\r\n\r\n    setSignedIn(false);\r\n    // setTimerActive(false);\r\n\r\n    setCurrencies(null);\r\n    setTransactions(null);\r\n    setShares(null);\r\n    setAccordionView(\"balance\");\r\n    setAccordionViewCurrency(null);\r\n    setAccountNumber(null);\r\n    setAccountType(null);\r\n    setTransferType(\"#u2s\");\r\n    setCountTransactions(null);\r\n    setUserData(null);\r\n    setUserBusinesses(null);\r\n    setUserBusinessesLoaded(false);\r\n    setActiveBusiness(null);\r\n    setBusinessPurposes(null);\r\n    setActiveBusinesPurpose(null);\r\n    setPurposeShareholders(null);\r\n    setAccountPhotoPath(\"\");\r\n    setPasswordResetTokenValidated(null);\r\n    setPasswordResetTokenEmail(null);\r\n    // setSharesPerPage(1);\r\n    setError(null);\r\n    setInfo(null);\r\n    // setRedirectTo(\"/sign-in\"); // TODO: In production might disable that\r\n    // window.localStorage.clear(); // TODO: Remove in production remove\r\n  };\r\n\r\n  const onAlertClose = () => {\r\n    // setAlertVisible(false);\r\n    hideMessage();\r\n  };\r\n\r\n  /**\r\n   * Barrel: Event handlers\r\n   */\r\n  const barrelEventHandlers = {\r\n    onRedirect,\r\n    onSignUp,\r\n    onSessionTimeout,\r\n    // onAccountRegistration,\r\n    onTransferTypeChange,\r\n    onTransferSuccess,\r\n    onTransfer,\r\n\r\n    // onBusinessRegistration,\r\n    onPurposeRegistration,\r\n    // onShareholderRegistration,\r\n    onLogOut,\r\n    onAlertClose,\r\n  };\r\n\r\n  /** \r\n   * Effect hooks\r\n   ============================================================================ */\r\n\r\n  useEffect(() => {\r\n    // console.log(\"MOUNTED\");\r\n\r\n    /**\r\n     * Clear local storage (URL param ?reset)\r\n     */\r\n    if (getUrlParam(\"reset\") !== null) {\r\n      window.localStorage.clear();\r\n      console.log(\"Local storage cleared\");\r\n    }\r\n\r\n    // updateTimestamp();\r\n\r\n    // startSessionTimeout();\r\n\r\n    return () => {\r\n      // console.log(\"UNMOUNTED\");\r\n      // stopSessionTimeout();\r\n    };\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n   * On session ID change\r\n   */\r\n  useEffect(() => {\r\n    if (session === null) return;\r\n    let data = {};\r\n    data.request = \"hello\";\r\n    data.instance = instance;\r\n    startSession(data, session, debug);\r\n    // eslint-disable-next-line\r\n  }, [session]);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"sessionTimeout:\", sessionTimeout);\r\n\r\n  //   // eslint-disable-next-line\r\n  // }, [sessionTimeout]);\r\n\r\n  useEffect(() => {\r\n    // if (connected === false) {\r\n    //   // anonymize session\r\n    //   setSession(uuidv4());\r\n    // }\r\n    // eslint-disable-next-line\r\n  }, [connected]);\r\n\r\n  /**\r\n   * On signed in status change\r\n   */\r\n  useEffect(() => {\r\n    if (!signedIn) return;\r\n    // if (signedIn) {\r\n    //   updateTimestamp();\r\n    // } else {\r\n    //   clearTimestamp();\r\n    // }\r\n    // updateTimestamp();\r\n    // setTimerActive(true);\r\n    // eslint-disable-next-line\r\n  }, [signedIn]);\r\n\r\n  // useEffect(() => {\r\n  //   if (timerActive) {\r\n  //     console.log(\"SET INTERVAL\");\r\n  //     updateTimestamp();\r\n  //   } else {\r\n  //     console.log(\"CLEAR INTERVAL\");\r\n\r\n  //     clearInterval(tmrUpdateTimestamp);\r\n  //   }\r\n  //   // eslint-disable-next-line\r\n  // }, [timerActive]);\r\n\r\n  /**\r\n   * On account number change\r\n   */\r\n  useEffect(() => {\r\n    if (accountNumber === null) return;\r\n\r\n    // eslint-disable-next-line\r\n  }, [accountNumber]);\r\n\r\n  /**\r\n   * On email validation token\r\n   */\r\n  useEffect(() => {\r\n    if (validateTokenEmail === null) return;\r\n\r\n    sendEmailValidationRequest(JSON.parse(validateTokenEmail));\r\n\r\n    // eslint-disable-next-line\r\n  }, [validateTokenEmail]);\r\n\r\n  // useEffect(() => {\r\n  //   // console.log(\"EVENT\");\r\n  //   // eslint-disable-next-line\r\n  // }, [useEventListener()]);\r\n\r\n  /**\r\n   * On email validation token\r\n   */\r\n  useEffect(() => {\r\n    if (passwordResetTokenValidated === null) return;\r\n\r\n    // console.log(\"Validate token:\", passwordResetTokenValidated);\r\n\r\n    // sendEmailValidationRequest(JSON.parse(validateTokenEmail));\r\n    onRedirect(\"/password\");\r\n\r\n    // eslint-disable-next-line\r\n  }, [passwordResetTokenValidated]);\r\n\r\n  /**\r\n   * On password reset validation token\r\n   */\r\n  useEffect(() => {\r\n    if (validateTokenPasswordReset === null) return;\r\n\r\n    // console.log(\"Validate password reset token:\", validateTokenPasswordReset);\r\n\r\n    sendPasswordResetRequest(JSON.parse(validateTokenPasswordReset));\r\n\r\n    // eslint-disable-next-line\r\n  }, [validateTokenPasswordReset]);\r\n\r\n  const { wrapperClass, innerClass } = getContainerClass(signedIn);\r\n\r\n  /**\r\n   * Barrel of barrels\r\n   */\r\n  const barrels = {\r\n    barrelGetters,\r\n    barrelSetters,\r\n    barrelFunctions,\r\n    barrelEventHandlers,\r\n  };\r\n\r\n  const appClass = signedIn ? \"App\" : \"App bg\";\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        {getRedirect()}\r\n\r\n        <div className={appClass} style={{}}>\r\n          {/**\r\n           * Wrapper for the main window\r\n           */}\r\n          <div className={wrapperClass} style={{}}>\r\n            {/**\r\n             * Top margin of the main window (only for >= sm)\r\n             */}\r\n            <div className=\"d-none d-sm-block\" style={{ height: \"20px\" }}></div>\r\n\r\n            {/**\r\n             * The main window\r\n             */}\r\n            <div className={innerClass}>\r\n              {/**\r\n               * Top padding of the main window\r\n               */}\r\n              <div style={{ height: \"16px\" }}></div>\r\n\r\n              {/**\r\n               * The alert\r\n               */}\r\n              <div>\r\n                <Alert data={barrels} />\r\n              </div>\r\n\r\n              {/**\r\n               * Routes\r\n               */}\r\n              <Switch>\r\n                {/**\r\n                 * Route: Home\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/\"\r\n                  component={() => {\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Sign in\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-in\"\r\n                  component={() => {\r\n                    return Login(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Sign up\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-up\"\r\n                  component={() => {\r\n                    return SignUp(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Validate mail\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/validate-email\"\r\n                  component={() => {\r\n                    return ValidateEmail(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Change password\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/password\"\r\n                  component={() => {\r\n                    return ChangePassword(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: User profile\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/profile\"\r\n                  component={() => {\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Currency\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/currency\"\r\n                  component={() => {\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Sign out\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-out\"\r\n                  component={() => {\r\n                    return Logout(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Password reset\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/reset\"\r\n                  component={() => {\r\n                    return PasswordReset(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Account registration\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/account-registration\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Business registration\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/business-registration\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: My business\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/my-business\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Balance\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/balance\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Transfer\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/transfer\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Summary\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/summary\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n              </Switch>\r\n\r\n              {/**\r\n               * Language selector\r\n               */}\r\n              <div className=\"text-center\">\r\n                <LanguageSelector {...barrels} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n","import { sendData } from \"../utils/sockets\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n  const { req, data, session, uid, barrels } = props;\r\n\r\n  // console.log(\"RESPONSE HANDLER: \", props, barrels);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const { debug } = barrels.barrelGetters;\r\n  const {\r\n    setUserData,\r\n    setUID,\r\n    setAccountNumber,\r\n    // setUserBusinesses,\r\n  } = barrels.barrelSetters;\r\n  // const { sendRequest, showMessage } = barrels.barrelFunctions;\r\n  //   const {} = barrels.barrelEventHandlers;\r\n\r\n  let requestFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onRequest = (req, callback) => {\r\n    if (requestFound) return;\r\n    if (req === props.req || req === \"default\") {\r\n      callback();\r\n      requestFound = true;\r\n    }\r\n  };\r\n\r\n  /** \r\n   * Request handlers\r\n  ============================================================================ */\r\n\r\n  onRequest(\"sign in user\", () => {\r\n    // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n    // console.log(\"onRequest:\", data);\r\n\r\n    setUserData(JSON.stringify(data));\r\n    sendData({ req, data, uid, session }, debug);\r\n  });\r\n\r\n  onRequest(\"register account\", () => {\r\n    // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n    setUID(data.personalID);\r\n    setAccountNumber(data.personalID);\r\n    sendData({ req, data, uid, session }, debug);\r\n  });\r\n\r\n  // onRequest(\"get user businesses\", () => {\r\n  //   // setUserBusinesses(null);\r\n  //   if (userBusinesses === null) {\r\n  //     sendData({ req, data, uid, session });\r\n  //   } else {\r\n  //     //\r\n  //   }\r\n  // });\r\n\r\n  // onRequest(\"register user\", () => {\r\n  //   // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n  //   // setUserData(JSON.stringify(data));\r\n  //   sendData({ req, data, uid, session });\r\n  // });\r\n\r\n  // onRequest(\"register shareholder\", () => {\r\n  //   // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n  //   // setUserData(JSON.stringify(data));\r\n  //   sendData({ req, data, uid, session });\r\n  // });\r\n\r\n  onRequest(\"default\", () => {\r\n    sendData({ req, data, uid, session }, debug);\r\n\r\n    return true;\r\n  });\r\n\r\n  // onRequest(\"unknown\", () => {\r\n  //   showMessage(`UNKNOWN REQUEST ${req}`, \"info\");\r\n\r\n  //   return true;\r\n  // });\r\n\r\n  return requestFound;\r\n};\r\n","// import { useTranslation } from \"react-i18next\";\r\n\r\nexport default ({ args, barrels }) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {} = barrels.barrelGetters;\r\n  const { setRequest, setUID, setAccountNumber } = barrels.barrelSetters;\r\n  const { showMessage } = barrels.barrelFunctions;\r\n  // const {} = barrels.barrelEventHandlers;\r\n\r\n  //   const { t } = useTranslation(\"Errors\");\r\n  const { req, error, context } = props;\r\n  console.log(`ERROR: ${req}`, error, context, props, barrels);\r\n  // const { showMessage } = barrels.barrelFunctions;\r\n\r\n  let errorFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onError = (data, callback) => {\r\n    if (errorFound) return;\r\n    const [res, status] = data;\r\n    if ((res === req && status === error.code) || res === \"unknown\") {\r\n      callback();\r\n      setRequest(null);\r\n      errorFound = true;\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /** \r\n   * Response handlers\r\n  ============================================================================ */\r\n\r\n  /**\r\n   * Transfer errors\r\n   */\r\n  onError([\"transfer U2S\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"transfer U2U\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"transfer U2B\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_USER_REGISTRATION\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user language\", \"NO_ROWS_CHANGED\"], () => {\r\n    // user selected the same language again - just ignore\r\n    return true;\r\n  });\r\n\r\n  onError([\"validate email token\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"TOKEN_VALIDATION_FAILED\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"validate password reset token\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"TOKEN_VALIDATION_FAILED\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"reset password\", \"NO_ROWS_CHANGED\"], () => {\r\n    // showMessage(\"REQUEST_ALREADY_SENT\", \"info\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user language\", \"NO_ROWS_CHANGED\"], () => {\r\n    // User selected the same language again - that's ok\r\n    return true;\r\n  });\r\n\r\n  onError([\"update user\", \"NO_ROWS_CHANGED\"], () => {\r\n    // User selected the same password again - that's ok\r\n    return true;\r\n  });\r\n\r\n  onError([\"register account\", \"ER_DUP_ENTRY\"], () => {\r\n    setUID(null);\r\n    setAccountNumber(null);\r\n    showMessage(\"DUPLICATE_ACCOUNT_REGISTRATION\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError(\r\n    [\"register account\", \"ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO\"],\r\n    () => {\r\n      setUID(null);\r\n      setAccountNumber(null);\r\n      showMessage(\"DUPLICATE_ACCOUNT_REGISTRATION\", \"error\");\r\n      return true;\r\n    }\r\n  );\r\n\r\n  onError([\"register shareholder\", \"ER_NO_REFERENCED_ROW_2\"], () => {\r\n    showMessage(\"USER_NOT_FOUND\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"unknown\"], () => {\r\n    showMessage(error.code, \"error\");\r\n    return true;\r\n  });\r\n\r\n  return false;\r\n};\r\n","export default ({ args, barrels }) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"RESPONSE HANDLER: \", props, barrels);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    debug,\r\n    // requestTS,\r\n    instance,\r\n    currencies,\r\n    transactions,\r\n    shares,\r\n    // transactionsPerPage,\r\n    // sharesPerPage,\r\n    userData,\r\n    accountNumber,\r\n    // uid,\r\n    userBusinesses,\r\n    businessPurposes,\r\n    purposeShareholders,\r\n    activeBusinesPurpose,\r\n    lastInsertId,\r\n  } = barrels.barrelGetters;\r\n  const {\r\n    setRequest,\r\n    setSession,\r\n    setCurrencies,\r\n    setTransactions,\r\n    setShares,\r\n    setCountCurrencies,\r\n    setCountTransactions,\r\n    setCountShares,\r\n    setConnected,\r\n    // setLanguage,\r\n    setUserData,\r\n    setSignedIn,\r\n    setCurrencyAbbr,\r\n    setCurrencyRate,\r\n    // setCurrencyStatus,\r\n    // setTransferSuccess,\r\n    setRedirectTo,\r\n    setLastInsertId,\r\n    setAccountNumber,\r\n    setUID,\r\n    setUserBusinesses,\r\n    setCountBusinesses,\r\n    setUserBusinessesLoaded,\r\n    setBusinessPurposes,\r\n    setCountBusinessPurposes,\r\n    setPurposeShareholders,\r\n    // setBusinessLoaded,\r\n    setAccountPhotoPath,\r\n    setPasswordResetTokenValidated,\r\n    setPasswordResetTokenEmail,\r\n    // setRedirect,\r\n  } = barrels.barrelSetters;\r\n  const {\r\n    sendRequest,\r\n    // processResponse,\r\n    getBusinesses,\r\n    getAccountData,\r\n    getTransactionById,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n    showMessage,\r\n    changeLanguage,\r\n    // updateTimestamp,\r\n    // hideMessage,\r\n  } = barrels.barrelFunctions;\r\n  const {\r\n    // onTransferSuccess,\r\n    onRedirect,\r\n    // onLogOut,\r\n  } = barrels.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   ============================================================================ */\r\n  const { req } = props; // req, status\r\n  // const { userData, accountNumber } = barrels.barrelGetters;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  // console.log(\"USER DATA PARSED:\", userDataParsed);\r\n\r\n  /**\r\n   * Log response\r\n   */\r\n  if (debug) console.log(`response: ${req}`, props, barrels);\r\n\r\n  let responseFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onResponse = (data, callback) => {\r\n    if (responseFound) return;\r\n    const [res, status] = data;\r\n    // console.log(\"INSTANCE: \", instance, props.reqData.instance);\r\n\r\n    // if (instance !== props.reqData.instance)\r\n    //   console.log(\"WRONG INSTANCE:\", instance, props.reqData.instance);\r\n\r\n    if (\r\n      (instance === props.reqData.instance &&\r\n        res === props.req &&\r\n        status === props.status) ||\r\n      res === \"unknown\"\r\n    ) {\r\n      if (callback()) {\r\n        setRequest(null);\r\n      }\r\n      responseFound = true;\r\n      // return true;\r\n    }\r\n    // return false;\r\n  };\r\n\r\n  /** \r\n   * Response handlers\r\n  ============================================================================ */\r\n\r\n  /**\r\n   * Start session (success)\r\n   */\r\n  onResponse([\"start session\", \"success\"], () => {\r\n    setConnected(true);\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * End session (success)\r\n   */\r\n  onResponse([\"end session\", \"success\"], () => {\r\n    // console.log(\"ON END SESSION\");\r\n\r\n    setConnected(false);\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Register user (pending)\r\n   */\r\n  onResponse([\"register user\", \"pending\"], () => {\r\n    // Might show some user feedback\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register user\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO users\") {\r\n      if (props.results.insertId > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register user (success)\r\n   */\r\n  onResponse([\"register user\", \"success\"], () => {\r\n    // console.log(\"REGISTER USER PROPS:\", props);\r\n    const noEmailValidation = false;\r\n\r\n    if (noEmailValidation) {\r\n      setSignedIn(true);\r\n      setSession(props.email); // TODO: Might restore\r\n      onRedirect(\"/account-registration\");\r\n      sendRequest({ req: \"get user\", data: { email: props.email } }); // to not require a log in\r\n      return false;\r\n    } else {\r\n      onRedirect(\"/validate-email\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"validate email token\", \"continue\"], () => {\r\n    if (props.name === \"UPDATE validation tokens\") {\r\n      if (props.results.affectedRows > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        // onRedirect(\"/sign-in\");\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (props.name === \"UPDATE users\") {\r\n      if (props.results.affectedRows > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        onRedirect(\"/sign-in\");\r\n        return true;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  // onResponse([\"validate password reset token\", \"continue\"], () => {\r\n  //   if (props.name === \"UPDATE validation tokens\") {\r\n  //     if (props.results.affectedRows > 0) {\r\n  //       // onRedirect(\"/password\");\r\n  //       setPasswordResetTokenValidated(true);\r\n  //       return true;\r\n  //     } else {\r\n  //       // No row was inserted - an error was returned\r\n  //       return true;\r\n  //     }\r\n  //   }\r\n\r\n  //   return false;\r\n  // });\r\n\r\n  onResponse([\"validate password reset token\", \"success\"], () => {\r\n    setPasswordResetTokenValidated(true);\r\n\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Sign in user (continue)\r\n   */\r\n  onResponse([\"sign in user\", \"continue\"], () => {\r\n    // console.log(\"REDIRECT TO SUMMARY: \", props.name);\r\n    if (props.name === \"SELECT users\") {\r\n      // console.log(\"REDIRECT TO SUMMARY: SELECT users\");\r\n      /**\r\n       * Validated user\r\n       */\r\n      if (props.results.status === 1) {\r\n        // console.log(\"REDIRECT TO SUMMARY: props.results.status\");\r\n        setUserData(JSON.stringify(props.results));\r\n        setAccountNumber(props.results.uid);\r\n        setSession(props.results.email); // TODO: Might restore\r\n        setCurrencyAbbr(props.results.currency_abbr);\r\n        setCurrencyRate(\r\n          isNaN(props.results.currency_rate) ? 1 : props.results.currency_rate\r\n        );\r\n        changeLanguage(props.results.language);\r\n        setSignedIn(true);\r\n        // console.log(\"REDIRECT TO SUMMARY\");\r\n\r\n        onRedirect(\"/summary\");\r\n        return false;\r\n\r\n        /**\r\n         * Not yet validated user\r\n         */\r\n      } else if (props.results.status === 0) {\r\n        onRedirect(\"/validate-email\");\r\n        return true;\r\n\r\n        /**\r\n         * Suspended user\r\n         */\r\n      } else if (props.results.status === 2) {\r\n        setRedirectTo(\"/sign-out\");\r\n        showMessage(\"ACCOUNT_SUSPENDED\", \"error\");\r\n        return true;\r\n\r\n        /**\r\n         * Deleted user\r\n         */\r\n      } else if (props.results.status === 3) {\r\n        setRedirectTo(\"/sign-out\");\r\n        showMessage(\"ACCOUNT_DELETED\", \"error\");\r\n        return true;\r\n      }\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Sign in user (finished)\r\n   */\r\n  onResponse([\"sign in user\", \"finished\"], () => {\r\n    if (props.queryCnt > 0) {\r\n      return true;\r\n    } else {\r\n      showMessage(\"INVALID_SIGN_IN\", \"error\");\r\n      setRedirectTo(\"/sign-out\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"sign in user\", \"success\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Update user (success)\r\n   */\r\n  onResponse([\"update user\", \"success\"], () => {\r\n    sendRequest({ req: \"get user\", data: { email: userData.email } });\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get user (continue)\r\n   */\r\n  onResponse([\"get user\", \"continue\"], () => {\r\n    if (props.name === \"SELECT users\") {\r\n      setUserData(JSON.stringify(props.results));\r\n      return false;\r\n    }\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get user (finished)\r\n   */\r\n  onResponse([\"get user\", \"finished\"], () => {\r\n    if (props.name === \"SELECT users\") {\r\n      if (props.queryCnt === 1) {\r\n        // exactly one user found - all is good\r\n        return false;\r\n      } else if (props.queryCnt === 0) {\r\n        // Something wrong with (accessing) the user data\r\n        // Probable causes:\r\n        // - user was deleted from the DB\r\n        // - user status was set to >= 2\r\n        // - multiple users with the same email address, most improbable (db constraint)\r\n        // - user changed the email address or password\r\n        // onLogOut();\r\n        setRedirectTo(\"/sign-out\");\r\n        // showMessage(\"INVALID_DATA\", \"error\");\r\n        return true;\r\n      }\r\n      return true;\r\n    }\r\n    if (props.rowNum === 1) {\r\n      return true;\r\n    } else {\r\n      // Something wrong with (accessing) the user data\r\n      // Probable causes:\r\n      // - user was deleted from the DB\r\n      // - user status was set to >= 2\r\n      // - multiple users with the same email address, most improbable (db constraint)\r\n      // - user changed the email address or password\r\n      // onLogOut();\r\n      setRedirectTo(\"/sign-out\");\r\n      // showMessage(\"INVALID_DATA\", \"error\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"get user\", \"success\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get user businesses (continue)\r\n   */\r\n  onResponse([\"get user businesses\", \"continue\"], () => {\r\n    if (props.name === \"SELECT businesses\") {\r\n      const business = props.results;\r\n      const { business_id } = business;\r\n      if (userBusinesses === null) {\r\n        setUserBusinesses(JSON.stringify([business]));\r\n        getBusinessPurposes(business_id, 0, 1);\r\n      } else {\r\n        setUserBusinesses(JSON.stringify([...userBusinesses, business]));\r\n      }\r\n    } else if (props.name === \"COUNT businesses\") {\r\n      setCountBusinesses(props.results.count_businesses);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get user businesses (finished)\r\n   */\r\n  onResponse([\"get user businesses\", \"finished\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n    setUserBusinessesLoaded(true);\r\n    setRedirectTo(\"/my-business\");\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"get user businesses\", \"success\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get business purposes (continue)\r\n   */\r\n  onResponse([\"get business purposes\", \"continue\"], () => {\r\n    // if (props.name === \"SELECT purposes\") {\r\n    //   if (businessPurposes === null) {\r\n    //     setBusinessPurposes(JSON.stringify([props.results]));\r\n    //   } else {\r\n    //     setBusinessPurposes(\r\n    //       JSON.stringify([...businessPurposes, props.results])\r\n    //     );\r\n    //   }\r\n    // }\r\n\r\n    if (props.name === \"SELECT purposes\") {\r\n      if (businessPurposes === null) {\r\n        setBusinessPurposes(JSON.stringify([props.results]));\r\n      } else {\r\n        setBusinessPurposes(\r\n          JSON.stringify([...businessPurposes, props.results])\r\n        );\r\n      }\r\n    } else if (props.name === \"COUNT purposes\") {\r\n      setCountBusinessPurposes(props.results.count_purposes);\r\n    }\r\n\r\n    // getPurposeShareholders(props.results.purpose_id);\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get business purposes (finished)\r\n   */\r\n  onResponse([\"get business purposes\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get purpose shareholders (continue)\r\n   */\r\n  onResponse([\"get purpose shareholders\", \"continue\"], () => {\r\n    if (props.name === \"SELECT shares\") {\r\n      if (purposeShareholders === null) {\r\n        setPurposeShareholders(JSON.stringify([props.results]));\r\n      } else {\r\n        setPurposeShareholders(\r\n          JSON.stringify([...purposeShareholders, props.results])\r\n        );\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get purpose shareholders (finished)\r\n   */\r\n  onResponse([\"get purpose shareholders\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get user business by id (continue)\r\n   */\r\n  // onResponse([\"get business by id\", \"continue\"], () => {\r\n  //   if (userBusinesses === null) {\r\n  //     setUserBusinesses(JSON.stringify([props.results]));\r\n  //   } else {\r\n  //     setUserBusinesses(JSON.stringify([...userBusinesses, props.results]));\r\n  //   }\r\n\r\n  //   return false;\r\n  // });\r\n\r\n  onResponse([\"get business by id\", \"continue\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n\r\n    if (props.name === \"SELECT businesses\") {\r\n      if (userBusinesses === null) {\r\n        setUserBusinesses(JSON.stringify([props.results]));\r\n      } else {\r\n        setUserBusinesses(JSON.stringify([...userBusinesses, props.results]));\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get business by id (finished)\r\n   */\r\n  onResponse([\"get business by id\", \"finished\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n\r\n    if (props.queryCnt > 0) {\r\n      // getting business was successful - query returned results\r\n      return false;\r\n    } else {\r\n      console.log(\"Error getting business by id\");\r\n\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"get business by id\", \"success\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get purpose by id (continue)\r\n   */\r\n  onResponse([\"get purpose by id\", \"continue\"], () => {\r\n    if (props.name === \"SELECT purposes\") {\r\n      if (businessPurposes === null) {\r\n        setBusinessPurposes(JSON.stringify([props.results]));\r\n      } else {\r\n        setBusinessPurposes(\r\n          JSON.stringify([...businessPurposes, props.results])\r\n        );\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get purpose by id (finished)\r\n   */\r\n  onResponse([\"get purpose by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get shareholder by id (continue)\r\n   */\r\n  onResponse([\"get shareholder by id\", \"continue\"], () => {\r\n    if (purposeShareholders === null) {\r\n      setPurposeShareholders(JSON.stringify([props.results]));\r\n    } else {\r\n      setPurposeShareholders(\r\n        JSON.stringify([...purposeShareholders, props.results])\r\n      );\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get shareholder by id (finished)\r\n   */\r\n  onResponse([\"get shareholder by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Upload file (ready)\r\n   */\r\n  onResponse([\"upload file\", \"continue\"], () => {\r\n    console.log(\"UPLOAD FILE =========== \");\r\n\r\n    // if (props.name === \"SELECT 1\") {\r\n    // setAccountPhotoPath(props + \"?r=\" + Math.random());\r\n    setAccountPhotoPath(Date.now()); // ok\r\n    return false;\r\n    // }\r\n    // return true;\r\n  });\r\n\r\n  onResponse([\"upload file\", \"finished\"], () => {\r\n    if (props.name === \"SELECT 1\") {\r\n      if (props.queryCnt === 0) {\r\n        // something went wrong\r\n        // setAccountPhotoPath(\"ok\");\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"upload file\", \"success\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Register account (success)\r\n   */\r\n  onResponse([\"register account\", \"continue\"], () => {\r\n    if (props.results.affectedRows < 1) {\r\n      // error registering account\r\n      setUID(null);\r\n      setAccountNumber(null);\r\n      showMessage(\"INVALID_DATA\", \"error\");\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register account (success)\r\n   */\r\n  onResponse([\"register account\", \"success\"], () => {\r\n    // setAccountNumber(props.uid);\r\n    // setUID(props.uid);\r\n    // sendRequest({\r\n    //   req: \"get account data\",\r\n    //   data: { uid: accountNumber },\r\n    // });\r\n    getAccountData();\r\n    // onRedirect(\"/balance\");\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get account data (continue)\r\n   */\r\n  onResponse([\"get account data\", \"continue\"], () => {\r\n    // setUserData(JSON.stringify(props.results));\r\n    // return false;\r\n\r\n    if (props.name === \"SELECT users\") {\r\n      setUserData(JSON.stringify(props.results));\r\n\r\n      // if (props.rowNum === 1) {\r\n      //   // all is good\r\n      //   setUserData(JSON.stringify(props.results));\r\n      //   return false;\r\n      // } else {\r\n      //   // Account not reachable\r\n      //   showMessage(\"INVALID_DATA\", \"error\");\r\n      //   return true;\r\n      // }\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get account data (finished)\r\n   */\r\n  onResponse([\"get account data\", \"finished\"], () => {\r\n    if (props.name === \"SELECT users\") {\r\n      if (props.queryCnt === 0) {\r\n        // Account not reachable\r\n        showMessage(\"INVALID_DATA\", \"error\");\r\n        return true;\r\n      }\r\n    }\r\n    // if (props.rowNum === 1) {\r\n    //   // all is good\r\n    //   return true;\r\n    // } else {\r\n    //   // Account not reachable\r\n    //   showMessage(\"INVALID_DATA\", \"error\");\r\n    //   return true;\r\n    // }\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2S\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (continue)\r\n   */\r\n  onResponse([\"transfer U2S\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (success)\r\n   */\r\n  onResponse([\"transfer U2S\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2U\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (continue)\r\n   */\r\n  onResponse([\"transfer U2U\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (success)\r\n   */\r\n  onResponse([\"transfer U2U\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2B\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (continue)\r\n   */\r\n  onResponse([\"transfer U2B\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (success)\r\n   */\r\n  onResponse([\"transfer U2B\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register business\r\n   ============================================================================================*/\r\n  onResponse([\"register business\", \"continue\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n\r\n    if (props.results.insertId > 0) {\r\n      setLastInsertId(props.results.insertId);\r\n      return false;\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register business\", \"success\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n    // console.log(\"RESPONSE register business:\", props);\r\n\r\n    sendRequest({\r\n      req: \"get business by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    // getBusinesses();\r\n    return false;\r\n    // return true;\r\n  });\r\n\r\n  onResponse([\"register currency\", \"continue\"], () => {\r\n    // console.log(\"RESPONSE register business:\", props);\r\n\r\n    if (props.results.insertId > 0) {\r\n      setLastInsertId(props.results.insertId);\r\n\r\n      return false;\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register currency\", \"success\"], () => {\r\n    sendRequest({\r\n      req: \"get currency by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currencies (continue)\r\n   */\r\n  onResponse([\"get currencies\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT currencies\") {\r\n      if (currencies === null) {\r\n        setCurrencies(JSON.stringify([props.results]));\r\n      } else {\r\n        setCurrencies(JSON.stringify([...currencies, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT currencies\") {\r\n      setCountCurrencies(props.results.count_currencies);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currencies (finished)\r\n   */\r\n  onResponse([\"get currencies\", \"finished\"], () => {\r\n    setRedirectTo(\"/currency\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (continue)\r\n   */\r\n  onResponse([\"get currency by id\", \"continue\"], () => {\r\n    if (props.name === \"SELECT currencies\") {\r\n      if (currencies === null) {\r\n        setCurrencies(JSON.stringify([props.results]));\r\n      } else {\r\n        setCurrencies(JSON.stringify([...currencies, props.results]));\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (finished)\r\n   */\r\n  onResponse([\"get currency by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get transactions (continue)\r\n   */\r\n  onResponse([\"get transactions\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT transactions\") {\r\n      if (transactions === null) {\r\n        setTransactions(JSON.stringify([props.results]));\r\n      } else {\r\n        setTransactions(JSON.stringify([...transactions, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT transactions\") {\r\n      setCountTransactions(props.results.count_transaction_positions);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get transactions (finished)\r\n   */\r\n  onResponse([\"get transactions\", \"finished\"], () => {\r\n    setRedirectTo(\"/balance\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get shares (continue)\r\n   */\r\n  onResponse([\"get shares\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT shares\") {\r\n      if (shares === null) {\r\n        setShares(JSON.stringify([props.results]));\r\n      } else {\r\n        setShares(JSON.stringify([...shares, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT shares\") {\r\n      setCountShares(props.results.count_shares);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get shares (finished)\r\n   */\r\n  onResponse([\"get shares\", \"finished\"], () => {\r\n    // setRedirectTo(\"/balance\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get transaction by id (continue)\r\n   */\r\n  onResponse([\"get transaction by id\", \"continue\"], () => {\r\n    if (transactions === null) {\r\n      setTransactions(JSON.stringify([props.results]));\r\n    } else {\r\n      setTransactions(JSON.stringify([...transactions, props.results]));\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (finished)\r\n   */\r\n  onResponse([\"get transaction by id\", \"finished\"], () => {\r\n    getAccountData();\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register purpose\", \"continue\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get purpose by id\",\r\n    //   data: { id: props.results.insertId },\r\n    // });\r\n    if (props.results.insertId > 0) {\r\n      setLastInsertId(props.results.insertId);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register purpose\", \"success\"], () => {\r\n    sendRequest({\r\n      req: \"get purpose by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register shareholder\", \"continue\"], () => {\r\n    if (props.results.insertId > 0) {\r\n      // showMessage(\"REGISTER_SHAREHOLDER_SUCCESS\", \"info\");\r\n\r\n      // return sendRequest({\r\n      //   req: \"get shareholder by id\",\r\n      //   data: { id: props.results.insertId },\r\n      // });\r\n      setLastInsertId(props.results.insertId);\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register shareholder\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    getPurposeShareholders(activeBusinesPurpose);\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"change share\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    // getPurposeShareholders(activeBusinesPurpose);\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"remove shareholder\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    getPurposeShareholders(activeBusinesPurpose);\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"reset password\", \"success\"], () => {\r\n    setPasswordResetTokenValidated(false);\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"change password\", \"success\"], () => {\r\n    // TOTO: If NO_ROWS_CHANGE - probably the currently saved password was submitted\r\n    setPasswordResetTokenValidated(null);\r\n    setPasswordResetTokenEmail(null);\r\n    onRedirect(\"/sign-in\");\r\n    showMessage(\"PASSWORD_CHANGE_SUCCESS\", \"info\");\r\n    return true;\r\n  });\r\n\r\n  // onResponse([\"unknown\"], () => {\r\n  //   if (\r\n  //     status === \"pending\" ||\r\n  //     status === \"continue\" ||\r\n  //     status === \"finished\" ||\r\n  //     status === \"success\"\r\n  //   ) {\r\n  //     return false;\r\n  //   } else {\r\n  //     showMessage(`${req}: ${status}`, \"info\");\r\n  //     return true;\r\n  //   }\r\n  // });\r\n\r\n  onResponse([\"unknown\"], () => {\r\n    return false;\r\n  });\r\n\r\n  return responseFound;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"ValidateEmail\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {  } = props.barrelGetters;\r\n  const { setValidateTokenEmail } = props.barrelSetters;\r\n  const { getUrlParam } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Hooks\r\n    ============================================================================ */\r\n\r\n  // setToken(getUrlParam(\"token\"));\r\n  // setEmail(getUrlParam(\"email\"));\r\n\r\n  const token = getUrlParam(\"token\");\r\n  const email = getUrlParam(\"email\");\r\n\r\n  /**\r\n    * Effects\r\n    ============================================================================ */\r\n  useEffect(() => {\r\n    if (token === null || email === null) return;\r\n\r\n    setValidateTokenEmail(\r\n      JSON.stringify({\r\n        token,\r\n        email,\r\n      })\r\n    );\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    // const queryString = window.location.search;\r\n    // const urlParams = new URLSearchParams(queryString);\r\n\r\n    return token === null ? (\r\n      <>\r\n        <h4>{t(\"A verification link has been sent to your email account.\")}</h4>\r\n        <hr />\r\n        <p>\r\n          {t(\r\n            \"Please click on the link that has just been sent to your email account\"\r\n          )}\r\n        </p>\r\n      </>\r\n    ) : (\r\n      <div className=\"text-center\">\r\n        <Spinner\r\n          as=\"span\"\r\n          animation=\"border\"\r\n          size=\"sm\"\r\n          role=\"status\"\r\n          aria-hidden=\"true\"\r\n          hidden={false}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\n// import Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"ChangePassword\",\r\n    request: \"change password\",\r\n    email: null,\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  const {\r\n    passwordResetTokenValidated,\r\n    passwordResetTokenEmail,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation([\r\n    passwordResetTokenValidated === true ? \"SignUp\" : \"ChangePassword\",\r\n  ]); // adjust namespace\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n\r\n  /**\r\n     * Functions\r\n     ============================================================================ */\r\n  const onSubmit = (data) => {\r\n    data.email = passwordResetTokenEmail;\r\n    // console.log(data);\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  /** \r\n     * Yup schema\r\n     ============================================================================ */\r\n  const schema = yup.object({\r\n    password: yup\r\n      .string()\r\n      .required(t(\"No password provided\"))\r\n      .min(8, t(\"Password is too short\"))\r\n      // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n      .matches(\r\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n        t(\"Password is too weak\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n     * Form\r\n     ============================================================================ */\r\n  const ChangePasswordForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"New password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type={passwordVisible ? \"text\" : \"password\"}\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text\r\n              id=\"inputGroupAppend\"\r\n              onClick={togglePassword}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              {passwordVisible ? (\r\n                <VisibilityOff\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\" }}\r\n                />\r\n              ) : (\r\n                <Visibility fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n              )}\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <SubmitButton\r\n        {...args}\r\n        caption={t(\"Submit\")}\r\n        request={props.request}\r\n        namespace={props.namespace}\r\n      />\r\n    </Form>\r\n  );\r\n\r\n  /**\r\n     * Return\r\n     ============================================================================ */\r\n  if (passwordResetTokenValidated === true) {\r\n    // if (true) {\r\n    return (\r\n      <Formik\r\n        component={ChangePasswordForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          password: \"\",\r\n        }}\r\n      />\r\n    );\r\n  } else {\r\n    // if (passwordResetTokenValidated === false)\r\n    return <>{t(\"Awaiting validation\")}</>;\r\n    // } else {\r\n    //   // null\r\n    //   return <>How did you land here???</>;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(\"Logout\");\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { error, language } = props.barrelGetters;\r\n  const { setLanguage } = props.barrelSetters;\r\n  const { showMessage } = props.barrelFunctions;\r\n  const { onLogOut } = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Default Properties\r\n   */\r\n  // let defaults = {};\r\n  // const props = Object.assign(defaults, authorizedData);\r\n\r\n  // const [logOut] = useState(true);\r\n\r\n  // console.log(\"sendUserLogOutRequest\", props);\r\n\r\n  useEffect(() => {\r\n    // if (logOut !== true) return;\r\n    // console.log(\"LOG OUT =============\");\r\n\r\n    const tempError = error;\r\n    const tempLanguage = language;\r\n\r\n    onLogOut();\r\n\r\n    setLanguage(tempLanguage);\r\n\r\n    if (tempError !== null) {\r\n      showMessage(tempError, \"error\");\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []); // logOut\r\n\r\n  return (\r\n    <>\r\n      <h4>{t(\"See you soon\")}</h4>\r\n      <hr />\r\n\r\n      <br />\r\n      <p className=\"text-center\">\r\n        <a href=\"/\">{t(\"Sign in\")}</a>\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Spinner } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n  * Default export\r\n  ============================================================================ */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"ResetPassword\", request: \"reset password\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { language } = props.barrelGetters;\r\n  const { setValidateTokenPasswordReset } = props.barrelSetters;\r\n  const { sendRequest, getUrlParam } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  const token = getUrlParam(\"token\");\r\n  const email = getUrlParam(\"email\");\r\n\r\n  /**\r\n    * Effects\r\n    ============================================================================ */\r\n  useEffect(() => {\r\n    if (token === null || email === null) return;\r\n\r\n    setValidateTokenPasswordReset(\r\n      JSON.stringify({\r\n        token,\r\n        email,\r\n      })\r\n    );\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n    * Event listeners\r\n    ============================================================================ */\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    // console.log(data);\r\n    data.language = language;\r\n    sendRequest({\r\n      req: props.request,\r\n      data: data,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n  });\r\n\r\n  const passwordResetForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Reset password\")}</h3>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n\r\n  // return (\r\n  //   <Formik\r\n  //     component={passwordResetForm}\r\n  //     validationSchema={schema}\r\n  //     onSubmit={onSubmit}\r\n  //     initialValues={{\r\n  //       email: \"\",\r\n  //     }}\r\n  //   />\r\n  // );\r\n\r\n  return token === null ? (\r\n    <Formik\r\n      component={passwordResetForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        email: \"\",\r\n      }}\r\n    />\r\n  ) : (\r\n    <div className=\"text-center\">\r\n      <Spinner\r\n        as=\"span\"\r\n        animation=\"border\"\r\n        size=\"sm\"\r\n        role=\"status\"\r\n        aria-hidden=\"true\"\r\n        hidden={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","// import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Loading.css\";\r\nimport React from \"react\";\r\n// import MainSkeleton from \"../pages/main\";\r\n\r\nexport default () => {\r\n  //\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"lds-hourglass\"></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./normalize.css\";\r\nimport \"./index.css\";\r\n// import UnderConstruction from \"./components/pages/underConstruction\";\r\nimport Main from \"./components/pages/main\";\r\nimport Loading from \"./components/loading\";\r\n\r\n// const Main = React.lazy(() => import(\"./components/pages/main\"));\r\n\r\nReactDOM.render(\r\n  <Suspense fallback={<Loading />}>\r\n    <Main />\r\n  </Suspense>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}