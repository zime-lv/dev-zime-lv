{"version":3,"sources":["translations/i18n.js","utils/config.js","components/card/Card.js","components/dropzone/Dropzone.js","components/submitButton/SubmitButton.js","components/accountRegistration/AccountRegistration.js","components/businessRegistration/businessRegistration.js","components/pagination/Pagination.js","components/transactions/Transactions.js","components/shareholder/Shareholder.js","components/shares/Shares.js","components/transfer/Balance.js","components/transfer/TransferToSelf.js","components/transfer/TransferToPerson.js","components/transfer/TransferToBusiness.js","components/purposeRegistration/PurposeRegistration.js","components/shareholderRegistration/shareholderRegistration.js","components/myBusiness/MyBusiness.js","components/userEditor/UserEditor.js","components/currencies/Currencies.js","components/currencyRegistration/CurrencyRegistration.js","components/pages/summary/Summary.js","components/currencyContainer/CurrencyContainer.js","components/transfer/Transfer.js","utils/sockets.js","components/login/LogIn.js","components/signup/SignUp.js","utils/state.js","components/alert/Alert.js","components/language-selector/LanguageSelector.js","components/pages/main/Main.js","utils/requestHandler.js","utils/errorHandler.js","utils/responseHandler.js","components/validateEmail/ValidateEmail.js","components/changePassword/ChangePassword.js","components/logout/Logout.js","components/passwordReset/passwordReset.js","components/loading/Loading.js","index.js"],"names":["i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","react","wait","withRef","bindI18n","bindStore","nsMode","config","args","defaults","title","navigation","undefined","footer","header","body","headerContent","onNavigationClick","props","Object","assign","key","Footer","Header","Title","Nav","variant","defaultActiveKey","navigationdefaultActiveKey","map","item","Item","Link","href","link","onClick","style","color","name","Body","React","Children","children","child","cloneElement","styles","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","outline","transition","activeStyle","acceptStyle","rejectStyle","data","accountPhotoPath","barrelGetters","sendRequest","barrelFunctions","useState","setFiles","t","useTranslation","onDrop","useCallback","acceptedFiles","req","useDropzone","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useMemo","className","Figure","Image","width","height","alt","src","caption","request","namespace","visible","marginTop","Button","type","block","disabled","Spinner","as","animation","size","role","aria-hidden","hidden","signedIn","accountNumber","userData","getReviser","getWorkplace","schema","yup","dropzoneHook","required","personalID","matches","RegExp","test","exclusive","params","message","value","pid","replace","split","n","parseInt","Alert","Heading","i18nKey","component","handleSubmit","handleChange","values","handleBlur","touched","errors","isValid","validateForm","setFieldValue","Form","noValidate","onSubmit","Group","controlId","Label","Text","Dropzone","Control","onChange","isInvalid","Feedback","InputGroup","Prepend","id","placeholder","aria-describedby","Check","label","terms","feedback","SubmitButton","validationSchema","reviser","workplace","email","sendAccountRegistrationRequest","initialValues","onBusinessRegistration","barrelEventHandlers","businessTitle","min","max","trim","businessDescription","optional","rows","uid","console","log","registerBusiness","pages","active","align","textAlign","Pagination","margin","First","Prev","items","number","push","Ellipsis","getPages","Next","Last","getJSX","transactions","countTransactions","activePageTransactions","transactionsPerPage","barrelSetters","setActivePageTransactions","getTransactions","format","formatDate","formatPerCent","cnt","ListGroup","transaction","keyTransactions","business_description","business_id","business_image","business_link","business_status","business_title","conv_amount","comment","created","sender_firstname","currency","exchange_rate","sender_lastname","purpose_id","recipient_firstname","recipient_lastname","purpose_description","purpose_title","purpose_image","purpose_link","purpose_status","recipient_id","roles","share","share_per_cent","sender_id","sender_status","recipient_status","to_account","i_am_recipient","roles_available","arrRoles","shares_available","action","float","Badge","pill","Math","ceil","purpose","shareholder","closeButton","rangeControl","sharePerCent","purposeTitle","businessOwnerFirstname","businessOwnerLastname","sharesCreated","purposeShareholders","setPurposeShareholders","userQuery","setUserQuery","delayedQuery","useRef","_","debounce","q","sendQuery","current","e","target","onClose","shareholder_id","ps","JSON","stringify","sharesLabelId","Toast","minWidth","firstname","lastname","Settings","fontSize","defaultValue","step","month","day","year","shares","countShares","activePageShares","sharesPerPage","setActivePageShares","getShares","keyShares","owner_firstname","owner_lastname","owner_status","owner_uid","shares_created","shares_description","shares_roles","shares_share","shares_status","shares_title","Shareholder","accordionView","currencyAbbr","setAccountType","setRedirectTo","setAccordionView","getAccountData","userDataParsed","onAccountTypeSelected","available","acc_curr","acc_cred","acc_save","Accordion","Toggle","Card","eventKey","cursor","Collapse","Transactions","Shares","accountType","language","parseLocaleNumber","currency_abbr","fromAccount","toAccount","amount","custom","Intl","NumberFormat","notation","minimumFractionDigits","transferToSelf","onTransfer","toPersonalID","description","transferToPerson","purposeID","transferToBusiness","businessID","barrels","onPurposeRegistration","purposeDescription","RegisterPurpose","shareholderRoles","typeError","userBusinesses","activeBusiness","businessPurposes","activeBusinesPurpose","getBusinessPurposes","getBusinesses","getPurposeShareholders","useEffect","menuItems","purposes","countShareholders","keys","business","keyBusiness","keyPurpose","TogglePurpose","whiteSpace","Tab","Pane","bg","keyShareholder","Add","jsx","date","Date","businessSince","DateTimeFormat","ToggleBusiness","Container","Row","Col","sm","Content","border","PurposeRegistration","mode","currencies","onRedirect","editFirstname","setEditFirstname","editLastname","setEditLastname","editEmail","setEditEmail","editPassword","setEditPassword","passwordVisible","setPasswordVisible","submitButtonVisible","setSubmitButtonVisible","togglePassword","yupObject","firstName","lastName","password","currency_name","Close","Edit","Append","VisibilityOff","Visibility","sendUserRegistrationRequest","countCurrencies","activePageCurrencies","currenciesPerPage","setCurrencyAbbr","setActivePageCurrencies","getCurrencies","formatExchangeRate","onCurrencySelected","currency_id","onPageSelect","Table","responsive","striped","bordered","hover","keyCUrrency","abbr","rate","region","status","sponsors","checked","aria-label","curr_abbr","curr_title","curr_region","curr_rate","onSessionTimeout","Navbar","collapseOnSelect","expand","background","boxShadow","Brand","aria-controls","PowerSettingsNew","viewBalanceOrTransfer","exact","path","Balance","AccountRegistration","UserEditor","accordionViewCurrency","setAccordionViewCurrency","Currencies","CurrencyRegistration","CurrencyContainer","BusinessRegistration","MyBusiness","transferType","onTransferTypeChange","transferCard","setTransferCard","TransferToSelf","TransferToPerson","TransferToBusiness","Transfer","fluid","dev","uri","ENDPOINT","window","location","hostname","socket","openSocket","connect","secure","reconnect","sendData","emit","sendUserLogInRequest","rememberMe","onSignUp","validateEmail","useStickyState","stickyValue","localStorage","getItem","parse","setValue","setItem","error","info","onAlertClose","dismissible","changeLanguage","lng","selectLanguage","setDebug","loggingOut","setLoggingOut","pageLoading","setPageLoading","setRequest","uuidv4","session","setSession","connected","setConnected","setSignedIn","currencyRate","setCurrencyRate","setCurrencies","setTransactions","setShares","setCountCurrencies","setCountTransactions","setCountShares","setCurrenciesPerPage","setTransactionsPerPage","setSharesPerPage","setUserData","setUID","setAccountNumber","setUserBusinesses","setActiveBusiness","setBusinessPurposes","setActiveBusinesPurpose","redirectTo","lastInsertId","setLastInsertId","validateTokenEmail","setValidateTokenEmail","validateTokenPasswordReset","setValidateTokenPasswordReset","passwordResetTokenValidated","setPasswordResetTokenValidated","passwordResetTokenEmail","setPasswordResetTokenEmail","tmrConnected","options","setLanguage","setTransferType","setAccountPhotoPath","setError","setInfo","callback","responseData","setResponseData","on","useSocket","processResponse","processRequest","requestFound","showMessage","onRequest","requestHandler","context","errorFound","onError","res","code","errorHandler","getTransactionById","updateTimestamp","onTransferSuccess","onLogOut","responseFound","onResponse","results","insertId","affectedRows","isNaN","currency_rate","rowNum","count_currencies","count_transaction_positions","count_shares","responseHandler","hideMessage","getUrlParam","param","queryString","search","URLSearchParams","get","sendEmailValidationRequest","token","msg","maximumFractionDigits","ts","hour","minute","selected","newPage","page","limit","stringNumber","locale","parts_local","formatToParts","group","decimal","forEach","i","parseFloat","to","char","endSession","clear","startSession","sendPasswordResetRequest","wrapperClass","innerClass","getContainerClass","appClass","Summary","Login","SignUp","ValidateEmail","ChangePassword","tempError","tempLanguage","Logout","PasswordReset","LanguageSelector","ReactDOM","render","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.75ce479f.chunk.js","sourcesContent":["import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nimport Backend from \"i18next-xhr-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\n// not like to use this?\r\n// have a look at the Quick start guide\r\n// for passing in lng and translations on init\r\n\r\ni18n\r\n  // load translation using xhr -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-xhr-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    fallbackLng: \"lv\",\r\n    debug: false,\r\n    // lng: \"lv\",\r\n    ns: [\"LogIn\", \"SignUp\"],\r\n    defaultNS: \"Default\",\r\n    keySeparator: false,\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n    react: {\r\n      wait: false,\r\n      withRef: false,\r\n      bindI18n: \"languageChanged loaded\",\r\n      bindStore: \"added removed\",\r\n      nsMode: \"default\",\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","const dev = {\r\n  uri: {\r\n    ENDPOINT: \"http://localhost:9000\",\r\n    // ENDPOINT: \"http://192.168.2.100:9000\"\r\n  },\r\n};\r\n\r\nconst dev2 = {\r\n  uri: {\r\n    ENDPOINT: \"http://192.168.2.100:5000\",\r\n  },\r\n};\r\n\r\nconst staging = {\r\n  uri: {\r\n    ENDPOINT: \"https://dev.zime.lv\",\r\n  },\r\n};\r\n\r\nconst prod = {\r\n  uri: {\r\n    ENDPOINT: \"https://zime.lv\",\r\n  },\r\n};\r\n\r\nconst hostname = window && window.location && window.location.hostname;\r\n\r\nlet config;\r\nswitch (hostname) {\r\n  case \"localhost\":\r\n    config = dev;\r\n    break;\r\n  case \"192.168.2.100\":\r\n    config = dev2;\r\n    break;\r\n  case \"dev.zime.lv\":\r\n    config = staging;\r\n    break;\r\n  case \"zime.lv\":\r\n    config = prod;\r\n    break;\r\n  default:\r\n    config = dev;\r\n    break;\r\n}\r\n\r\nexport default {\r\n  ...config,\r\n};\r\n","import \"./Card.css\";\r\nimport React, { cloneElement } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n// import { Container, Row, Col, Button } from \"react-bootstrap\";\r\n// import Button from \"react-bootstrap/Button\";\r\n\r\nexport default (args) => {\r\n  let defaults = {\r\n    title: \"Untitled\",\r\n    navigation: undefined,\r\n    footer: undefined,\r\n    header: true,\r\n    body: true,\r\n    headerContent: null,\r\n    onNavigationClick: () => {},\r\n  };\r\n  let props = Object.assign(defaults, args);\r\n\r\n  let key = 0;\r\n\r\n  let footer = props.footer ? <Card.Footer>{props.footer}</Card.Footer> : \"\";\r\n\r\n  return (\r\n    <Card>\r\n      {/* <Card.Img variant=\"top\" src=\"holder.js/100px180?text=Image cap\" /> */}\r\n      {props.header && (\r\n        <Card.Header>\r\n          {props.headerContent !== null ? (\r\n            props.headerContent\r\n          ) : (\r\n            <>\r\n              <Card.Title>{props.title}</Card.Title>\r\n              <Nav\r\n                variant=\"tabs\"\r\n                defaultActiveKey={props.navigationdefaultActiveKey}\r\n              >\r\n                {props.navigation &&\r\n                  props.navigation.map((item, key) => (\r\n                    <Nav.Item key={key}>\r\n                      <Nav.Link\r\n                        href={item.link}\r\n                        onClick={() => props.onNavigationClick(item.link)}\r\n                        style={{ color: \"black\" }}\r\n                      >\r\n                        {item.name}\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                  ))}\r\n              </Nav>\r\n            </>\r\n          )}\r\n        </Card.Header>\r\n      )}\r\n\r\n      {props.body && (\r\n        <Card.Body>\r\n          {React.Children.map(args.children, (child) => {\r\n            if (typeof child !== \"object\") {\r\n              return child;\r\n            } else {\r\n              key++;\r\n              return cloneElement(child, {\r\n                styles: null,\r\n                key: key,\r\n              });\r\n            }\r\n          })}\r\n        </Card.Body>\r\n      )}\r\n      {footer}\r\n    </Card>\r\n  );\r\n};\r\n","import React, { useCallback, useMemo, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nimport { Figure } from \"react-bootstrap\";\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  padding: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  backgroundColor: \"#fafafa\",\r\n  color: \"#bdbdbd\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\n/**\r\n * App: Dropzone\r\n */\r\nexport default (args) => {\r\n  // console.log(\"DROPZONE\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args.data);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  let { accountPhotoPath } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [, setFiles] = useState(null);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(\"AccountRegistration\");\r\n\r\n  // let setFieldValue = data.setFieldValue;\r\n  // let data = args.data;\r\n\r\n  // let accountPhotoPath = data.accountPhotoPath;\r\n  if (accountPhotoPath !== \"\") {\r\n    baseStyle.padding = 0;\r\n    baseStyle.borderStyle = \"none\"; // \"solid\";\r\n    baseStyle.backgroundColor = \"none\";\r\n  }\r\n\r\n  // const [thisData] = useState(data);\r\n  // console.log(\"THIS DATA =====\");\r\n\r\n  // console.log(data);\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    // console.log(getRootProps());\r\n\r\n    // args.onDrop(1);\r\n    // args.context.dropzoneUntouched = false;\r\n\r\n    setFiles(acceptedFiles);\r\n    sendRequest({\r\n      req: \"upload file\",\r\n      data: acceptedFiles,\r\n    });\r\n    // setFieldValue(1);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const {\r\n    // acceptedFilesItems,\r\n    // rejectedFilesItems,\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({\r\n    accept: \"image/*\",\r\n    onDrop,\r\n  });\r\n\r\n  // const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n  // const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n  //   onDrop\r\n  // });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragAccept, isDragReject]\r\n  );\r\n\r\n  if (accountPhotoPath === \"\") {\r\n    return (\r\n      <div className=\"container\">\r\n        <div {...getRootProps({ style })}>\r\n          <input {...getInputProps()} />\r\n          <p>{t(\"Click to select the image file\")}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    // accountPhotoPath = \"http://localhost:9000/\" + accountPhotoPath;\r\n    accountPhotoPath = \"gfx/photo_id.png\";\r\n\r\n    return (\r\n      <>\r\n        <div className=\"container\">\r\n          <div {...getRootProps({ style })}>\r\n            <input {...getInputProps()} />\r\n            <Figure.Image\r\n              width={171}\r\n              height={180}\r\n              alt=\"171x180\"\r\n              src={accountPhotoPath}\r\n            />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    caption: \"Submit\",\r\n    request: null,\r\n    namespace: \"Button\",\r\n    visible: true,\r\n    marginTop: 0,\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { request } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]); // adjust namespace\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    return !props.visible ? (\r\n      <></>\r\n    ) : (\r\n      <Button\r\n        type=\"submit\"\r\n        block\r\n        disabled={request === props.request}\r\n        style={{ marginTop: props.marginTop + \"px\" }}\r\n      >\r\n        <Spinner\r\n          as=\"span\"\r\n          animation=\"border\"\r\n          size=\"sm\"\r\n          role=\"status\"\r\n          aria-hidden=\"true\"\r\n          hidden={request !== props.request}\r\n        />\r\n        &nbsp;\r\n        {props.caption}\r\n        &nbsp;\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport { Form, InputGroup, Button, Alert } from \"react-bootstrap\";\r\n// import { Redirect } from \"react-router-dom\";\r\nimport Card from \"../card\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import { useStickyState } from \"../../utils/state\";\r\nimport Dropzone from \"../dropzone\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  // console.log(\"ACCOUNT REGISTRATION ARGS:\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"register account\",\r\n    namespace: \"AccountRegistration\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    signedIn,\r\n    accountNumber,\r\n    accountPhotoPath,\r\n    userData,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    dropzoneHook: yup.string().required(t(\"Photo ID is required\")),\r\n    personalID: yup\r\n      .string()\r\n      .required(t(\"Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      )\r\n      .test({\r\n        name: \"integrity\",\r\n        exclusive: true,\r\n        params: {},\r\n        message: t(\"PersonalID must be valid\"),\r\n        test: (value) => {\r\n          if (typeof value === \"undefined\") return false;\r\n          let pid = value\r\n            .replace(\"-\", \"\")\r\n            .split(\"\")\r\n            .map(function (n) {\r\n              return parseInt(n, 10);\r\n            });\r\n          let calc =\r\n            1 * pid[0] +\r\n            6 * pid[1] +\r\n            3 * pid[2] +\r\n            7 * pid[3] +\r\n            9 * pid[4] +\r\n            10 * pid[5] +\r\n            5 * pid[6] +\r\n            8 * pid[7] +\r\n            4 * pid[8] +\r\n            2 * pid[9];\r\n          let checksum = (1101 - calc) % 11;\r\n\r\n          return checksum == pid[10];\r\n        },\r\n      }),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n\r\n  /**\r\n   * Send account registration request\r\n   * @param {object} data\r\n   */\r\n  const sendAccountRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    // data.data = userData;\r\n    // data.email = JSON.parse(userData).email;\r\n    data.email = userData.email;\r\n\r\n    return sendRequest({ req: props.request, data });\r\n    // return onAccountRegistration(data);\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    if (sendAccountRegistrationRequest(data)) {\r\n      // Account registration request was submitted\r\n    }\r\n  };\r\n\r\n  // let dropzoneUntouched = true;\r\n\r\n  const AccountRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    setFieldValue,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <Form.Group controlId=\"validationFormikPhotoId\">\r\n        <Form.Label>{t(\"Photo ID\")}</Form.Label>\r\n\r\n        <Form.Text>\r\n          <Trans i18nKey=\"AccountRegistration:Photo ID requirements\">\r\n            Photo of me holding my passport. The personal identification number\r\n            must be clearly legible.\r\n          </Trans>\r\n        </Form.Text>\r\n\r\n        <br />\r\n        <Dropzone data={props} />\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationFormikDropzoneHook\">\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"dropzoneHook\"\r\n          value={accountPhotoPath}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.dropzoneHook}\r\n          style={{ display: \"none\" }}\r\n        />\r\n\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {errors.dropzoneHook}\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n\r\n      {false && (\r\n        <Form.Group controlId=\"validationFormikCountry\">\r\n          <Form.Label>{t(\"Country\")}</Form.Label>\r\n          <Form.Control as=\"select\" custom>\r\n            <option>Latvija</option>\r\n            <option>Deutschland</option>\r\n          </Form.Control>\r\n        </Form.Group>\r\n      )}\r\n\r\n      <Form.Group controlId=\"validationFormikPersonalId\">\r\n        <Form.Label>{t(\"Personal ID\")}</Form.Label>\r\n        <InputGroup>\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"XXXXXX-XXXXX\")}\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"personalID\"\r\n            value={values.personalID}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.personalID && touched.personalID}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.personalID}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n      <Form.Group>\r\n        <Form.Check\r\n          required\r\n          name=\"terms\"\r\n          label={t(\"Agree to terms and conditions\")}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.terms && touched.terms}\r\n          feedback={errors.terms}\r\n          id=\"validationFormik0\"\r\n        />\r\n      </Form.Group>\r\n\r\n      <SubmitButton\r\n        {...args}\r\n        caption={t(\"Submit\")}\r\n        request={props.request}\r\n        namespace={props.namespace}\r\n      />\r\n    </Form>\r\n  );\r\n\r\n  if (signedIn === false)\r\n    return (\r\n      <>\r\n        <Alert variant=\"info\">\r\n          <Alert.Heading>{t(\"User not logged in\")}</Alert.Heading>\r\n          <p>\r\n            <Trans i18nKey=\"AccountRegistration:Please log in first\">\r\n              Please log in first.\r\n            </Trans>\r\n          </p>\r\n        </Alert>\r\n      </>\r\n    );\r\n\r\n  if (accountNumber !== null)\r\n    return (\r\n      <>\r\n        <Alert variant=\"info\">\r\n          <Alert.Heading>{t(\"Account successfully registered\")}</Alert.Heading>\r\n          <p>\r\n            <Trans\r\n              i18nKey=\"AccountRegistration:Account with your personal ID successfully registered\"\r\n              accountNumber={accountNumber}\r\n            >\r\n              Account with the personal ID\r\n              <strong>{{ accountNumber }}</strong>\r\n              successfully registered.\r\n            </Trans>\r\n          </p>\r\n        </Alert>\r\n      </>\r\n    );\r\n\r\n  return (\r\n    <Card title={t(\"Open account\")}>\r\n      <Formik\r\n        component={AccountRegistrationForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          personalID: \"\",\r\n          terms: \"\",\r\n          dropzoneHook: accountPhotoPath,\r\n        }}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const {\r\n    // format,\r\n    // parseLocaleNumber,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  const { onBusinessRegistration } = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([\"BusinessRegistration\"]);\r\n\r\n  const schema = yup.object({\r\n    businessTitle: yup\r\n      .string()\r\n      .required(t(\"Business title is a required field\"))\r\n      .min(3, t(\"Business title too short\"))\r\n      .max(70, t(\"Business title too long\"))\r\n      .trim(),\r\n    businessDescription: yup.string().optional(),\r\n  });\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const registerBusiness = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n\r\n    console.log(\"REGISTER BUSINESS DATA:\", data);\r\n\r\n    onBusinessRegistration({ req: \"register business\", data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    registerBusiness(data);\r\n  };\r\n\r\n  const RegisterBusinessForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Business Title (Business ID) */}\r\n      <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n        <Form.Label>{t(\"Business Title\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"\"\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"businessTitle\"\r\n            value={values.businessTitle}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.businessTitle && touched.businessTitle}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.businessTitle}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Business Description */}\r\n      <Form.Group\r\n        controlId=\"businessDescription\"\r\n        name=\"businessDescription\"\r\n        value={values.businessDescription}\r\n        onChange={handleChange}\r\n      >\r\n        <Form.Label>{t(\"Business Description\")}</Form.Label>\r\n        <Form.Control as=\"textarea\" rows=\"3\" />\r\n      </Form.Group>\r\n\r\n      {/* Submit button */}\r\n      <Button type=\"submit\" block>\r\n        {t(\"Submit\")}\r\n      </Button>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterBusinessForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        businessTitle: \"\",\r\n        businessDescription: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"Pagination\",\r\n    pages: 0,\r\n    active: null,\r\n    onClick: () => {},\r\n    align: \"center\",\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  if (props.pages < 2) return <></>;\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  const getPages = () => {\r\n    let items = [];\r\n    for (let number = 1; number <= props.pages; number++) {\r\n      if (\r\n        number === 1 ||\r\n        number === props.pages ||\r\n        (number >= props.active - 2 && number <= props.active + 2)\r\n      ) {\r\n        items.push(\r\n          <Pagination.Item\r\n            key={number}\r\n            active={number === props.active}\r\n            onClick={() => props.onClick(number)}\r\n          >\r\n            {number}\r\n          </Pagination.Item>\r\n        );\r\n      } else if (number === 2 || number === props.pages - 1) {\r\n        items.push(<Pagination.Ellipsis key={number} disabled />);\r\n      }\r\n    }\r\n    return items;\r\n  };\r\n\r\n  //   <Pagination>\r\n  //   <Pagination.First />\r\n  //   <Pagination.Prev />\r\n\r\n  //   {getPages()}\r\n\r\n  //   <Pagination.Item>{1}</Pagination.Item>\r\n  //   <Pagination.Ellipsis />\r\n\r\n  //   <Pagination.Item>{10}</Pagination.Item>\r\n  //   <Pagination.Item>{11}</Pagination.Item>\r\n  //   <Pagination.Item active>{12}</Pagination.Item>\r\n  //   <Pagination.Item>{13}</Pagination.Item>\r\n  //   <Pagination.Item disabled>{14}</Pagination.Item>\r\n\r\n  //   <Pagination.Ellipsis />\r\n  //   <Pagination.Item>{20}</Pagination.Item>\r\n  //   <Pagination.Next />\r\n  //   <Pagination.Last />\r\n  // </Pagination>\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    const { align } = props;\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          textAlign: `${align}`,\r\n          // backgroundColor: \"red\",\r\n        }}\r\n      >\r\n        <span style={{ display: \"inline-block\" }}>\r\n          <Pagination style={{ padding: 0, margin: 0 }}>\r\n            {props.pages > 5 && (\r\n              <>\r\n                <Pagination.First onClick={() => props.onClick(\"First\")} />\r\n                <Pagination.Prev onClick={() => props.onClick(\"Prev\")} />\r\n              </>\r\n            )}\r\n\r\n            {getPages()}\r\n\r\n            {props.pages > 5 && (\r\n              <>\r\n                <Pagination.Next onClick={() => props.onClick(\"Next\")} />\r\n                <Pagination.Last onClick={() => props.onClick(\"Last\")} />\r\n              </>\r\n            )}\r\n          </Pagination>\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport {\r\n  Form,\r\n  InputGroup,\r\n  Button,\r\n  Table,\r\n  ListGroup,\r\n  Badge,\r\n} from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    request: \"get transactions\",\r\n    namespace: \"Transactions\",\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const {\r\n    transactions,\r\n    countTransactions,\r\n    activePageTransactions,\r\n    transactionsPerPage,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  const { setActivePageTransactions } = props.barrelSetters;\r\n  const {\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n    getTransactions,\r\n    format,\r\n    formatDate,\r\n    formatPerCent,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n\r\n  const indication = () => {\r\n    return \"THE TABLE IS EMPTY\";\r\n  };\r\n\r\n  const onPageSelect = (number) => {\r\n    console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageTransactions > 1 ? activePageTransactions - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageTransactions <\r\n          Math.ceil(countTransactions / transactionsPerPage)\r\n            ? activePageTransactions + 1\r\n            : Math.ceil(countTransactions / transactionsPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countTransactions / transactionsPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getTransactions(number);\r\n  };\r\n\r\n  let cnt = 0;\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return (\r\n    <>\r\n      <ListGroup variant=\"flush\">\r\n        {transactions !== null &&\r\n          transactions.map((transaction, keyTransactions) => {\r\n            cnt++;\r\n\r\n            const {\r\n              business_description,\r\n              business_id,\r\n              business_image,\r\n              business_link,\r\n              business_status,\r\n              business_title,\r\n              comment,\r\n              conv_amount,\r\n              created,\r\n              currency,\r\n              exchange_rate,\r\n              sender_firstname,\r\n              sender_lastname,\r\n              recipient_firstname,\r\n              recipient_lastname,\r\n              purpose_description,\r\n              purpose_id,\r\n              purpose_image,\r\n              purpose_link,\r\n              purpose_status,\r\n              purpose_title,\r\n              recipient_id,\r\n              roles,\r\n              share,\r\n              share_per_cent,\r\n              sender_id,\r\n              sender_status,\r\n              recipient_status,\r\n              to_account,\r\n              type,\r\n            } = transaction;\r\n\r\n            const i_am_sender = sender_id === accountNumber;\r\n            const i_am_recipient = recipient_id === accountNumber;\r\n\r\n            const roles_available =\r\n              roles !== null && roles !== \"-\" && typeof roles !== \"undefined\";\r\n            const arrRoles = roles_available ? roles.split(\",\") : [];\r\n\r\n            const shares_available =\r\n              typeof share !== \"undefined\" && share !== null && share !== \"-\";\r\n\r\n            if (type === \"transfer U2S\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {sender_firstname} {sender_lastname}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n            }\r\n\r\n            if (type === \"transfer U2U\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {sender_firstname} {sender_lastname}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n            }\r\n\r\n            if (type === \"transfer U2B\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {purpose_id}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  {business_title} &middot; {purpose_title}\r\n                  <br />\r\n                  {sender_firstname} {sender_lastname}\r\n                  {roles_available && (\r\n                    <>\r\n                      <br />\r\n                      {arrRoles.map((role, key) => {\r\n                        return (\r\n                          <span key={key}>\r\n                            {\" \"}\r\n                            <Badge pill variant=\"secondary\">\r\n                              {role}\r\n                            </Badge>\r\n                          </span>\r\n                        );\r\n                      })}\r\n                    </>\r\n                  )}{\" \"}\r\n                  {shares_available && (\r\n                    <>\r\n                      <br />\r\n                      {share} {t(\"shares\")} ({formatPerCent(share_per_cent)})\r\n                    </>\r\n                  )}\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n            }\r\n          })}\r\n      </ListGroup>\r\n\r\n      {cnt === 0 && (\r\n        <p className=\"text-center text-muted\">{t(\"No transactions\")}</p>\r\n      )}\r\n\r\n      <br />\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countTransactions / transactionsPerPage)}\r\n        active={activePageTransactions}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState, useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, Toast, Badge } from \"react-bootstrap\";\r\nimport { Settings } from \"@material-ui/icons\";\r\nimport _ from \"lodash\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"Shareholder\",\r\n    request: \"change share\",\r\n    purpose: null,\r\n    shareholder: null,\r\n    closeButton: true,\r\n    rangeControl: true,\r\n    sharePerCent: null,\r\n    businessTitle: null,\r\n    purposeTitle: null,\r\n    businessOwnerFirstname: null,\r\n    businessOwnerLastname: null,\r\n    sharesCreated: null,\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { purposeShareholders } = props.barrelGetters;\r\n  const { setPurposeShareholders } = props.barrelSetters;\r\n  const { sendRequest, formatPerCent, formatDate } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const [userQuery, setUserQuery] = useState(props.share);\r\n  const delayedQuery = useRef(_.debounce((q) => sendQuery(q), 2000)).current;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  const onChange = (e) => {\r\n    // console.log(props.shareholder, e.target.value);\r\n    setUserQuery(e.target.value);\r\n    delayedQuery(e.target.value);\r\n  };\r\n\r\n  const onClose = () => {\r\n    // console.log(\"delete\", props.purpose, props.shareholder);\r\n    let data = {};\r\n    data.purpose_id = props.purpose;\r\n    data.shareholder_id = props.shareholder;\r\n    return sendRequest({ req: \"remove shareholder\", data });\r\n  };\r\n\r\n  const sendQuery = (delayedQuery) => {\r\n    // console.log(props.purpose, props.shareholder, delayedQuery);\r\n    const ps = purposeShareholders;\r\n    ps[props.id].share = delayedQuery;\r\n    setPurposeShareholders(JSON.stringify(ps));\r\n    let data = {};\r\n    data.purpose_id = props.purpose;\r\n    data.shareholder_id = props.shareholder;\r\n    data.share = delayedQuery;\r\n    // console.log(data);\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    const sharesLabelId = `sharesLabel${props.key}`;\r\n    return (\r\n      <Toast key={props.key} onClose={onClose} style={{ minWidth: \"100%\" }}>\r\n        <Toast.Header closeButton={props.closeButton}>\r\n          <strong className=\"mr-auto\">\r\n            {props.firstname} {props.lastname}{\" \"}\r\n            <small>\r\n              <Settings\r\n                hidden={true}\r\n                fontSize=\"small\"\r\n                style={{ color: \"var(--dark)\" }}\r\n              />\r\n            </small>\r\n          </strong>\r\n          <small>\r\n            <span id={sharesLabelId}>{userQuery}</span> {t(\"shares\")}\r\n          </small>\r\n        </Toast.Header>\r\n        <Toast.Body>\r\n          <Form>\r\n            <Form.Group controlId=\"formRoles\">\r\n              <div>\r\n                {props.roles.map((role, key) => {\r\n                  return (\r\n                    <span key={key}>\r\n                      <Badge pill variant=\"secondary\">\r\n                        {role}\r\n                      </Badge>{\" \"}\r\n                    </span>\r\n                  );\r\n                })}\r\n              </div>\r\n            </Form.Group>\r\n            {props.rangeControl && (\r\n              <Form.Group controlId=\"formBasicRange\">\r\n                <Form.Control\r\n                  type=\"range\"\r\n                  variant=\"light\"\r\n                  // value={share}\r\n                  defaultValue={userQuery}\r\n                  // value={userQuery}\r\n                  min={0}\r\n                  max={1000}\r\n                  step={1}\r\n                  // ref={this.input}\r\n                  onChange={onChange}\r\n                />\r\n              </Form.Group>\r\n            )}\r\n          </Form>\r\n          <span>\r\n            {props.sharePerCent !== null && formatPerCent(props.sharePerCent)}{\" \"}\r\n            {props.businessTitle !== null && props.businessTitle}{\" \"}\r\n            {props.businessTitle !== null && props.purposeTitle !== null && (\r\n              <> &middot; </>\r\n            )}\r\n            {props.purposeTitle !== null && props.purposeTitle}{\" \"}\r\n          </span>\r\n          {props.sharesCreated !== null && (\r\n            <>\r\n              <br />\r\n              {formatDate(props.sharesCreated, {\r\n                month: \"long\",\r\n                day: \"numeric\",\r\n                year: \"numeric\",\r\n              })}\r\n            </>\r\n          )}{\" \"}\r\n          {(props.businessOwnerFirstname !== null ||\r\n            props.businessOwnerLastname !== null) && <br />}\r\n          {props.businessOwnerFirstname !== null &&\r\n            props.businessOwnerFirstname}{\" \"}\r\n          {props.businessOwnerLastname !== null && props.businessOwnerLastname}{\" \"}\r\n        </Toast.Body>\r\n      </Toast>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, InputGroup, Button, Table, ListGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\nimport Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\nimport Shareholder from \"../shareholder\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    request: \"get shares\",\r\n    namespace: \"Shares\",\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  const {\r\n    shares,\r\n    countShares,\r\n    activePageShares,\r\n    sharesPerPage,\r\n    accountNumber,\r\n    userData,\r\n  } = props.barrelGetters;\r\n  const { setActivePageShares } = props.barrelSetters;\r\n  const {\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n    getShares,\r\n    format,\r\n    formatPerCent,\r\n    formatDate,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n     * Functions\r\n     ============================================================================ */\r\n\r\n  const indication = () => {\r\n    return \"THE TABLE IS EMPTY\";\r\n  };\r\n\r\n  const onPageSelect = (number) => {\r\n    console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageShares > 1 ? activePageShares - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageShares < Math.ceil(countShares / sharesPerPage)\r\n            ? activePageShares + 1\r\n            : Math.ceil(countShares / sharesPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countShares / sharesPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getShares(number);\r\n  };\r\n\r\n  let cnt = 0;\r\n\r\n  /**\r\n     * Return\r\n     ============================================================================ */\r\n  return (\r\n    <>\r\n      {shares !== null &&\r\n        shares.map((share, keyShares) => {\r\n          cnt++;\r\n\r\n          const {\r\n            business_description,\r\n            business_id,\r\n            business_image,\r\n            business_link,\r\n            business_status,\r\n            business_title,\r\n            owner_firstname,\r\n            owner_lastname,\r\n            owner_status,\r\n            owner_uid,\r\n            purpose_description,\r\n            purpose_id,\r\n            purpose_image,\r\n            purpose_link,\r\n            purpose_status,\r\n            purpose_title,\r\n            shareholder_id,\r\n            shares_created,\r\n            shares_description,\r\n            share_per_cent,\r\n            shares_roles,\r\n            shares_share,\r\n            shares_status,\r\n            shares_title,\r\n          } = share;\r\n\r\n          const arrRoles = shares_roles !== null ? shares_roles.split(\",\") : [];\r\n          const content = `${owner_firstname} ${owner_lastname} / ${formatDate(\r\n            shares_created\r\n          )}`;\r\n\r\n          // console.log(\"keyShares:\", keyShares);\r\n\r\n          return (\r\n            <Shareholder\r\n              {...args}\r\n              key={keyShares}\r\n              id={keyShares}\r\n              shareholder={shareholder_id}\r\n              purpose={purpose_id}\r\n              firstname={userData.firstname}\r\n              lastname={userData.lastname}\r\n              share={shares_share}\r\n              roles={arrRoles}\r\n              closeButton={false}\r\n              rangeControl={false}\r\n              sharePerCent={share_per_cent}\r\n              businessOwnerFirstname={owner_firstname}\r\n              businessOwnerLastname={owner_lastname}\r\n              businessTitle={business_title}\r\n              purposeTitle={purpose_title}\r\n              sharesCreated={shares_created}\r\n            />\r\n          );\r\n        })}\r\n\r\n      {cnt === 0 && <p className=\"text-center text-muted\">{t(\"No shares\")}</p>}\r\n\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countShares / sharesPerPage)}\r\n        active={activePageShares}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport { Form, Button, Badge, Alert, Accordion, Card } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from \"react-bootstrap/AccordionToggle\";\r\nimport { Redirect } from \"react-router-dom\";\r\n// import Octicon, { ChevronRight } from \"@primer/octicons-react\";\r\n// import AccessAlarmIcon from \"@material-ui/icons/AccessAlarm\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\n\r\nimport ZCard from \"../card\";\r\nimport Transactions from \"../transactions\";\r\nimport Shares from \"../shares\";\r\n\r\nexport default (args) => {\r\n  // let defaults = {};\r\n  // const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userData,\r\n    accountNumber,\r\n    accordionView,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  const {\r\n    setAccountType,\r\n    setRedirectTo,\r\n    setAccordionView,\r\n  } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    getAccountData,\r\n    getTransactions,\r\n    getShares,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // const userData = props.data.userData;\r\n  // let format = props.format;\r\n  const { t } = useTranslation(\"Balance\");\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  // console.log(\"BALANCE DATA:\", props);\r\n  // console.log(\"BALANCE userData\", userData);\r\n  // const userDataParsed = JSON.parse(userData);\r\n  const userDataParsed = userData;\r\n\r\n  // let footer = <small className=\"text-muted\">Last updated 3 mins ago</small>;\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  // const gotoNextView = () => {\r\n  //   // console.log(props);\r\n\r\n  //   // props.data.setView(\"transfer\");\r\n  //   setRedirect(true);\r\n  // };\r\n\r\n  const onAccountTypeSelected = (type) => {\r\n    // console.log(type);\r\n\r\n    setAccountType(type);\r\n    setRedirectTo(\"/transfer\");\r\n  };\r\n\r\n  // console.log(userData);\r\n  const available =\r\n    userDataParsed !== null\r\n      ? format(\r\n          userDataParsed.acc_curr +\r\n            userDataParsed.acc_cred +\r\n            userDataParsed.acc_save\r\n        )\r\n      : null;\r\n  let acc_curr =\r\n    userDataParsed !== null ? format(userDataParsed.acc_curr) : null;\r\n  let acc_cred =\r\n    userDataParsed !== null ? format(userDataParsed.acc_cred) : null;\r\n  let acc_save =\r\n    userDataParsed !== null ? format(userDataParsed.acc_save) : null;\r\n\r\n  // if (props.data.view === \"transfer\") {\r\n  //   return <Redirect push to=\"/transfer\" />;\r\n  // }\r\n\r\n  // if (redirect) {\r\n  //   // props.data.setView(\"transfer\");\r\n  //   return <Redirect push to=\"/transfer\" />;\r\n  // }\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  const ToggleBalance = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionView(\"balance\");\r\n    getAccountData();\r\n  };\r\n\r\n  const ToggleTransactions = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionView(\"transactions\");\r\n    getTransactions(1);\r\n  };\r\n\r\n  const ToggleShares = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionView(\"shares\");\r\n    getShares(1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Accordion defaultActiveKey={accordionView}>\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"balance\"\r\n            style={{\r\n              cursor: \"pointer\",\r\n              // backgroundColor: \"#e8f6f3\",\r\n            }}\r\n            onClick={ToggleBalance}\r\n          >\r\n            {t(\"Balance\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"balance\">\r\n            <Card.Body>\r\n              <Form noValidate>\r\n                <Form.Group>\r\n                  <Form.Label>{t(\"Available\")}</Form.Label>\r\n                  <Form.Text>\r\n                    <div style={{ fontSize: \"3em\" }}>{available}</div>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Current account\")}</div>\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_curr\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_curr}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Credit account\")}</div>\r\n\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_cred\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_cred}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Savings account\")}</div>\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_save\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_save}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                  </ul>\r\n                </Form.Group>\r\n              </Form>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"transactions\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleTransactions}\r\n          >\r\n            {t(\"Transactions\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"transactions\">\r\n            <Card.Body>\r\n              <Transactions {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"shares\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleShares}\r\n          >\r\n            {t(\"Shares\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"shares\">\r\n            <Card.Body>\r\n              <Shares {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button, Spinner } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"transfer U2S\",\r\n    namespace: \"Transfer\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER TO SELF DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    request,\r\n    userData,\r\n    accountNumber,\r\n    accountType,\r\n    language,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userData = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  const { currency_abbr } = userData;\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    toAccount: yup.string().required(t(\"To Account is required\")),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} Form data\r\n   */\r\n  const transferToSelf = (data) => {\r\n    // console.log(\"TRANSFER U2S DATA:\", data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.amount = parseLocaleNumber(data.amount, language);\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n    }).format(data.amount);\r\n\r\n    // onTransfer({ req: props.request, data: data });\r\n    sendRequest({ req: props.request, data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    transferToSelf(data);\r\n  };\r\n\r\n  const TransferToSelfForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"validationToAccount\">\r\n          <Form.Label>{t(\"To account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"toAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.toAccount && touched.toAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option value=\"acc_curr\" hidden={accountType === \"acc_curr\"}>\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option value=\"acc_cred\" hidden={accountType === \"acc_cred\"}>\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option value=\"acc_save\" hidden={accountType === \"acc_save\"}>\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.toAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              // type=\"number\"\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              // onBlur={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request=\"transfer U2S\"\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToSelfForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        toAccount: \"\",\r\n        amount: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button, Spinner } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n * User imports\r\n */\r\nimport Card from \"../card\";\r\n\r\n/**\r\n * Component: TransferToPerson\r\n */\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"transfer U2U\", namespace: \"Transfer\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    request,\r\n    userData,\r\n    accountNumber,\r\n    language,\r\n    accountType,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  const { onTransfer } = props.barrelEventHandlers;\r\n\r\n  /** \r\n   * Custom hooks\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /** \r\n   * Destructuring\r\n   ============================================================================ */\r\n  const { currency_abbr } = userData;\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    toPersonalID: yup\r\n      .string()\r\n      .required(t(\"Recipients Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      ),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const transferToPerson = (data) => {\r\n    // console.log(\"TRANSFER U2U DATA:\", data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.amount = parseLocaleNumber(data.amount, language);\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n    }).format(data.amount);\r\n\r\n    sendRequest({ req: props.request, data: data });\r\n    // onTransfer({ req: props.request, data: data });\r\n  };\r\n\r\n  // return <>test</>;\r\n\r\n  const onSubmit = (data) => {\r\n    transferToPerson(data);\r\n  };\r\n\r\n  const TransferToPersonForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        {/* Field: From account */}\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        {/* Field: Recipients Personal ID */}\r\n        <Form.Group controlId=\"validationFormikToPersonalID\">\r\n          <Form.Label>{t(\"To Personal ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"XXXXXX-XXXXX\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"toPersonalID\"\r\n              value={values.toPersonalID}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.toPersonalID && touched.toPersonalID}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.toPersonalID}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Field: Description */}\r\n        <Form.Group\r\n          controlId=\"description\"\r\n          name=\"description\"\r\n          value={values.description}\r\n          onChange={handleChange}\r\n        >\r\n          <Form.Label>{t(\"Description\")}</Form.Label>\r\n          <Form.Control as=\"textarea\" rows=\"3\" />\r\n        </Form.Group>\r\n\r\n        {/* Field: Amount */}\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              // type=\"number\"\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              // onBlur={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Button: Next */}\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToPersonForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        toPersonalID: \"\",\r\n        amount: \"\",\r\n        description: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button, Spinner } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"transfer U2B\", namespace: \"Transfer\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER TO SELF DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    request,\r\n    userData,\r\n    accountNumber,\r\n    language,\r\n    accountType,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  const { onTransfer } = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /** \r\n   * Destructuring\r\n   ============================================================================ */\r\n  const { currency_abbr } = userData;\r\n\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    // businessTitle: yup\r\n    //   .string()\r\n    //   .required(t(\"Recipients Business ID is required\")),\r\n    purposeID: yup.string().required(t(\"Purpose ID is required\")),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const transferToBusiness = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.amount = parseLocaleNumber(data.amount, language);\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n    }).format(data.amount);\r\n    // data.amount = parseFloat(data.amount);\r\n    // data.amount = Number(data.amount.replace(/[^0-9.-]+/g, \"\"));\r\n\r\n    sendRequest({ req: props.request, data: data });\r\n    // onTransfer({ req: props.request, data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    transferToBusiness(data);\r\n  };\r\n\r\n  const TransferToBusinessForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      {/* From account */}\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        {/*\r\n        <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n          <Form.Label>{t(\"To Business ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"businessTitle\"\r\n              value={values.businessTitle}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.businessTitle && touched.businessTitle}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.businessTitle}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n        */}\r\n\r\n        {/* To purpose */}\r\n        <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n          <Form.Label>{t(\"To Purpose ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"purposeID\"\r\n              value={values.purposeID}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.purposeID && touched.purposeID}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.purposeID}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Field: Description */}\r\n        <Form.Group\r\n          controlId=\"description\"\r\n          name=\"description\"\r\n          value={values.description}\r\n          onChange={handleChange}\r\n        >\r\n          <Form.Label>{t(\"Description\")}</Form.Label>\r\n          <Form.Control as=\"textarea\" rows=\"3\" />\r\n        </Form.Group>\r\n\r\n        {/* Amount */}\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              type=\"string\" // do NOT change to number!!\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Submit button */}\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToBusinessForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        purposeID: \"\",\r\n        amount: \"\",\r\n        description: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import Card from \"../card\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { businessID: null };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"PURPOSE REGISTRATION PROPS:\", props);\r\n\r\n  const barrels = props.data;\r\n  const { businessID } = props;\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  // const { userData, accountNumber, language } = barrels.barrelGetters;\r\n  // const {} = barrels.barrelSetters;\r\n  const { getReviser, getWorkplace } = barrels.barrelFunctions;\r\n  const { onPurposeRegistration } = barrels.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([\"PurposeRegistration\"]);\r\n\r\n  const schema = yup.object({\r\n    purposeTitle: yup\r\n      .string()\r\n      .required(t(\"Purpose title is a required field\"))\r\n      .min(3, t(\"Purpose title too short\"))\r\n      .max(70, t(\"Purpose title too long\"))\r\n      .trim(),\r\n    purposeDescription: yup.string().optional(),\r\n  });\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const RegisterPurpose = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.businessID = businessID;\r\n\r\n    console.log(\"REGISTER PURPOSE DATA:\", data);\r\n\r\n    onPurposeRegistration({ req: \"register purpose\", data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    RegisterPurpose(data);\r\n  };\r\n\r\n  const RegisterPurposeForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Purpose Title (Purpose ID) */}\r\n      <Form.Group controlId=\"validationFormikPurposeID\">\r\n        <Form.Label>{t(\"Purpose Title\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"\"\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"purposeTitle\"\r\n            value={values.purposeTitle}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.purposeTitle && touched.purposeTitle}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.purposeTitle}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Purpose Description */}\r\n      <Form.Group\r\n        controlId=\"purposeDescription\"\r\n        name=\"purposeDescription\"\r\n        value={values.purposeDescription}\r\n        onChange={handleChange}\r\n      >\r\n        <Form.Label>{t(\"Purpose Description\")}</Form.Label>\r\n        <Form.Control as=\"textarea\" rows=\"3\" />\r\n      </Form.Group>\r\n\r\n      {/* Submit button */}\r\n      <Button type=\"submit\" block>\r\n        {t(\"Submit\")}\r\n      </Button>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterPurposeForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        purposeTitle: \"\",\r\n        purposeDescription: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React, { createRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button, Toast } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"register shareholder\",\r\n    namespace: \"ShareholderRegistration\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  const barrels = props;\r\n  const { purposeID } = props;\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber, request } = barrels.barrelGetters;\r\n  // const {} = barrels.barrelSetters;\r\n  const {\r\n    // format,\r\n    // parseLocaleNumber,\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n  } = barrels.barrelFunctions;\r\n  const {} = barrels.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  // const thisRef = createRef();\r\n\r\n  const schema = yup.object({\r\n    personalID: yup\r\n      .string()\r\n      .required(t(\"Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      ),\r\n    shareholderRoles: yup.string().optional(),\r\n    shares: yup\r\n      .number()\r\n      .typeError(t(\"Shares must be a number\"))\r\n      .required(t(\"Shares is required\"))\r\n      .min(0, t(\"Shares too few\"))\r\n      .max(1000, t(\"Shares too many\")),\r\n  });\r\n\r\n  /**\r\n   * Send shareholder registration request\r\n   * @param {object} data\r\n   */\r\n  const onSubmit = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.purposeID = purposeID;\r\n\r\n    // console.log(\"REGISTER SHAREHOLDER DATA:\", data);\r\n\r\n    // onShareholderRegistration({ req: props.request, data: data });\r\n    sendRequest({ req: props.request, data: data });\r\n  };\r\n\r\n  const RegisterShareholderForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form id=\"shareholderRegistrationForm\" noValidate onSubmit={handleSubmit}>\r\n      <Toast style={{ minWidth: \"100%\" }}>\r\n        {/*\r\n        <Toast.Header closeButton={false}>\r\n          <strong className=\"mr-auto\">{t(\"Add Shareholder\")}</strong>\r\n        </Toast.Header>\r\n        */}\r\n        <Toast.Body>\r\n          <Form.Group controlId=\"validationFormikShareholderPersonalID\">\r\n            <Form.Label>{t(\"Shareholder Personal ID\")}</Form.Label>\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"XXXXXX-XXXXX\")}\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"personalID\"\r\n                value={values.personalID}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.personalID && touched.personalID}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.personalID}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n          {/* Shareholder Roles */}\r\n          <Form.Group controlId=\"validationFormikShareholderRoles\">\r\n            <Form.Label>{t(\"Shareholder Roles\")}</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"\"\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"shareholderRoles\"\r\n                value={values.shareholderRoles}\r\n                onChange={handleChange}\r\n                isInvalid={\r\n                  !!errors.shareholderRoles && touched.shareholderRoles\r\n                }\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.shareholderRoles}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          {/* Shares */}\r\n          <Form.Group controlId=\"validationFormikShareholderRoles\">\r\n            <Form.Label>{t(\"Shares\")}</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type=\"number\"\r\n                min={0}\r\n                max={1000}\r\n                step={1}\r\n                placeholder=\"\"\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"shares\"\r\n                value={values.shares}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.shares && touched.shares}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.shares}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          <SubmitButton\r\n            {...args}\r\n            caption={t(\"Submit\")}\r\n            request={props.request}\r\n            namespace={props.namespace}\r\n          />\r\n        </Toast.Body>\r\n      </Toast>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterShareholderForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        personalID: \"\",\r\n        shares: 0,\r\n        shareholderRoles: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Accordion,\r\n  Card,\r\n  Tab,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  // Nav,\r\n  Form,\r\n  Toast,\r\n  Badge,\r\n  // Container,\r\n  // Button,\r\n} from \"react-bootstrap\";\r\nimport { useAccordionToggle } from \"react-bootstrap/AccordionToggle\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Octicon, { Plus, PlusSmall, Gear } from \"@primer/octicons-react\";\r\nimport { Add, Settings } from \"@material-ui/icons\";\r\n\r\nimport Dropzone from \"../dropzone\";\r\n\r\nimport BusinessRegistration from \"../businessRegistration\";\r\nimport PurposeRegistration from \"../purposeRegistration\";\r\nimport ShareholderRegistration from \"../shareholderRegistration\";\r\n// import shareholderRegistration from \"../shareholderRegistration\";\r\nimport Shareholder from \"../shareholder\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { namespace: \"MyBusiness\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER DATA\", props);\r\n\r\n  // const [businessLoaded, setBusinessLoaded] = useState(null);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userBusinesses,\r\n    activeBusiness,\r\n    businessPurposes,\r\n    activeBusinesPurpose,\r\n    purposeShareholders,\r\n    language,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  const { setRedirectTo } = props.barrelSetters;\r\n  const {\r\n    getBusinesses,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n  } = props.barrelFunctions;\r\n  // const {  } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  useEffect(() => {\r\n    // getBusinesses();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n   * Toggle business (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  // const ToggleBusiness = ({ children, eventKey, businessID }) => {\r\n  //   const decoratedOnClick = useAccordionToggle(eventKey, () =>\r\n  //     getBusinessPurposes(businessID, eventKey)\r\n  //   );\r\n\r\n  //   return <div onClick={decoratedOnClick}>{children}</div>;\r\n  // };\r\n  const ToggleBusiness = ({ eventKey, businessID }) => {\r\n    getBusinessPurposes(businessID, eventKey);\r\n  };\r\n\r\n  /**\r\n   * Toggle purpose (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  // const TogglePurpose = ({ children, eventKey, purposeID }) => {\r\n  //   const decoratedOnClick = useAccordionToggle(eventKey, () =>\r\n  //     // getBusinessPurposes(businessID, eventKey)\r\n\r\n  //     getPurposeShareholders(purposeID, eventKey)\r\n  //   );\r\n\r\n  //   return <div onClick={decoratedOnClick}>{children}</div>;\r\n  // };\r\n\r\n  const TogglePurpose = ({ eventKey, purposeID }) => {\r\n    getPurposeShareholders(purposeID, eventKey);\r\n  };\r\n\r\n  /**\r\n   * Toggle shareholders (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  // const ToggleShareholders = ({ children, eventKey, purposeID }) => {\r\n  //   const decoratedOnClick = useAccordionToggle(eventKey, () =>\r\n  //     getPurposeShareholders(purposeID, eventKey)\r\n  //   );\r\n\r\n  //   return <div onClick={decoratedOnClick}>{children}</div>;\r\n  // };\r\n\r\n  /**\r\n   * Create:\r\n   * - business menu\r\n   * - business purposes menu\r\n   */\r\n  let menuItems = [];\r\n  let purposes = [];\r\n  let countShareholders = 0;\r\n  userBusinesses !== null &&\r\n    Object.keys(userBusinesses).map((business, keyBusiness) => {\r\n      menuItems[keyBusiness] = [];\r\n      purposes[keyBusiness] = [];\r\n      businessPurposes !== null &&\r\n        Object.keys(businessPurposes).map((purpose, keyPurpose) => {\r\n          if (\r\n            businessPurposes[purpose].business_id ===\r\n            userBusinesses[business].business_id\r\n          ) {\r\n            menuItems[keyBusiness][keyPurpose] = (\r\n              <ListGroup.Item\r\n                action\r\n                key={businessPurposes[purpose].purpose_id}\r\n                eventKey={businessPurposes[purpose].purpose_id}\r\n                onClick={() =>\r\n                  TogglePurpose({\r\n                    eventKey: keyPurpose,\r\n                    purposeID: businessPurposes[purpose].purpose_id,\r\n                  })\r\n                }\r\n              >\r\n                <span style={{ whiteSpace: \"nowrap\" }}>\r\n                  {keyBusiness + 1}.{keyPurpose + 1}{\" \"}\r\n                  {businessPurposes[purpose].title}\r\n                </span>\r\n              </ListGroup.Item>\r\n            );\r\n\r\n            purposes[keyBusiness][keyPurpose] = (\r\n              <Tab.Pane\r\n                key={businessPurposes[purpose].purpose_id}\r\n                eventKey={businessPurposes[purpose].purpose_id}\r\n              >\r\n                <Accordion defaultActiveKey=\"shareholders\">\r\n                  {/* Purpose ID */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"purpose_id\"\r\n                    >\r\n                      {t(\"Purpose ID\")}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"purpose_id\">\r\n                      <Card.Body>\r\n                        <Card.Text>\r\n                          {businessPurposes[purpose].purpose_id}\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n                  {/* Purpose description */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"description\"\r\n                    >\r\n                      {t(\"Purpose Description\")}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"description\">\r\n                      <Card.Body>\r\n                        <Card.Text>\r\n                          {businessPurposes[purpose].description}\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"shareholders\"\r\n                    >\r\n                      {t(\"Purpose Shareholders\")}\r\n                    </Accordion.Toggle>\r\n\r\n                    {/* Purpose shareholders */}\r\n                    <Accordion.Collapse eventKey=\"shareholders\">\r\n                      <Card.Body>\r\n                        {typeof purposeShareholders !== \"undefined\" &&\r\n                          purposeShareholders !== null &&\r\n                          Object.keys(purposeShareholders).map(\r\n                            (shareholder, keyShareholder) => {\r\n                              if (\r\n                                purposeShareholders[shareholder].purpose_id ===\r\n                                businessPurposes[purpose].purpose_id\r\n                              ) {\r\n                                const { purpose_id } = purposeShareholders[\r\n                                  shareholder\r\n                                ];\r\n                                const {\r\n                                  shareholder_id,\r\n                                  firstname,\r\n                                  lastname,\r\n                                  email,\r\n                                  roles,\r\n                                  share,\r\n                                } = purposeShareholders[shareholder];\r\n\r\n                                countShareholders++;\r\n\r\n                                const arrRoles =\r\n                                  roles !== null ? roles.split(\",\") : [];\r\n\r\n                                return (\r\n                                  <Shareholder\r\n                                    {...args}\r\n                                    key={keyShareholder}\r\n                                    id={keyShareholder}\r\n                                    shareholder={shareholder_id}\r\n                                    purpose={purpose_id}\r\n                                    firstname={firstname}\r\n                                    lastname={lastname}\r\n                                    share={share}\r\n                                    roles={arrRoles}\r\n                                  />\r\n                                );\r\n                              }\r\n                            }\r\n                          )}\r\n                        {countShareholders === 0 && (\r\n                          <Card.Text className=\"text-muted\">\r\n                            {t(\"No shareholders\")}\r\n                          </Card.Text>\r\n                        )}\r\n\r\n                        {/* End shareholders list */}\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"2\"\r\n                    >\r\n                      <span style={{ whiteSpace: \"nowrap\" }}>\r\n                        <Add\r\n                          fontSize=\"small\"\r\n                          style={{ color: \"var(--dark)\" }}\r\n                        />\r\n                        &nbsp;{t(\"Add Shareholder\")}\r\n                      </span>\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"2\">\r\n                      <Card.Body>\r\n                        <ShareholderRegistration\r\n                          {...args}\r\n                          purposeID={businessPurposes[purpose].purpose_id}\r\n                        />\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n                </Accordion>\r\n              </Tab.Pane>\r\n            );\r\n          }\r\n          countShareholders = 0;\r\n          return true;\r\n        });\r\n      return true;\r\n    });\r\n\r\n  const jsx = (\r\n    <Accordion defaultActiveKey={activeBusiness}>\r\n      {/* List user businesses */}\r\n      {userBusinesses !== null &&\r\n        Object.keys(userBusinesses).map((business, keyBusiness) => {\r\n          const date = new Date(userBusinesses[business].created);\r\n          const businessSince = new Intl.DateTimeFormat(language).format(date);\r\n          // keyBusiness[3] = userBusinesses[business].business_id;\r\n          return (\r\n            <Card key={keyBusiness}>\r\n              <Accordion.Toggle\r\n                as={Card.Header}\r\n                eventKey={keyBusiness}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() =>\r\n                  ToggleBusiness({\r\n                    eventKey: keyBusiness,\r\n                    businessID: userBusinesses[business].business_id,\r\n                  })\r\n                }\r\n              >\r\n                {keyBusiness + 1} {userBusinesses[business].title}\r\n              </Accordion.Toggle>\r\n              <Accordion.Collapse eventKey={keyBusiness}>\r\n                <Card.Body>\r\n                  <Tab.Container\r\n                    id=\"left-tabs-example\"\r\n                    defaultActiveKey={\r\n                      activeBusinesPurpose !== null\r\n                        ? activeBusinesPurpose\r\n                        : \"aboutBusiness\"\r\n                    }\r\n                  >\r\n                    <Row>\r\n                      {/* Layout: Left side - Menu */}\r\n                      <Col sm={5}>\r\n                        <ListGroup variant=\"flush\">\r\n                          {/* Menu item: About business */}\r\n                          <ListGroup.Item action eventKey=\"aboutBusiness\">\r\n                            {t(\"About\")}\r\n                          </ListGroup.Item>\r\n\r\n                          {/* Menu items: Registered purposes */}\r\n                          {menuItems[keyBusiness]}\r\n\r\n                          {/* Menu item: Add purpose */}\r\n                          <ListGroup.Item action eventKey=\"addPurpose\">\r\n                            <span style={{ whiteSpace: \"nowrap\" }}>\r\n                              <Add\r\n                                fontSize=\"small\"\r\n                                style={{ color: \"var(--dark)\" }}\r\n                              />\r\n                              &nbsp;{t(\"Add Purpose\")}\r\n                            </span>\r\n                          </ListGroup.Item>\r\n                        </ListGroup>\r\n                      </Col>\r\n\r\n                      {/* Layout: Right side - Content */}\r\n                      <Col sm={7}>\r\n                        <Tab.Content>\r\n                          <Tab.Pane eventKey=\"aboutBusiness\">\r\n                            <Accordion defaultActiveKey=\"businessID\">\r\n                              {/* Business logo */}\r\n\r\n                              {/*\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  eventKey=\"businessLogo\"\r\n                                >\r\n                                  [LOGO]\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"businessLogo\">\r\n                                  <Card border=\"light\">\r\n                                    <Card.Body>\r\n                                      <Dropzone data={args} />\r\n                                    </Card.Body>\r\n                                  </Card>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n                              */}\r\n\r\n                              {/* Business ID */}\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  eventKey=\"businessID\"\r\n                                >\r\n                                  {t(\"Business ID\")}\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"businessID\">\r\n                                  <Card border=\"light\">\r\n                                    <Card.Body>\r\n                                      <Card.Text>\r\n                                        {userBusinesses[business].business_id}\r\n                                      </Card.Text>\r\n                                    </Card.Body>\r\n                                  </Card>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n\r\n                              {/* Business description */}\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  eventKey=\"businessDescription\"\r\n                                >\r\n                                  {t(\"Business Description\")}\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"businessDescription\">\r\n                                  <Card border=\"light\">\r\n                                    <Card.Body>\r\n                                      <Card.Text>\r\n                                        {userBusinesses[business].description}\r\n                                      </Card.Text>\r\n                                    </Card.Body>\r\n                                  </Card>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n\r\n                              {/* Business Creation Date */}\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  eventKey=\"businessCreationDate\"\r\n                                >\r\n                                  {t(\"Business Created\")}\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"businessCreationDate\">\r\n                                  <Card border=\"light\">\r\n                                    <Card.Body>\r\n                                      <Card.Text>{businessSince}</Card.Text>\r\n                                    </Card.Body>\r\n                                  </Card>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n                            </Accordion>\r\n                          </Tab.Pane>\r\n\r\n                          {/* Start Business purposes */}\r\n                          {purposes[keyBusiness]}\r\n                          {/* End Business purposes */}\r\n\r\n                          {/* Add new purpose */}\r\n                          <Tab.Pane eventKey=\"addPurpose\">\r\n                            <Accordion defaultActiveKey=\"newPurpose\">\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  eventKey=\"newPurpose\"\r\n                                >\r\n                                  {t(\"New Purpose\")}\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"newPurpose\">\r\n                                  <Card.Body>\r\n                                    <PurposeRegistration\r\n                                      data={args}\r\n                                      businessID={\r\n                                        userBusinesses[business].business_id\r\n                                      }\r\n                                    />\r\n                                  </Card.Body>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n                            </Accordion>\r\n                          </Tab.Pane>\r\n                        </Tab.Content>\r\n                      </Col>\r\n                    </Row>\r\n                  </Tab.Container>\r\n                </Card.Body>\r\n              </Accordion.Collapse>\r\n            </Card>\r\n          );\r\n          // console.log(\"BUSINESS:\", userBusinesses[business]);\r\n        })}\r\n\r\n      {/* Add business */}\r\n      <Card>\r\n        <Accordion.Toggle\r\n          as={Card.Header}\r\n          eventKey=\"addBusiness\"\r\n          style={{ cursor: \"pointer\" }}\r\n        >\r\n          <span>\r\n            <Add fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n            &nbsp;\r\n            {t(\"Add Business\")}\r\n          </span>\r\n        </Accordion.Toggle>\r\n        <Accordion.Collapse eventKey=\"addBusiness\">\r\n          <Card.Body>\r\n            <BusinessRegistration {...args} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  );\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  return <>{jsx}</>;\r\n};\r\n","import \"./UserEditor.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ListGroup, Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport {\r\n  Visibility,\r\n  VisibilityOff,\r\n  Close,\r\n  Edit,\r\n  Done,\r\n} from \"@material-ui/icons\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    namespace: \"UserEditor\",\r\n    request: \"update user\",\r\n    mode: \"label\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"USER EDITOR PROPS:\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userData,\r\n    accountNumber,\r\n    currencies,\r\n    currencyAbbr,\r\n    language,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest, getReviser, getWorkplace } = props.barrelFunctions;\r\n  const { onRedirect } = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [editFirstname, setEditFirstname] = useState(false);\r\n  const [editLastname, setEditLastname] = useState(false);\r\n  const [editEmail, setEditEmail] = useState(false);\r\n  const [editPassword, setEditPassword] = useState(false);\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  const [submitButtonVisible, setSubmitButtonVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (editFirstname || editLastname || editEmail || editPassword) {\r\n      setSubmitButtonVisible(true);\r\n    } else {\r\n      setSubmitButtonVisible(false);\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [editFirstname, editLastname, editEmail, editPassword]);\r\n\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  const sendUserRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    // data.language = language;\r\n    // data.email = userData.email;\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    data.personalID = accountNumber;\r\n    if (!editFirstname) data.firstname = null;\r\n    if (!editLastname) data.lastname = null;\r\n    if (!editEmail) data.email = userData.email;\r\n    if (!editPassword) data.password = null;\r\n\r\n    // console.log(\"onSubmit:\", data);\r\n\r\n    if (sendUserRegistrationRequest(data)) {\r\n      // User registration request was submitted\r\n    }\r\n  };\r\n\r\n  const yupObject = {\r\n    firstName: editFirstname\r\n      ? yup.string().required(t(\"First name is required\"))\r\n      : yup.string().optional(),\r\n    lastName: editLastname\r\n      ? yup.string().required(t(\"Last name is required\"))\r\n      : yup.string().optional(),\r\n    email: editEmail\r\n      ? yup\r\n          .string()\r\n          .email(t(\"Invalid email address\"))\r\n          .required(t(\"Email is required\"))\r\n      : yup.string().optional(),\r\n    password: editPassword\r\n      ? yup\r\n          .string()\r\n          .required(t(\"No password provided\"))\r\n          .min(8, t(\"Password is too short\"))\r\n          // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n          .matches(\r\n            /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n            t(\"Password is too weak\")\r\n          )\r\n      : yup.string().optional(),\r\n  };\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object(yupObject);\r\n\r\n  /**\r\n   * Data consistency tests\r\n   */\r\n  if (userData === null) return <></>;\r\n\r\n  /**\r\n   * Destructuring\r\n   */\r\n  const { mode } = props;\r\n  const {\r\n    firstname,\r\n    lastname,\r\n    email,\r\n    // language,\r\n    currency_name,\r\n    currency_abbr,\r\n  } = userData;\r\n  const currency = `${currency_name} (${currency_abbr})`;\r\n\r\n  const UserEditorForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <Card title={t(\"Profile\")}>\r\n        {/* First name */}\r\n        <ListGroup variant=\"flush\">\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"First name\")}</Form.Label>\r\n            {!editFirstname ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditFirstname(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n                <br />\r\n                <small>{firstname}</small>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditFirstname(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editFirstname && (\r\n              <Form.Group controlId=\"validationFormikFirstName\">\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Enter first name\")}\r\n                    name=\"firstName\"\r\n                    value={values.firstName}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.firstName && touched.firstName}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.firstName}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n            )}\r\n          </ListGroup.Item>\r\n\r\n          {/* Last name */}\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"Last name\")}</Form.Label>\r\n            {!editLastname ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditLastname(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n                <br />\r\n                <small>{lastname}</small>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditLastname(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editLastname && (\r\n              <Form.Group controlId=\"validationFormikLastName\">\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Enter last name\")}\r\n                    name=\"lastName\"\r\n                    value={values.lastName}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.lastName && touched.lastName}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.lastName}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n            )}\r\n          </ListGroup.Item>\r\n\r\n          {/* Email */}\r\n          {accountNumber !== null && (\r\n            <ListGroup.Item as=\"div\" action>\r\n              <Form.Label>{t(\"Email address\")}</Form.Label>\r\n              {!editEmail ? (\r\n                <>\r\n                  <span style={{ float: \"right\" }}>\r\n                    <Edit\r\n                      onClick={() => setEditEmail(true)}\r\n                      fontSize=\"small\"\r\n                      style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                    />\r\n                  </span>\r\n                  <br />\r\n                  <small>{email}</small>\r\n                </>\r\n              ) : (\r\n                <span style={{ float: \"right\" }}>\r\n                  <Close\r\n                    onClick={() => setEditEmail(false)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n              )}\r\n\r\n              {editEmail && (\r\n                <Form.Group controlId=\"validationFormikEmail\">\r\n                  <InputGroup>\r\n                    <Form.Control\r\n                      placeholder={t(\"Enter email\")}\r\n                      name=\"email\"\r\n                      value={values.email}\r\n                      onChange={handleChange}\r\n                      // onBlur={handleChange}\r\n                      isInvalid={!!errors.email && touched.email}\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.email}\r\n                    </Form.Control.Feedback>\r\n                  </InputGroup>\r\n                </Form.Group>\r\n              )}\r\n            </ListGroup.Item>\r\n          )}\r\n\r\n          {/* Password */}\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"Password\")}</Form.Label>\r\n            {!editPassword ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditPassword(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditPassword(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editPassword && (\r\n              <>\r\n                {/* New password */}\r\n                <Form.Group controlId=\"validationFormikPassword\">\r\n                  <InputGroup>\r\n                    <Form.Control\r\n                      type={passwordVisible ? \"text\" : \"password\"}\r\n                      placeholder={t(\"Enter new password\")}\r\n                      name=\"password\"\r\n                      value={values.password}\r\n                      onChange={handleChange}\r\n                      // onBlur={handleChange}\r\n                      isInvalid={!!errors.password && touched.password}\r\n                    />\r\n                    <InputGroup.Append>\r\n                      <InputGroup.Text\r\n                        id=\"inputGroupAppend\"\r\n                        onClick={togglePassword}\r\n                        style={{\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        {passwordVisible ? (\r\n                          <VisibilityOff\r\n                            fontSize=\"small\"\r\n                            style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                          />\r\n                        ) : (\r\n                          <Visibility\r\n                            fontSize=\"small\"\r\n                            style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                          />\r\n                        )}\r\n                      </InputGroup.Text>\r\n                    </InputGroup.Append>\r\n\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.password}\r\n                    </Form.Control.Feedback>\r\n                  </InputGroup>\r\n                </Form.Group>\r\n              </>\r\n            )}\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n\r\n        <Form.Group controlId=\"validationSubmitButton\">\r\n          <SubmitButton\r\n            {...args}\r\n            caption={t(\"Submit\")}\r\n            visible={submitButtonVisible}\r\n            marginTop={20}\r\n            request={props.request}\r\n            namespace={props.namespace}\r\n          />\r\n        </Form.Group>\r\n      </Card>\r\n    </Form>\r\n  );\r\n\r\n  const jsx =\r\n    mode == \"label\" ? (\r\n      `${firstname} ${lastname}`\r\n    ) : (\r\n      <Formik\r\n        component={UserEditorForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          firstName: userData.firstname,\r\n          lastName: userData.lastname,\r\n          email: userData.email,\r\n          password: \"\",\r\n        }}\r\n      />\r\n    );\r\n\r\n  return <>{jsx}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, InputGroup, Button, Table } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {\r\n    request: \"register currency\",\r\n    namespace: \"Currencies\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    currencies,\r\n    countCurrencies,\r\n    activePageCurrencies,\r\n    currenciesPerPage,\r\n    currencyAbbr,\r\n    userData,\r\n  } = props.barrelGetters;\r\n  const { setActivePageCurrencies, setCurrencyAbbr } = props.barrelSetters;\r\n  const {\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n    getCurrencies,\r\n    formatExchangeRate,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Destructured vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n\r\n  const indication = () => {\r\n    return \"THE TABLE IS EMPTY\";\r\n  };\r\n\r\n  const onCurrencySelected = (e) => {\r\n    setCurrencyAbbr(e.target.id);\r\n    sendRequest({\r\n      req: \"register user currency\",\r\n      data: { email: userData.email, currency_id: e.target.id },\r\n    });\r\n  };\r\n\r\n  const onPageSelect = (number) => {\r\n    console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageCurrencies > 1 ? activePageCurrencies - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageCurrencies < Math.ceil(countCurrencies / currenciesPerPage)\r\n            ? activePageCurrencies + 1\r\n            : Math.ceil(countCurrencies / currenciesPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countCurrencies / currenciesPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getCurrencies(number);\r\n  };\r\n\r\n  /**\r\n   * Form\r\n   ============================================================================ */\r\n  const CurrenciesForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <>\r\n      <Table responsive striped bordered hover size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Select\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Abbr\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Name\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Region\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Rate\")}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {currencies !== null &&\r\n            currencies.map((currency, keyCUrrency) => {\r\n              // console.log(\"CURRENCY\", currency);\r\n\r\n              const { name, abbr, rate, region, status, sponsors } = currency;\r\n              return (\r\n                <tr key={keyCUrrency}>\r\n                  <td style={{ textAlign: \"center\" }}>\r\n                    <Form.Check\r\n                      type=\"radio\"\r\n                      checked={currencyAbbr === abbr}\r\n                      name=\"selected-currency\"\r\n                      id={abbr}\r\n                      aria-label=\"option 1\"\r\n                      onChange={onCurrencySelected}\r\n                    />\r\n                  </td>\r\n                  <td style={{ textAlign: \"center\" }}>{abbr}</td>\r\n                  <td style={{ textAlign: \"left\" }}>{name}</td>\r\n                  <td style={{ textAlign: \"left\" }}>{region}</td>\r\n                  <td style={{ textAlign: \"right\" }}>\r\n                    {formatExchangeRate(rate)}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </Table>\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countCurrencies / currenciesPerPage)}\r\n        active={activePageCurrencies}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n\r\n  /**\r\n   * Formik return\r\n   ============================================================================ */\r\n  // onSubmit={onSubmit}\r\n  return (\r\n    <Formik\r\n      component={CurrenciesForm}\r\n      initialValues={{\r\n        curr_abbr: \"\",\r\n        curr_title: \"\",\r\n        curr_region: \"\",\r\n        curr_rate: 1.0,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, InputGroup, Button, Table } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"CurrencyRegistration\",\r\n    request: \"register currency\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    currencies,\r\n    countCurrencies,\r\n    activePageCurrencies,\r\n    currenciesPerPage,\r\n  } = props.barrelGetters;\r\n  const { setActivePageCurrencies } = props.barrelSetters;\r\n  const {\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n    getCurrencies,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Destructured vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([\"CurrencyRegistration\"]);\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    curr_abbr: yup\r\n      .string()\r\n      .required(t(\"Currency abbreviation is required\"))\r\n      .min(3, t(\"Currency abbreviation is too short\"))\r\n      .max(5, t(\"Currency abbreviation is too long\")),\r\n    curr_title: yup\r\n      .string()\r\n      .required(t(\"Currency name is required\"))\r\n      .min(3, t(\"Currency name is too short\")) // must be at least 3 characters\r\n      .max(70, t(\"Currency name is too long\")), // must be at most 70 characters\r\n    curr_region: yup\r\n      .string()\r\n      .required(t(\"Currency region is required\"))\r\n      .min(3, t(\"Currency region is too short\")) // must be at least 3 characters\r\n      .max(70, t(\"Currency region is too long\")), // must be at most 70 characters\r\n    curr_rate: yup\r\n      .string()\r\n      .required(t(\"Exchange rate is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Exchange Rate Regex\")),\r\n        t(\"Wrong exchange rate format\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n  const onSubmit = (data) => {\r\n    console.log(data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  const indication = () => {\r\n    return \"THE TABLE IS EMPTY\";\r\n  };\r\n\r\n  /**\r\n   * Form\r\n   ============================================================================ */\r\n  const CurrencyRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <>\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        {/* Currency abbreviation */}\r\n        <Form.Group controlId=\"validationFormikCurrAbbr\">\r\n          <Form.Label>{t(\"Abbreviation\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_abbr\"\r\n              value={values.curr_abbr}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_abbr && touched.curr_abbr}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_abbr}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Currency name */}\r\n        <Form.Group controlId=\"validationFormikCurrName\">\r\n          <Form.Label>{t(\"Currency Name\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_title\"\r\n              value={values.curr_title}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_title && touched.curr_title}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_title}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Currency region */}\r\n        <Form.Group controlId=\"validationFormikCurrRegion\">\r\n          <Form.Label>{t(\"Currency Region\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_region\"\r\n              value={values.curr_region}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_region && touched.curr_region}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_region}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Initial exchange rate */}\r\n        <Form.Group controlId=\"validationFormikCurrRate\">\r\n          <Form.Label>{t(\"Initial Exchange Rate\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_rate\"\r\n              value={values.curr_rate}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_rate && touched.curr_rate}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_rate}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Submit button */}\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </>\r\n  );\r\n\r\n  /**\r\n   * Formik return\r\n   ============================================================================ */\r\n  return (\r\n    <Formik\r\n      component={CurrencyRegistrationForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        curr_abbr: \"\",\r\n        curr_title: \"\",\r\n        curr_region: \"\",\r\n        curr_rate: 1.0,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import { Redirect } from \"react-router-dom\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  // Redirect,\r\n} from \"react-router-dom\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  // Button,\r\n  // Breadcrumb,\r\n  NavDropdown,\r\n} from \"react-bootstrap\";\r\n// import Octicon, { SignOut } from \"@primer/octicons-react\";\r\nimport { PowerSettingsNew } from \"@material-ui/icons\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport AccountRegistration from \"../../accountRegistration\";\r\nimport BusinessRegistration from \"../../businessRegistration\";\r\nimport { Balance, Transfer } from \"../../transfer\";\r\nimport MyBusiness from \"../../myBusiness\";\r\nimport UserEditor from \"../../userEditor\";\r\nimport CurrencyContainer from \"../../currencyContainer\";\r\nimport IdleTimer from \"../../idleTimer\";\r\nimport useIdleTimer from \"../../../utils/useIdleTimer\";\r\n\r\n// const AccountRegistration = React.lazy(() =>\r\n//   import(\"../../accountRegistration\")\r\n// );\r\n// const BusinessRegistration = React.lazy(() =>\r\n//   import(\"../../businessRegistration\")\r\n// );\r\n// const MyBusiness = React.lazy(() => import(\"../../myBusiness\"));\r\n// const UserEditor = React.lazy(() => import(\"../../userEditor\"));\r\n// const CurrencyContainer = React.lazy(() => import(\"../../currencyContainer\"));\r\n\r\n/**\r\n * Component: Summary\r\n */\r\nexport default (args) => {\r\n  // console.log(\"SUMMARY\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { namespace: \"Summary\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getCurrencies, getBusinesses } = props.barrelFunctions;\r\n  const { onSessionTimeout } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  // let tmrUpdateTimestamp = null;\r\n\r\n  // React.useEffect(() => {\r\n  //   // if (!signedIn) return;\r\n  //   updateTimestamp();\r\n  //   // eslint-disable-next-line\r\n  // }, []);\r\n\r\n  // React.useEffect(() => {\r\n  //   // if (!signedIn) return;\r\n  //   console.log(timestamp);\r\n\r\n  //   // eslint-disable-next-line\r\n  // }, [timestamp]);\r\n\r\n  // const [unmounted, setUnmounted] = useState(false);\r\n\r\n  // const onIdleTimerUnmount = () => {\r\n  //   setIdleTimerUnmounted(true);\r\n  // };\r\n\r\n  /**\r\n   * Data consistency tests\r\n   */\r\n  // if (accountNumber === null) return <>{t(\"Something went wrong\")}</>;\r\n\r\n  // const idleTimer = useIdleTimer({ ...args, onTimeout: onSessionTimeout });\r\n  // <IdleTimer {...args} onTimeout={onSessionTimeout} />\r\n\r\n  const navigation = (\r\n    <>\r\n      <Navbar\r\n        collapseOnSelect\r\n        expand=\"md\"\r\n        // className=\"card-header\"\r\n        // className=\"navbar-trans\"\r\n        // bg=\"light\"\r\n        variant=\"light\"\r\n        style={{\r\n          borderRadius: \"5px\",\r\n          background: \"transparent !important\",\r\n          backgroundColor: \"\",\r\n          boxShadow: \"none\",\r\n        }}\r\n      >\r\n        <Navbar.Brand href=\"/\">\r\n          <img\r\n            src=\"gfx/zlogo_light.png\"\r\n            width=\"auto\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n            alt={t(\"Logo\")}\r\n          />\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            {accountNumber !== null && (\r\n              <>\r\n                <Nav.Link eventKey=\"balance\" href=\"/balance\">\r\n                  {t(\"Balance\")}\r\n                </Nav.Link>\r\n                <Nav.Link eventKey=\"transfer\" href=\"/transfer\">\r\n                  {t(\"Transfer\")}\r\n                </Nav.Link>\r\n                <Nav.Link\r\n                  eventKey=\"my-business\"\r\n                  onClick={getBusinesses}\r\n                  href=\"#\"\r\n                >\r\n                  {t(\"Business\")}\r\n                </Nav.Link>\r\n                <Nav.Link eventKey=\"currency\" href=\"/currency\">\r\n                  {t(\"Currency\")}\r\n                </Nav.Link>\r\n              </>\r\n            )}\r\n          </Nav>\r\n\r\n          <Nav>\r\n            <Nav.Link eventKey=\"profile\" href=\"/profile\">\r\n              <UserEditor {...args} />\r\n            </Nav.Link>\r\n          </Nav>\r\n          <Nav>\r\n            <Nav.Link eventKey=\"sign-out\" href=\"/sign-out\">\r\n              <span>\r\n                <PowerSettingsNew style={{ color: \"var(--dark)\" }} />\r\n              </span>\r\n            </Nav.Link>\r\n          </Nav>\r\n          {false && (\r\n            <Nav>\r\n              <Nav.Item>\r\n                <IdleTimer {...args} />\r\n              </Nav.Item>\r\n            </Nav>\r\n          )}\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </>\r\n  );\r\n\r\n  const viewBalanceOrTransfer = (\r\n    <Router>\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          component={() => {\r\n            return accountNumber !== null\r\n              ? Balance(args)\r\n              : AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/summary\"\r\n          component={() => {\r\n            return accountNumber !== null\r\n              ? Balance(args)\r\n              : AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/account-registration\"\r\n          component={() => {\r\n            return AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/profile\"\r\n          component={() => {\r\n            return UserEditor({ ...args, mode: \"profile\" });\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/currency\"\r\n          component={() => {\r\n            return CurrencyContainer({ ...args });\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/business-registration\"\r\n          component={() => {\r\n            return BusinessRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/my-business\"\r\n          component={() => {\r\n            return MyBusiness(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/balance\"\r\n          component={() => {\r\n            return Balance(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/transfer\"\r\n          component={() => {\r\n            return Transfer(args);\r\n          }}\r\n        />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {/* Header */}\r\n\r\n      {/* Content */}\r\n      {/*<h3>{t(\"Summary\")}</h3>*/}\r\n\r\n      <Container fluid=\"md\">\r\n        <Row>\r\n          <Col>\r\n            {navigation}\r\n            <div style={{ height: \"7px\" }}></div>\r\n          </Col>\r\n        </Row>\r\n        {/*\r\n        <Row>{viewAccountRegistration}</Row>\r\n        */}\r\n        <Row>\r\n          <Col>{viewBalanceOrTransfer}</Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, Button, Badge, Alert, Accordion, Card } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\nimport Currencies from \"../currencies\";\r\nimport CurrencyRegistration from \"../currencyRegistration\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"CurrencyContainer\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const {\r\n    accordionViewCurrency,\r\n    activePageCurrencies,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  const { setAccordionViewCurrency, setRedirectTo } = props.barrelSetters;\r\n  const { getCurrencies } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const ToggleCurrencies = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionViewCurrency(\"currencies\");\r\n    getCurrencies(activePageCurrencies);\r\n  };\r\n\r\n  const ToggleCurrencyRegistration = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionViewCurrency(\"currencyRegistration\");\r\n    // getTransactions(1);\r\n  };\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return (\r\n    <>\r\n      <Accordion defaultActiveKey={accordionViewCurrency}>\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"currencies\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleCurrencies}\r\n          >\r\n            {t(\"Currencies\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"currencies\">\r\n            <Card.Body>\r\n              <Currencies {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"currencyRegistration\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleCurrencyRegistration}\r\n          >\r\n            {t(\"Currency Registration\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"currencyRegistration\">\r\n            <Card.Body>\r\n              <CurrencyRegistration {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport { TransferToSelf, TransferToPerson, TransferToBusiness } from \"./index\";\r\nimport { Alert } from \"react-bootstrap\";\r\n\r\n// const navigation = [\r\n//   {\r\n//     name: \"U2S\",\r\n//     link: \"#u2s\",\r\n//   },\r\n//   {\r\n//     name: \"U2U\",\r\n//     link: \"#u2u\",\r\n//   },\r\n//   {\r\n//     name: \"U2B\",\r\n//     link: \"#u2b\",\r\n//   },\r\n// ];\r\n\r\n/**\r\n * Component: Transfer\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber, transferType } = props.barrelGetters;\r\n  const { setRedirectTo } = props.barrelSetters;\r\n  const { format } = props.barrelFunctions;\r\n  const { onTransferTypeChange } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"Transfer\");\r\n\r\n  const data = props.data;\r\n  const type = transferType;\r\n  // const onTypeChange = args.onTypeChange;\r\n\r\n  // console.log(\"TRANSFER DATA TYPE:\", type);\r\n\r\n  const [transferCard, setTransferCard] = useState(null);\r\n\r\n  const onNavigationClick = (id) => {\r\n    onTransferTypeChange(id);\r\n  };\r\n\r\n  const navigation = [\r\n    {\r\n      name: t(\"U2S\"),\r\n      link: \"#u2s\",\r\n    },\r\n    {\r\n      name: t(\"U2U\"),\r\n      link: \"#u2u\",\r\n    },\r\n    {\r\n      name: t(\"U2B\"),\r\n      link: \"#u2b\",\r\n    },\r\n  ];\r\n\r\n  // console.log(\"TRANSFER DATA\", data);\r\n  // const title = t(\"Transfer to account\");\r\n\r\n  useEffect(() => {\r\n    if (type === null) return;\r\n\r\n    // setTransferCard()\r\n    switch (type) {\r\n      case \"#u2s\": // User to self\r\n        setTransferCard(\r\n          <TransferToSelf\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      case \"#u2u\": // User to user\r\n        setTransferCard(\r\n          <TransferToPerson\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      case \"#u2b\": // User to business\r\n        setTransferCard(\r\n          <TransferToBusiness\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [data, format, type]);\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  // return (\r\n  //   <>\r\n  //     <Alert variant=\"warning\">\r\n  //       <Alert.Heading>{t(\"Account not yet registered\")}</Alert.Heading>\r\n  //       <p>\r\n  //         <Trans i18nKey=\"Balance:Please set up your account first.\">\r\n  //           Please set up your account first. Use this{\" \"}\r\n  //           <a href=\"/account-registration\">link</a>.\r\n  //         </Trans>\r\n  //       </p>\r\n  //     </Alert>\r\n  //   </>\r\n  // );\r\n\r\n  return <>{transferCard}</>;\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport config from \"./config\";\r\nimport openSocket from \"socket.io-client\";\r\nlet socket = openSocket.connect(config.uri.ENDPOINT, {\r\n  secure: true,\r\n  reconnect: true,\r\n});\r\n\r\n/**\r\n * Send request to the server\r\n * @param {*} param0\r\n */\r\nexport const sendData = (data, debug = false) => {\r\n  if (debug) console.log(`request: ${data.req}`, data);\r\n\r\n  // No data - do not send\r\n  // if (req.length === 0) return false;\r\n\r\n  socket.emit(`onDataReceived`, data);\r\n  return true;\r\n};\r\n\r\n// Start a session\r\nexport const startSession = (data, session, debug = false) => {\r\n  // console.log(\"startSession\");\r\n  if (debug) console.log(`request: startSession`, data, session);\r\n\r\n  socket.emit(`start session`, {\r\n    data: data,\r\n    session: session,\r\n    req: \"start session\",\r\n  });\r\n};\r\n\r\n// End the session\r\nexport const endSession = (data, session) => {\r\n  console.log(`request: endSession`, data, session);\r\n  socket.emit(`end session`, {\r\n    char: data,\r\n    // uid: uid,\r\n    session: session,\r\n  });\r\n};\r\n\r\n// export const useSocket = (uid, onDataReceived) => {\r\n//   // Listen for a chat message\r\n//   const ZimeSocket = (onDataReceived, uid) => {\r\n//     socket.on(`onDataReceived`, data => {\r\n//       console.log(data);\r\n//       onDataReceived(data.char, data.uid === uid ? \"self\" : uid);\r\n//       // console.log(data);\r\n//     });\r\n//     // socket.on(\"onDataReceived\", (id, data) => {\r\n//     //   // send a private message to the socket with the given id\r\n//     //   console.log(id, data);\r\n//     // });\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     ZimeSocket(onDataReceived, uid);\r\n//     // eslint-disable-next-line\r\n//   }, [uid]);\r\n// };\r\n\r\n// export const useSocket = (onDataReceived) => {\r\n//   // console.log(\"DATA RECEIVED\");\r\n\r\n//   // Listen for a data from server\r\n//   const SuranadiraSocket = (onDataReceived) => {\r\n//     socket.on(`onDataReceived`, (data) => {\r\n//       console.log(\"ON DATA RECEIVED\", data);\r\n//       onDataReceived({ data });\r\n//     });\r\n//   };\r\n\r\n//   // useEffect(() => {\r\n//   //   SuranadiraSocket(onDataReceived, uid);\r\n//   //   // eslint-disable-next-line\r\n//   // }, [uid]);\r\n// };\r\n\r\nexport const useSocket = (callback) => {\r\n  const [responseData, setResponseData] = useState(null);\r\n  socket.on(`onDataReceived`, (data) => {\r\n    setResponseData(data);\r\n    // console.log(\"ON DATA RECEIVED\", data);\r\n    // onDataReceived({ data });\r\n    // callback({ data });\r\n    // callback(data);\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (responseData === null) return;\r\n\r\n    callback(responseData);\r\n    // eslint-disable-next-line\r\n  }, [responseData]);\r\n\r\n  // // if (responseFound) return;\r\n  // const [res, status] = data;\r\n  // if (res === props.data.req && status === props.data.status) {\r\n  //   callback();\r\n  //   // responseFound = true;\r\n  //   return true;\r\n  // }\r\n  // return false;\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport {\r\n  Form,\r\n  InputGroup,\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport SubmitButton from \"../submitButton\";\r\n// import Alert from \"../alert\";\r\n// import LanguageSelector from \"../language-selector\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { request } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"LogIn\");\r\n\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n    password: yup.string().required(t(\"No password provided\")),\r\n  });\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  const sendUserLogInRequest = (data) => {\r\n    // data.pw = data.password;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    sendRequest({ req: \"sign in user\", data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    sendUserLogInRequest(data);\r\n  };\r\n\r\n  // const languageData = { language: \"en\" };\r\n\r\n  const UserLogInForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Sign In\")}</h3>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"Password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Remember me */}\r\n      {/*\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Check\r\n          required\r\n          name=\"rememberMe\"\r\n          label={t(\"Remember me\")}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.rememberMe}\r\n          feedback={errors.rememberMe}\r\n          id=\"validationFormik0\"\r\n        />\r\n      </Form.Group>\r\n      */}\r\n\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request=\"sign in user\"\r\n          namespace=\"LogIn\"\r\n        />\r\n      </Form.Group>\r\n\r\n      <Container fluid=\"md\">\r\n        <Row>\r\n          <Col>\r\n            <p className=\"other-options text-left\">\r\n              <Trans i18nKey=\"LogIn:Not yet registered\">\r\n                Not yet <a href=\"/sign-up\">registered?</a>\r\n              </Trans>\r\n            </p>\r\n          </Col>\r\n          <Col>\r\n            <p className=\"other-options text-right\">\r\n              <Trans i18nKey=\"LogIn:Forgot password\">\r\n                Forgot <a href=\"/reset\">password?</a>\r\n              </Trans>\r\n            </p>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Form>\r\n  );\r\n\r\n  // const onAlertClose = () => {\r\n  //   setAlertVisible(false);\r\n  //   authorizedData.hideError();\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        component={UserLogInForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          email: \"\",\r\n          password: \"\",\r\n          rememberMe: \"\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","// import { Redirect } from \"react-router-dom\";\r\n// import Octicon, { Eye, EyeClosed } from \"@primer/octicons-react\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport { Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport * as yup from \"yup\";\r\n// import LanguageSelector from \"../language-selector\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"register user\", namespace: \"SignUp\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { language } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  const { onSignUp } = props.barrelEventHandlers;\r\n\r\n  // console.log(\"SIGN UP PROPS:\", props);\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    firstName: yup.string().required(t(\"First name is required\")),\r\n    lastName: yup.string().required(t(\"Last name is required\")),\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n    password: yup\r\n      .string()\r\n      .required(t(\"No password provided\"))\r\n      .min(8, t(\"Password is too short\"))\r\n      // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n      .matches(\r\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n        t(\"Password is too weak\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  const sendUserRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.language = language;\r\n    data.validateEmail = true;\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    if (sendUserRegistrationRequest(data)) {\r\n      // User registration request was submitted\r\n    }\r\n  };\r\n\r\n  // const languageData = { language: \"en\" };\r\n\r\n  const UserRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Sign Up\")}</h3>\r\n\r\n      {/* First name */}\r\n      <Form.Group controlId=\"validationFormikFirstName\">\r\n        <Form.Label>{t(\"First name\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"Enter first name\")}\r\n            name=\"firstName\"\r\n            value={values.firstName}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.firstName && touched.firstName}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.firstName}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Last name */}\r\n      <Form.Group controlId=\"validationFormikLastName\">\r\n        <Form.Label>{t(\"Last name\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"Enter last name\")}\r\n            name=\"lastName\"\r\n            value={values.lastName}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.lastName && touched.lastName}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.lastName}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"Password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type={passwordVisible ? \"text\" : \"password\"}\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text\r\n              id=\"inputGroupAppend\"\r\n              onClick={togglePassword}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              {passwordVisible ? (\r\n                <VisibilityOff\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\" }}\r\n                />\r\n              ) : (\r\n                <Visibility fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n              )}\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationSubmitButton\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form.Group>\r\n\r\n      <p className=\"other-options text-right\">\r\n        <Trans i18nKey=\"SignUp:Already registered\">\r\n          Already registered <a href=\"/sign-in\">sign in?</a>\r\n        </Trans>\r\n      </p>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={UserRegistrationForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nexport const useStickyState = (defaultValue, key) => {\r\n  const [value, setValue] = useState(() => {\r\n    const stickyValue = window.localStorage.getItem(key);\r\n    return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\r\n  });\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n  }, [key, value]);\r\n  return [value, setValue];\r\n};\r\n","import React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args.data);\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { error, info } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  const { onAlertClose: onClose } = props.barrelEventHandlers;\r\n\r\n  const autoClose = () => {\r\n    window.setTimeout(() => {\r\n      onClose();\r\n    }, 5000);\r\n  };\r\n\r\n  if (error !== null) {\r\n    let { t } = useTranslation(\"Errors\");\r\n    return (\r\n      <Alert variant=\"danger\" onClose={() => onClose()} dismissible>\r\n        {t(error)}\r\n      </Alert>\r\n    );\r\n  } else if (info !== null) {\r\n    let { t } = useTranslation(\"Infos\");\r\n    // autoClose();\r\n    return (\r\n      <Alert variant=\"info\" onClose={() => onClose()} dismissible>\r\n        {t(info)}\r\n      </Alert>\r\n    );\r\n  }\r\n  return <></>;\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"../../translations/i18n\";\r\n// import { withNamespaces } from \"react-i18next\";\r\nimport { Form, Badge } from \"react-bootstrap\";\r\n\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"CurrencyContainer\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { userData } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"LanguageSelector\");\r\n  const changeLanguage = (lng) => {\r\n    i18n.changeLanguage(lng);\r\n  };\r\n  const languages = [\r\n    { id: 1, language: \"Latviešu\", code: \"lv\" },\r\n    { id: 2, language: \"English\", code: \"en\" },\r\n  ];\r\n  const handleLanguageSelect = (e) => {\r\n    changeLanguage(e.target.value);\r\n  };\r\n  const selectLanguage = (language) => {\r\n    changeLanguage(language);\r\n\r\n    if (userData !== null) {\r\n      sendRequest({\r\n        req: \"register user language\",\r\n        data: { email: userData.email, language },\r\n      });\r\n    }\r\n  };\r\n\r\n  if (1) {\r\n    return (\r\n      <>\r\n        <br />\r\n        <Badge\r\n          pill\r\n          variant=\"light\"\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            selectLanguage(\"lv\");\r\n          }}\r\n        >\r\n          lv\r\n        </Badge>{\" \"}\r\n        <Badge\r\n          pill\r\n          variant=\"light\"\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            selectLanguage(\"en\");\r\n          }}\r\n        >\r\n          en\r\n        </Badge>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <Form.Control\r\n        as=\"select\"\r\n        id=\"languageSelector\"\r\n        onChange={handleLanguageSelect}\r\n        custom\r\n      >\r\n        <option key=\"0\" value={props.language}>\r\n          {t(\"Language\")}\r\n        </option>\r\n        {languages.map((el) => (\r\n          <option key={el.id} value={el.code}>\r\n            {el.language}\r\n          </option>\r\n        ))}\r\n      </Form.Control>\r\n    );\r\n  }\r\n};\r\n\r\n// function selectElement(id, valueToSelect) {\r\n//   let element = document.getElementById(id);\r\n//   if (!element) return;\r\n//   element.value = valueToSelect;\r\n// }\r\n\r\n// // catch the event and make changes accordingly\r\n// i18n.on(\"languageChanged\", function (lng) {\r\n//   selectElement(\"languageSelector\", lng);\r\n// });\r\n","/**\r\n * CSS\r\n */\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Main.css\";\r\n\r\n/**\r\n * System imports\r\n */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n// import { useTranslation } from \"react-i18next\";\r\n\r\n/**\r\n * User imports\r\n */\r\nimport i18n from \"../../../translations/i18n\";\r\nimport Summary from \"../summary\";\r\nimport {\r\n  useSocket,\r\n  sendData,\r\n  startSession,\r\n  endSession,\r\n} from \"../../../utils/sockets\";\r\nimport Login from \"../../login\";\r\nimport Logout from \"../../logout\";\r\nimport SignUp from \"../../signup\";\r\nimport PasswordReset from \"../../passwordReset\";\r\nimport errorHandler from \"../../../utils/errorHandler\";\r\nimport responseHandler from \"../../../utils/responseHandler\";\r\nimport requestHandler from \"../../../utils/requestHandler\";\r\nimport { useStickyState } from \"../../../utils/state\";\r\nimport Alert from \"../../alert\";\r\nimport LanguageSelector from \"../../language-selector\";\r\nimport ValidateEmail from \"../../validateEmail\";\r\nimport ChangePassword from \"../../changePassword\";\r\nimport { useEventListener } from \"../../../utils/useEventListener\";\r\n\r\n/**\r\n * Component: Main\r\n */\r\nexport default () => {\r\n  /**\r\n   * Properties\r\n   */\r\n  const userDataFetchInterval = 5000; // Test: 5000 | 30000;\r\n\r\n  /** \r\n   * Hooks\r\n   ============================================================================ */\r\n  const [debug, setDebug] = useState(true);\r\n  const [loggingOut, setLoggingOut] = useState(false);\r\n  // const [timestamp, setTimestamp] = useState(Date.now());\r\n  // const [timestamp, setTimestamp] = useState(Math.floor(Date.now() / 1000));\r\n  // const [tmrUpdateTimestamp, setTmrUpdateTimestamp] = useState(null);\r\n  // const [gotEvent, setGotEvent] = useState(useEventListener());\r\n  // const [startTimestamp, setStartTimestamp] = useState(\r\n  //   Math.floor(Date.now() / 1000)\r\n  // );\r\n  // const [timerActive, setTimerActive] = useState(false);\r\n  const [pageLoading, setPageLoading] = useState(true);\r\n  const [request, setRequest] = useStickyState(null, \"request\");\r\n  const [session, setSession] = useStickyState(uuidv4(), \"session\");\r\n  const [connected, setConnected] = useStickyState(false, \"connected\");\r\n  const [signedIn, setSignedIn] = useStickyState(false, \"signedIn\");\r\n  const [currencyAbbr, setCurrencyAbbr] = useStickyState(\"Z\", \"currencyAbbr\");\r\n  const [currencyRate, setCurrencyRate] = useState(1, \"currencyRate\");\r\n  // const [currencyStatus, setCurrencyStatus] = useState(\"0\", \"currencyStatus\");\r\n  const [currencies, setCurrencies] = useStickyState(null, \"currencies\");\r\n  const [transactions, setTransactions] = useStickyState(null, \"transactions\");\r\n  const [shares, setShares] = useStickyState(null, \"shares\");\r\n  const [accordionView, setAccordionView] = useStickyState(\r\n    \"balance\",\r\n    \"accordionView\"\r\n  );\r\n  const [accordionViewCurrency, setAccordionViewCurrency] = useStickyState(\r\n    null,\r\n    \"accordionViewCurrency\"\r\n  );\r\n  const [countCurrencies, setCountCurrencies] = useStickyState(\r\n    null,\r\n    \"countCurrencies\"\r\n  );\r\n  const [countTransactions, setCountTransactions] = useStickyState(\r\n    null,\r\n    \"countTransactions\"\r\n  );\r\n  const [countShares, setCountShares] = useStickyState(null, \"countShares\");\r\n  const [activePageCurrencies, setActivePageCurrencies] = useStickyState(\r\n    1,\r\n    \"activePageCurrencies\"\r\n  );\r\n  const [activePageTransactions, setActivePageTransactions] = useStickyState(\r\n    1,\r\n    \"activePageTransactions\"\r\n  );\r\n  const [activePageShares, setActivePageShares] = useStickyState(\r\n    1,\r\n    \"activePageShares\"\r\n  );\r\n  const [currenciesPerPage, setCurrenciesPerPage] = useStickyState(\r\n    5,\r\n    \"currenciesPerPage\"\r\n  );\r\n  const [transactionsPerPage, setTransactionsPerPage] = useStickyState(\r\n    5,\r\n    \"transactionsPerPage\"\r\n  );\r\n  const [sharesPerPage, setSharesPerPage] = useStickyState(5, \"sharesPerPage\");\r\n  const [userData, setUserData] = useStickyState(null, \"userData\");\r\n  const [uid, setUID] = useStickyState(null, \"uid\");\r\n  const [accountNumber, setAccountNumber] = useStickyState(\r\n    null,\r\n    \"accountNumber\"\r\n  );\r\n  const [accountType, setAccountType] = useStickyState(null, \"accountType\");\r\n  const [userBusinesses, setUserBusinesses] = useStickyState(\r\n    null,\r\n    \"userBusinesses\"\r\n  );\r\n  const [activeBusiness, setActiveBusiness] = useStickyState(\r\n    null,\r\n    \"activeBusiness\"\r\n  );\r\n\r\n  const [businessPurposes, setBusinessPurposes] = useStickyState(\r\n    null,\r\n    \"businessPurposes\"\r\n  );\r\n\r\n  const [activeBusinesPurpose, setActiveBusinesPurpose] = useStickyState(\r\n    null,\r\n    \"activeBusinesPurpose\"\r\n  );\r\n\r\n  const [purposeShareholders, setPurposeShareholders] = useStickyState(\r\n    null,\r\n    \"purposeShareholders\"\r\n  );\r\n\r\n  // const [businessLoaded, setBusinessLoaded] = useState(null);\r\n  // const [redirect, setRedirect] = useState(false);\r\n  const [redirectTo, setRedirectTo] = useState(null);\r\n  const [lastInsertId, setLastInsertId] = useState(null);\r\n  // const [responseData, setResponseData] = useState(null);\r\n  const [validateTokenEmail, setValidateTokenEmail] = useState(null);\r\n  const [validateTokenPasswordReset, setValidateTokenPasswordReset] = useState(\r\n    null\r\n  );\r\n\r\n  // const [\r\n  //   passwordResetTokenValidated,\r\n  //   setPasswordResetTokenValidated,\r\n  // ] = useStickyState(\"none\", \"passwordResetTokenValidated\");\r\n\r\n  const [\r\n    passwordResetTokenValidated,\r\n    setPasswordResetTokenValidated,\r\n  ] = useState(null);\r\n  const [passwordResetTokenEmail, setPasswordResetTokenEmail] = useState(null);\r\n\r\n  const [tmrConnected] = useState(null);\r\n  const [language, setLanguage] = useStickyState(\r\n    i18n.options.fallbackLng[0],\r\n    \"language\"\r\n  ); //\r\n  const [transferType, setTransferType] = useStickyState(\r\n    \"#u2s\",\r\n    \"transferType\"\r\n  );\r\n  // const [transferSuccess, setTransferSuccess] = useStickyState(\r\n  //   false,\r\n  //   \"transferSuccess\"\r\n  // );\r\n  const [accountPhotoPath, setAccountPhotoPath] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n  const [info, setInfo] = useState(null);\r\n  // const [alertVisible, setAlertVisible] = useState(false);\r\n\r\n  // const gotEvent = useEventListener();\r\n  // console.log(gotEvent);\r\n\r\n  /**\r\n   * Barrel: Getters\r\n   */\r\n  const barrelGetters = {\r\n    debug,\r\n    loggingOut,\r\n    // timestamp,\r\n    // startTimestamp,\r\n    pageLoading,\r\n    request,\r\n    session,\r\n    currencies: JSON.parse(currencies),\r\n    transactions: JSON.parse(transactions),\r\n    shares: JSON.parse(shares),\r\n    accordionView,\r\n    accordionViewCurrency,\r\n    countCurrencies,\r\n    countTransactions,\r\n    countShares,\r\n    activePageCurrencies,\r\n    activePageTransactions,\r\n    activePageShares,\r\n    currenciesPerPage,\r\n    transactionsPerPage,\r\n    sharesPerPage,\r\n    userData: JSON.parse(userData),\r\n    // redirect,\r\n    redirectTo,\r\n    lastInsertId,\r\n    connected,\r\n    signedIn,\r\n    currencyAbbr,\r\n    currencyRate,\r\n    // currencyStatus,\r\n    accountNumber,\r\n    accountType,\r\n    uid,\r\n    userBusinesses: JSON.parse(userBusinesses),\r\n    activeBusiness,\r\n    businessPurposes: JSON.parse(businessPurposes),\r\n    activeBusinesPurpose,\r\n    purposeShareholders: JSON.parse(purposeShareholders),\r\n    // businessLoaded,\r\n    tmrConnected,\r\n    validateTokenEmail,\r\n    validateTokenPasswordReset,\r\n    passwordResetTokenValidated,\r\n    passwordResetTokenEmail,\r\n    language,\r\n    transferType,\r\n    // transferSuccess,\r\n    accountPhotoPath,\r\n    error,\r\n    info,\r\n    // alertVisible,\r\n  };\r\n\r\n  /**\r\n   * Barrel: Setters\r\n   */\r\n  const barrelSetters = {\r\n    setDebug,\r\n    setLoggingOut,\r\n    // setTimestamp,\r\n    // setStartTimestamp,\r\n    setPageLoading,\r\n    setRequest,\r\n    setSession,\r\n    setCurrencies,\r\n    setTransactions,\r\n    setShares,\r\n    setAccordionView,\r\n    setAccordionViewCurrency,\r\n    setCountCurrencies,\r\n    setCountTransactions,\r\n    setCountShares,\r\n    setActivePageCurrencies,\r\n    setActivePageTransactions,\r\n    setActivePageShares,\r\n    setCurrenciesPerPage,\r\n    setTransactionsPerPage,\r\n    setSharesPerPage,\r\n    setConnected,\r\n    setLanguage,\r\n    setUserData,\r\n    // sendRequest,\r\n    setSignedIn,\r\n    setCurrencyAbbr,\r\n    setCurrencyRate,\r\n    // setCurrencyStatus,\r\n    setRedirectTo,\r\n    setLastInsertId,\r\n    setAccountNumber,\r\n    setAccountType,\r\n    setUID,\r\n    setUserBusinesses,\r\n    setActiveBusiness,\r\n    setBusinessPurposes,\r\n    setActiveBusinesPurpose,\r\n    setPurposeShareholders,\r\n    // setBusinessLoaded,\r\n    setAccountPhotoPath,\r\n    setValidateTokenEmail,\r\n    setValidateTokenPasswordReset,\r\n    setPasswordResetTokenValidated,\r\n    setPasswordResetTokenEmail,\r\n    // setTransferSuccess,\r\n    // setRedirect,\r\n    // showMessage,\r\n  };\r\n\r\n  /** \r\n   * Custom hooks\r\n   ============================================================================ */\r\n  // const { t } = useTranslation(\"Errors\");\r\n\r\n  useSocket((data) => {\r\n    // console.log(\"USE SOCKET:\", data);\r\n\r\n    // setResponseData(data);\r\n\r\n    processResponse({\r\n      args: data,\r\n      barrels: barrels,\r\n    });\r\n  });\r\n\r\n  /** \r\n   * Functions\r\n   ============================================================================ */\r\n\r\n  /**\r\n   * Sends requests to the server\r\n   * @param {string} request Request name\r\n   * @param {object} data Request data\r\n   */\r\n  const sendRequest = ({ req, data = null }) => {\r\n    if (processRequest({ req, data, session, uid: \"STA\", barrels })) {\r\n      // request processed successfully\r\n      return true;\r\n    } else {\r\n      console.log(\"THIS SHOULD NOT BE REACHED\");\r\n      return sendData({ req, uid: \"STA\", session, data }, debug);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Processes user request\r\n   * @param {*} param0\r\n   */\r\n  const processRequest = ({ req, data, session, uid, barrels }) => {\r\n    // showMessage(\"PROCESSING_REQUEST\", \"info\");\r\n\r\n    setRequest(req);\r\n    return requestHandler({\r\n      req,\r\n      data,\r\n      session,\r\n      uid,\r\n      barrels,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Processes server response\r\n   * @param {*} param0\r\n   */\r\n  const processResponse = ({ args, barrels }) => {\r\n    // console.log(\"PROCESS RESPONSE ARGS:\", args);\r\n\r\n    /**\r\n     * Choose a handler depending on response status:\r\n     * Error or other (success | continue | finished | pending etc.)\r\n     */\r\n    return args.status === \"error\"\r\n      ? errorHandler({\r\n          args: args,\r\n          uid: uid,\r\n          barrels: barrels,\r\n        })\r\n      : responseHandler({\r\n          args: args,\r\n          uid: uid,\r\n          barrels: barrels,\r\n        });\r\n  };\r\n\r\n  /**\r\n   * Shows a messgae (error or info)\r\n   * @param {string} msg Messgae text\r\n   * @param {string} type Message type (\"error\" | \"info\")\r\n   */\r\n  const showMessage = (msg, type = \"error\") => {\r\n    // if (type !== \"error\") {\r\n    //   hideMessage();\r\n    // }\r\n    type === \"error\" ? setError(msg) : setInfo(msg);\r\n  };\r\n\r\n  /**\r\n   * Hides the message\r\n   */\r\n  const hideMessage = () => {\r\n    setError(null);\r\n    setInfo(null);\r\n  };\r\n\r\n  /**\r\n   * Changes the website language\r\n   */\r\n  const changeLanguage = (lng) => {\r\n    i18n.changeLanguage(lng);\r\n    setLanguage(lng);\r\n  };\r\n\r\n  /**\r\n   * Format number\r\n   * @param {number} number\r\n   */\r\n  const format = (number, currency = currencyAbbr) => {\r\n    return (\r\n      new Intl.NumberFormat(language, {\r\n        notation: \"standard\",\r\n        minimumFractionDigits: 2,\r\n      }).format(number * currencyRate) +\r\n      \" \" +\r\n      currency\r\n    );\r\n  };\r\n  //\r\n\r\n  /**\r\n   * Format per cent\r\n   * @param {number} number\r\n   */\r\n  const formatPerCent = (number) => {\r\n    return (\r\n      new Intl.NumberFormat(language, {\r\n        notation: \"standard\",\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 2,\r\n      }).format(number) + \"%\"\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Format per cent\r\n   * @param {number} number\r\n   */\r\n  const formatExchangeRate = (number) => {\r\n    return new Intl.NumberFormat(language, {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 5,\r\n      maximumFractionDigits: 5,\r\n    }).format(number);\r\n  };\r\n\r\n  const parseLocaleNumber = (stringNumber, locale) => {\r\n    let num = 123456.789,\r\n      fmt_local = new Intl.NumberFormat(locale, {\r\n        style: \"currency\",\r\n        currency: \"USD\",\r\n      }),\r\n      parts_local = fmt_local.formatToParts(num),\r\n      group = \"\",\r\n      decimal = \"\",\r\n      currency = \"\";\r\n\r\n    // separators\r\n    parts_local.forEach(function (i) {\r\n      switch (i.type) {\r\n        case \"group\":\r\n          group = i.value;\r\n          break;\r\n        case \"decimal\":\r\n          decimal = i.value;\r\n          break;\r\n        case \"currency\":\r\n          currency = i.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    return parseFloat(\r\n      stringNumber\r\n        .replace(new RegExp(\"\\\\\" + group, \"g\"), \"\")\r\n        .replace(new RegExp(\"\\\\\" + decimal), \".\")\r\n        .replace(new RegExp(\"\\\\\" + currency, \"g\"), \"\")\r\n    );\r\n  };\r\n\r\n  const formatDate = (\r\n    ts,\r\n    options = {\r\n      month: \"long\",\r\n      day: \"numeric\",\r\n      year: \"numeric\",\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n    }\r\n  ) => {\r\n    // const event = new Date(date);\r\n\r\n    // const options = {\r\n    //   weekday: \"long\",\r\n    //   year: \"numeric\",\r\n    //   month: \"long\",\r\n    //   day: \"numeric\",\r\n    // };\r\n\r\n    // return event.toLocaleDateString(language, options);\r\n\r\n    // const defaults = {\r\n    //   month: \"long\",\r\n    //   day: \"numeric\",\r\n    //   year: \"numeric\",\r\n    //   hour: \"numeric\",\r\n    //   minute: \"numeric\",\r\n    // };\r\n    // const options = Object.assign(defaults, args);\r\n    const date = new Date(ts);\r\n    return new Intl.DateTimeFormat(language, options).format(date);\r\n  };\r\n\r\n  /**\r\n   * Retrieves an URL parameter\r\n   */\r\n  const getUrlParam = (param) => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    return urlParams.get(param);\r\n  };\r\n\r\n  const sendEmailValidationRequest = ({ token, email }) => {\r\n    // console.log(\"sendEmailValidationRequest:\", token, email);\r\n\r\n    sendRequest({\r\n      req: \"validate email token\",\r\n      data: { token, email },\r\n    });\r\n  };\r\n\r\n  const sendPasswordResetRequest = ({ token, email }) => {\r\n    // console.log(\"sendEmailValidationRequest:\", token, email);\r\n    setPasswordResetTokenEmail(email);\r\n    sendRequest({\r\n      req: \"validate password reset token\",\r\n      data: { token, email },\r\n    });\r\n  };\r\n\r\n  const getCurrencies = (newPage) => {\r\n    setCurrencies(null);\r\n    sendRequest({\r\n      req: \"get currencies\",\r\n      data: { page: newPage, limit: currenciesPerPage },\r\n    });\r\n    setActivePageCurrencies(newPage);\r\n  };\r\n\r\n  const getTransactions = (newPage) => {\r\n    setTransactions(null);\r\n    sendRequest({\r\n      req: \"get transactions\",\r\n      data: { page: newPage, limit: transactionsPerPage, uid: accountNumber },\r\n    });\r\n    setActivePageTransactions(newPage);\r\n  };\r\n\r\n  const getShares = (newPage) => {\r\n    setShares(null);\r\n    sendRequest({\r\n      req: \"get shares\",\r\n      data: { page: newPage, limit: sharesPerPage, uid: accountNumber },\r\n    });\r\n    setActivePageShares(newPage);\r\n  };\r\n\r\n  const getBusinesses = () => {\r\n    setUserBusinesses(null);\r\n    sendRequest({\r\n      req: \"get user businesses\",\r\n      data: { uid: accountNumber },\r\n    });\r\n  };\r\n\r\n  const getBusinessPurposes = (business_id, selected = null) => {\r\n    // console.log(\"BUSINESS PURPOSES FOR ID \" + business_id, businessPurposes);\r\n\r\n    if (selected !== null) {\r\n      setActiveBusiness(selected);\r\n      setActiveBusinesPurpose(null);\r\n    }\r\n    setBusinessPurposes(null);\r\n    return sendRequest({\r\n      req: \"get business purposes\",\r\n      data: { business_id: business_id },\r\n    });\r\n  };\r\n\r\n  const getPurposeShareholders = (purpose_id, selected = null) => {\r\n    if (selected !== null) {\r\n      // setActiveBusinesPurpose(selected);\r\n      setActiveBusinesPurpose(purpose_id);\r\n    }\r\n    setPurposeShareholders(null);\r\n    return sendRequest({\r\n      req: \"get purpose shareholders\",\r\n      data: { purpose_id: purpose_id },\r\n    });\r\n  };\r\n\r\n  const getAccountData = () => {\r\n    sendRequest({\r\n      req: \"get account data\",\r\n      data: { uid: accountNumber },\r\n    });\r\n  };\r\n\r\n  const getTransactionById = (id) => {\r\n    sendRequest({\r\n      req: \"get transaction by id\",\r\n      data: { id: id },\r\n    });\r\n  };\r\n\r\n  const getContainerClass = (signedIn) => {\r\n    return {\r\n      wrapperClass: signedIn\r\n        ? \"auth-wrapper auth-wrapper-summary\"\r\n        : \"auth-wrapper\",\r\n      innerClass: signedIn\r\n        ? \"auth-inner auth-inner-summary\"\r\n        : \"auth-inner autoWidth\",\r\n    };\r\n  };\r\n\r\n  const getRedirect = () => {\r\n    // if (redirectTo !== null) {\r\n    //   let link = redirectTo;\r\n\r\n    //   r = <Redirect push to={link} />;\r\n    // }\r\n    return redirectTo === null ? \"\" : <Redirect push to={redirectTo} />;\r\n  };\r\n\r\n  // const updateTimestamp = () => {\r\n  //   let tmr = setInterval(() => {\r\n  //     // console.log(timestamp);\r\n\r\n  //     setTimestamp(Math.floor(Date.now() / 1000));\r\n  //   }, 1000);\r\n  //   setTmrUpdateTimestamp(tmr);\r\n  // };\r\n\r\n  // const clearTimestamp = () => {\r\n  //   clearInterval(tmrUpdateTimestamp);\r\n  // };\r\n\r\n  const getReviser = () => {\r\n    return \"STA\";\r\n  };\r\n\r\n  const getWorkplace = () => {\r\n    return \"LAPSTA\";\r\n  };\r\n\r\n  /**\r\n   * Barrel: Functions\r\n   */\r\n  const barrelFunctions = {\r\n    sendRequest,\r\n    // processResponse,\r\n    showMessage,\r\n    hideMessage,\r\n    changeLanguage,\r\n    format,\r\n    formatPerCent,\r\n    formatExchangeRate,\r\n    formatDate,\r\n    sendEmailValidationRequest,\r\n    getUrlParam,\r\n    getAccountData,\r\n    getTransactionById,\r\n    getBusinesses,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n    getCurrencies,\r\n    getTransactions,\r\n    getShares,\r\n    parseLocaleNumber,\r\n    getReviser,\r\n    getWorkplace,\r\n    // updateTimestamp,\r\n  };\r\n\r\n  /** \r\n   * Event handlers\r\n   ============================================================================ */\r\n\r\n  /**\r\n   * On language change\r\n   */\r\n  i18n.on(\"languageChanged\", function (lng) {\r\n    setLanguage(lng);\r\n  });\r\n\r\n  /**\r\n   * On redirect\r\n   * @param {string} to Redirect path (e.g. \"/sign-in\")\r\n   */\r\n  const onRedirect = (to) => {\r\n    setRedirectTo(to);\r\n  };\r\n\r\n  // /**\r\n  //  * On login\r\n  //  * @param {object} data Login data\r\n  //  */\r\n  // const onLogin = (data) => {\r\n  //   setUserData(JSON.stringify(data));\r\n  //   sendRequest({ req: \"sign in user\", data: data });\r\n  //   // setAuthorizationStep(1); // authorized session request pending\r\n  // };\r\n\r\n  /**\r\n   * On signup\r\n   * @param {object} data Signup data\r\n   */\r\n  const onSignUp = (data) => {\r\n    // console.log(\"SIGN UP (data):\", data);\r\n    /// setUserData(JSON.stringify(data));\r\n    return sendRequest({ req: \"register user\", data });\r\n  };\r\n\r\n  const onSessionTimeout = () => {\r\n    console.log(\"Session timed out...\");\r\n    // endSession(\"bye\", session);\r\n    setLoggingOut(true);\r\n    setRedirectTo(\"/sign-out\");\r\n    // Logout();\r\n  };\r\n\r\n  /**\r\n   * On account registration\r\n   * @param {object} data The account registration data\r\n   */\r\n  // const onAccountRegistration = (data) => {\r\n  //   // console.log(\"ACCOUNT REGISTRATION (data):\", data);\r\n  //   // setAccountNumber(data.personalID);\r\n  //   return sendRequest({ req: \"register account\", data });\r\n  // };\r\n\r\n  /**\r\n   * On transfer type change\r\n   * @param {string} id The transfer type id (\"U2S\", \"U2U\", \"U2B\" etc.)\r\n   */\r\n  const onTransferTypeChange = (id) => {\r\n    // console.log(\"setTransferType: \" + id);\r\n    setTransferType(id);\r\n  };\r\n\r\n  const onTransferSuccess = () => {\r\n    // console.log(\"ON TRANSFER SUCCESS\", barrels);\r\n  };\r\n\r\n  /**\r\n   * On transfer\r\n   * @param {object} data Transfer data\r\n   */\r\n  const onTransfer = (data) => {\r\n    // console.log(\"ON TRANSFER (data):\", data);\r\n    // sendRequest({ req: \"register account\", data: data });\r\n    sendRequest(data);\r\n  };\r\n\r\n  const onBusinessRegistration = (data) => {\r\n    // console.log(\"ON BUSINESS REGISTRATION (data):\", data);\r\n    // sendRequest({ req: \"register account\", data: data });\r\n    sendRequest(data);\r\n  };\r\n\r\n  const onPurposeRegistration = (data) => {\r\n    // console.log(\"ON PURPOSE REGISTRATION (data):\", data);\r\n    // sendRequest({ req: \"register account\", data: data });\r\n    sendRequest(data);\r\n    // getBusinesses();\r\n  };\r\n\r\n  // const onShareholderRegistration = (data) => {\r\n  //   console.log(\"ON SHAREHOLDER REGISTRATION (data):\", data);\r\n  //   // sendRequest({ req: \"register account\", data: data });\r\n  //   sendRequest(data);\r\n  //   // getBusinesses();\r\n  // };\r\n\r\n  /**\r\n   * On logout\r\n   */\r\n  const onLogOut = () => {\r\n    // setSession(null);\r\n    endSession(\"bye\", session);\r\n    setSignedIn(false);\r\n    // setTimerActive(false);\r\n\r\n    setCurrencies(null);\r\n    setTransactions(null);\r\n    setShares(null);\r\n    setAccordionView(\"balance\");\r\n    setAccordionViewCurrency(null);\r\n    setAccountNumber(null);\r\n    setAccountType(null);\r\n    setTransferType(\"#u2s\");\r\n    setUserData(null);\r\n    setUserBusinesses(null);\r\n    setActiveBusiness(null);\r\n    setBusinessPurposes(null);\r\n    setActiveBusinesPurpose(null);\r\n    setPurposeShareholders(null);\r\n    setAccountPhotoPath(\"\");\r\n    setPasswordResetTokenValidated(null);\r\n    setPasswordResetTokenEmail(null);\r\n    // setSharesPerPage(1);\r\n    setError(null);\r\n    setInfo(null);\r\n    // setRedirectTo(\"/sign-in\"); // TODO: In production might disable that\r\n    // window.localStorage.clear(); // TODO: Remove in production remove\r\n  };\r\n\r\n  const onAlertClose = () => {\r\n    // setAlertVisible(false);\r\n    hideMessage();\r\n  };\r\n\r\n  /**\r\n   * Barrel: Event handlers\r\n   */\r\n  const barrelEventHandlers = {\r\n    onRedirect,\r\n    onSignUp,\r\n    onSessionTimeout,\r\n    // onAccountRegistration,\r\n    onTransferTypeChange,\r\n    onTransferSuccess,\r\n    onTransfer,\r\n    onBusinessRegistration,\r\n    onPurposeRegistration,\r\n    // onShareholderRegistration,\r\n    onLogOut,\r\n    onAlertClose,\r\n  };\r\n\r\n  /** \r\n   * Effect hooks\r\n   ============================================================================ */\r\n\r\n  useEffect(() => {\r\n    // console.log(\"MOUNTED\");\r\n\r\n    /**\r\n     * Clear local storage (URL param ?reset)\r\n     */\r\n    if (getUrlParam(\"reset\") !== null) {\r\n      window.localStorage.clear();\r\n      console.log(\"Local storage cleared\");\r\n    }\r\n\r\n    // updateTimestamp();\r\n\r\n    return () => {\r\n      // console.log(\"UNMOUNTED\");\r\n    };\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n   * On session ID change\r\n   */\r\n  useEffect(() => {\r\n    if (session === null) return;\r\n    startSession(\"hello\", session, debug);\r\n    // eslint-disable-next-line\r\n  }, [session]);\r\n\r\n  useEffect(() => {\r\n    if (connected === false) {\r\n      // anonymize session\r\n      setSession(uuidv4());\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [connected]);\r\n\r\n  /**\r\n   * On signed in status change\r\n   */\r\n  useEffect(() => {\r\n    if (!signedIn) return;\r\n    // if (signedIn) {\r\n    //   updateTimestamp();\r\n    // } else {\r\n    //   clearTimestamp();\r\n    // }\r\n    // updateTimestamp();\r\n    // setTimerActive(true);\r\n    // eslint-disable-next-line\r\n  }, [signedIn]);\r\n\r\n  // useEffect(() => {\r\n  //   if (timerActive) {\r\n  //     console.log(\"SET INTERVAL\");\r\n  //     updateTimestamp();\r\n  //   } else {\r\n  //     console.log(\"CLEAR INTERVAL\");\r\n\r\n  //     clearInterval(tmrUpdateTimestamp);\r\n  //   }\r\n  //   // eslint-disable-next-line\r\n  // }, [timerActive]);\r\n\r\n  /**\r\n   * On account number change\r\n   */\r\n  useEffect(() => {\r\n    if (accountNumber === null) return;\r\n\r\n    // eslint-disable-next-line\r\n  }, [accountNumber]);\r\n\r\n  /**\r\n   * On email validation token\r\n   */\r\n  useEffect(() => {\r\n    if (validateTokenEmail === null) return;\r\n\r\n    sendEmailValidationRequest(JSON.parse(validateTokenEmail));\r\n\r\n    // eslint-disable-next-line\r\n  }, [validateTokenEmail]);\r\n\r\n  // useEffect(() => {\r\n  //   // console.log(\"EVENT\");\r\n  //   // eslint-disable-next-line\r\n  // }, [useEventListener()]);\r\n\r\n  /**\r\n   * On email validation token\r\n   */\r\n  useEffect(() => {\r\n    if (passwordResetTokenValidated === null) return;\r\n\r\n    // console.log(\"Validate token:\", passwordResetTokenValidated);\r\n\r\n    // sendEmailValidationRequest(JSON.parse(validateTokenEmail));\r\n    onRedirect(\"/password\");\r\n\r\n    // eslint-disable-next-line\r\n  }, [passwordResetTokenValidated]);\r\n\r\n  /**\r\n   * On password reset validation token\r\n   */\r\n  useEffect(() => {\r\n    if (validateTokenPasswordReset === null) return;\r\n\r\n    // console.log(\"Validate password reset token:\", validateTokenPasswordReset);\r\n\r\n    sendPasswordResetRequest(JSON.parse(validateTokenPasswordReset));\r\n\r\n    // eslint-disable-next-line\r\n  }, [validateTokenPasswordReset]);\r\n\r\n  const { wrapperClass, innerClass } = getContainerClass(signedIn);\r\n\r\n  /**\r\n   * Barrel of barrels\r\n   */\r\n  const barrels = {\r\n    barrelGetters,\r\n    barrelSetters,\r\n    barrelFunctions,\r\n    barrelEventHandlers,\r\n  };\r\n\r\n  const appClass = signedIn ? \"App\" : \"App bg\";\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        {getRedirect()}\r\n        <div className={appClass} style={{}}>\r\n          {/* Footer */}\r\n\r\n          {/* Layout wrapper */}\r\n\r\n          <div className={wrapperClass} style={{}}>\r\n            <div className={innerClass}>\r\n              <div\r\n                style={\r\n                  {\r\n                    // position: \"absolute\",\r\n                    // display: \"inline\",\r\n                    // zIndex: \"1000\",\r\n                  }\r\n                }\r\n              >\r\n                <Alert data={barrels} />\r\n              </div>\r\n\r\n              <Switch>\r\n                <Route\r\n                  exact\r\n                  path=\"/\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                    // return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-in\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return Login(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-up\"\r\n                  component={() => {\r\n                    return SignUp(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/validate-email\"\r\n                  component={() => {\r\n                    return ValidateEmail(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/password\"\r\n                  component={() => {\r\n                    return ChangePassword(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/profile\"\r\n                  component={() => {\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/currency\"\r\n                  component={() => {\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-out\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return Logout(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/reset\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return PasswordReset(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/account-registration\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/business-registration\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/my-business\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/balance\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/transfer\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"transfer\");\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/summary\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    // return signedIn ? Summary(barrels) : Login(barrels);\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n              </Switch>\r\n              <div style={{ textAlign: \"center\" }}>\r\n                <LanguageSelector {...barrels} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n","import { sendData, startSession } from \"../utils/sockets\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n  const { req, data, session, uid, barrels } = props;\r\n\r\n  // console.log(\"RESPONSE HANDLER: \", props, barrels);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const { accountNumber, userBusinesses, debug } = barrels.barrelGetters;\r\n  const {\r\n    setUserData,\r\n    setUID,\r\n    setAccountNumber,\r\n    setUserBusinesses,\r\n  } = barrels.barrelSetters;\r\n  const { sendRequest, showMessage } = barrels.barrelFunctions;\r\n  //   const {} = barrels.barrelEventHandlers;\r\n\r\n  let requestFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onRequest = (req, callback) => {\r\n    if (requestFound) return;\r\n    if (req === props.req || req === \"default\") {\r\n      callback();\r\n      requestFound = true;\r\n    }\r\n  };\r\n\r\n  /** \r\n   * Request handlers\r\n  ============================================================================ */\r\n\r\n  // /**\r\n  //  * Start session (success)\r\n  //  */\r\n  // onRequest(\"start session\", (o) => {\r\n  //   // const { session } = onabort;\r\n  //   startSession(\"hello\", session);\r\n  // });\r\n\r\n  // onRequest(\"upload file\", (o) => {\r\n  //   // const { req, data } = o;\r\n  //   sendData({ req, data, uid, session });\r\n  // });\r\n\r\n  // onRequest(\"get user businesses\", (o) => {\r\n  //   // const { req } = o;\r\n  //   sendData({\r\n  //     req: req,\r\n  //     data: { uid: accountNumber },\r\n  //     uid: uid,\r\n  //     session: session,\r\n  //   });\r\n  // });\r\n\r\n  onRequest(\"sign in user\", () => {\r\n    // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n    // console.log(\"onRequest:\", data);\r\n\r\n    setUserData(JSON.stringify(data));\r\n    sendData({ req, data, uid, session }, debug);\r\n  });\r\n\r\n  onRequest(\"register account\", () => {\r\n    // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n    setUID(data.personalID);\r\n    setAccountNumber(data.personalID);\r\n    sendData({ req, data, uid, session }, debug);\r\n  });\r\n\r\n  // onRequest(\"get user businesses\", () => {\r\n  //   // setUserBusinesses(null);\r\n  //   if (userBusinesses === null) {\r\n  //     sendData({ req, data, uid, session });\r\n  //   } else {\r\n  //     //\r\n  //   }\r\n  // });\r\n\r\n  // onRequest(\"register user\", () => {\r\n  //   // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n  //   // setUserData(JSON.stringify(data));\r\n  //   sendData({ req, data, uid, session });\r\n  // });\r\n\r\n  // onRequest(\"register shareholder\", () => {\r\n  //   // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n  //   // setUserData(JSON.stringify(data));\r\n  //   sendData({ req, data, uid, session });\r\n  // });\r\n\r\n  onRequest(\"default\", () => {\r\n    sendData({ req, data, uid, session }, debug);\r\n\r\n    return true;\r\n  });\r\n\r\n  // onRequest(\"unknown\", () => {\r\n  //   showMessage(`UNKNOWN REQUEST ${req}`, \"info\");\r\n\r\n  //   return true;\r\n  // });\r\n\r\n  return requestFound;\r\n};\r\n","// import { useTranslation } from \"react-i18next\";\r\n\r\nexport default ({ args, barrels }) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {} = barrels.barrelGetters;\r\n  const { setRequest, setUID, setAccountNumber } = barrels.barrelSetters;\r\n  const { showMessage } = barrels.barrelFunctions;\r\n  // const {} = barrels.barrelEventHandlers;\r\n\r\n  //   const { t } = useTranslation(\"Errors\");\r\n  const { req, error, context } = props;\r\n  console.log(`ERROR: ${req}`, error, context, props, barrels);\r\n  // const { showMessage } = barrels.barrelFunctions;\r\n\r\n  let errorFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onError = (data, callback) => {\r\n    if (errorFound) return;\r\n    const [res, status] = data;\r\n    if ((res === req && status === error.code) || res === \"unknown\") {\r\n      callback();\r\n      setRequest(null);\r\n      errorFound = true;\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /** \r\n   * Response handlers\r\n  ============================================================================ */\r\n\r\n  /**\r\n   * Transfer errors\r\n   */\r\n  onError([\"transfer U2S\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"transfer U2U\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"transfer U2B\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_USER_REGISTRATION\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"validate email token\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"TOKEN_VALIDATION_FAILED\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"validate password reset token\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"TOKEN_VALIDATION_FAILED\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"reset password\", \"NO_ROWS_CHANGED\"], () => {\r\n    // showMessage(\"REQUEST_ALREADY_SENT\", \"info\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user language\", \"NO_ROWS_CHANGED\"], () => {\r\n    // User selected the same language again - that's ok\r\n    return true;\r\n  });\r\n\r\n  onError([\"register account\", \"ER_DUP_ENTRY\"], () => {\r\n    setUID(null);\r\n    setAccountNumber(null);\r\n    showMessage(\"DUPLICATE_ACCOUNT_REGISTRATION\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError(\r\n    [\"register account\", \"ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO\"],\r\n    () => {\r\n      setUID(null);\r\n      setAccountNumber(null);\r\n      showMessage(\"DUPLICATE_ACCOUNT_REGISTRATION\", \"error\");\r\n      return true;\r\n    }\r\n  );\r\n\r\n  onError([\"register shareholder\", \"ER_NO_REFERENCED_ROW_2\"], () => {\r\n    showMessage(\"USER_NOT_FOUND\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"unknown\"], () => {\r\n    showMessage(error.code, \"error\");\r\n    return true;\r\n  });\r\n\r\n  // if (req === \"transfer U2S\") {\r\n  //   if (error.code === \"NO_ROWS_CHANGED\") {\r\n  //     // transfer error\r\n  //     showMessage(\"INVALID_TRANSFER\", \"error\");\r\n  //   }\r\n  // } else {\r\n  //   showMessage(error.code, \"error\");\r\n  // }\r\n\r\n  return false;\r\n};\r\n","export default ({ args, barrels }) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"RESPONSE HANDLER: \", props, barrels);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    debug,\r\n    currencies,\r\n    transactions,\r\n    shares,\r\n    transactionsPerPage,\r\n    sharesPerPage,\r\n    userData,\r\n    accountNumber,\r\n    uid,\r\n    userBusinesses,\r\n    businessPurposes,\r\n    purposeShareholders,\r\n    activeBusinesPurpose,\r\n    lastInsertId,\r\n  } = barrels.barrelGetters;\r\n  const {\r\n    setRequest,\r\n    setSession,\r\n    setCurrencies,\r\n    setTransactions,\r\n    setShares,\r\n    setCountCurrencies,\r\n    setCountTransactions,\r\n    setCountShares,\r\n    setConnected,\r\n    // setLanguage,\r\n    setUserData,\r\n    setSignedIn,\r\n    setCurrencyAbbr,\r\n    setCurrencyRate,\r\n    // setCurrencyStatus,\r\n    // setTransferSuccess,\r\n    setRedirectTo,\r\n    setLastInsertId,\r\n    setAccountNumber,\r\n    setUID,\r\n    setUserBusinesses,\r\n    setBusinessPurposes,\r\n    setPurposeShareholders,\r\n    // setBusinessLoaded,\r\n    setAccountPhotoPath,\r\n    setPasswordResetTokenValidated,\r\n    setPasswordResetTokenEmail,\r\n    // setRedirect,\r\n  } = barrels.barrelSetters;\r\n  const {\r\n    sendRequest,\r\n    // processResponse,\r\n    getBusinesses,\r\n    getAccountData,\r\n    getTransactionById,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n    showMessage,\r\n    changeLanguage,\r\n    updateTimestamp,\r\n    // hideMessage,\r\n  } = barrels.barrelFunctions;\r\n  const {\r\n    onTransferSuccess,\r\n    onRedirect,\r\n    onLogOut,\r\n  } = barrels.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   ============================================================================ */\r\n  const { req, status } = props;\r\n  // const { userData, accountNumber } = barrels.barrelGetters;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  // console.log(\"USER DATA PARSED:\", userDataParsed);\r\n\r\n  /**\r\n   * Log response\r\n   */\r\n  if (debug) console.log(`response: ${req}`, props, barrels);\r\n\r\n  let responseFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onResponse = (data, callback) => {\r\n    if (responseFound) return;\r\n    const [res, status] = data;\r\n    if ((res === props.req && status === props.status) || res === \"unknown\") {\r\n      if (callback()) {\r\n        setRequest(null);\r\n      }\r\n      responseFound = true;\r\n      // return true;\r\n    }\r\n    // return false;\r\n  };\r\n\r\n  /** \r\n   * Response handlers\r\n  ============================================================================ */\r\n\r\n  /**\r\n   * Start session (success)\r\n   */\r\n  onResponse([\"start session\", \"success\"], () => {\r\n    setConnected(true);\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * End session (success)\r\n   */\r\n  onResponse([\"end session\", \"success\"], () => {\r\n    console.log(\"ON END SESSION\");\r\n\r\n    setConnected(false);\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Register user (pending)\r\n   */\r\n  onResponse([\"register user\", \"pending\"], () => {\r\n    // Might show some user feedback\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register user\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO users\") {\r\n      if (props.results.insertId > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register user (success)\r\n   */\r\n  onResponse([\"register user\", \"success\"], () => {\r\n    // console.log(\"REGISTER USER PROPS:\", props);\r\n    const noEmailValidation = false;\r\n\r\n    if (noEmailValidation) {\r\n      setSignedIn(true);\r\n      setSession(props.email);\r\n      onRedirect(\"/account-registration\");\r\n      sendRequest({ req: \"get user\", data: { email: props.email } }); // to not require a log in\r\n      return false;\r\n    } else {\r\n      onRedirect(\"/validate-email\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"validate email token\", \"continue\"], () => {\r\n    if (props.name === \"UPDATE validation tokens\") {\r\n      if (props.results.affectedRows > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        // onRedirect(\"/sign-in\");\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (props.name === \"UPDATE users\") {\r\n      if (props.results.affectedRows > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        onRedirect(\"/sign-in\");\r\n        return true;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  // onResponse([\"validate password reset token\", \"continue\"], () => {\r\n  //   if (props.name === \"UPDATE validation tokens\") {\r\n  //     if (props.results.affectedRows > 0) {\r\n  //       // onRedirect(\"/password\");\r\n  //       setPasswordResetTokenValidated(true);\r\n  //       return true;\r\n  //     } else {\r\n  //       // No row was inserted - an error was returned\r\n  //       return true;\r\n  //     }\r\n  //   }\r\n\r\n  //   return false;\r\n  // });\r\n\r\n  onResponse([\"validate password reset token\", \"success\"], () => {\r\n    setPasswordResetTokenValidated(true);\r\n\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Sign in user (continue)\r\n   */\r\n  onResponse([\"sign in user\", \"continue\"], () => {\r\n    // user with validated email\r\n    if (props.data.status === 1) {\r\n      setUserData(JSON.stringify(props.data));\r\n      setAccountNumber(props.data.uid);\r\n      setSession(props.data.email);\r\n      setCurrencyAbbr(props.data.currency_abbr);\r\n      // setCurrencyRate(props.data.currency_rate);\r\n      setCurrencyRate(\r\n        isNaN(props.data.currency_rate) ? 1 : props.data.currency_rate\r\n      );\r\n      // setCurrencyStatus(props.data.currency_status);\r\n      changeLanguage(props.data.language);\r\n      setSignedIn(true);\r\n      onRedirect(\"/summary\");\r\n      return false;\r\n    }\r\n\r\n    // user without validated email\r\n    if (props.data.status === 0) {\r\n      onRedirect(\"/validate-email\");\r\n      return true;\r\n    }\r\n\r\n    // suspended or deleted user\r\n    if (props.data.status === 2) {\r\n      // onLogOut();\r\n      setRedirectTo(\"/sign-out\");\r\n      showMessage(\"ACCOUNT_SUSPENDED\", \"error\");\r\n      return true;\r\n    }\r\n\r\n    // suspended or deleted user\r\n    if (props.data.status === 3) {\r\n      // onLogOut();\r\n      setRedirectTo(\"/sign-out\");\r\n      showMessage(\"ACCOUNT_DELETED\", \"error\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Sign in user (finished)\r\n   */\r\n  onResponse([\"sign in user\", \"finished\"], () => {\r\n    if (props.rowNum === 1) {\r\n      // setSignedIn(true);\r\n      // onRedirect(\"/summary\");\r\n      return true;\r\n    } else {\r\n      // TODO: Clean Log Out() user here\r\n      // setSignedIn(false);\r\n\r\n      // onLogOut();\r\n      showMessage(\"INVALID_SIGN_IN\", \"error\");\r\n      setRedirectTo(\"/sign-out\");\r\n\r\n      return true;\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Update user (success)\r\n   */\r\n  onResponse([\"update user\", \"success\"], () => {\r\n    // setUserData(JSON.stringify(props.data));\r\n    sendRequest({ req: \"get user\", data: { email: userData.email } });\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get user (continue)\r\n   */\r\n  onResponse([\"get user\", \"continue\"], () => {\r\n    setUserData(JSON.stringify(props.data));\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get user (finished)\r\n   */\r\n  onResponse([\"get user\", \"finished\"], () => {\r\n    if (props.rowNum === 1) {\r\n      return true;\r\n    } else {\r\n      // Something wrong with (accessing) the user data\r\n      // Probable causes:\r\n      // - user was deleted from the DB\r\n      // - user status was set to >= 2\r\n      // - multiple users with the same email address, most improbable (db constraint)\r\n      // - user changed the email address or password\r\n      // onLogOut();\r\n      setRedirectTo(\"/sign-out\");\r\n      // showMessage(\"INVALID_DATA\", \"error\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get user businesses (continue)\r\n   */\r\n  onResponse([\"get user businesses\", \"continue\"], () => {\r\n    if (userBusinesses === null) {\r\n      setUserBusinesses(JSON.stringify([props.data]));\r\n    } else {\r\n      setUserBusinesses(JSON.stringify([...userBusinesses, props.data]));\r\n    }\r\n\r\n    // getBusinessPurposes(props.data.business_id);\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get user businesses (finished)\r\n   */\r\n  onResponse([\"get user businesses\", \"finished\"], () => {\r\n    setRedirectTo(\"/my-business\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get business purposes (continue)\r\n   */\r\n  onResponse([\"get business purposes\", \"continue\"], () => {\r\n    if (businessPurposes === null) {\r\n      setBusinessPurposes(JSON.stringify([props.data]));\r\n    } else {\r\n      setBusinessPurposes(JSON.stringify([...businessPurposes, props.data]));\r\n    }\r\n\r\n    // getPurposeShareholders(props.data.purpose_id);\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get business purposes (finished)\r\n   */\r\n  onResponse([\"get business purposes\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get purpose shareholders (continue)\r\n   */\r\n  onResponse([\"get purpose shareholders\", \"continue\"], () => {\r\n    if (purposeShareholders === null) {\r\n      setPurposeShareholders(JSON.stringify([props.data]));\r\n    } else {\r\n      setPurposeShareholders(\r\n        JSON.stringify([...purposeShareholders, props.data])\r\n      );\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get purpose shareholders (finished)\r\n   */\r\n  onResponse([\"get purpose shareholders\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get user business by id (continue)\r\n   */\r\n  onResponse([\"get business by id\", \"continue\"], () => {\r\n    if (userBusinesses === null) {\r\n      setUserBusinesses(JSON.stringify([props.data]));\r\n    } else {\r\n      setUserBusinesses(JSON.stringify([...userBusinesses, props.data]));\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get business by id (finished)\r\n   */\r\n  onResponse([\"get business by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get purpose by id (continue)\r\n   */\r\n  onResponse([\"get purpose by id\", \"continue\"], () => {\r\n    if (businessPurposes === null) {\r\n      setBusinessPurposes(JSON.stringify([props.data]));\r\n    } else {\r\n      setBusinessPurposes(JSON.stringify([...businessPurposes, props.data]));\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get purpose by id (finished)\r\n   */\r\n  onResponse([\"get purpose by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get shareholder by id (continue)\r\n   */\r\n  onResponse([\"get shareholder by id\", \"continue\"], () => {\r\n    if (purposeShareholders === null) {\r\n      setPurposeShareholders(JSON.stringify([props.data]));\r\n    } else {\r\n      setPurposeShareholders(\r\n        JSON.stringify([...purposeShareholders, props.data])\r\n      );\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get shareholder by id (finished)\r\n   */\r\n  onResponse([\"get shareholder by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Upload file (ready)\r\n   */\r\n  onResponse([\"upload file\", \"continue\"], () => {\r\n    // setAccountPhotoPath(props + \"?r=\" + Math.random());\r\n    setAccountPhotoPath(\"ok\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Register account (success)\r\n   */\r\n  onResponse([\"register account\", \"continue\"], () => {\r\n    if (props.results.affectedRows < 1) {\r\n      // error registering account\r\n      setUID(null);\r\n      setAccountNumber(null);\r\n      showMessage(\"INVALID_DATA\", \"error\");\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register account (success)\r\n   */\r\n  onResponse([\"register account\", \"success\"], () => {\r\n    // setAccountNumber(props.uid);\r\n    // setUID(props.uid);\r\n    // sendRequest({\r\n    //   req: \"get account data\",\r\n    //   data: { uid: accountNumber },\r\n    // });\r\n    getAccountData();\r\n    // onRedirect(\"/balance\");\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get account data (continue)\r\n   */\r\n  onResponse([\"get account data\", \"continue\"], () => {\r\n    // setUserData(JSON.stringify(props.data));\r\n    // return false;\r\n\r\n    if (props.rowNum === 1) {\r\n      // all is good\r\n      setUserData(JSON.stringify(props.data));\r\n      return false;\r\n    } else {\r\n      // Account not reachable\r\n      showMessage(\"INVALID_DATA\", \"error\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get account data (finished)\r\n   */\r\n  onResponse([\"get account data\", \"finished\"], () => {\r\n    // if (props.rowNum === 1) {\r\n    //   // all is good\r\n    //   return true;\r\n    // } else {\r\n    //   // Account not reachable\r\n    //   showMessage(\"INVALID_DATA\", \"error\");\r\n    //   return true;\r\n    // }\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2S\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (continue)\r\n   */\r\n  onResponse([\"transfer U2S\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (success)\r\n   */\r\n  onResponse([\"transfer U2S\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2U\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (continue)\r\n   */\r\n  onResponse([\"transfer U2U\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (success)\r\n   */\r\n  onResponse([\"transfer U2U\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2B\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (continue)\r\n   */\r\n  onResponse([\"transfer U2B\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (success)\r\n   */\r\n  onResponse([\"transfer U2B\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register business\r\n   ============================================================================================*/\r\n  onResponse([\"register business\", \"continue\"], () => {\r\n    // console.log(\"RESPONSE register business:\", props);\r\n\r\n    if (props.results.insertId > 0) {\r\n      // showMessage(\"REGISTER_BUSINESS_SUCCESS\", \"info\");\r\n\r\n      // sendRequest({\r\n      //   req: \"get business by id\",\r\n      //   data: { id: props.results.insertId },\r\n      // });\r\n      setLastInsertId(props.results.insertId);\r\n      return false;\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register business\", \"success\"], () => {\r\n    // console.log(\"RESPONSE register business:\", props);\r\n\r\n    sendRequest({\r\n      req: \"get business by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    // getBusinesses();\r\n    return false;\r\n    // return true;\r\n  });\r\n\r\n  onResponse([\"register currency\", \"continue\"], () => {\r\n    // console.log(\"RESPONSE register business:\", props);\r\n\r\n    if (props.results.insertId > 0) {\r\n      setLastInsertId(props.results.insertId);\r\n\r\n      return false;\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register currency\", \"success\"], () => {\r\n    sendRequest({\r\n      req: \"get currency by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currencies (continue)\r\n   */\r\n  onResponse([\"get currencies\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT currencies\") {\r\n      if (currencies === null) {\r\n        setCurrencies(JSON.stringify([props.results]));\r\n      } else {\r\n        setCurrencies(JSON.stringify([...currencies, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT currencies\") {\r\n      setCountCurrencies(props.results.count_currencies);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currencies (finished)\r\n   */\r\n  onResponse([\"get currencies\", \"finished\"], () => {\r\n    setRedirectTo(\"/currency\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (continue)\r\n   */\r\n  onResponse([\"get currency by id\", \"continue\"], () => {\r\n    if (currencies === null) {\r\n      setCurrencies(JSON.stringify([props.data]));\r\n    } else {\r\n      setCurrencies(JSON.stringify([...currencies, props.data]));\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (finished)\r\n   */\r\n  onResponse([\"get currency by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get transactions (continue)\r\n   */\r\n  onResponse([\"get transactions\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT transactions\") {\r\n      if (transactions === null) {\r\n        setTransactions(JSON.stringify([props.results]));\r\n      } else {\r\n        setTransactions(JSON.stringify([...transactions, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT transactions\") {\r\n      setCountTransactions(props.results.count_transaction_positions);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get transactions (finished)\r\n   */\r\n  onResponse([\"get transactions\", \"finished\"], () => {\r\n    setRedirectTo(\"/balance\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get shares (continue)\r\n   */\r\n  onResponse([\"get shares\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT shares\") {\r\n      if (shares === null) {\r\n        setShares(JSON.stringify([props.results]));\r\n      } else {\r\n        setShares(JSON.stringify([...shares, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT shares\") {\r\n      setCountShares(props.results.count_shares);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get shares (finished)\r\n   */\r\n  onResponse([\"get shares\", \"finished\"], () => {\r\n    // setRedirectTo(\"/balance\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get transaction by id (continue)\r\n   */\r\n  onResponse([\"get transaction by id\", \"continue\"], () => {\r\n    if (transactions === null) {\r\n      setTransactions(JSON.stringify([props.data]));\r\n    } else {\r\n      setTransactions(JSON.stringify([...transactions, props.data]));\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (finished)\r\n   */\r\n  onResponse([\"get transaction by id\", \"finished\"], () => {\r\n    getAccountData();\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register purpose\", \"continue\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get purpose by id\",\r\n    //   data: { id: props.results.insertId },\r\n    // });\r\n    if (props.results.insertId > 0) {\r\n      setLastInsertId(props.results.insertId);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register purpose\", \"success\"], () => {\r\n    sendRequest({\r\n      req: \"get purpose by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register shareholder\", \"continue\"], () => {\r\n    if (props.results.insertId > 0) {\r\n      // showMessage(\"REGISTER_SHAREHOLDER_SUCCESS\", \"info\");\r\n\r\n      // return sendRequest({\r\n      //   req: \"get shareholder by id\",\r\n      //   data: { id: props.results.insertId },\r\n      // });\r\n      setLastInsertId(props.results.insertId);\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register shareholder\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    getPurposeShareholders(activeBusinesPurpose);\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"change share\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    // getPurposeShareholders(activeBusinesPurpose);\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"remove shareholder\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    getPurposeShareholders(activeBusinesPurpose);\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"reset password\", \"success\"], () => {\r\n    setPasswordResetTokenValidated(false);\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"change password\", \"success\"], () => {\r\n    // TOTO: If NO_ROWS_CHANGE - probably the currently saved password was submitted\r\n    setPasswordResetTokenValidated(null);\r\n    setPasswordResetTokenEmail(null);\r\n    onRedirect(\"/sign-in\");\r\n    showMessage(\"PASSWORD_CHANGE_SUCCESS\", \"info\");\r\n    return true;\r\n  });\r\n\r\n  // onResponse([\"unknown\"], () => {\r\n  //   if (\r\n  //     status === \"pending\" ||\r\n  //     status === \"continue\" ||\r\n  //     status === \"finished\" ||\r\n  //     status === \"success\"\r\n  //   ) {\r\n  //     return false;\r\n  //   } else {\r\n  //     showMessage(`${req}: ${status}`, \"info\");\r\n  //     return true;\r\n  //   }\r\n  // });\r\n\r\n  onResponse([\"unknown\"], () => {\r\n    return false;\r\n  });\r\n\r\n  return responseFound;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"ValidateEmail\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { validateTokenEmail } = props.barrelGetters;\r\n  const { setValidateTokenEmail } = props.barrelSetters;\r\n  const { getUrlParam, sendEmailValidationRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Hooks\r\n    ============================================================================ */\r\n\r\n  // setToken(getUrlParam(\"token\"));\r\n  // setEmail(getUrlParam(\"email\"));\r\n\r\n  const token = getUrlParam(\"token\");\r\n  const email = getUrlParam(\"email\");\r\n\r\n  /**\r\n    * Effects\r\n    ============================================================================ */\r\n  useEffect(() => {\r\n    if (token === null || email === null) return;\r\n\r\n    setValidateTokenEmail(\r\n      JSON.stringify({\r\n        token,\r\n        email,\r\n      })\r\n    );\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    // const queryString = window.location.search;\r\n    // const urlParams = new URLSearchParams(queryString);\r\n\r\n    return token === null ? (\r\n      <>\r\n        <h4>{t(\"A verification link has been sent to your email account.\")}</h4>\r\n        <hr />\r\n        <p>\r\n          {t(\r\n            \"Please click on the link that has just been sent to your email account\"\r\n          )}\r\n        </p>\r\n      </>\r\n    ) : (\r\n      <div className=\"text-center\">\r\n        <Spinner\r\n          as=\"span\"\r\n          animation=\"border\"\r\n          size=\"sm\"\r\n          role=\"status\"\r\n          aria-hidden=\"true\"\r\n          hidden={false}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\nimport Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"ChangePassword\",\r\n    request: \"change password\",\r\n    email: null,\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  const {\r\n    passwordResetTokenValidated,\r\n    passwordResetTokenEmail,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation([\r\n    passwordResetTokenValidated === true ? \"SignUp\" : \"ChangePassword\",\r\n  ]); // adjust namespace\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n\r\n  /**\r\n     * Functions\r\n     ============================================================================ */\r\n  const onSubmit = (data) => {\r\n    data.email = passwordResetTokenEmail;\r\n    // console.log(data);\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  /** \r\n     * Yup schema\r\n     ============================================================================ */\r\n  const schema = yup.object({\r\n    password: yup\r\n      .string()\r\n      .required(t(\"No password provided\"))\r\n      .min(8, t(\"Password is too short\"))\r\n      // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n      .matches(\r\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n        t(\"Password is too weak\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n     * Form\r\n     ============================================================================ */\r\n  const ChangePasswordForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"New password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type={passwordVisible ? \"text\" : \"password\"}\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text\r\n              id=\"inputGroupAppend\"\r\n              onClick={togglePassword}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              {passwordVisible ? (\r\n                <VisibilityOff\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\" }}\r\n                />\r\n              ) : (\r\n                <Visibility fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n              )}\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <SubmitButton\r\n        {...args}\r\n        caption={t(\"Submit\")}\r\n        request={props.request}\r\n        namespace={props.namespace}\r\n      />\r\n    </Form>\r\n  );\r\n\r\n  /**\r\n     * Return\r\n     ============================================================================ */\r\n  if (passwordResetTokenValidated === true) {\r\n    // if (true) {\r\n    return (\r\n      <Formik\r\n        component={ChangePasswordForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          password: \"\",\r\n        }}\r\n      />\r\n    );\r\n  } else {\r\n    // if (passwordResetTokenValidated === false)\r\n    return <>{t(\"Awaiting validation\")}</>;\r\n    // } else {\r\n    //   // null\r\n    //   return <>How did you land here???</>;\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(\"Logout\");\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { error, language, loggingOut } = props.barrelGetters;\r\n  const { setLanguage } = props.barrelSetters;\r\n  const { showMessage } = props.barrelFunctions;\r\n  const { onLogOut } = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Default Properties\r\n   */\r\n  // let defaults = {};\r\n  // const props = Object.assign(defaults, authorizedData);\r\n\r\n  // const [logOut] = useState(true);\r\n\r\n  // console.log(\"sendUserLogOutRequest\", props);\r\n\r\n  useEffect(() => {\r\n    // if (logOut !== true) return;\r\n    // console.log(\"LOG OUT =============\");\r\n\r\n    const tempError = error;\r\n    const tempLanguage = language;\r\n\r\n    onLogOut();\r\n\r\n    setLanguage(tempLanguage);\r\n\r\n    if (tempError !== null) {\r\n      showMessage(tempError, \"error\");\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []); // logOut\r\n\r\n  return (\r\n    <>\r\n      <h4>{t(\"See you soon\")}</h4>\r\n      <hr />\r\n\r\n      <br />\r\n      <p className=\"text-center\">\r\n        <a href=\"/\">{t(\"Sign in\")}</a>\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button, Spinner } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n  * Default export\r\n  ============================================================================ */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"ResetPassword\", request: \"reset password\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { language } = props.barrelGetters;\r\n  const { setValidateTokenPasswordReset } = props.barrelSetters;\r\n  const { sendRequest, getUrlParam } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  const token = getUrlParam(\"token\");\r\n  const email = getUrlParam(\"email\");\r\n\r\n  /**\r\n    * Effects\r\n    ============================================================================ */\r\n  useEffect(() => {\r\n    if (token === null || email === null) return;\r\n\r\n    setValidateTokenPasswordReset(\r\n      JSON.stringify({\r\n        token,\r\n        email,\r\n      })\r\n    );\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n    * Event listeners\r\n    ============================================================================ */\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    // console.log(data);\r\n    data.language = language;\r\n    sendRequest({\r\n      req: props.request,\r\n      data: data,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n  });\r\n\r\n  const passwordResetForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Reset password\")}</h3>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n\r\n  // return (\r\n  //   <Formik\r\n  //     component={passwordResetForm}\r\n  //     validationSchema={schema}\r\n  //     onSubmit={onSubmit}\r\n  //     initialValues={{\r\n  //       email: \"\",\r\n  //     }}\r\n  //   />\r\n  // );\r\n\r\n  return token === null ? (\r\n    <Formik\r\n      component={passwordResetForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        email: \"\",\r\n      }}\r\n    />\r\n  ) : (\r\n    <div className=\"text-center\">\r\n      <Spinner\r\n        as=\"span\"\r\n        animation=\"border\"\r\n        size=\"sm\"\r\n        role=\"status\"\r\n        aria-hidden=\"true\"\r\n        hidden={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","// import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Loading.css\";\r\nimport React from \"react\";\r\n// import MainSkeleton from \"../pages/main\";\r\n\r\nexport default () => {\r\n  //\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"lds-hourglass\"></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { Suspense, lazy } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./normalize.css\";\r\nimport \"./index.css\";\r\n// import UnderConstruction from \"./components/pages/underConstruction\";\r\nimport Main from \"./components/pages/main\";\r\nimport Loading from \"./components/loading\";\r\n\r\n// const Main = React.lazy(() => import(\"./components/pages/main\"));\r\n\r\nReactDOM.render(\r\n  <Suspense fallback={<Loading />}>\r\n    <Main />\r\n  </Suspense>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}