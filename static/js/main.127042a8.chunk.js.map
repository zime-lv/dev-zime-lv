{"version":3,"sources":["translations/i18n.js","utils/config.js","components/card/Card.js","components/dropzone/Dropzone.js","components/submitButton/SubmitButton.js","components/accountRegistration/AccountRegistration.js","components/businessRegistration/businessRegistration.js","components/pagination/Pagination.js","components/transactions/Transactions.js","components/shareholder/Shareholder.js","components/shares/Shares.js","components/transfer/Balance.js","components/transfer/TransferToSelf.js","components/transfer/TransferToPerson.js","components/transfer/TransferToBusiness.js","components/purposeRegistration/PurposeRegistration.js","components/shareholderRegistration/shareholderRegistration.js","components/myBusiness/MyBusiness.js","components/userEditor/UserEditor.js","components/currencies/Currencies.js","components/currencyRegistration/CurrencyRegistration.js","components/pages/summary/Summary.js","components/currencyContainer/CurrencyContainer.js","components/transfer/Transfer.js","utils/sockets.js","components/login/LogIn.js","components/signup/SignUp.js","utils/state.js","components/alert/Alert.js","components/language-selector/LanguageSelector.js","components/pages/main/Main.js","utils/requestHandler.js","utils/errorHandler.js","utils/responseHandler.js","components/validateEmail/ValidateEmail.js","components/changePassword/ChangePassword.js","components/logout/Logout.js","components/passwordReset/passwordReset.js","components/loading/Loading.js","index.js"],"names":["i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","react","wait","withRef","bindI18n","bindStore","nsMode","config","args","defaults","title","navigation","undefined","footer","header","body","headerContent","onNavigationClick","props","Object","assign","key","Footer","Header","Title","Nav","variant","defaultActiveKey","navigationdefaultActiveKey","map","item","Item","Link","href","link","onClick","style","color","name","Body","React","Children","children","child","cloneElement","styles","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","outline","transition","activeStyle","acceptStyle","rejectStyle","data","accountPhotoPath","barrelGetters","sendRequest","barrelFunctions","useState","setFiles","t","useTranslation","onDrop","useCallback","acceptedFiles","req","useDropzone","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useMemo","className","Figure","Image","width","height","alt","src","caption","request","namespace","visible","marginTop","Button","type","block","disabled","Spinner","as","animation","size","role","aria-hidden","hidden","signedIn","accountNumber","userData","getReviser","getWorkplace","schema","yup","dropzoneHook","required","personalID","matches","RegExp","test","exclusive","params","message","value","pid","replace","split","n","parseInt","Alert","Heading","i18nKey","component","handleSubmit","handleChange","values","handleBlur","touched","errors","isValid","validateForm","setFieldValue","Form","noValidate","onSubmit","Group","controlId","Label","Text","Dropzone","Control","onChange","isInvalid","Feedback","InputGroup","Prepend","id","placeholder","aria-describedby","Check","label","terms","feedback","SubmitButton","validationSchema","reviser","workplace","email","sendAccountRegistrationRequest","initialValues","onBusinessRegistration","barrelEventHandlers","businessTitle","min","max","trim","businessDescription","optional","rows","uid","console","log","registerBusiness","pages","active","align","textAlign","Pagination","margin","First","Prev","items","number","push","Ellipsis","getPages","Next","Last","getJSX","transactions","countTransactions","activePageTransactions","transactionsPerPage","barrelSetters","setActivePageTransactions","getTransactions","format","formatDate","cnt","ListGroup","transaction","keyTransactions","business_description","business_id","business_image","business_link","business_status","business_title","conv_amount","comment","created","sender_firstname","currency","exchange_rate","sender_lastname","recipient_firstname","recipient_lastname","purpose_id","purpose_description","purpose_title","purpose_image","purpose_link","purpose_status","recipient_id","sender_id","sender_status","recipient_status","to_account","i_am_sender","i_am_recipient","action","float","Math","ceil","purpose","shareholder","closeButton","rangeControl","sharePerCent","purposeTitle","businessOwnerFirstname","businessOwnerLastname","sharesCreated","purposeShareholders","setPurposeShareholders","formatPerCent","share","userQuery","setUserQuery","delayedQuery","useRef","_","debounce","q","sendQuery","current","e","target","onClose","shareholder_id","ps","JSON","stringify","sharesLabelId","Toast","minWidth","firstname","lastname","Settings","fontSize","roles","Badge","pill","defaultValue","step","month","day","year","shares","countShares","activePageShares","sharesPerPage","setActivePageShares","getShares","keyShares","owner_firstname","owner_lastname","owner_status","owner_uid","shares_created","share_per_cent","shares_description","shares_roles","shares_share","arrRoles","shares_status","shares_title","Shareholder","accordionView","currencyAbbr","setAccountType","setRedirectTo","setAccordionView","getAccountData","userDataParsed","onAccountTypeSelected","available","acc_curr","acc_cred","acc_save","Accordion","Toggle","Card","eventKey","cursor","Collapse","Transactions","Shares","accountType","language","parseLocaleNumber","currency_abbr","fromAccount","toAccount","amount","custom","Intl","NumberFormat","notation","minimumFractionDigits","transferToSelf","onTransfer","toPersonalID","description","transferToPerson","purposeID","transferToBusiness","businessID","barrels","onPurposeRegistration","purposeDescription","RegisterPurpose","shareholderRoles","typeError","userBusinesses","activeBusiness","businessPurposes","activeBusinesPurpose","getBusinessPurposes","getBusinesses","getPurposeShareholders","useEffect","menuItems","purposes","countShareholders","keys","business","keyBusiness","keyPurpose","TogglePurpose","whiteSpace","Tab","Pane","bg","keyShareholder","Add","jsx","date","Date","businessSince","DateTimeFormat","ToggleBusiness","Container","Row","Col","sm","Content","border","PurposeRegistration","mode","currencies","onRedirect","editFirstname","setEditFirstname","editLastname","setEditLastname","editEmail","setEditEmail","editPassword","setEditPassword","passwordVisible","setPasswordVisible","submitButtonVisible","setSubmitButtonVisible","togglePassword","yupObject","firstName","lastName","password","currency_name","Close","Edit","Append","VisibilityOff","Visibility","sendUserRegistrationRequest","countCurrencies","activePageCurrencies","currenciesPerPage","setCurrencyAbbr","setActivePageCurrencies","getCurrencies","formatExchangeRate","onCurrencySelected","currency_id","onPageSelect","Table","responsive","striped","bordered","hover","keyCUrrency","abbr","rate","region","status","sponsors","checked","aria-label","curr_abbr","curr_title","curr_region","curr_rate","Navbar","collapseOnSelect","expand","background","boxShadow","Brand","aria-controls","ExitToApp","viewBalanceOrTransfer","exact","path","Balance","AccountRegistration","UserEditor","accordionViewCurrency","setAccordionViewCurrency","Currencies","CurrencyRegistration","CurrencyContainer","BusinessRegistration","MyBusiness","transferType","onTransferTypeChange","transferCard","setTransferCard","TransferToSelf","TransferToPerson","TransferToBusiness","Transfer","fluid","dev","uri","ENDPOINT","window","location","hostname","socket","openSocket","connect","secure","reconnect","sendData","emit","sendUserLogInRequest","rememberMe","onSignUp","validateEmail","useStickyState","stickyValue","localStorage","getItem","parse","setValue","setItem","error","info","onAlertClose","dismissible","changeLanguage","lng","selectLanguage","setDebug","setRequest","uuidv4","session","setSession","connected","setConnected","setSignedIn","currencyRate","setCurrencyRate","currencyStatus","setCurrencyStatus","setCurrencies","setTransactions","setShares","setCountCurrencies","setCountTransactions","setCountShares","setCurrenciesPerPage","setTransactionsPerPage","setSharesPerPage","setUserData","setUID","setAccountNumber","setUserBusinesses","setActiveBusiness","setBusinessPurposes","setActiveBusinesPurpose","redirectTo","lastInsertId","setLastInsertId","validateTokenEmail","setValidateTokenEmail","validateTokenPasswordReset","setValidateTokenPasswordReset","passwordResetTokenValidated","setPasswordResetTokenValidated","passwordResetTokenEmail","setPasswordResetTokenEmail","tmrConnected","options","setLanguage","setTransferType","setAccountPhotoPath","setError","setInfo","callback","responseData","setResponseData","on","useSocket","processResponse","processRequest","requestFound","showMessage","onRequest","requestHandler","context","errorFound","onError","res","code","errorHandler","getTransactionById","onTransferSuccess","onLogOut","responseFound","onResponse","results","insertId","affectedRows","currency_rate","currency_status","rowNum","random","count_currencies","count_transaction_positions","count_shares","responseHandler","hideMessage","getUrlParam","param","queryString","search","URLSearchParams","get","sendEmailValidationRequest","token","msg","maximumFractionDigits","ts","hour","minute","selected","newPage","page","limit","stringNumber","locale","parts_local","formatToParts","group","decimal","forEach","i","parseFloat","to","char","endSession","clear","startSession","sendPasswordResetRequest","wrapperClass","innerClass","getContainerClass","appClass","Summary","Login","SignUp","ValidateEmail","ChangePassword","logOut","tempError","tempLanguage","Logout","PasswordReset","LanguageSelector","ReactDOM","render","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.127042a8.chunk.js","sourcesContent":["import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nimport Backend from \"i18next-xhr-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\n// not like to use this?\r\n// have a look at the Quick start guide\r\n// for passing in lng and translations on init\r\n\r\ni18n\r\n  // load translation using xhr -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-xhr-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    fallbackLng: \"lv\",\r\n    debug: false,\r\n    // lng: \"lv\",\r\n    ns: [\"LogIn\", \"SignUp\"],\r\n    defaultNS: \"translation\",\r\n    keySeparator: false,\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n    react: {\r\n      wait: false,\r\n      withRef: false,\r\n      bindI18n: \"languageChanged loaded\",\r\n      bindStore: \"added removed\",\r\n      nsMode: \"default\",\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","const dev = {\r\n  uri: {\r\n    ENDPOINT: \"http://localhost:9000\",\r\n    // ENDPOINT: \"http://192.168.2.100:9000\"\r\n  },\r\n};\r\n\r\nconst staging = {\r\n  uri: {\r\n    ENDPOINT: \"https://dev.zime.lv\",\r\n  },\r\n};\r\n\r\nconst prod = {\r\n  uri: {\r\n    ENDPOINT: \"https://zime.lv\",\r\n  },\r\n};\r\n\r\nconst hostname = window && window.location && window.location.hostname;\r\n\r\nlet config;\r\nswitch (hostname) {\r\n  case \"localhost\":\r\n    config = dev;\r\n    break;\r\n  case \"dev.zime.lv\":\r\n    config = staging;\r\n    break;\r\n  case \"zime.lv\":\r\n    config = prod;\r\n    break;\r\n  default:\r\n    config = dev;\r\n    break;\r\n}\r\n\r\nexport default {\r\n  ...config,\r\n};\r\n","import \"./Card.css\";\r\nimport React, { cloneElement } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n// import { Container, Row, Col, Button } from \"react-bootstrap\";\r\n// import Button from \"react-bootstrap/Button\";\r\n\r\nexport default (args) => {\r\n  let defaults = {\r\n    title: \"Untitled\",\r\n    navigation: undefined,\r\n    footer: undefined,\r\n    header: true,\r\n    body: true,\r\n    headerContent: null,\r\n    onNavigationClick: () => {},\r\n  };\r\n  let props = Object.assign(defaults, args);\r\n\r\n  let key = 0;\r\n\r\n  let footer = props.footer ? <Card.Footer>{props.footer}</Card.Footer> : \"\";\r\n\r\n  return (\r\n    <Card>\r\n      {/* <Card.Img variant=\"top\" src=\"holder.js/100px180?text=Image cap\" /> */}\r\n      {props.header && (\r\n        <Card.Header>\r\n          {props.headerContent !== null ? (\r\n            props.headerContent\r\n          ) : (\r\n            <>\r\n              <Card.Title>{props.title}</Card.Title>\r\n              <Nav\r\n                variant=\"tabs\"\r\n                defaultActiveKey={props.navigationdefaultActiveKey}\r\n              >\r\n                {props.navigation &&\r\n                  props.navigation.map((item, key) => (\r\n                    <Nav.Item key={key}>\r\n                      <Nav.Link\r\n                        href={item.link}\r\n                        onClick={() => props.onNavigationClick(item.link)}\r\n                        style={{ color: \"black\" }}\r\n                      >\r\n                        {item.name}\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                  ))}\r\n              </Nav>\r\n            </>\r\n          )}\r\n        </Card.Header>\r\n      )}\r\n\r\n      {props.body && (\r\n        <Card.Body>\r\n          {React.Children.map(args.children, (child) => {\r\n            if (typeof child !== \"object\") {\r\n              return child;\r\n            } else {\r\n              key++;\r\n              return cloneElement(child, {\r\n                styles: null,\r\n                key: key,\r\n              });\r\n            }\r\n          })}\r\n        </Card.Body>\r\n      )}\r\n      {footer}\r\n    </Card>\r\n  );\r\n};\r\n","import React, { useCallback, useMemo, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nimport { Figure } from \"react-bootstrap\";\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  padding: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  backgroundColor: \"#fafafa\",\r\n  color: \"#bdbdbd\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\n/**\r\n * App: Dropzone\r\n */\r\nexport default (args) => {\r\n  // console.log(\"DROPZONE\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args.data);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  let { accountPhotoPath } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [, setFiles] = useState(null);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(\"AccountRegistration\");\r\n\r\n  // let setFieldValue = data.setFieldValue;\r\n  // let data = args.data;\r\n\r\n  // let accountPhotoPath = data.accountPhotoPath;\r\n  if (accountPhotoPath !== \"\") {\r\n    baseStyle.padding = 0;\r\n    baseStyle.borderStyle = \"none\"; // \"solid\";\r\n    baseStyle.backgroundColor = \"none\";\r\n  }\r\n\r\n  // const [thisData] = useState(data);\r\n  // console.log(\"THIS DATA =====\");\r\n\r\n  // console.log(data);\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    // console.log(getRootProps());\r\n\r\n    // args.onDrop(1);\r\n    // args.context.dropzoneUntouched = false;\r\n\r\n    setFiles(acceptedFiles);\r\n    sendRequest({\r\n      req: \"upload file\",\r\n      data: acceptedFiles,\r\n    });\r\n    // setFieldValue(1);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const {\r\n    // acceptedFilesItems,\r\n    // rejectedFilesItems,\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({\r\n    accept: \"image/*\",\r\n    onDrop,\r\n  });\r\n\r\n  // const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n  // const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n  //   onDrop\r\n  // });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragAccept, isDragReject]\r\n  );\r\n\r\n  if (accountPhotoPath === \"\") {\r\n    return (\r\n      <div className=\"container\">\r\n        <div {...getRootProps({ style })}>\r\n          <input {...getInputProps()} />\r\n          <p>{t(\"Click to select the image file\")}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    // accountPhotoPath = \"http://localhost:9000/\" + accountPhotoPath;\r\n    accountPhotoPath = \"gfx/photo_id.png\";\r\n\r\n    return (\r\n      <>\r\n        <div className=\"container\">\r\n          <div {...getRootProps({ style })}>\r\n            <input {...getInputProps()} />\r\n            <Figure.Image\r\n              width={171}\r\n              height={180}\r\n              alt=\"171x180\"\r\n              src={accountPhotoPath}\r\n            />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    caption: \"Submit\",\r\n    request: null,\r\n    namespace: \"Button\",\r\n    visible: true,\r\n    marginTop: 0,\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { request } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]); // adjust namespace\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    return !props.visible ? (\r\n      <></>\r\n    ) : (\r\n      <Button\r\n        type=\"submit\"\r\n        block\r\n        disabled={request === props.request}\r\n        style={{ marginTop: props.marginTop + \"px\" }}\r\n      >\r\n        <Spinner\r\n          as=\"span\"\r\n          animation=\"border\"\r\n          size=\"sm\"\r\n          role=\"status\"\r\n          aria-hidden=\"true\"\r\n          hidden={request !== props.request}\r\n        />\r\n        &nbsp;\r\n        {props.caption}\r\n        &nbsp;\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport { Form, InputGroup, Button, Alert } from \"react-bootstrap\";\r\n// import { Redirect } from \"react-router-dom\";\r\nimport Card from \"../card\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import { useStickyState } from \"../../utils/state\";\r\nimport Dropzone from \"../dropzone\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  // console.log(\"ACCOUNT REGISTRATION ARGS:\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"register account\",\r\n    namespace: \"AccountRegistration\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    signedIn,\r\n    accountNumber,\r\n    accountPhotoPath,\r\n    userData,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    dropzoneHook: yup.string().required(t(\"Photo ID is required\")),\r\n    personalID: yup\r\n      .string()\r\n      .required(t(\"Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      )\r\n      .test({\r\n        name: \"integrity\",\r\n        exclusive: true,\r\n        params: {},\r\n        message: t(\"PersonalID must be valid\"),\r\n        test: (value) => {\r\n          if (typeof value === \"undefined\") return false;\r\n          let pid = value\r\n            .replace(\"-\", \"\")\r\n            .split(\"\")\r\n            .map(function (n) {\r\n              return parseInt(n, 10);\r\n            });\r\n          let calc =\r\n            1 * pid[0] +\r\n            6 * pid[1] +\r\n            3 * pid[2] +\r\n            7 * pid[3] +\r\n            9 * pid[4] +\r\n            10 * pid[5] +\r\n            5 * pid[6] +\r\n            8 * pid[7] +\r\n            4 * pid[8] +\r\n            2 * pid[9];\r\n          let checksum = (1101 - calc) % 11;\r\n\r\n          return checksum == pid[10];\r\n        },\r\n      }),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n\r\n  /**\r\n   * Send account registration request\r\n   * @param {object} data\r\n   */\r\n  const sendAccountRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    // data.data = userData;\r\n    // data.email = JSON.parse(userData).email;\r\n    data.email = userData.email;\r\n\r\n    return sendRequest({ req: props.request, data });\r\n    // return onAccountRegistration(data);\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    if (sendAccountRegistrationRequest(data)) {\r\n      // Account registration request was submitted\r\n    }\r\n  };\r\n\r\n  // let dropzoneUntouched = true;\r\n\r\n  const AccountRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    setFieldValue,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <Form.Group controlId=\"validationFormikPhotoId\">\r\n        <Form.Label>{t(\"Photo ID\")}</Form.Label>\r\n\r\n        <Form.Text>\r\n          <Trans i18nKey=\"AccountRegistration:Photo ID requirements\">\r\n            Photo of me holding my passport. The personal identification number\r\n            must be clearly legible.\r\n          </Trans>\r\n        </Form.Text>\r\n\r\n        <br />\r\n        <Dropzone data={props} />\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationFormikDropzoneHook\">\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"dropzoneHook\"\r\n          value={accountPhotoPath}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.dropzoneHook}\r\n          style={{ display: \"none\" }}\r\n        />\r\n\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {errors.dropzoneHook}\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n\r\n      {false && (\r\n        <Form.Group controlId=\"validationFormikCountry\">\r\n          <Form.Label>{t(\"Country\")}</Form.Label>\r\n          <Form.Control as=\"select\" custom>\r\n            <option>Latvija</option>\r\n            <option>Deutschland</option>\r\n          </Form.Control>\r\n        </Form.Group>\r\n      )}\r\n\r\n      <Form.Group controlId=\"validationFormikPersonalId\">\r\n        <Form.Label>{t(\"Personal ID\")}</Form.Label>\r\n        <InputGroup>\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"XXXXXX-XXXXX\")}\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"personalID\"\r\n            value={values.personalID}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.personalID && touched.personalID}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.personalID}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n      <Form.Group>\r\n        <Form.Check\r\n          required\r\n          name=\"terms\"\r\n          label={t(\"Agree to terms and conditions\")}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.terms && touched.terms}\r\n          feedback={errors.terms}\r\n          id=\"validationFormik0\"\r\n        />\r\n      </Form.Group>\r\n\r\n      <SubmitButton\r\n        {...args}\r\n        caption={t(\"Submit\")}\r\n        request={props.request}\r\n        namespace={props.namespace}\r\n      />\r\n    </Form>\r\n  );\r\n\r\n  if (signedIn === false)\r\n    return (\r\n      <>\r\n        <Alert variant=\"info\">\r\n          <Alert.Heading>{t(\"User not logged in\")}</Alert.Heading>\r\n          <p>\r\n            <Trans i18nKey=\"AccountRegistration:Please log in first\">\r\n              Please log in first.\r\n            </Trans>\r\n          </p>\r\n        </Alert>\r\n      </>\r\n    );\r\n\r\n  if (accountNumber !== null)\r\n    return (\r\n      <>\r\n        <Alert variant=\"info\">\r\n          <Alert.Heading>{t(\"Account successfully registered\")}</Alert.Heading>\r\n          <p>\r\n            <Trans\r\n              i18nKey=\"AccountRegistration:Account with your personal ID successfully registered\"\r\n              accountNumber={accountNumber}\r\n            >\r\n              Account with the personal ID\r\n              <strong>{{ accountNumber }}</strong>\r\n              successfully registered.\r\n            </Trans>\r\n          </p>\r\n        </Alert>\r\n      </>\r\n    );\r\n\r\n  return (\r\n    <Card title={t(\"Open account\")}>\r\n      <Formik\r\n        component={AccountRegistrationForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          personalID: \"\",\r\n          terms: \"\",\r\n          dropzoneHook: accountPhotoPath,\r\n        }}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const {\r\n    // format,\r\n    // parseLocaleNumber,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  const { onBusinessRegistration } = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([\"BusinessRegistration\"]);\r\n\r\n  const schema = yup.object({\r\n    businessTitle: yup\r\n      .string()\r\n      .required(t(\"Business title is a required field\"))\r\n      .min(3, t(\"Business title too short\"))\r\n      .max(70, t(\"Business title too long\"))\r\n      .trim(),\r\n    businessDescription: yup.string().optional(),\r\n  });\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const registerBusiness = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n\r\n    console.log(\"REGISTER BUSINESS DATA:\", data);\r\n\r\n    onBusinessRegistration({ req: \"register business\", data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    registerBusiness(data);\r\n  };\r\n\r\n  const RegisterBusinessForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Business Title (Business ID) */}\r\n      <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n        <Form.Label>{t(\"Business Title\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"\"\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"businessTitle\"\r\n            value={values.businessTitle}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.businessTitle && touched.businessTitle}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.businessTitle}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Business Description */}\r\n      <Form.Group\r\n        controlId=\"businessDescription\"\r\n        name=\"businessDescription\"\r\n        value={values.businessDescription}\r\n        onChange={handleChange}\r\n      >\r\n        <Form.Label>{t(\"Business Description\")}</Form.Label>\r\n        <Form.Control as=\"textarea\" rows=\"3\" />\r\n      </Form.Group>\r\n\r\n      {/* Submit button */}\r\n      <Button type=\"submit\" block>\r\n        {t(\"Submit\")}\r\n      </Button>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterBusinessForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        businessTitle: \"\",\r\n        businessDescription: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"Pagination\",\r\n    pages: 0,\r\n    active: null,\r\n    onClick: () => {},\r\n    align: \"center\",\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  if (props.pages < 2) return <></>;\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  const getPages = () => {\r\n    let items = [];\r\n    for (let number = 1; number <= props.pages; number++) {\r\n      if (\r\n        number === 1 ||\r\n        number === props.pages ||\r\n        (number >= props.active - 2 && number <= props.active + 2)\r\n      ) {\r\n        items.push(\r\n          <Pagination.Item\r\n            key={number}\r\n            active={number === props.active}\r\n            onClick={() => props.onClick(number)}\r\n          >\r\n            {number}\r\n          </Pagination.Item>\r\n        );\r\n      } else if (number === 2 || number === props.pages - 1) {\r\n        items.push(<Pagination.Ellipsis key={number} disabled />);\r\n      }\r\n    }\r\n    return items;\r\n  };\r\n\r\n  //   <Pagination>\r\n  //   <Pagination.First />\r\n  //   <Pagination.Prev />\r\n\r\n  //   {getPages()}\r\n\r\n  //   <Pagination.Item>{1}</Pagination.Item>\r\n  //   <Pagination.Ellipsis />\r\n\r\n  //   <Pagination.Item>{10}</Pagination.Item>\r\n  //   <Pagination.Item>{11}</Pagination.Item>\r\n  //   <Pagination.Item active>{12}</Pagination.Item>\r\n  //   <Pagination.Item>{13}</Pagination.Item>\r\n  //   <Pagination.Item disabled>{14}</Pagination.Item>\r\n\r\n  //   <Pagination.Ellipsis />\r\n  //   <Pagination.Item>{20}</Pagination.Item>\r\n  //   <Pagination.Next />\r\n  //   <Pagination.Last />\r\n  // </Pagination>\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    const { align } = props;\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          textAlign: `${align}`,\r\n          // backgroundColor: \"red\",\r\n        }}\r\n      >\r\n        <span style={{ display: \"inline-block\" }}>\r\n          <Pagination style={{ padding: 0, margin: 0 }}>\r\n            {props.pages > 5 && (\r\n              <>\r\n                <Pagination.First onClick={() => props.onClick(\"First\")} />\r\n                <Pagination.Prev onClick={() => props.onClick(\"Prev\")} />\r\n              </>\r\n            )}\r\n\r\n            {getPages()}\r\n\r\n            {props.pages > 5 && (\r\n              <>\r\n                <Pagination.Next onClick={() => props.onClick(\"Next\")} />\r\n                <Pagination.Last onClick={() => props.onClick(\"Last\")} />\r\n              </>\r\n            )}\r\n          </Pagination>\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, InputGroup, Button, Table, ListGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    request: \"get transactions\",\r\n    namespace: \"Transactions\",\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const {\r\n    transactions,\r\n    countTransactions,\r\n    activePageTransactions,\r\n    transactionsPerPage,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  const { setActivePageTransactions } = props.barrelSetters;\r\n  const {\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n    getTransactions,\r\n    format,\r\n    formatDate,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n\r\n  const indication = () => {\r\n    return \"THE TABLE IS EMPTY\";\r\n  };\r\n\r\n  const onPageSelect = (number) => {\r\n    console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageTransactions > 1 ? activePageTransactions - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageTransactions <\r\n          Math.ceil(countTransactions / transactionsPerPage)\r\n            ? activePageTransactions + 1\r\n            : Math.ceil(countTransactions / transactionsPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countTransactions / transactionsPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getTransactions(number);\r\n  };\r\n\r\n  let cnt = 0;\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return (\r\n    <>\r\n      <ListGroup variant=\"flush\">\r\n        {transactions !== null &&\r\n          transactions.map((transaction, keyTransactions) => {\r\n            cnt++;\r\n\r\n            const {\r\n              business_description,\r\n              business_id,\r\n              business_image,\r\n              business_link,\r\n              business_status,\r\n              business_title,\r\n              comment,\r\n              conv_amount,\r\n              created,\r\n              currency,\r\n              exchange_rate,\r\n              sender_firstname,\r\n              sender_lastname,\r\n              recipient_firstname,\r\n              recipient_lastname,\r\n              purpose_description,\r\n              purpose_id,\r\n              purpose_image,\r\n              purpose_link,\r\n              purpose_status,\r\n              purpose_title,\r\n              recipient_id,\r\n              sender_id,\r\n              sender_status,\r\n              recipient_status,\r\n              to_account,\r\n              type,\r\n            } = transaction;\r\n\r\n            const i_am_sender = sender_id === accountNumber;\r\n            const i_am_recipient = recipient_id === accountNumber;\r\n\r\n            if (type === \"transfer U2S\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {sender_firstname} {sender_lastname}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n            }\r\n\r\n            if (type === \"transfer U2U\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {recipient_firstname} {recipient_lastname}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n            }\r\n\r\n            if (type === \"transfer U2B\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {purpose_id}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  {i_am_sender ? (\r\n                    \"\"\r\n                  ) : (\r\n                    <>\r\n                      <br />\r\n                      {sender_firstname} {sender_lastname}\r\n                    </>\r\n                  )}\r\n                  <br />\r\n                  {business_title} &middot; {purpose_title}\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n            }\r\n          })}\r\n      </ListGroup>\r\n\r\n      {cnt === 0 && (\r\n        <p className=\"text-center text-muted\">{t(\"No transactions\")}</p>\r\n      )}\r\n\r\n      <br />\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countTransactions / transactionsPerPage)}\r\n        active={activePageTransactions}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState, useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, Toast, Badge } from \"react-bootstrap\";\r\nimport { Settings } from \"@material-ui/icons\";\r\nimport _ from \"lodash\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"Shareholder\",\r\n    request: \"change share\",\r\n    purpose: null,\r\n    shareholder: null,\r\n    closeButton: true,\r\n    rangeControl: true,\r\n    sharePerCent: null,\r\n    businessTitle: null,\r\n    purposeTitle: null,\r\n    businessOwnerFirstname: null,\r\n    businessOwnerLastname: null,\r\n    sharesCreated: null,\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { purposeShareholders } = props.barrelGetters;\r\n  const { setPurposeShareholders } = props.barrelSetters;\r\n  const { sendRequest, formatPerCent, formatDate } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const [userQuery, setUserQuery] = useState(props.share);\r\n  const delayedQuery = useRef(_.debounce((q) => sendQuery(q), 2000)).current;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  const onChange = (e) => {\r\n    // console.log(props.shareholder, e.target.value);\r\n    setUserQuery(e.target.value);\r\n    delayedQuery(e.target.value);\r\n  };\r\n\r\n  const onClose = () => {\r\n    // console.log(\"delete\", props.purpose, props.shareholder);\r\n    let data = {};\r\n    data.purpose_id = props.purpose;\r\n    data.shareholder_id = props.shareholder;\r\n    return sendRequest({ req: \"remove shareholder\", data });\r\n  };\r\n\r\n  const sendQuery = (delayedQuery) => {\r\n    // console.log(props.purpose, props.shareholder, delayedQuery);\r\n    const ps = purposeShareholders;\r\n    ps[props.id].share = delayedQuery;\r\n    setPurposeShareholders(JSON.stringify(ps));\r\n    let data = {};\r\n    data.purpose_id = props.purpose;\r\n    data.shareholder_id = props.shareholder;\r\n    data.share = delayedQuery;\r\n    // console.log(data);\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    const sharesLabelId = `sharesLabel${props.key}`;\r\n    return (\r\n      <Toast key={props.key} onClose={onClose} style={{ minWidth: \"100%\" }}>\r\n        <Toast.Header closeButton={props.closeButton}>\r\n          <strong className=\"mr-auto\">\r\n            {props.firstname} {props.lastname}{\" \"}\r\n            <small>\r\n              <Settings\r\n                hidden={true}\r\n                fontSize=\"small\"\r\n                style={{ color: \"var(--dark)\" }}\r\n              />\r\n            </small>\r\n          </strong>\r\n          <small>\r\n            <span id={sharesLabelId}>{userQuery}</span> {t(\"shares\")}\r\n          </small>\r\n        </Toast.Header>\r\n        <Toast.Body>\r\n          <Form>\r\n            <Form.Group controlId=\"formRoles\">\r\n              <div>\r\n                {props.roles.map((role, key) => {\r\n                  return (\r\n                    <span key={key}>\r\n                      <Badge pill variant=\"secondary\">\r\n                        {role}\r\n                      </Badge>{\" \"}\r\n                    </span>\r\n                  );\r\n                })}\r\n              </div>\r\n            </Form.Group>\r\n            {props.rangeControl && (\r\n              <Form.Group controlId=\"formBasicRange\">\r\n                <Form.Control\r\n                  type=\"range\"\r\n                  variant=\"light\"\r\n                  // value={share}\r\n                  defaultValue={userQuery}\r\n                  // value={userQuery}\r\n                  min={0}\r\n                  max={1000}\r\n                  step={1}\r\n                  // ref={this.input}\r\n                  onChange={onChange}\r\n                />\r\n              </Form.Group>\r\n            )}\r\n          </Form>\r\n          <span>\r\n            {props.sharePerCent !== null && formatPerCent(props.sharePerCent)}{\" \"}\r\n            {props.businessTitle !== null && props.businessTitle}{\" \"}\r\n            {props.businessTitle !== null && props.purposeTitle !== null && (\r\n              <> &middot; </>\r\n            )}\r\n            {props.purposeTitle !== null && props.purposeTitle}{\" \"}\r\n          </span>\r\n          {props.sharesCreated !== null && (\r\n            <>\r\n              <br />\r\n              {formatDate(props.sharesCreated, {\r\n                month: \"long\",\r\n                day: \"numeric\",\r\n                year: \"numeric\",\r\n              })}\r\n            </>\r\n          )}{\" \"}\r\n          {(props.businessOwnerFirstname !== null ||\r\n            props.businessOwnerLastname !== null) && <br />}\r\n          {props.businessOwnerFirstname !== null &&\r\n            props.businessOwnerFirstname}{\" \"}\r\n          {props.businessOwnerLastname !== null && props.businessOwnerLastname}{\" \"}\r\n        </Toast.Body>\r\n      </Toast>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, InputGroup, Button, Table, ListGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\nimport Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\nimport Shareholder from \"../shareholder\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    request: \"get shares\",\r\n    namespace: \"Shares\",\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  const {\r\n    shares,\r\n    countShares,\r\n    activePageShares,\r\n    sharesPerPage,\r\n    accountNumber,\r\n    userData,\r\n  } = props.barrelGetters;\r\n  const { setActivePageShares } = props.barrelSetters;\r\n  const {\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n    getShares,\r\n    format,\r\n    formatPerCent,\r\n    formatDate,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n     * Functions\r\n     ============================================================================ */\r\n\r\n  const indication = () => {\r\n    return \"THE TABLE IS EMPTY\";\r\n  };\r\n\r\n  const onPageSelect = (number) => {\r\n    console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageShares > 1 ? activePageShares - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageShares < Math.ceil(countShares / sharesPerPage)\r\n            ? activePageShares + 1\r\n            : Math.ceil(countShares / sharesPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countShares / sharesPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getShares(number);\r\n  };\r\n\r\n  let cnt = 0;\r\n\r\n  /**\r\n     * Return\r\n     ============================================================================ */\r\n  return (\r\n    <>\r\n      {shares !== null &&\r\n        shares.map((share, keyShares) => {\r\n          cnt++;\r\n\r\n          const {\r\n            business_description,\r\n            business_id,\r\n            business_image,\r\n            business_link,\r\n            business_status,\r\n            business_title,\r\n            owner_firstname,\r\n            owner_lastname,\r\n            owner_status,\r\n            owner_uid,\r\n            purpose_description,\r\n            purpose_id,\r\n            purpose_image,\r\n            purpose_link,\r\n            purpose_status,\r\n            purpose_title,\r\n            shareholder_id,\r\n            shares_created,\r\n            shares_description,\r\n            share_per_cent,\r\n            shares_roles,\r\n            shares_share,\r\n            shares_status,\r\n            shares_title,\r\n          } = share;\r\n\r\n          const arrRoles = shares_roles !== null ? shares_roles.split(\",\") : [];\r\n          const content = `${owner_firstname} ${owner_lastname} / ${formatDate(\r\n            shares_created\r\n          )}`;\r\n\r\n          // console.log(\"keyShares:\", keyShares);\r\n\r\n          return (\r\n            <Shareholder\r\n              {...args}\r\n              key={keyShares}\r\n              id={keyShares}\r\n              shareholder={shareholder_id}\r\n              purpose={purpose_id}\r\n              firstname={userData.firstname}\r\n              lastname={userData.lastname}\r\n              share={shares_share}\r\n              roles={arrRoles}\r\n              closeButton={false}\r\n              rangeControl={false}\r\n              sharePerCent={share_per_cent}\r\n              businessOwnerFirstname={owner_firstname}\r\n              businessOwnerLastname={owner_lastname}\r\n              businessTitle={business_title}\r\n              purposeTitle={purpose_title}\r\n              sharesCreated={shares_created}\r\n            />\r\n          );\r\n        })}\r\n\r\n      {cnt === 0 && <p className=\"text-center text-muted\">{t(\"No shares\")}</p>}\r\n\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countShares / sharesPerPage)}\r\n        active={activePageShares}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport { Form, Button, Badge, Alert, Accordion, Card } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from \"react-bootstrap/AccordionToggle\";\r\nimport { Redirect } from \"react-router-dom\";\r\n// import Octicon, { ChevronRight } from \"@primer/octicons-react\";\r\n// import AccessAlarmIcon from \"@material-ui/icons/AccessAlarm\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\n\r\nimport ZCard from \"../card\";\r\nimport Transactions from \"../transactions\";\r\nimport Shares from \"../shares\";\r\n\r\nexport default (args) => {\r\n  // let defaults = {};\r\n  // const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userData,\r\n    accountNumber,\r\n    accordionView,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  const {\r\n    setAccountType,\r\n    setRedirectTo,\r\n    setAccordionView,\r\n  } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    getAccountData,\r\n    getTransactions,\r\n    getShares,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // const userData = props.data.userData;\r\n  // let format = props.format;\r\n  const { t } = useTranslation(\"Balance\");\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  // console.log(\"BALANCE DATA:\", props);\r\n  // console.log(\"BALANCE userData\", userData);\r\n  // const userDataParsed = JSON.parse(userData);\r\n  const userDataParsed = userData;\r\n\r\n  // let footer = <small className=\"text-muted\">Last updated 3 mins ago</small>;\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  // const gotoNextView = () => {\r\n  //   // console.log(props);\r\n\r\n  //   // props.data.setView(\"transfer\");\r\n  //   setRedirect(true);\r\n  // };\r\n\r\n  const onAccountTypeSelected = (type) => {\r\n    // console.log(type);\r\n\r\n    setAccountType(type);\r\n    setRedirectTo(\"/transfer\");\r\n  };\r\n\r\n  // console.log(userData);\r\n  const available =\r\n    userDataParsed !== null\r\n      ? format(\r\n          userDataParsed.acc_curr +\r\n            userDataParsed.acc_cred +\r\n            userDataParsed.acc_save\r\n        )\r\n      : null;\r\n  let acc_curr =\r\n    userDataParsed !== null ? format(userDataParsed.acc_curr) : null;\r\n  let acc_cred =\r\n    userDataParsed !== null ? format(userDataParsed.acc_cred) : null;\r\n  let acc_save =\r\n    userDataParsed !== null ? format(userDataParsed.acc_save) : null;\r\n\r\n  // if (props.data.view === \"transfer\") {\r\n  //   return <Redirect push to=\"/transfer\" />;\r\n  // }\r\n\r\n  // if (redirect) {\r\n  //   // props.data.setView(\"transfer\");\r\n  //   return <Redirect push to=\"/transfer\" />;\r\n  // }\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  const ToggleBalance = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionView(\"balance\");\r\n    getAccountData();\r\n  };\r\n\r\n  const ToggleTransactions = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionView(\"transactions\");\r\n    getTransactions(1);\r\n  };\r\n\r\n  const ToggleShares = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionView(\"shares\");\r\n    getShares(1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Accordion defaultActiveKey={accordionView}>\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"balance\"\r\n            style={{\r\n              cursor: \"pointer\",\r\n              // backgroundColor: \"#e8f6f3\",\r\n            }}\r\n            onClick={ToggleBalance}\r\n          >\r\n            {t(\"Balance\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"balance\">\r\n            <Card.Body>\r\n              <Form noValidate>\r\n                <Form.Group>\r\n                  <Form.Label>{t(\"Available\")}</Form.Label>\r\n                  <Form.Text>\r\n                    <div style={{ fontSize: \"3em\" }}>{available}</div>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Current account\")}</div>\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_curr\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_curr}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Credit account\")}</div>\r\n\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_cred\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_cred}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Savings account\")}</div>\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_save\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_save}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                  </ul>\r\n                </Form.Group>\r\n              </Form>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"transactions\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleTransactions}\r\n          >\r\n            {t(\"Transactions\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"transactions\">\r\n            <Card.Body>\r\n              <Transactions {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"shares\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleShares}\r\n          >\r\n            {t(\"Shares\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"shares\">\r\n            <Card.Body>\r\n              <Shares {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button, Spinner } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"transfer U2S\",\r\n    namespace: \"Transfer\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER TO SELF DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    request,\r\n    userData,\r\n    accountNumber,\r\n    accountType,\r\n    language,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userData = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  const { currency_abbr } = userData;\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    toAccount: yup.string().required(t(\"To Account is required\")),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} Form data\r\n   */\r\n  const transferToSelf = (data) => {\r\n    // console.log(\"TRANSFER U2S DATA:\", data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.amount = parseLocaleNumber(data.amount, language, \"USD\");\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n    }).format(data.amount);\r\n\r\n    // onTransfer({ req: props.request, data: data });\r\n    sendRequest({ req: props.request, data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    transferToSelf(data);\r\n  };\r\n\r\n  const TransferToSelfForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"validationToAccount\">\r\n          <Form.Label>{t(\"To account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"toAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.toAccount && touched.toAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option value=\"acc_curr\" hidden={accountType === \"acc_curr\"}>\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option value=\"acc_cred\" hidden={accountType === \"acc_cred\"}>\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option value=\"acc_save\" hidden={accountType === \"acc_save\"}>\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.toAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              // type=\"number\"\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              // onBlur={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request=\"transfer U2S\"\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToSelfForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        toAccount: \"\",\r\n        amount: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button, Spinner } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n * User imports\r\n */\r\nimport Card from \"../card\";\r\n\r\n/**\r\n * Component: TransferToPerson\r\n */\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"transfer U2U\", namespace: \"Transfer\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    request,\r\n    userData,\r\n    accountNumber,\r\n    language,\r\n    accountType,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  const { onTransfer } = props.barrelEventHandlers;\r\n\r\n  /** \r\n   * Custom hooks\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /** \r\n   * Destructuring\r\n   ============================================================================ */\r\n  const { currency_abbr } = userData;\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    toPersonalID: yup\r\n      .string()\r\n      .required(t(\"Recipients Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      ),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const transferToPerson = (data) => {\r\n    // console.log(\"TRANSFER U2U DATA:\", data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.amount = parseLocaleNumber(data.amount, language, \"USD\");\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n    }).format(data.amount);\r\n\r\n    sendRequest({ req: props.request, data: data });\r\n    // onTransfer({ req: props.request, data: data });\r\n  };\r\n\r\n  // return <>test</>;\r\n\r\n  const onSubmit = (data) => {\r\n    transferToPerson(data);\r\n  };\r\n\r\n  const TransferToPersonForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        {/* Field: From account */}\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        {/* Field: Recipients Personal ID */}\r\n        <Form.Group controlId=\"validationFormikToPersonalID\">\r\n          <Form.Label>{t(\"To Personal ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"XXXXXX-XXXXX\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"toPersonalID\"\r\n              value={values.toPersonalID}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.toPersonalID && touched.toPersonalID}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.toPersonalID}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Field: Description */}\r\n        <Form.Group\r\n          controlId=\"description\"\r\n          name=\"description\"\r\n          value={values.description}\r\n          onChange={handleChange}\r\n        >\r\n          <Form.Label>{t(\"Description\")}</Form.Label>\r\n          <Form.Control as=\"textarea\" rows=\"3\" />\r\n        </Form.Group>\r\n\r\n        {/* Field: Amount */}\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              // type=\"number\"\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              // onBlur={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Button: Next */}\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToPersonForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        toPersonalID: \"\",\r\n        amount: \"\",\r\n        description: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button, Spinner } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"transfer U2B\", namespace: \"Transfer\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER TO SELF DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    request,\r\n    userData,\r\n    accountNumber,\r\n    language,\r\n    accountType,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  const { onTransfer } = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /** \r\n   * Destructuring\r\n   ============================================================================ */\r\n  const { currency_abbr } = userData;\r\n\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    // businessTitle: yup\r\n    //   .string()\r\n    //   .required(t(\"Recipients Business ID is required\")),\r\n    purposeID: yup.string().required(t(\"Purpose ID is required\")),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const transferToBusiness = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.amount = parseLocaleNumber(data.amount, language, \"USD\");\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n    }).format(data.amount);\r\n    // data.amount = parseFloat(data.amount);\r\n    // data.amount = Number(data.amount.replace(/[^0-9.-]+/g, \"\"));\r\n\r\n    sendRequest({ req: props.request, data: data });\r\n    // onTransfer({ req: props.request, data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    transferToBusiness(data);\r\n  };\r\n\r\n  const TransferToBusinessForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      {/* From account */}\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        {/*\r\n        <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n          <Form.Label>{t(\"To Business ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"businessTitle\"\r\n              value={values.businessTitle}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.businessTitle && touched.businessTitle}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.businessTitle}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n        */}\r\n\r\n        {/* To purpose */}\r\n        <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n          <Form.Label>{t(\"To Purpose ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"purposeID\"\r\n              value={values.purposeID}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.purposeID && touched.purposeID}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.purposeID}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Field: Description */}\r\n        <Form.Group\r\n          controlId=\"description\"\r\n          name=\"description\"\r\n          value={values.description}\r\n          onChange={handleChange}\r\n        >\r\n          <Form.Label>{t(\"Description\")}</Form.Label>\r\n          <Form.Control as=\"textarea\" rows=\"3\" />\r\n        </Form.Group>\r\n\r\n        {/* Amount */}\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              type=\"string\" // do NOT change to number!!\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Submit button */}\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToBusinessForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        purposeID: \"\",\r\n        amount: \"\",\r\n        description: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import Card from \"../card\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { businessID: null };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"PURPOSE REGISTRATION PROPS:\", props);\r\n\r\n  const barrels = props.data;\r\n  const { businessID } = props;\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  // const { userData, accountNumber, language } = barrels.barrelGetters;\r\n  // const {} = barrels.barrelSetters;\r\n  const { getReviser, getWorkplace } = barrels.barrelFunctions;\r\n  const { onPurposeRegistration } = barrels.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([\"PurposeRegistration\"]);\r\n\r\n  const schema = yup.object({\r\n    purposeTitle: yup\r\n      .string()\r\n      .required(t(\"Purpose title is a required field\"))\r\n      .min(3, t(\"Purpose title too short\"))\r\n      .max(70, t(\"Purpose title too long\"))\r\n      .trim(),\r\n    purposeDescription: yup.string().optional(),\r\n  });\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const RegisterPurpose = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.businessID = businessID;\r\n\r\n    console.log(\"REGISTER PURPOSE DATA:\", data);\r\n\r\n    onPurposeRegistration({ req: \"register purpose\", data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    RegisterPurpose(data);\r\n  };\r\n\r\n  const RegisterPurposeForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Purpose Title (Purpose ID) */}\r\n      <Form.Group controlId=\"validationFormikPurposeID\">\r\n        <Form.Label>{t(\"Purpose Title\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"\"\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"purposeTitle\"\r\n            value={values.purposeTitle}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.purposeTitle && touched.purposeTitle}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.purposeTitle}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Purpose Description */}\r\n      <Form.Group\r\n        controlId=\"purposeDescription\"\r\n        name=\"purposeDescription\"\r\n        value={values.purposeDescription}\r\n        onChange={handleChange}\r\n      >\r\n        <Form.Label>{t(\"Purpose Description\")}</Form.Label>\r\n        <Form.Control as=\"textarea\" rows=\"3\" />\r\n      </Form.Group>\r\n\r\n      {/* Submit button */}\r\n      <Button type=\"submit\" block>\r\n        {t(\"Submit\")}\r\n      </Button>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterPurposeForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        purposeTitle: \"\",\r\n        purposeDescription: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React, { createRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button, Toast } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"register shareholder\",\r\n    namespace: \"ShareholderRegistration\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  const barrels = props;\r\n  const { purposeID } = props;\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber, request } = barrels.barrelGetters;\r\n  // const {} = barrels.barrelSetters;\r\n  const {\r\n    // format,\r\n    // parseLocaleNumber,\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n  } = barrels.barrelFunctions;\r\n  const {} = barrels.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  // const thisRef = createRef();\r\n\r\n  const schema = yup.object({\r\n    personalID: yup\r\n      .string()\r\n      .required(t(\"Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      ),\r\n    shareholderRoles: yup.string().optional(),\r\n    shares: yup\r\n      .number()\r\n      .typeError(t(\"Shares must be a number\"))\r\n      .required(t(\"Shares is required\"))\r\n      .min(0, t(\"Shares too few\"))\r\n      .max(1000, t(\"Shares too many\")),\r\n  });\r\n\r\n  /**\r\n   * Send shareholder registration request\r\n   * @param {object} data\r\n   */\r\n  const onSubmit = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.purposeID = purposeID;\r\n\r\n    // console.log(\"REGISTER SHAREHOLDER DATA:\", data);\r\n\r\n    // onShareholderRegistration({ req: props.request, data: data });\r\n    sendRequest({ req: props.request, data: data });\r\n  };\r\n\r\n  const RegisterShareholderForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form id=\"shareholderRegistrationForm\" noValidate onSubmit={handleSubmit}>\r\n      <Toast style={{ minWidth: \"100%\" }}>\r\n        {/*\r\n        <Toast.Header closeButton={false}>\r\n          <strong className=\"mr-auto\">{t(\"Add Shareholder\")}</strong>\r\n        </Toast.Header>\r\n        */}\r\n        <Toast.Body>\r\n          <Form.Group controlId=\"validationFormikShareholderPersonalID\">\r\n            <Form.Label>{t(\"Shareholder Personal ID\")}</Form.Label>\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"XXXXXX-XXXXX\")}\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"personalID\"\r\n                value={values.personalID}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.personalID && touched.personalID}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.personalID}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n          {/* Shareholder Roles */}\r\n          <Form.Group controlId=\"validationFormikShareholderRoles\">\r\n            <Form.Label>{t(\"Shareholder Roles\")}</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"\"\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"shareholderRoles\"\r\n                value={values.shareholderRoles}\r\n                onChange={handleChange}\r\n                isInvalid={\r\n                  !!errors.shareholderRoles && touched.shareholderRoles\r\n                }\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.shareholderRoles}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          {/* Shares */}\r\n          <Form.Group controlId=\"validationFormikShareholderRoles\">\r\n            <Form.Label>{t(\"Shares\")}</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type=\"number\"\r\n                min={0}\r\n                max={1000}\r\n                step={1}\r\n                placeholder=\"\"\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"shares\"\r\n                value={values.shares}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.shares && touched.shares}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.shares}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          <SubmitButton\r\n            {...args}\r\n            caption={t(\"Submit\")}\r\n            request={props.request}\r\n            namespace={props.namespace}\r\n          />\r\n        </Toast.Body>\r\n      </Toast>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterShareholderForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        personalID: \"\",\r\n        shares: 0,\r\n        shareholderRoles: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Accordion,\r\n  Card,\r\n  Tab,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  // Nav,\r\n  Form,\r\n  Toast,\r\n  Badge,\r\n  // Container,\r\n  // Button,\r\n} from \"react-bootstrap\";\r\nimport { useAccordionToggle } from \"react-bootstrap/AccordionToggle\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Octicon, { Plus, PlusSmall, Gear } from \"@primer/octicons-react\";\r\nimport { Add, Settings } from \"@material-ui/icons\";\r\n\r\nimport Dropzone from \"../dropzone\";\r\n\r\nimport BusinessRegistration from \"../businessRegistration\";\r\nimport PurposeRegistration from \"../purposeRegistration\";\r\nimport ShareholderRegistration from \"../shareholderRegistration\";\r\n// import shareholderRegistration from \"../shareholderRegistration\";\r\nimport Shareholder from \"../shareholder\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { namespace: \"MyBusiness\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER DATA\", props);\r\n\r\n  // const [businessLoaded, setBusinessLoaded] = useState(null);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userBusinesses,\r\n    activeBusiness,\r\n    businessPurposes,\r\n    activeBusinesPurpose,\r\n    purposeShareholders,\r\n    language,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  const { setRedirectTo } = props.barrelSetters;\r\n  const {\r\n    getBusinesses,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n  } = props.barrelFunctions;\r\n  // const {  } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  useEffect(() => {\r\n    // getBusinesses();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n   * Toggle business (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  // const ToggleBusiness = ({ children, eventKey, businessID }) => {\r\n  //   const decoratedOnClick = useAccordionToggle(eventKey, () =>\r\n  //     getBusinessPurposes(businessID, eventKey)\r\n  //   );\r\n\r\n  //   return <div onClick={decoratedOnClick}>{children}</div>;\r\n  // };\r\n  const ToggleBusiness = ({ eventKey, businessID }) => {\r\n    getBusinessPurposes(businessID, eventKey);\r\n  };\r\n\r\n  /**\r\n   * Toggle purpose (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  // const TogglePurpose = ({ children, eventKey, purposeID }) => {\r\n  //   const decoratedOnClick = useAccordionToggle(eventKey, () =>\r\n  //     // getBusinessPurposes(businessID, eventKey)\r\n\r\n  //     getPurposeShareholders(purposeID, eventKey)\r\n  //   );\r\n\r\n  //   return <div onClick={decoratedOnClick}>{children}</div>;\r\n  // };\r\n\r\n  const TogglePurpose = ({ eventKey, purposeID }) => {\r\n    getPurposeShareholders(purposeID, eventKey);\r\n  };\r\n\r\n  /**\r\n   * Toggle shareholders (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  // const ToggleShareholders = ({ children, eventKey, purposeID }) => {\r\n  //   const decoratedOnClick = useAccordionToggle(eventKey, () =>\r\n  //     getPurposeShareholders(purposeID, eventKey)\r\n  //   );\r\n\r\n  //   return <div onClick={decoratedOnClick}>{children}</div>;\r\n  // };\r\n\r\n  /**\r\n   * Create:\r\n   * - business menu\r\n   * - business purposes menu\r\n   */\r\n  let menuItems = [];\r\n  let purposes = [];\r\n  let countShareholders = 0;\r\n  userBusinesses !== null &&\r\n    Object.keys(userBusinesses).map((business, keyBusiness) => {\r\n      menuItems[keyBusiness] = [];\r\n      purposes[keyBusiness] = [];\r\n      businessPurposes !== null &&\r\n        Object.keys(businessPurposes).map((purpose, keyPurpose) => {\r\n          if (\r\n            businessPurposes[purpose].business_id ===\r\n            userBusinesses[business].business_id\r\n          ) {\r\n            menuItems[keyBusiness][keyPurpose] = (\r\n              <ListGroup.Item\r\n                action\r\n                key={businessPurposes[purpose].purpose_id}\r\n                eventKey={businessPurposes[purpose].purpose_id}\r\n                onClick={() =>\r\n                  TogglePurpose({\r\n                    eventKey: keyPurpose,\r\n                    purposeID: businessPurposes[purpose].purpose_id,\r\n                  })\r\n                }\r\n              >\r\n                <span style={{ whiteSpace: \"nowrap\" }}>\r\n                  {keyBusiness + 1}.{keyPurpose + 1}{\" \"}\r\n                  {businessPurposes[purpose].title}\r\n                </span>\r\n              </ListGroup.Item>\r\n            );\r\n\r\n            purposes[keyBusiness][keyPurpose] = (\r\n              <Tab.Pane\r\n                key={businessPurposes[purpose].purpose_id}\r\n                eventKey={businessPurposes[purpose].purpose_id}\r\n              >\r\n                <Accordion defaultActiveKey=\"shareholders\">\r\n                  {/* Purpose ID */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"purpose_id\"\r\n                    >\r\n                      {t(\"Purpose ID\")}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"purpose_id\">\r\n                      <Card.Body>\r\n                        <Card.Text>\r\n                          {businessPurposes[purpose].purpose_id}\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n                  {/* Purpose description */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"description\"\r\n                    >\r\n                      {t(\"Purpose Description\")}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"description\">\r\n                      <Card.Body>\r\n                        <Card.Text>\r\n                          {businessPurposes[purpose].description}\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"shareholders\"\r\n                    >\r\n                      {t(\"Purpose Shareholders\")}\r\n                    </Accordion.Toggle>\r\n\r\n                    {/* Purpose shareholders */}\r\n                    <Accordion.Collapse eventKey=\"shareholders\">\r\n                      <Card.Body>\r\n                        {typeof purposeShareholders !== \"undefined\" &&\r\n                          purposeShareholders !== null &&\r\n                          Object.keys(purposeShareholders).map(\r\n                            (shareholder, keyShareholder) => {\r\n                              if (\r\n                                purposeShareholders[shareholder].purpose_id ===\r\n                                businessPurposes[purpose].purpose_id\r\n                              ) {\r\n                                const { purpose_id } = purposeShareholders[\r\n                                  shareholder\r\n                                ];\r\n                                const {\r\n                                  shareholder_id,\r\n                                  firstname,\r\n                                  lastname,\r\n                                  email,\r\n                                  roles,\r\n                                  share,\r\n                                } = purposeShareholders[shareholder];\r\n\r\n                                countShareholders++;\r\n\r\n                                const arrRoles =\r\n                                  roles !== null ? roles.split(\",\") : [];\r\n\r\n                                return (\r\n                                  <Shareholder\r\n                                    {...args}\r\n                                    key={keyShareholder}\r\n                                    id={keyShareholder}\r\n                                    shareholder={shareholder_id}\r\n                                    purpose={purpose_id}\r\n                                    firstname={firstname}\r\n                                    lastname={lastname}\r\n                                    share={share}\r\n                                    roles={arrRoles}\r\n                                  />\r\n                                );\r\n                              }\r\n                            }\r\n                          )}\r\n                        {countShareholders === 0 && (\r\n                          <Card.Text className=\"text-muted\">\r\n                            {t(\"No shareholders\")}\r\n                          </Card.Text>\r\n                        )}\r\n\r\n                        {/* End shareholders list */}\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"2\"\r\n                    >\r\n                      <span style={{ whiteSpace: \"nowrap\" }}>\r\n                        <Add\r\n                          fontSize=\"small\"\r\n                          style={{ color: \"var(--dark)\" }}\r\n                        />\r\n                        &nbsp;{t(\"Add Shareholder\")}\r\n                      </span>\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"2\">\r\n                      <Card.Body>\r\n                        <ShareholderRegistration\r\n                          {...args}\r\n                          purposeID={businessPurposes[purpose].purpose_id}\r\n                        />\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n                </Accordion>\r\n              </Tab.Pane>\r\n            );\r\n          }\r\n          countShareholders = 0;\r\n          return true;\r\n        });\r\n      return true;\r\n    });\r\n\r\n  const jsx = (\r\n    <Accordion defaultActiveKey={activeBusiness}>\r\n      {/* List user businesses */}\r\n      {userBusinesses !== null &&\r\n        Object.keys(userBusinesses).map((business, keyBusiness) => {\r\n          const date = new Date(userBusinesses[business].created);\r\n          const businessSince = new Intl.DateTimeFormat(language).format(date);\r\n          // keyBusiness[3] = userBusinesses[business].business_id;\r\n          return (\r\n            <Card key={keyBusiness}>\r\n              <Accordion.Toggle\r\n                as={Card.Header}\r\n                eventKey={keyBusiness}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() =>\r\n                  ToggleBusiness({\r\n                    eventKey: keyBusiness,\r\n                    businessID: userBusinesses[business].business_id,\r\n                  })\r\n                }\r\n              >\r\n                {keyBusiness + 1} {userBusinesses[business].title}\r\n              </Accordion.Toggle>\r\n              <Accordion.Collapse eventKey={keyBusiness}>\r\n                <Card.Body>\r\n                  <Tab.Container\r\n                    id=\"left-tabs-example\"\r\n                    defaultActiveKey={\r\n                      activeBusinesPurpose !== null\r\n                        ? activeBusinesPurpose\r\n                        : \"aboutBusiness\"\r\n                    }\r\n                  >\r\n                    <Row>\r\n                      {/* Layout: Left side - Menu */}\r\n                      <Col sm={5}>\r\n                        <ListGroup variant=\"flush\">\r\n                          {/* Menu item: About business */}\r\n                          <ListGroup.Item action eventKey=\"aboutBusiness\">\r\n                            {t(\"About\")}\r\n                          </ListGroup.Item>\r\n\r\n                          {/* Menu items: Registered purposes */}\r\n                          {menuItems[keyBusiness]}\r\n\r\n                          {/* Menu item: Add purpose */}\r\n                          <ListGroup.Item action eventKey=\"addPurpose\">\r\n                            <span style={{ whiteSpace: \"nowrap\" }}>\r\n                              <Add\r\n                                fontSize=\"small\"\r\n                                style={{ color: \"var(--dark)\" }}\r\n                              />\r\n                              &nbsp;{t(\"Add Purpose\")}\r\n                            </span>\r\n                          </ListGroup.Item>\r\n                        </ListGroup>\r\n                      </Col>\r\n\r\n                      {/* Layout: Right side - Content */}\r\n                      <Col sm={7}>\r\n                        <Tab.Content>\r\n                          <Tab.Pane eventKey=\"aboutBusiness\">\r\n                            <Accordion defaultActiveKey=\"businessID\">\r\n                              {/* Business logo */}\r\n\r\n                              {/*\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  eventKey=\"businessLogo\"\r\n                                >\r\n                                  [LOGO]\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"businessLogo\">\r\n                                  <Card border=\"light\">\r\n                                    <Card.Body>\r\n                                      <Dropzone data={args} />\r\n                                    </Card.Body>\r\n                                  </Card>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n                              */}\r\n\r\n                              {/* Business ID */}\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  eventKey=\"businessID\"\r\n                                >\r\n                                  {t(\"Business ID\")}\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"businessID\">\r\n                                  <Card border=\"light\">\r\n                                    <Card.Body>\r\n                                      <Card.Text>\r\n                                        {userBusinesses[business].business_id}\r\n                                      </Card.Text>\r\n                                    </Card.Body>\r\n                                  </Card>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n\r\n                              {/* Business description */}\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  eventKey=\"businessDescription\"\r\n                                >\r\n                                  {t(\"Business Description\")}\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"businessDescription\">\r\n                                  <Card border=\"light\">\r\n                                    <Card.Body>\r\n                                      <Card.Text>\r\n                                        {userBusinesses[business].description}\r\n                                      </Card.Text>\r\n                                    </Card.Body>\r\n                                  </Card>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n\r\n                              {/* Business Creation Date */}\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  eventKey=\"businessCreationDate\"\r\n                                >\r\n                                  {t(\"Business Created\")}\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"businessCreationDate\">\r\n                                  <Card border=\"light\">\r\n                                    <Card.Body>\r\n                                      <Card.Text>{businessSince}</Card.Text>\r\n                                    </Card.Body>\r\n                                  </Card>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n                            </Accordion>\r\n                          </Tab.Pane>\r\n\r\n                          {/* Start Business purposes */}\r\n                          {purposes[keyBusiness]}\r\n                          {/* End Business purposes */}\r\n\r\n                          {/* Add new purpose */}\r\n                          <Tab.Pane eventKey=\"addPurpose\">\r\n                            <Accordion defaultActiveKey=\"newPurpose\">\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  eventKey=\"newPurpose\"\r\n                                >\r\n                                  {t(\"New Purpose\")}\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"newPurpose\">\r\n                                  <Card.Body>\r\n                                    <PurposeRegistration\r\n                                      data={args}\r\n                                      businessID={\r\n                                        userBusinesses[business].business_id\r\n                                      }\r\n                                    />\r\n                                  </Card.Body>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n                            </Accordion>\r\n                          </Tab.Pane>\r\n                        </Tab.Content>\r\n                      </Col>\r\n                    </Row>\r\n                  </Tab.Container>\r\n                </Card.Body>\r\n              </Accordion.Collapse>\r\n            </Card>\r\n          );\r\n          // console.log(\"BUSINESS:\", userBusinesses[business]);\r\n        })}\r\n\r\n      {/* Add business */}\r\n      <Card>\r\n        <Accordion.Toggle\r\n          as={Card.Header}\r\n          eventKey=\"addBusiness\"\r\n          style={{ cursor: \"pointer\" }}\r\n        >\r\n          <span>\r\n            <Add fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n            &nbsp;\r\n            {t(\"Add Business\")}\r\n          </span>\r\n        </Accordion.Toggle>\r\n        <Accordion.Collapse eventKey=\"addBusiness\">\r\n          <Card.Body>\r\n            <BusinessRegistration {...args} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  );\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  return <>{jsx}</>;\r\n};\r\n","import \"./UserEditor.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ListGroup, Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport {\r\n  Visibility,\r\n  VisibilityOff,\r\n  Close,\r\n  Edit,\r\n  Done,\r\n} from \"@material-ui/icons\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    namespace: \"UserEditor\",\r\n    request: \"update user\",\r\n    mode: \"label\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"USER EDITOR PROPS:\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userData,\r\n    accountNumber,\r\n    currencies,\r\n    currencyAbbr,\r\n    language,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest, getReviser, getWorkplace } = props.barrelFunctions;\r\n  const { onRedirect } = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [editFirstname, setEditFirstname] = useState(false);\r\n  const [editLastname, setEditLastname] = useState(false);\r\n  const [editEmail, setEditEmail] = useState(false);\r\n  const [editPassword, setEditPassword] = useState(false);\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  const [submitButtonVisible, setSubmitButtonVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (editFirstname || editLastname || editEmail || editPassword) {\r\n      setSubmitButtonVisible(true);\r\n    } else {\r\n      setSubmitButtonVisible(false);\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [editFirstname, editLastname, editEmail, editPassword]);\r\n\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  const sendUserRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    // data.language = language;\r\n    // data.email = userData.email;\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    data.personalID = accountNumber;\r\n    if (!editFirstname) data.firstname = null;\r\n    if (!editLastname) data.lastname = null;\r\n    if (!editEmail) data.email = userData.email;\r\n    if (!editPassword) data.password = null;\r\n\r\n    // console.log(\"onSubmit:\", data);\r\n\r\n    if (sendUserRegistrationRequest(data)) {\r\n      // User registration request was submitted\r\n    }\r\n  };\r\n\r\n  const yupObject = {\r\n    firstName: editFirstname\r\n      ? yup.string().required(t(\"First name is required\"))\r\n      : yup.string().optional(),\r\n    lastName: editLastname\r\n      ? yup.string().required(t(\"Last name is required\"))\r\n      : yup.string().optional(),\r\n    email: editEmail\r\n      ? yup\r\n          .string()\r\n          .email(t(\"Invalid email address\"))\r\n          .required(t(\"Email is required\"))\r\n      : yup.string().optional(),\r\n    password: editPassword\r\n      ? yup\r\n          .string()\r\n          .required(t(\"No password provided\"))\r\n          .min(8, t(\"Password is too short\"))\r\n          // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n          .matches(\r\n            /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n            t(\"Password is too weak\")\r\n          )\r\n      : yup.string().optional(),\r\n  };\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object(yupObject);\r\n\r\n  /**\r\n   * Data consistency tests\r\n   */\r\n  if (userData === null) return <></>;\r\n\r\n  /**\r\n   * Destructuring\r\n   */\r\n  const { mode } = props;\r\n  const {\r\n    firstname,\r\n    lastname,\r\n    email,\r\n    // language,\r\n    currency_name,\r\n    currency_abbr,\r\n  } = userData;\r\n  const currency = `${currency_name} (${currency_abbr})`;\r\n\r\n  const UserEditorForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <Card title={t(\"Profile\")}>\r\n        {/* First name */}\r\n        <ListGroup variant=\"flush\">\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"First name\")}</Form.Label>\r\n            {!editFirstname ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditFirstname(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n                <br />\r\n                <small>{firstname}</small>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditFirstname(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editFirstname && (\r\n              <Form.Group controlId=\"validationFormikFirstName\">\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Enter first name\")}\r\n                    name=\"firstName\"\r\n                    value={values.firstName}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.firstName && touched.firstName}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.firstName}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n            )}\r\n          </ListGroup.Item>\r\n\r\n          {/* Last name */}\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"Last name\")}</Form.Label>\r\n            {!editLastname ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditLastname(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n                <br />\r\n                <small>{lastname}</small>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditLastname(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editLastname && (\r\n              <Form.Group controlId=\"validationFormikLastName\">\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Enter last name\")}\r\n                    name=\"lastName\"\r\n                    value={values.lastName}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.lastName && touched.lastName}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.lastName}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n            )}\r\n          </ListGroup.Item>\r\n\r\n          {/* Email */}\r\n          {accountNumber !== null && (\r\n            <ListGroup.Item as=\"div\" action>\r\n              <Form.Label>{t(\"Email address\")}</Form.Label>\r\n              {!editEmail ? (\r\n                <>\r\n                  <span style={{ float: \"right\" }}>\r\n                    <Edit\r\n                      onClick={() => setEditEmail(true)}\r\n                      fontSize=\"small\"\r\n                      style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                    />\r\n                  </span>\r\n                  <br />\r\n                  <small>{email}</small>\r\n                </>\r\n              ) : (\r\n                <span style={{ float: \"right\" }}>\r\n                  <Close\r\n                    onClick={() => setEditEmail(false)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n              )}\r\n\r\n              {editEmail && (\r\n                <Form.Group controlId=\"validationFormikEmail\">\r\n                  <InputGroup>\r\n                    <Form.Control\r\n                      placeholder={t(\"Enter email\")}\r\n                      name=\"email\"\r\n                      value={values.email}\r\n                      onChange={handleChange}\r\n                      // onBlur={handleChange}\r\n                      isInvalid={!!errors.email && touched.email}\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.email}\r\n                    </Form.Control.Feedback>\r\n                  </InputGroup>\r\n                </Form.Group>\r\n              )}\r\n            </ListGroup.Item>\r\n          )}\r\n\r\n          {/* Password */}\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"Password\")}</Form.Label>\r\n            {!editPassword ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditPassword(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditPassword(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editPassword && (\r\n              <>\r\n                {/* New password */}\r\n                <Form.Group controlId=\"validationFormikPassword\">\r\n                  <InputGroup>\r\n                    <Form.Control\r\n                      type={passwordVisible ? \"text\" : \"password\"}\r\n                      placeholder={t(\"Enter new password\")}\r\n                      name=\"password\"\r\n                      value={values.password}\r\n                      onChange={handleChange}\r\n                      // onBlur={handleChange}\r\n                      isInvalid={!!errors.password && touched.password}\r\n                    />\r\n                    <InputGroup.Append>\r\n                      <InputGroup.Text\r\n                        id=\"inputGroupAppend\"\r\n                        onClick={togglePassword}\r\n                        style={{\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        {passwordVisible ? (\r\n                          <VisibilityOff\r\n                            fontSize=\"small\"\r\n                            style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                          />\r\n                        ) : (\r\n                          <Visibility\r\n                            fontSize=\"small\"\r\n                            style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                          />\r\n                        )}\r\n                      </InputGroup.Text>\r\n                    </InputGroup.Append>\r\n\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.password}\r\n                    </Form.Control.Feedback>\r\n                  </InputGroup>\r\n                </Form.Group>\r\n              </>\r\n            )}\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n\r\n        <Form.Group controlId=\"validationSubmitButton\">\r\n          <SubmitButton\r\n            {...args}\r\n            caption={t(\"Submit\")}\r\n            visible={submitButtonVisible}\r\n            marginTop={20}\r\n            request={props.request}\r\n            namespace={props.namespace}\r\n          />\r\n        </Form.Group>\r\n      </Card>\r\n    </Form>\r\n  );\r\n\r\n  const jsx =\r\n    mode == \"label\" ? (\r\n      `${firstname} ${lastname}`\r\n    ) : (\r\n      <Formik\r\n        component={UserEditorForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          firstName: userData.firstname,\r\n          lastName: userData.lastname,\r\n          email: userData.email,\r\n          password: \"\",\r\n        }}\r\n      />\r\n    );\r\n\r\n  return <>{jsx}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, InputGroup, Button, Table } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {\r\n    request: \"register currency\",\r\n    namespace: \"Currencies\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    currencies,\r\n    countCurrencies,\r\n    activePageCurrencies,\r\n    currenciesPerPage,\r\n    currencyAbbr,\r\n    userData,\r\n  } = props.barrelGetters;\r\n  const { setActivePageCurrencies, setCurrencyAbbr } = props.barrelSetters;\r\n  const {\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n    getCurrencies,\r\n    formatExchangeRate,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Destructured vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n\r\n  const indication = () => {\r\n    return \"THE TABLE IS EMPTY\";\r\n  };\r\n\r\n  const onCurrencySelected = (e) => {\r\n    setCurrencyAbbr(e.target.id);\r\n    sendRequest({\r\n      req: \"register user currency\",\r\n      data: { email: userData.email, currency_id: e.target.id },\r\n    });\r\n  };\r\n\r\n  const onPageSelect = (number) => {\r\n    console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageCurrencies > 1 ? activePageCurrencies - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageCurrencies < Math.ceil(countCurrencies / currenciesPerPage)\r\n            ? activePageCurrencies + 1\r\n            : Math.ceil(countCurrencies / currenciesPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countCurrencies / currenciesPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getCurrencies(number);\r\n  };\r\n\r\n  /**\r\n   * Form\r\n   ============================================================================ */\r\n  const CurrenciesForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <>\r\n      <Table responsive striped bordered hover size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Select\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Abbr\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Name\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Region\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Rate\")}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {currencies !== null &&\r\n            currencies.map((currency, keyCUrrency) => {\r\n              // console.log(\"CURRENCY\", currency);\r\n\r\n              const { name, abbr, rate, region, status, sponsors } = currency;\r\n              return (\r\n                <tr key={keyCUrrency}>\r\n                  <td style={{ textAlign: \"center\" }}>\r\n                    <Form.Check\r\n                      type=\"radio\"\r\n                      checked={currencyAbbr === abbr}\r\n                      name=\"selected-currency\"\r\n                      id={abbr}\r\n                      aria-label=\"option 1\"\r\n                      onChange={onCurrencySelected}\r\n                    />\r\n                  </td>\r\n                  <td style={{ textAlign: \"center\" }}>{abbr}</td>\r\n                  <td style={{ textAlign: \"left\" }}>{name}</td>\r\n                  <td style={{ textAlign: \"left\" }}>{region}</td>\r\n                  <td style={{ textAlign: \"right\" }}>\r\n                    {formatExchangeRate(rate)}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </Table>\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countCurrencies / currenciesPerPage)}\r\n        active={activePageCurrencies}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n\r\n  /**\r\n   * Formik return\r\n   ============================================================================ */\r\n  // onSubmit={onSubmit}\r\n  return (\r\n    <Formik\r\n      component={CurrenciesForm}\r\n      initialValues={{\r\n        curr_abbr: \"\",\r\n        curr_title: \"\",\r\n        curr_region: \"\",\r\n        curr_rate: 1.0,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, InputGroup, Button, Table } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"CurrencyRegistration\",\r\n    request: \"register currency\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    currencies,\r\n    countCurrencies,\r\n    activePageCurrencies,\r\n    currenciesPerPage,\r\n  } = props.barrelGetters;\r\n  const { setActivePageCurrencies } = props.barrelSetters;\r\n  const {\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n    getCurrencies,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Destructured vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([\"CurrencyRegistration\"]);\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    curr_abbr: yup\r\n      .string()\r\n      .required(t(\"Currency abbreviation is required\"))\r\n      .min(3, t(\"Currency abbreviation is too short\"))\r\n      .max(5, t(\"Currency abbreviation is too long\")),\r\n    curr_title: yup\r\n      .string()\r\n      .required(t(\"Currency name is required\"))\r\n      .min(3, t(\"Currency name is too short\")) // must be at least 3 characters\r\n      .max(70, t(\"Currency name is too long\")), // must be at most 70 characters\r\n    curr_region: yup\r\n      .string()\r\n      .required(t(\"Currency region is required\"))\r\n      .min(3, t(\"Currency region is too short\")) // must be at least 3 characters\r\n      .max(70, t(\"Currency region is too long\")), // must be at most 70 characters\r\n    curr_rate: yup\r\n      .string()\r\n      .required(t(\"Exchange rate is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Exchange Rate Regex\")),\r\n        t(\"Wrong exchange rate format\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n  const onSubmit = (data) => {\r\n    console.log(data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  const indication = () => {\r\n    return \"THE TABLE IS EMPTY\";\r\n  };\r\n\r\n  /**\r\n   * Form\r\n   ============================================================================ */\r\n  const CurrencyRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <>\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        {/* Currency abbreviation */}\r\n        <Form.Group controlId=\"validationFormikCurrAbbr\">\r\n          <Form.Label>{t(\"Abbreviation\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_abbr\"\r\n              value={values.curr_abbr}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_abbr && touched.curr_abbr}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_abbr}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Currency name */}\r\n        <Form.Group controlId=\"validationFormikCurrName\">\r\n          <Form.Label>{t(\"Currency Name\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_title\"\r\n              value={values.curr_title}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_title && touched.curr_title}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_title}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Currency region */}\r\n        <Form.Group controlId=\"validationFormikCurrRegion\">\r\n          <Form.Label>{t(\"Currency Region\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_region\"\r\n              value={values.curr_region}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_region && touched.curr_region}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_region}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Initial exchange rate */}\r\n        <Form.Group controlId=\"validationFormikCurrRate\">\r\n          <Form.Label>{t(\"Initial Exchange Rate\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_rate\"\r\n              value={values.curr_rate}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_rate && touched.curr_rate}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_rate}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Submit button */}\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </>\r\n  );\r\n\r\n  /**\r\n   * Formik return\r\n   ============================================================================ */\r\n  return (\r\n    <Formik\r\n      component={CurrencyRegistrationForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        curr_abbr: \"\",\r\n        curr_title: \"\",\r\n        curr_region: \"\",\r\n        curr_rate: 1.0,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import { Redirect } from \"react-router-dom\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  // Redirect,\r\n} from \"react-router-dom\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  // Button,\r\n  // Breadcrumb,\r\n  NavDropdown,\r\n} from \"react-bootstrap\";\r\n// import Octicon, { SignOut } from \"@primer/octicons-react\";\r\nimport { ExitToApp } from \"@material-ui/icons\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport AccountRegistration from \"../../accountRegistration\";\r\nimport BusinessRegistration from \"../../businessRegistration\";\r\nimport { Balance, Transfer } from \"../../transfer\";\r\nimport MyBusiness from \"../../myBusiness\";\r\nimport UserEditor from \"../../userEditor\";\r\nimport CurrencyContainer from \"../../currencyContainer\";\r\n\r\n// const AccountRegistration = React.lazy(() =>\r\n//   import(\"../../accountRegistration\")\r\n// );\r\n// const BusinessRegistration = React.lazy(() =>\r\n//   import(\"../../businessRegistration\")\r\n// );\r\n// const MyBusiness = React.lazy(() => import(\"../../myBusiness\"));\r\n// const UserEditor = React.lazy(() => import(\"../../userEditor\"));\r\n// const CurrencyContainer = React.lazy(() => import(\"../../currencyContainer\"));\r\n\r\n/**\r\n * Component: Summary\r\n */\r\nexport default (args) => {\r\n  // console.log(\"SUMMARY\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { namespace: \"Summary\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getCurrencies, getBusinesses } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  /**\r\n   * Data consistency tests\r\n   */\r\n  // if (accountNumber === null) return <>{t(\"Something went wrong\")}</>;\r\n\r\n  const navigation = (\r\n    <>\r\n      <Navbar\r\n        collapseOnSelect\r\n        expand=\"md\"\r\n        // className=\"card-header\"\r\n        // className=\"navbar-trans\"\r\n        // bg=\"light\"\r\n        variant=\"light\"\r\n        style={{\r\n          borderRadius: \"5px\",\r\n          background: \"transparent !important\",\r\n          backgroundColor: \"\",\r\n          boxShadow: \"none\",\r\n        }}\r\n      >\r\n        <Navbar.Brand href=\"/\">\r\n          <img\r\n            src=\"gfx/zlogo_light.png\"\r\n            width=\"auto\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n            alt={t(\"Logo\")}\r\n          />\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            {accountNumber !== null && (\r\n              <>\r\n                <Nav.Link eventKey=\"balance\" href=\"/balance\">\r\n                  {t(\"Balance\")}\r\n                </Nav.Link>\r\n                <Nav.Link eventKey=\"transfer\" href=\"/transfer\">\r\n                  {t(\"Transfer\")}\r\n                </Nav.Link>\r\n                <Nav.Link\r\n                  eventKey=\"my-business\"\r\n                  onClick={getBusinesses}\r\n                  href=\"#\"\r\n                >\r\n                  {t(\"Business\")}\r\n                </Nav.Link>\r\n                <Nav.Link eventKey=\"currency\" href=\"/currency\">\r\n                  {t(\"Currency\")}\r\n                </Nav.Link>\r\n              </>\r\n            )}\r\n          </Nav>\r\n\r\n          <Nav>\r\n            <Nav.Link eventKey=\"profile\" href=\"/profile\">\r\n              <UserEditor {...args} />\r\n            </Nav.Link>\r\n          </Nav>\r\n          <Nav>\r\n            <Nav.Link eventKey=\"sign-out\" href=\"/sign-out\">\r\n              <ExitToApp style={{ color: \"var(--dark)\" }} />\r\n            </Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </>\r\n  );\r\n\r\n  const viewBalanceOrTransfer = (\r\n    <Router>\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          component={() => {\r\n            return accountNumber !== null\r\n              ? Balance(args)\r\n              : AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/summary\"\r\n          component={() => {\r\n            return accountNumber !== null\r\n              ? Balance(args)\r\n              : AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/account-registration\"\r\n          component={() => {\r\n            return AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/profile\"\r\n          component={() => {\r\n            return UserEditor({ ...args, mode: \"profile\" });\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/currency\"\r\n          component={() => {\r\n            return CurrencyContainer({ ...args });\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/business-registration\"\r\n          component={() => {\r\n            return BusinessRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/my-business\"\r\n          component={() => {\r\n            return MyBusiness(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/balance\"\r\n          component={() => {\r\n            return Balance(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/transfer\"\r\n          component={() => {\r\n            return Transfer(args);\r\n          }}\r\n        />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {/* Header */}\r\n\r\n      {/* Content */}\r\n      {/*<h3>{t(\"Summary\")}</h3>*/}\r\n\r\n      <Container fluid=\"md\">\r\n        <Row>\r\n          <Col>\r\n            {navigation}\r\n            <div style={{ height: \"7px\" }}></div>\r\n          </Col>\r\n        </Row>\r\n        {/*\r\n        <Row>{viewAccountRegistration}</Row>\r\n        */}\r\n        <Row>\r\n          <Col>{viewBalanceOrTransfer}</Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, Button, Badge, Alert, Accordion, Card } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\nimport Currencies from \"../currencies\";\r\nimport CurrencyRegistration from \"../currencyRegistration\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"CurrencyContainer\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const {\r\n    accordionViewCurrency,\r\n    activePageCurrencies,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  const { setAccordionViewCurrency, setRedirectTo } = props.barrelSetters;\r\n  const { getCurrencies } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const ToggleCurrencies = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionViewCurrency(\"currencies\");\r\n    getCurrencies(activePageCurrencies);\r\n  };\r\n\r\n  const ToggleCurrencyRegistration = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionViewCurrency(\"currencyRegistration\");\r\n    // getTransactions(1);\r\n  };\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return (\r\n    <>\r\n      <Accordion defaultActiveKey={accordionViewCurrency}>\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"currencies\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleCurrencies}\r\n          >\r\n            {t(\"Currencies\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"currencies\">\r\n            <Card.Body>\r\n              <Currencies {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"currencyRegistration\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleCurrencyRegistration}\r\n          >\r\n            {t(\"Currency Registration\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"currencyRegistration\">\r\n            <Card.Body>\r\n              <CurrencyRegistration {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport { TransferToSelf, TransferToPerson, TransferToBusiness } from \"./index\";\r\nimport { Alert } from \"react-bootstrap\";\r\n\r\n// const navigation = [\r\n//   {\r\n//     name: \"U2S\",\r\n//     link: \"#u2s\",\r\n//   },\r\n//   {\r\n//     name: \"U2U\",\r\n//     link: \"#u2u\",\r\n//   },\r\n//   {\r\n//     name: \"U2B\",\r\n//     link: \"#u2b\",\r\n//   },\r\n// ];\r\n\r\n/**\r\n * Component: Transfer\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber, transferType } = props.barrelGetters;\r\n  const { setRedirectTo } = props.barrelSetters;\r\n  const { format } = props.barrelFunctions;\r\n  const { onTransferTypeChange } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"Transfer\");\r\n\r\n  const data = props.data;\r\n  const type = transferType;\r\n  // const onTypeChange = args.onTypeChange;\r\n\r\n  // console.log(\"TRANSFER DATA TYPE:\", type);\r\n\r\n  const [transferCard, setTransferCard] = useState(null);\r\n\r\n  const onNavigationClick = (id) => {\r\n    onTransferTypeChange(id);\r\n  };\r\n\r\n  const navigation = [\r\n    {\r\n      name: t(\"U2S\"),\r\n      link: \"#u2s\",\r\n    },\r\n    {\r\n      name: t(\"U2U\"),\r\n      link: \"#u2u\",\r\n    },\r\n    {\r\n      name: t(\"U2B\"),\r\n      link: \"#u2b\",\r\n    },\r\n  ];\r\n\r\n  // console.log(\"TRANSFER DATA\", data);\r\n  // const title = t(\"Transfer to account\");\r\n\r\n  useEffect(() => {\r\n    if (type === null) return;\r\n\r\n    // setTransferCard()\r\n    switch (type) {\r\n      case \"#u2s\": // User to self\r\n        setTransferCard(\r\n          <TransferToSelf\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      case \"#u2u\": // User to user\r\n        setTransferCard(\r\n          <TransferToPerson\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      case \"#u2b\": // User to business\r\n        setTransferCard(\r\n          <TransferToBusiness\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [data, format, type]);\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  // return (\r\n  //   <>\r\n  //     <Alert variant=\"warning\">\r\n  //       <Alert.Heading>{t(\"Account not yet registered\")}</Alert.Heading>\r\n  //       <p>\r\n  //         <Trans i18nKey=\"Balance:Please set up your account first.\">\r\n  //           Please set up your account first. Use this{\" \"}\r\n  //           <a href=\"/account-registration\">link</a>.\r\n  //         </Trans>\r\n  //       </p>\r\n  //     </Alert>\r\n  //   </>\r\n  // );\r\n\r\n  return <>{transferCard}</>;\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport config from \"./config\";\r\nimport openSocket from \"socket.io-client\";\r\nlet socket = openSocket.connect(config.uri.ENDPOINT, {\r\n  secure: true,\r\n  reconnect: true,\r\n});\r\n\r\n/**\r\n * Send request to the server\r\n * @param {*} param0\r\n */\r\nexport const sendData = (data, debug = false) => {\r\n  if (debug) console.log(`request: ${data.req}`, data);\r\n\r\n  // No data - do not send\r\n  // if (req.length === 0) return false;\r\n\r\n  socket.emit(`onDataReceived`, data);\r\n  return true;\r\n};\r\n\r\n// Start a session\r\nexport const startSession = (data, session, debug = false) => {\r\n  // console.log(\"startSession\");\r\n  if (debug) console.log(`request: startSession`, data, session);\r\n\r\n  socket.emit(`start session`, {\r\n    data: data,\r\n    session: session,\r\n    req: \"start session\",\r\n  });\r\n};\r\n\r\n// End the session\r\nexport const endSession = (data, session) => {\r\n  console.log(`request: endSession`, data, session);\r\n  socket.emit(`end session`, {\r\n    char: data,\r\n    // uid: uid,\r\n    session: session,\r\n  });\r\n};\r\n\r\n// export const useSocket = (uid, onDataReceived) => {\r\n//   // Listen for a chat message\r\n//   const ZimeSocket = (onDataReceived, uid) => {\r\n//     socket.on(`onDataReceived`, data => {\r\n//       console.log(data);\r\n//       onDataReceived(data.char, data.uid === uid ? \"self\" : uid);\r\n//       // console.log(data);\r\n//     });\r\n//     // socket.on(\"onDataReceived\", (id, data) => {\r\n//     //   // send a private message to the socket with the given id\r\n//     //   console.log(id, data);\r\n//     // });\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     ZimeSocket(onDataReceived, uid);\r\n//     // eslint-disable-next-line\r\n//   }, [uid]);\r\n// };\r\n\r\n// export const useSocket = (onDataReceived) => {\r\n//   // console.log(\"DATA RECEIVED\");\r\n\r\n//   // Listen for a data from server\r\n//   const SuranadiraSocket = (onDataReceived) => {\r\n//     socket.on(`onDataReceived`, (data) => {\r\n//       console.log(\"ON DATA RECEIVED\", data);\r\n//       onDataReceived({ data });\r\n//     });\r\n//   };\r\n\r\n//   // useEffect(() => {\r\n//   //   SuranadiraSocket(onDataReceived, uid);\r\n//   //   // eslint-disable-next-line\r\n//   // }, [uid]);\r\n// };\r\n\r\nexport const useSocket = (callback) => {\r\n  const [responseData, setResponseData] = useState(null);\r\n  socket.on(`onDataReceived`, (data) => {\r\n    setResponseData(data);\r\n    // console.log(\"ON DATA RECEIVED\", data);\r\n    // onDataReceived({ data });\r\n    // callback({ data });\r\n    // callback(data);\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (responseData === null) return;\r\n\r\n    callback(responseData);\r\n    // eslint-disable-next-line\r\n  }, [responseData]);\r\n\r\n  // // if (responseFound) return;\r\n  // const [res, status] = data;\r\n  // if (res === props.data.req && status === props.data.status) {\r\n  //   callback();\r\n  //   // responseFound = true;\r\n  //   return true;\r\n  // }\r\n  // return false;\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport {\r\n  Form,\r\n  InputGroup,\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport SubmitButton from \"../submitButton\";\r\n// import Alert from \"../alert\";\r\n// import LanguageSelector from \"../language-selector\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { request } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"LogIn\");\r\n\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n    password: yup.string().required(t(\"No password provided\")),\r\n  });\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  const sendUserLogInRequest = (data) => {\r\n    // data.pw = data.password;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    sendRequest({ req: \"sign in user\", data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    sendUserLogInRequest(data);\r\n  };\r\n\r\n  // const languageData = { language: \"en\" };\r\n\r\n  const UserLogInForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Sign In\")}</h3>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"Password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Remember me */}\r\n      {/*\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Check\r\n          required\r\n          name=\"rememberMe\"\r\n          label={t(\"Remember me\")}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.rememberMe}\r\n          feedback={errors.rememberMe}\r\n          id=\"validationFormik0\"\r\n        />\r\n      </Form.Group>\r\n      */}\r\n\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request=\"sign in user\"\r\n          namespace=\"LogIn\"\r\n        />\r\n      </Form.Group>\r\n\r\n      <Container fluid=\"md\">\r\n        <Row>\r\n          <Col>\r\n            <p className=\"other-options text-left\">\r\n              <Trans i18nKey=\"LogIn:Not yet registered\">\r\n                Not yet <a href=\"/sign-up\">registered?</a>\r\n              </Trans>\r\n            </p>\r\n          </Col>\r\n          <Col>\r\n            <p className=\"other-options text-right\">\r\n              <Trans i18nKey=\"LogIn:Forgot password\">\r\n                Forgot <a href=\"/reset\">password?</a>\r\n              </Trans>\r\n            </p>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Form>\r\n  );\r\n\r\n  // const onAlertClose = () => {\r\n  //   setAlertVisible(false);\r\n  //   authorizedData.hideError();\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        component={UserLogInForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          email: \"\",\r\n          password: \"\",\r\n          rememberMe: \"\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","// import { Redirect } from \"react-router-dom\";\r\n// import Octicon, { Eye, EyeClosed } from \"@primer/octicons-react\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport { Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport * as yup from \"yup\";\r\n// import LanguageSelector from \"../language-selector\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"register user\", namespace: \"SignUp\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { language } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  const { onSignUp } = props.barrelEventHandlers;\r\n\r\n  // console.log(\"SIGN UP PROPS:\", props);\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    firstName: yup.string().required(t(\"First name is required\")),\r\n    lastName: yup.string().required(t(\"Last name is required\")),\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n    password: yup\r\n      .string()\r\n      .required(t(\"No password provided\"))\r\n      .min(8, t(\"Password is too short\"))\r\n      // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n      .matches(\r\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n        t(\"Password is too weak\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  const sendUserRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.language = language;\r\n    data.validateEmail = true;\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    if (sendUserRegistrationRequest(data)) {\r\n      // User registration request was submitted\r\n    }\r\n  };\r\n\r\n  // const languageData = { language: \"en\" };\r\n\r\n  const UserRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Sign Up\")}</h3>\r\n\r\n      {/* First name */}\r\n      <Form.Group controlId=\"validationFormikFirstName\">\r\n        <Form.Label>{t(\"First name\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"Enter first name\")}\r\n            name=\"firstName\"\r\n            value={values.firstName}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.firstName && touched.firstName}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.firstName}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Last name */}\r\n      <Form.Group controlId=\"validationFormikLastName\">\r\n        <Form.Label>{t(\"Last name\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"Enter last name\")}\r\n            name=\"lastName\"\r\n            value={values.lastName}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.lastName && touched.lastName}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.lastName}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"Password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type={passwordVisible ? \"text\" : \"password\"}\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text\r\n              id=\"inputGroupAppend\"\r\n              onClick={togglePassword}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              {passwordVisible ? (\r\n                <VisibilityOff\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\" }}\r\n                />\r\n              ) : (\r\n                <Visibility fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n              )}\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationSubmitButton\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form.Group>\r\n\r\n      <p className=\"other-options text-right\">\r\n        <Trans i18nKey=\"SignUp:Already registered\">\r\n          Already registered <a href=\"/sign-in\">sign in?</a>\r\n        </Trans>\r\n      </p>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={UserRegistrationForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nexport const useStickyState = (defaultValue, key) => {\r\n  const [value, setValue] = useState(() => {\r\n    const stickyValue = window.localStorage.getItem(key);\r\n    return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\r\n  });\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n  }, [key, value]);\r\n  return [value, setValue];\r\n};\r\n","import React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args.data);\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { error, info } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  const { onAlertClose: onClose } = props.barrelEventHandlers;\r\n\r\n  const autoClose = () => {\r\n    window.setTimeout(() => {\r\n      onClose();\r\n    }, 5000);\r\n  };\r\n\r\n  if (error !== null) {\r\n    let { t } = useTranslation(\"Errors\");\r\n    return (\r\n      <Alert variant=\"danger\" onClose={() => onClose()} dismissible>\r\n        {t(error)}\r\n      </Alert>\r\n    );\r\n  } else if (info !== null) {\r\n    let { t } = useTranslation(\"Infos\");\r\n    // autoClose();\r\n    return (\r\n      <Alert variant=\"info\" onClose={() => onClose()} dismissible>\r\n        {t(info)}\r\n      </Alert>\r\n    );\r\n  }\r\n  return <></>;\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"../../translations/i18n\";\r\n// import { withNamespaces } from \"react-i18next\";\r\nimport { Form, Badge } from \"react-bootstrap\";\r\n\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"CurrencyContainer\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { userData } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"LanguageSelector\");\r\n  const changeLanguage = (lng) => {\r\n    i18n.changeLanguage(lng);\r\n  };\r\n  const languages = [\r\n    { id: 1, language: \"Latviešu\", code: \"lv\" },\r\n    { id: 2, language: \"English\", code: \"en\" },\r\n  ];\r\n  const handleLanguageSelect = (e) => {\r\n    changeLanguage(e.target.value);\r\n  };\r\n  const selectLanguage = (language) => {\r\n    changeLanguage(language);\r\n\r\n    if (userData !== null) {\r\n      sendRequest({\r\n        req: \"register user language\",\r\n        data: { email: userData.email, language },\r\n      });\r\n    }\r\n  };\r\n\r\n  if (1) {\r\n    return (\r\n      <>\r\n        <br />\r\n        <Badge\r\n          pill\r\n          variant=\"light\"\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            selectLanguage(\"lv\");\r\n          }}\r\n        >\r\n          lv\r\n        </Badge>{\" \"}\r\n        <Badge\r\n          pill\r\n          variant=\"light\"\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            selectLanguage(\"en\");\r\n          }}\r\n        >\r\n          en\r\n        </Badge>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <Form.Control\r\n        as=\"select\"\r\n        id=\"languageSelector\"\r\n        onChange={handleLanguageSelect}\r\n        custom\r\n      >\r\n        <option key=\"0\" value={props.language}>\r\n          {t(\"Language\")}\r\n        </option>\r\n        {languages.map((el) => (\r\n          <option key={el.id} value={el.code}>\r\n            {el.language}\r\n          </option>\r\n        ))}\r\n      </Form.Control>\r\n    );\r\n  }\r\n};\r\n\r\n// function selectElement(id, valueToSelect) {\r\n//   let element = document.getElementById(id);\r\n//   if (!element) return;\r\n//   element.value = valueToSelect;\r\n// }\r\n\r\n// // catch the event and make changes accordingly\r\n// i18n.on(\"languageChanged\", function (lng) {\r\n//   selectElement(\"languageSelector\", lng);\r\n// });\r\n","/**\r\n * CSS\r\n */\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Main.css\";\r\n\r\n/**\r\n * System imports\r\n */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n// import { useTranslation } from \"react-i18next\";\r\n\r\n/**\r\n * User imports\r\n */\r\nimport i18n from \"../../../translations/i18n\";\r\nimport Summary from \"../summary\";\r\nimport {\r\n  useSocket,\r\n  sendData,\r\n  startSession,\r\n  endSession,\r\n} from \"../../../utils/sockets\";\r\nimport Login from \"../../login\";\r\nimport Logout from \"../../logout\";\r\nimport SignUp from \"../../signup\";\r\nimport PasswordReset from \"../../passwordReset\";\r\nimport errorHandler from \"../../../utils/errorHandler\";\r\nimport responseHandler from \"../../../utils/responseHandler\";\r\nimport requestHandler from \"../../../utils/requestHandler\";\r\nimport { useStickyState } from \"../../../utils/state\";\r\nimport Alert from \"../../alert\";\r\nimport LanguageSelector from \"../../language-selector\";\r\nimport ValidateEmail from \"../../validateEmail\";\r\nimport ChangePassword from \"../../changePassword\";\r\n\r\n/**\r\n * Component: Main\r\n */\r\nexport default () => {\r\n  /**\r\n   * Properties\r\n   */\r\n  const userDataFetchInterval = 5000; // Test: 5000 | 30000;\r\n\r\n  /** \r\n   * Hooks\r\n   ============================================================================ */\r\n  const [debug, setDebug] = useState(true);\r\n  const [request, setRequest] = useStickyState(null, \"request\");\r\n  const [session, setSession] = useStickyState(uuidv4(), \"session\");\r\n  const [connected, setConnected] = useStickyState(false, \"connected\");\r\n  const [signedIn, setSignedIn] = useStickyState(false, \"signedIn\");\r\n  const [currencyAbbr, setCurrencyAbbr] = useState(\"Z\");\r\n  const [currencyRate, setCurrencyRate] = useState(\"1\");\r\n  const [currencyStatus, setCurrencyStatus] = useState(\"0\");\r\n  const [currencies, setCurrencies] = useStickyState(null, \"currencies\");\r\n  const [transactions, setTransactions] = useStickyState(null, \"transactions\");\r\n  const [shares, setShares] = useStickyState(null, \"shares\");\r\n  const [accordionView, setAccordionView] = useStickyState(\r\n    \"balance\",\r\n    \"accordionView\"\r\n  );\r\n  const [accordionViewCurrency, setAccordionViewCurrency] = useStickyState(\r\n    null,\r\n    \"accordionViewCurrency\"\r\n  );\r\n  const [countCurrencies, setCountCurrencies] = useStickyState(\r\n    null,\r\n    \"countCurrencies\"\r\n  );\r\n  const [countTransactions, setCountTransactions] = useStickyState(\r\n    null,\r\n    \"countTransactions\"\r\n  );\r\n  const [countShares, setCountShares] = useStickyState(null, \"countShares\");\r\n  const [activePageCurrencies, setActivePageCurrencies] = useStickyState(\r\n    1,\r\n    \"activePageCurrencies\"\r\n  );\r\n  const [activePageTransactions, setActivePageTransactions] = useStickyState(\r\n    1,\r\n    \"activePageTransactions\"\r\n  );\r\n  const [activePageShares, setActivePageShares] = useStickyState(\r\n    1,\r\n    \"activePageShares\"\r\n  );\r\n  const [currenciesPerPage, setCurrenciesPerPage] = useStickyState(\r\n    5,\r\n    \"currenciesPerPage\"\r\n  );\r\n  const [transactionsPerPage, setTransactionsPerPage] = useStickyState(\r\n    5,\r\n    \"transactionsPerPage\"\r\n  );\r\n  const [sharesPerPage, setSharesPerPage] = useStickyState(5, \"sharesPerPage\");\r\n  const [userData, setUserData] = useStickyState(null, \"userData\");\r\n  const [uid, setUID] = useStickyState(null, \"uid\");\r\n  const [accountNumber, setAccountNumber] = useStickyState(\r\n    null,\r\n    \"accountNumber\"\r\n  );\r\n  const [accountType, setAccountType] = useStickyState(null, \"accountType\");\r\n  const [userBusinesses, setUserBusinesses] = useStickyState(\r\n    null,\r\n    \"userBusinesses\"\r\n  );\r\n  const [activeBusiness, setActiveBusiness] = useStickyState(\r\n    null,\r\n    \"activeBusiness\"\r\n  );\r\n\r\n  const [businessPurposes, setBusinessPurposes] = useStickyState(\r\n    null,\r\n    \"businessPurposes\"\r\n  );\r\n\r\n  const [activeBusinesPurpose, setActiveBusinesPurpose] = useStickyState(\r\n    null,\r\n    \"activeBusinesPurpose\"\r\n  );\r\n\r\n  const [purposeShareholders, setPurposeShareholders] = useStickyState(\r\n    null,\r\n    \"purposeShareholders\"\r\n  );\r\n\r\n  // const [businessLoaded, setBusinessLoaded] = useState(null);\r\n  // const [redirect, setRedirect] = useState(false);\r\n  const [redirectTo, setRedirectTo] = useState(null);\r\n  const [lastInsertId, setLastInsertId] = useState(null);\r\n  // const [responseData, setResponseData] = useState(null);\r\n  const [validateTokenEmail, setValidateTokenEmail] = useState(null);\r\n  const [validateTokenPasswordReset, setValidateTokenPasswordReset] = useState(\r\n    null\r\n  );\r\n\r\n  // const [\r\n  //   passwordResetTokenValidated,\r\n  //   setPasswordResetTokenValidated,\r\n  // ] = useStickyState(\"none\", \"passwordResetTokenValidated\");\r\n\r\n  const [\r\n    passwordResetTokenValidated,\r\n    setPasswordResetTokenValidated,\r\n  ] = useState(null);\r\n  const [passwordResetTokenEmail, setPasswordResetTokenEmail] = useState(null);\r\n\r\n  const [tmrConnected] = useState(null);\r\n  const [language, setLanguage] = useStickyState(\r\n    i18n.options.fallbackLng[0],\r\n    \"language\"\r\n  ); //\r\n  const [transferType, setTransferType] = useStickyState(\r\n    \"#u2s\",\r\n    \"transferType\"\r\n  );\r\n  // const [transferSuccess, setTransferSuccess] = useStickyState(\r\n  //   false,\r\n  //   \"transferSuccess\"\r\n  // );\r\n  const [accountPhotoPath, setAccountPhotoPath] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n  const [info, setInfo] = useState(null);\r\n  // const [alertVisible, setAlertVisible] = useState(false);\r\n\r\n  /**\r\n   * Barrel: Getters\r\n   */\r\n  const barrelGetters = {\r\n    debug,\r\n    request,\r\n    session,\r\n    currencies: JSON.parse(currencies),\r\n    transactions: JSON.parse(transactions),\r\n    shares: JSON.parse(shares),\r\n    accordionView,\r\n    accordionViewCurrency,\r\n    countCurrencies,\r\n    countTransactions,\r\n    countShares,\r\n    activePageCurrencies,\r\n    activePageTransactions,\r\n    activePageShares,\r\n    currenciesPerPage,\r\n    transactionsPerPage,\r\n    sharesPerPage,\r\n    userData: JSON.parse(userData),\r\n    // redirect,\r\n    redirectTo,\r\n    lastInsertId,\r\n    connected,\r\n    signedIn,\r\n    currencyAbbr,\r\n    currencyRate,\r\n    currencyStatus,\r\n    accountNumber,\r\n    accountType,\r\n    uid,\r\n    userBusinesses: JSON.parse(userBusinesses),\r\n    activeBusiness,\r\n    businessPurposes: JSON.parse(businessPurposes),\r\n    activeBusinesPurpose,\r\n    purposeShareholders: JSON.parse(purposeShareholders),\r\n    // businessLoaded,\r\n    tmrConnected,\r\n    validateTokenEmail,\r\n    validateTokenPasswordReset,\r\n    passwordResetTokenValidated,\r\n    passwordResetTokenEmail,\r\n    language,\r\n    transferType,\r\n    // transferSuccess,\r\n    accountPhotoPath,\r\n    error,\r\n    info,\r\n    // alertVisible,\r\n  };\r\n\r\n  /**\r\n   * Barrel: Setters\r\n   */\r\n  const barrelSetters = {\r\n    setDebug,\r\n    setRequest,\r\n    setSession,\r\n    setCurrencies,\r\n    setTransactions,\r\n    setShares,\r\n    setAccordionView,\r\n    setAccordionViewCurrency,\r\n    setCountCurrencies,\r\n    setCountTransactions,\r\n    setCountShares,\r\n    setActivePageCurrencies,\r\n    setActivePageTransactions,\r\n    setActivePageShares,\r\n    setCurrenciesPerPage,\r\n    setTransactionsPerPage,\r\n    setSharesPerPage,\r\n    setConnected,\r\n    setLanguage,\r\n    setUserData,\r\n    // sendRequest,\r\n    setSignedIn,\r\n    setCurrencyAbbr,\r\n    setCurrencyRate,\r\n    setCurrencyStatus,\r\n    setRedirectTo,\r\n    setLastInsertId,\r\n    setAccountNumber,\r\n    setAccountType,\r\n    setUID,\r\n    setUserBusinesses,\r\n    setActiveBusiness,\r\n    setBusinessPurposes,\r\n    setActiveBusinesPurpose,\r\n    setPurposeShareholders,\r\n    // setBusinessLoaded,\r\n    setAccountPhotoPath,\r\n    setValidateTokenEmail,\r\n    setValidateTokenPasswordReset,\r\n    setPasswordResetTokenValidated,\r\n    setPasswordResetTokenEmail,\r\n    // setTransferSuccess,\r\n    // setRedirect,\r\n    // showMessage,\r\n  };\r\n\r\n  /** \r\n   * Custom hooks\r\n   ============================================================================ */\r\n  // const { t } = useTranslation(\"Errors\");\r\n\r\n  useSocket((data) => {\r\n    // console.log(\"USE SOCKET:\", data);\r\n\r\n    // setResponseData(data);\r\n\r\n    processResponse({\r\n      args: data,\r\n      barrels: barrels,\r\n    });\r\n  });\r\n\r\n  /** \r\n   * Functions\r\n   ============================================================================ */\r\n\r\n  /**\r\n   * Sends requests to the server\r\n   * @param {string} request Request name\r\n   * @param {object} data Request data\r\n   */\r\n  const sendRequest = ({ req, data = null }) => {\r\n    if (processRequest({ req, data, session, uid: \"STA\", barrels })) {\r\n      // request processed successfully\r\n      return true;\r\n    } else {\r\n      console.log(\"THIS SHOULD NOT BE REACHED\");\r\n      return sendData({ req, uid: \"STA\", session, data }, debug);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Processes user request\r\n   * @param {*} param0\r\n   */\r\n  const processRequest = ({ req, data, session, uid, barrels }) => {\r\n    // showMessage(\"PROCESSING_REQUEST\", \"info\");\r\n\r\n    setRequest(req);\r\n    return requestHandler({\r\n      req,\r\n      data,\r\n      session,\r\n      uid,\r\n      barrels,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Processes server response\r\n   * @param {*} param0\r\n   */\r\n  const processResponse = ({ args, barrels }) => {\r\n    // console.log(\"PROCESS RESPONSE ARGS:\", args);\r\n\r\n    /**\r\n     * Choose a handler depending on response status:\r\n     * Error or other (success | continue | finished | pending etc.)\r\n     */\r\n    return args.status === \"error\"\r\n      ? errorHandler({\r\n          args: args,\r\n          uid: uid,\r\n          barrels: barrels,\r\n        })\r\n      : responseHandler({\r\n          args: args,\r\n          uid: uid,\r\n          barrels: barrels,\r\n        });\r\n  };\r\n\r\n  /**\r\n   * Shows a messgae (error or info)\r\n   * @param {string} msg Messgae text\r\n   * @param {string} type Message type (\"error\" | \"info\")\r\n   */\r\n  const showMessage = (msg, type = \"error\") => {\r\n    // if (type !== \"error\") {\r\n    //   hideMessage();\r\n    // }\r\n    type === \"error\" ? setError(msg) : setInfo(msg);\r\n  };\r\n\r\n  /**\r\n   * Hides the message\r\n   */\r\n  const hideMessage = () => {\r\n    setError(null);\r\n    setInfo(null);\r\n  };\r\n\r\n  /**\r\n   * Changes the website language\r\n   */\r\n  const changeLanguage = (lng) => {\r\n    i18n.changeLanguage(lng);\r\n    setLanguage(lng);\r\n  };\r\n\r\n  /**\r\n   * Format number\r\n   * @param {number} number\r\n   */\r\n  const format = (number, currency = currencyAbbr) => {\r\n    return (\r\n      new Intl.NumberFormat(language, {\r\n        notation: \"standard\",\r\n        minimumFractionDigits: 2,\r\n      }).format(number * 1) +\r\n      \" \" +\r\n      currency\r\n    );\r\n  };\r\n  //currencyRate\r\n\r\n  /**\r\n   * Format per cent\r\n   * @param {number} number\r\n   */\r\n  const formatPerCent = (number) => {\r\n    return (\r\n      new Intl.NumberFormat(language, {\r\n        notation: \"standard\",\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 2,\r\n      }).format(number) + \"%\"\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Format per cent\r\n   * @param {number} number\r\n   */\r\n  const formatExchangeRate = (number) => {\r\n    return new Intl.NumberFormat(language, {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 5,\r\n      maximumFractionDigits: 5,\r\n    }).format(number);\r\n  };\r\n\r\n  const parseLocaleNumber = (stringNumber, locale) => {\r\n    let num = 123456.789,\r\n      fmt_local = new Intl.NumberFormat(locale, {\r\n        style: \"currency\",\r\n        currency: \"USD\",\r\n      }),\r\n      parts_local = fmt_local.formatToParts(num),\r\n      group = \"\",\r\n      decimal = \"\",\r\n      currency = \"\";\r\n\r\n    // separators\r\n    parts_local.forEach(function (i) {\r\n      switch (i.type) {\r\n        case \"group\":\r\n          group = i.value;\r\n          break;\r\n        case \"decimal\":\r\n          decimal = i.value;\r\n          break;\r\n        case \"currency\":\r\n          currency = i.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    return parseFloat(\r\n      stringNumber\r\n        .replace(new RegExp(\"\\\\\" + group, \"g\"), \"\")\r\n        .replace(new RegExp(\"\\\\\" + decimal), \".\")\r\n        .replace(new RegExp(\"\\\\\" + currency, \"g\"), \"\")\r\n    );\r\n  };\r\n\r\n  const formatDate = (\r\n    ts,\r\n    options = {\r\n      month: \"long\",\r\n      day: \"numeric\",\r\n      year: \"numeric\",\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n    }\r\n  ) => {\r\n    // const event = new Date(date);\r\n\r\n    // const options = {\r\n    //   weekday: \"long\",\r\n    //   year: \"numeric\",\r\n    //   month: \"long\",\r\n    //   day: \"numeric\",\r\n    // };\r\n\r\n    // return event.toLocaleDateString(language, options);\r\n\r\n    // const defaults = {\r\n    //   month: \"long\",\r\n    //   day: \"numeric\",\r\n    //   year: \"numeric\",\r\n    //   hour: \"numeric\",\r\n    //   minute: \"numeric\",\r\n    // };\r\n    // const options = Object.assign(defaults, args);\r\n    const date = new Date(ts);\r\n    return new Intl.DateTimeFormat(language, options).format(date);\r\n  };\r\n\r\n  /**\r\n   * Retrieves an URL parameter\r\n   */\r\n  const getUrlParam = (param) => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    return urlParams.get(param);\r\n  };\r\n\r\n  const sendEmailValidationRequest = ({ token, email }) => {\r\n    // console.log(\"sendEmailValidationRequest:\", token, email);\r\n\r\n    sendRequest({\r\n      req: \"validate email token\",\r\n      data: { token, email },\r\n    });\r\n  };\r\n\r\n  const sendPasswordResetRequest = ({ token, email }) => {\r\n    // console.log(\"sendEmailValidationRequest:\", token, email);\r\n    setPasswordResetTokenEmail(email);\r\n    sendRequest({\r\n      req: \"validate password reset token\",\r\n      data: { token, email },\r\n    });\r\n  };\r\n\r\n  const getCurrencies = (newPage) => {\r\n    setCurrencies(null);\r\n    sendRequest({\r\n      req: \"get currencies\",\r\n      data: { page: newPage, limit: currenciesPerPage },\r\n    });\r\n    setActivePageCurrencies(newPage);\r\n  };\r\n\r\n  const getTransactions = (newPage) => {\r\n    setTransactions(null);\r\n    sendRequest({\r\n      req: \"get transactions\",\r\n      data: { page: newPage, limit: transactionsPerPage, uid: accountNumber },\r\n    });\r\n    setActivePageTransactions(newPage);\r\n  };\r\n\r\n  const getShares = (newPage) => {\r\n    setShares(null);\r\n    sendRequest({\r\n      req: \"get shares\",\r\n      data: { page: newPage, limit: sharesPerPage, uid: accountNumber },\r\n    });\r\n    setActivePageShares(newPage);\r\n  };\r\n\r\n  const getBusinesses = () => {\r\n    setUserBusinesses(null);\r\n    sendRequest({\r\n      req: \"get user businesses\",\r\n      data: { uid: accountNumber },\r\n    });\r\n  };\r\n\r\n  const getBusinessPurposes = (business_id, selected = null) => {\r\n    // console.log(\"BUSINESS PURPOSES FOR ID \" + business_id, businessPurposes);\r\n\r\n    if (selected !== null) {\r\n      setActiveBusiness(selected);\r\n      setActiveBusinesPurpose(null);\r\n    }\r\n    setBusinessPurposes(null);\r\n    return sendRequest({\r\n      req: \"get business purposes\",\r\n      data: { business_id: business_id },\r\n    });\r\n  };\r\n\r\n  const getPurposeShareholders = (purpose_id, selected = null) => {\r\n    if (selected !== null) {\r\n      // setActiveBusinesPurpose(selected);\r\n      setActiveBusinesPurpose(purpose_id);\r\n    }\r\n    setPurposeShareholders(null);\r\n    return sendRequest({\r\n      req: \"get purpose shareholders\",\r\n      data: { purpose_id: purpose_id },\r\n    });\r\n  };\r\n\r\n  const getAccountData = () => {\r\n    sendRequest({\r\n      req: \"get account data\",\r\n      data: { uid: accountNumber },\r\n    });\r\n  };\r\n\r\n  const getTransactionById = (id) => {\r\n    sendRequest({\r\n      req: \"get transaction by id\",\r\n      data: { id: id },\r\n    });\r\n  };\r\n\r\n  const getContainerClass = (signedIn) => {\r\n    return {\r\n      wrapperClass: signedIn\r\n        ? \"auth-wrapper auth-wrapper-summary\"\r\n        : \"auth-wrapper\",\r\n      innerClass: signedIn\r\n        ? \"auth-inner auth-inner-summary\"\r\n        : \"auth-inner autoWidth\",\r\n    };\r\n  };\r\n\r\n  const getRedirect = () => {\r\n    // if (redirectTo !== null) {\r\n    //   let link = redirectTo;\r\n\r\n    //   r = <Redirect push to={link} />;\r\n    // }\r\n    return redirectTo === null ? \"\" : <Redirect push to={redirectTo} />;\r\n  };\r\n\r\n  const getReviser = () => {\r\n    return \"STA\";\r\n  };\r\n\r\n  const getWorkplace = () => {\r\n    return \"LAPSTA\";\r\n  };\r\n\r\n  /**\r\n   * Barrel: Functions\r\n   */\r\n  const barrelFunctions = {\r\n    sendRequest,\r\n    // processResponse,\r\n    showMessage,\r\n    hideMessage,\r\n    changeLanguage,\r\n    format,\r\n    formatPerCent,\r\n    formatExchangeRate,\r\n    formatDate,\r\n    sendEmailValidationRequest,\r\n    getUrlParam,\r\n    getAccountData,\r\n    getTransactionById,\r\n    getBusinesses,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n    getCurrencies,\r\n    getTransactions,\r\n    getShares,\r\n    parseLocaleNumber,\r\n    getReviser,\r\n    getWorkplace,\r\n  };\r\n\r\n  /** \r\n   * Event handlers\r\n   ============================================================================ */\r\n\r\n  /**\r\n   * On language change\r\n   */\r\n  i18n.on(\"languageChanged\", function (lng) {\r\n    setLanguage(lng);\r\n  });\r\n\r\n  /**\r\n   * On redirect\r\n   * @param {string} to Redirect path (e.g. \"/sign-in\")\r\n   */\r\n  const onRedirect = (to) => {\r\n    setRedirectTo(to);\r\n  };\r\n\r\n  // /**\r\n  //  * On login\r\n  //  * @param {object} data Login data\r\n  //  */\r\n  // const onLogin = (data) => {\r\n  //   setUserData(JSON.stringify(data));\r\n  //   sendRequest({ req: \"sign in user\", data: data });\r\n  //   // setAuthorizationStep(1); // authorized session request pending\r\n  // };\r\n\r\n  /**\r\n   * On signup\r\n   * @param {object} data Signup data\r\n   */\r\n  const onSignUp = (data) => {\r\n    // console.log(\"SIGN UP (data):\", data);\r\n    /// setUserData(JSON.stringify(data));\r\n    return sendRequest({ req: \"register user\", data });\r\n  };\r\n\r\n  /**\r\n   * On account registration\r\n   * @param {object} data The account registration data\r\n   */\r\n  // const onAccountRegistration = (data) => {\r\n  //   // console.log(\"ACCOUNT REGISTRATION (data):\", data);\r\n  //   // setAccountNumber(data.personalID);\r\n  //   return sendRequest({ req: \"register account\", data });\r\n  // };\r\n\r\n  /**\r\n   * On transfer type change\r\n   * @param {string} id The transfer type id (\"U2S\", \"U2U\", \"U2B\" etc.)\r\n   */\r\n  const onTransferTypeChange = (id) => {\r\n    // console.log(\"setTransferType: \" + id);\r\n    setTransferType(id);\r\n  };\r\n\r\n  const onTransferSuccess = () => {\r\n    // console.log(\"ON TRANSFER SUCCESS\", barrels);\r\n  };\r\n\r\n  /**\r\n   * On transfer\r\n   * @param {object} data Transfer data\r\n   */\r\n  const onTransfer = (data) => {\r\n    // console.log(\"ON TRANSFER (data):\", data);\r\n    // sendRequest({ req: \"register account\", data: data });\r\n    sendRequest(data);\r\n  };\r\n\r\n  const onBusinessRegistration = (data) => {\r\n    // console.log(\"ON BUSINESS REGISTRATION (data):\", data);\r\n    // sendRequest({ req: \"register account\", data: data });\r\n    sendRequest(data);\r\n  };\r\n\r\n  const onPurposeRegistration = (data) => {\r\n    // console.log(\"ON PURPOSE REGISTRATION (data):\", data);\r\n    // sendRequest({ req: \"register account\", data: data });\r\n    sendRequest(data);\r\n    // getBusinesses();\r\n  };\r\n\r\n  // const onShareholderRegistration = (data) => {\r\n  //   console.log(\"ON SHAREHOLDER REGISTRATION (data):\", data);\r\n  //   // sendRequest({ req: \"register account\", data: data });\r\n  //   sendRequest(data);\r\n  //   // getBusinesses();\r\n  // };\r\n\r\n  /**\r\n   * On logout\r\n   */\r\n  const onLogOut = () => {\r\n    // setSession(null);\r\n    endSession(\"bye\", session);\r\n    setSignedIn(false);\r\n    setCurrencies(null);\r\n    setTransactions(null);\r\n    setShares(null);\r\n    setAccordionView(\"balance\");\r\n    setAccordionViewCurrency(null);\r\n    setAccountNumber(null);\r\n    setAccountType(null);\r\n    setTransferType(\"#u2s\");\r\n    setUserData(null);\r\n    setUserBusinesses(null);\r\n    setActiveBusiness(null);\r\n    setBusinessPurposes(null);\r\n    setActiveBusinesPurpose(null);\r\n    setPurposeShareholders(null);\r\n    setAccountPhotoPath(\"\");\r\n    setPasswordResetTokenValidated(null);\r\n    setPasswordResetTokenEmail(null);\r\n    // setSharesPerPage(1);\r\n    setError(null);\r\n    setInfo(null);\r\n    // setRedirectTo(\"/sign-in\"); // TODO: In production might disable that\r\n    // window.localStorage.clear(); // TODO: Remove in production remove\r\n  };\r\n\r\n  const onAlertClose = () => {\r\n    // setAlertVisible(false);\r\n    hideMessage();\r\n  };\r\n\r\n  /**\r\n   * Barrel: Event handlers\r\n   */\r\n  const barrelEventHandlers = {\r\n    onRedirect,\r\n    onSignUp,\r\n    // onAccountRegistration,\r\n    onTransferTypeChange,\r\n    onTransferSuccess,\r\n    onTransfer,\r\n    onBusinessRegistration,\r\n    onPurposeRegistration,\r\n    // onShareholderRegistration,\r\n    onLogOut,\r\n    onAlertClose,\r\n  };\r\n\r\n  /** \r\n   * Effect hooks\r\n   ============================================================================ */\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * Clear local storage (URL param ?reset)\r\n     */\r\n    if (getUrlParam(\"reset\") !== null) {\r\n      window.localStorage.clear();\r\n      console.log(\"Local storage cleared\");\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n   * On session ID change\r\n   */\r\n  useEffect(() => {\r\n    if (session === null) return;\r\n    startSession(\"hello\", session, debug);\r\n    // eslint-disable-next-line\r\n  }, [session]);\r\n\r\n  useEffect(() => {\r\n    if (connected === false) {\r\n      // anonymize session\r\n      setSession(uuidv4());\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [connected]);\r\n\r\n  /**\r\n   * On signed in status change\r\n   */\r\n  useEffect(() => {\r\n    if (!signedIn) return;\r\n    // eslint-disable-next-line\r\n  }, [signedIn]);\r\n\r\n  /**\r\n   * On account number change\r\n   */\r\n  useEffect(() => {\r\n    if (accountNumber === null) return;\r\n\r\n    // eslint-disable-next-line\r\n  }, [accountNumber]);\r\n\r\n  /**\r\n   * On email validation token\r\n   */\r\n  useEffect(() => {\r\n    if (validateTokenEmail === null) return;\r\n\r\n    sendEmailValidationRequest(JSON.parse(validateTokenEmail));\r\n\r\n    // eslint-disable-next-line\r\n  }, [validateTokenEmail]);\r\n\r\n  /**\r\n   * On email validation token\r\n   */\r\n  useEffect(() => {\r\n    if (passwordResetTokenValidated === null) return;\r\n\r\n    // console.log(\"Validate token:\", passwordResetTokenValidated);\r\n\r\n    // sendEmailValidationRequest(JSON.parse(validateTokenEmail));\r\n    onRedirect(\"/password\");\r\n\r\n    // eslint-disable-next-line\r\n  }, [passwordResetTokenValidated]);\r\n\r\n  /**\r\n   * On password reset validation token\r\n   */\r\n  useEffect(() => {\r\n    if (validateTokenPasswordReset === null) return;\r\n\r\n    // console.log(\"Validate password reset token:\", validateTokenPasswordReset);\r\n\r\n    sendPasswordResetRequest(JSON.parse(validateTokenPasswordReset));\r\n\r\n    // eslint-disable-next-line\r\n  }, [validateTokenPasswordReset]);\r\n\r\n  const { wrapperClass, innerClass } = getContainerClass(signedIn);\r\n\r\n  /**\r\n   * Barrel of barrels\r\n   */\r\n  const barrels = {\r\n    barrelGetters,\r\n    barrelSetters,\r\n    barrelFunctions,\r\n    barrelEventHandlers,\r\n  };\r\n\r\n  const appClass = signedIn ? \"App\" : \"App bg\";\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        {getRedirect()}\r\n        <div className={appClass} style={{}}>\r\n          {/* Footer */}\r\n\r\n          {/* Layout wrapper */}\r\n\r\n          <div className={wrapperClass} style={{}}>\r\n            <div className={innerClass}>\r\n              <div\r\n                style={\r\n                  {\r\n                    // position: \"absolute\",\r\n                    // display: \"inline\",\r\n                    // zIndex: \"1000\",\r\n                  }\r\n                }\r\n              >\r\n                <Alert data={barrels} />\r\n              </div>\r\n\r\n              <Switch>\r\n                <Route\r\n                  exact\r\n                  path=\"/\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                    // return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-in\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return Login(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-up\"\r\n                  component={() => {\r\n                    return SignUp(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/validate-email\"\r\n                  component={() => {\r\n                    return ValidateEmail(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/password\"\r\n                  component={() => {\r\n                    return ChangePassword(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/profile\"\r\n                  component={() => {\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/currency\"\r\n                  component={() => {\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-out\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return Logout(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/reset\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return PasswordReset(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/account-registration\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/business-registration\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/my-business\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/balance\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/transfer\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"transfer\");\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n                <Route\r\n                  exact\r\n                  path=\"/summary\"\r\n                  component={() => {\r\n                    // authorizedData.setView(\"default\");\r\n                    // return signedIn ? Summary(barrels) : Login(barrels);\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n              </Switch>\r\n              <div style={{ textAlign: \"center\" }}>\r\n                <LanguageSelector {...barrels} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n","import { sendData, startSession } from \"../utils/sockets\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n  const { req, data, session, uid, barrels } = props;\r\n\r\n  // console.log(\"RESPONSE HANDLER: \", props, barrels);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const { accountNumber, userBusinesses, debug } = barrels.barrelGetters;\r\n  const {\r\n    setUserData,\r\n    setUID,\r\n    setAccountNumber,\r\n    setUserBusinesses,\r\n  } = barrels.barrelSetters;\r\n  const { sendRequest, showMessage } = barrels.barrelFunctions;\r\n  //   const {} = barrels.barrelEventHandlers;\r\n\r\n  let requestFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onRequest = (req, callback) => {\r\n    if (requestFound) return;\r\n    if (req === props.req || req === \"default\") {\r\n      callback();\r\n      requestFound = true;\r\n    }\r\n  };\r\n\r\n  /** \r\n   * Request handlers\r\n  ============================================================================ */\r\n\r\n  // /**\r\n  //  * Start session (success)\r\n  //  */\r\n  // onRequest(\"start session\", (o) => {\r\n  //   // const { session } = onabort;\r\n  //   startSession(\"hello\", session);\r\n  // });\r\n\r\n  // onRequest(\"upload file\", (o) => {\r\n  //   // const { req, data } = o;\r\n  //   sendData({ req, data, uid, session });\r\n  // });\r\n\r\n  // onRequest(\"get user businesses\", (o) => {\r\n  //   // const { req } = o;\r\n  //   sendData({\r\n  //     req: req,\r\n  //     data: { uid: accountNumber },\r\n  //     uid: uid,\r\n  //     session: session,\r\n  //   });\r\n  // });\r\n\r\n  onRequest(\"sign in user\", () => {\r\n    // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n    // console.log(\"onRequest:\", data);\r\n\r\n    setUserData(JSON.stringify(data));\r\n    sendData({ req, data, uid, session }, debug);\r\n  });\r\n\r\n  onRequest(\"register account\", () => {\r\n    // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n    setUID(data.personalID);\r\n    setAccountNumber(data.personalID);\r\n    sendData({ req, data, uid, session }, debug);\r\n  });\r\n\r\n  // onRequest(\"get user businesses\", () => {\r\n  //   // setUserBusinesses(null);\r\n  //   if (userBusinesses === null) {\r\n  //     sendData({ req, data, uid, session });\r\n  //   } else {\r\n  //     //\r\n  //   }\r\n  // });\r\n\r\n  // onRequest(\"register user\", () => {\r\n  //   // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n  //   // setUserData(JSON.stringify(data));\r\n  //   sendData({ req, data, uid, session });\r\n  // });\r\n\r\n  // onRequest(\"register shareholder\", () => {\r\n  //   // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n  //   // setUserData(JSON.stringify(data));\r\n  //   sendData({ req, data, uid, session });\r\n  // });\r\n\r\n  onRequest(\"default\", () => {\r\n    sendData({ req, data, uid, session }, debug);\r\n\r\n    return true;\r\n  });\r\n\r\n  // onRequest(\"unknown\", () => {\r\n  //   showMessage(`UNKNOWN REQUEST ${req}`, \"info\");\r\n\r\n  //   return true;\r\n  // });\r\n\r\n  return requestFound;\r\n};\r\n","// import { useTranslation } from \"react-i18next\";\r\n\r\nexport default ({ args, barrels }) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {} = barrels.barrelGetters;\r\n  const { setRequest, setUID, setAccountNumber } = barrels.barrelSetters;\r\n  const { showMessage } = barrels.barrelFunctions;\r\n  // const {} = barrels.barrelEventHandlers;\r\n\r\n  //   const { t } = useTranslation(\"Errors\");\r\n  const { req, error, context } = props;\r\n  console.log(`ERROR: ${req}`, error, context, props, barrels);\r\n  // const { showMessage } = barrels.barrelFunctions;\r\n\r\n  let errorFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onError = (data, callback) => {\r\n    if (errorFound) return;\r\n    const [res, status] = data;\r\n    if ((res === req && status === error.code) || res === \"unknown\") {\r\n      callback();\r\n      setRequest(null);\r\n      errorFound = true;\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /** \r\n   * Response handlers\r\n  ============================================================================ */\r\n\r\n  /**\r\n   * Transfer errors\r\n   */\r\n  onError([\"transfer U2S\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"transfer U2U\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"transfer U2B\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_USER_REGISTRATION\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"validate email token\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"TOKEN_VALIDATION_FAILED\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"validate password reset token\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"TOKEN_VALIDATION_FAILED\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"reset password\", \"NO_ROWS_CHANGED\"], () => {\r\n    // showMessage(\"REQUEST_ALREADY_SENT\", \"info\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user language\", \"NO_ROWS_CHANGED\"], () => {\r\n    // User selected the same language again - that's ok\r\n    return true;\r\n  });\r\n\r\n  onError([\"register account\", \"ER_DUP_ENTRY\"], () => {\r\n    setUID(null);\r\n    setAccountNumber(null);\r\n    showMessage(\"DUPLICATE_ACCOUNT_REGISTRATION\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError(\r\n    [\"register account\", \"ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO\"],\r\n    () => {\r\n      setUID(null);\r\n      setAccountNumber(null);\r\n      showMessage(\"DUPLICATE_ACCOUNT_REGISTRATION\", \"error\");\r\n      return true;\r\n    }\r\n  );\r\n\r\n  onError([\"register shareholder\", \"ER_NO_REFERENCED_ROW_2\"], () => {\r\n    showMessage(\"USER_NOT_FOUND\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"unknown\"], () => {\r\n    showMessage(error.code, \"error\");\r\n    return true;\r\n  });\r\n\r\n  // if (req === \"transfer U2S\") {\r\n  //   if (error.code === \"NO_ROWS_CHANGED\") {\r\n  //     // transfer error\r\n  //     showMessage(\"INVALID_TRANSFER\", \"error\");\r\n  //   }\r\n  // } else {\r\n  //   showMessage(error.code, \"error\");\r\n  // }\r\n\r\n  return false;\r\n};\r\n","export default ({ args, barrels }) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"RESPONSE HANDLER: \", props, barrels);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    debug,\r\n    currencies,\r\n    transactions,\r\n    shares,\r\n    transactionsPerPage,\r\n    sharesPerPage,\r\n    userData,\r\n    accountNumber,\r\n    uid,\r\n    userBusinesses,\r\n    businessPurposes,\r\n    purposeShareholders,\r\n    activeBusinesPurpose,\r\n    lastInsertId,\r\n  } = barrels.barrelGetters;\r\n  const {\r\n    setRequest,\r\n    setSession,\r\n    setCurrencies,\r\n    setTransactions,\r\n    setShares,\r\n    setCountCurrencies,\r\n    setCountTransactions,\r\n    setCountShares,\r\n    setConnected,\r\n    // setLanguage,\r\n    setUserData,\r\n    setSignedIn,\r\n    setCurrencyAbbr,\r\n    setCurrencyRate,\r\n    setCurrencyStatus,\r\n    // setTransferSuccess,\r\n    setRedirectTo,\r\n    setLastInsertId,\r\n    setAccountNumber,\r\n    setUID,\r\n    setUserBusinesses,\r\n    setBusinessPurposes,\r\n    setPurposeShareholders,\r\n    // setBusinessLoaded,\r\n    setAccountPhotoPath,\r\n    setPasswordResetTokenValidated,\r\n    setPasswordResetTokenEmail,\r\n    // setRedirect,\r\n  } = barrels.barrelSetters;\r\n  const {\r\n    sendRequest,\r\n    // processResponse,\r\n    getBusinesses,\r\n    getAccountData,\r\n    getTransactionById,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n    showMessage,\r\n    changeLanguage,\r\n\r\n    // hideMessage,\r\n  } = barrels.barrelFunctions;\r\n  const {\r\n    onTransferSuccess,\r\n    onRedirect,\r\n    onLogOut,\r\n  } = barrels.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   ============================================================================ */\r\n  const { req, status } = props;\r\n  // const { userData, accountNumber } = barrels.barrelGetters;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  // console.log(\"USER DATA PARSED:\", userDataParsed);\r\n\r\n  /**\r\n   * Log response\r\n   */\r\n  if (debug) console.log(`response: ${req}`, props, barrels);\r\n\r\n  let responseFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onResponse = (data, callback) => {\r\n    if (responseFound) return;\r\n    const [res, status] = data;\r\n    if ((res === props.req && status === props.status) || res === \"unknown\") {\r\n      if (callback()) {\r\n        setRequest(null);\r\n      }\r\n      responseFound = true;\r\n      // return true;\r\n    }\r\n    // return false;\r\n  };\r\n\r\n  /** \r\n   * Response handlers\r\n  ============================================================================ */\r\n\r\n  /**\r\n   * Start session (success)\r\n   */\r\n  onResponse([\"start session\", \"success\"], () => {\r\n    setConnected(true);\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * End session (success)\r\n   */\r\n  onResponse([\"end session\", \"success\"], () => {\r\n    console.log(\"ON END SESSION\");\r\n\r\n    setConnected(false);\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Register user (pending)\r\n   */\r\n  onResponse([\"register user\", \"pending\"], () => {\r\n    // Might show some user feedback\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register user\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO users\") {\r\n      if (props.results.insertId > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register user (success)\r\n   */\r\n  onResponse([\"register user\", \"success\"], () => {\r\n    // console.log(\"REGISTER USER PROPS:\", props);\r\n    const noEmailValidation = false;\r\n\r\n    if (noEmailValidation) {\r\n      setSignedIn(true);\r\n      setSession(props.email);\r\n      onRedirect(\"/account-registration\");\r\n      sendRequest({ req: \"get user\", data: { email: props.email } }); // to not require a log in\r\n      return false;\r\n    } else {\r\n      onRedirect(\"/validate-email\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"validate email token\", \"continue\"], () => {\r\n    if (props.name === \"UPDATE validation tokens\") {\r\n      if (props.results.affectedRows > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        // onRedirect(\"/sign-in\");\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (props.name === \"UPDATE users\") {\r\n      if (props.results.affectedRows > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        onRedirect(\"/sign-in\");\r\n        return true;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  // onResponse([\"validate password reset token\", \"continue\"], () => {\r\n  //   if (props.name === \"UPDATE validation tokens\") {\r\n  //     if (props.results.affectedRows > 0) {\r\n  //       // onRedirect(\"/password\");\r\n  //       setPasswordResetTokenValidated(true);\r\n  //       return true;\r\n  //     } else {\r\n  //       // No row was inserted - an error was returned\r\n  //       return true;\r\n  //     }\r\n  //   }\r\n\r\n  //   return false;\r\n  // });\r\n\r\n  onResponse([\"validate password reset token\", \"success\"], () => {\r\n    setPasswordResetTokenValidated(true);\r\n\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Sign in user (continue)\r\n   */\r\n  onResponse([\"sign in user\", \"continue\"], () => {\r\n    // user with validated email\r\n    if (props.data.status === 1) {\r\n      setUserData(JSON.stringify(props.data));\r\n      setAccountNumber(props.data.uid);\r\n      setSession(props.data.email);\r\n      setCurrencyAbbr(props.data.currency_abbr);\r\n      setCurrencyRate(props.data.currency_rate);\r\n      setCurrencyStatus(props.data.currency_status);\r\n      changeLanguage(props.data.language);\r\n      setSignedIn(true);\r\n      onRedirect(\"/summary\");\r\n      return false;\r\n    }\r\n\r\n    // user without validated email\r\n    if (props.data.status === 0) {\r\n      onRedirect(\"/validate-email\");\r\n      return true;\r\n    }\r\n\r\n    // suspended or deleted user\r\n    if (props.data.status === 2) {\r\n      // onLogOut();\r\n      setRedirectTo(\"/sign-out\");\r\n      showMessage(\"ACCOUNT_SUSPENDED\", \"error\");\r\n      return true;\r\n    }\r\n\r\n    // suspended or deleted user\r\n    if (props.data.status === 3) {\r\n      // onLogOut();\r\n      setRedirectTo(\"/sign-out\");\r\n      showMessage(\"ACCOUNT_DELETED\", \"error\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Sign in user (finished)\r\n   */\r\n  onResponse([\"sign in user\", \"finished\"], () => {\r\n    if (props.rowNum === 1) {\r\n      // setSignedIn(true);\r\n      // onRedirect(\"/summary\");\r\n      return true;\r\n    } else {\r\n      // TODO: Clean Log Out() user here\r\n      // setSignedIn(false);\r\n\r\n      // onLogOut();\r\n      showMessage(\"INVALID_SIGN_IN\", \"error\");\r\n      setRedirectTo(\"/sign-out\");\r\n\r\n      return true;\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Update user (success)\r\n   */\r\n  onResponse([\"update user\", \"success\"], () => {\r\n    // setUserData(JSON.stringify(props.data));\r\n    sendRequest({ req: \"get user\", data: { email: userData.email } });\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get user (continue)\r\n   */\r\n  onResponse([\"get user\", \"continue\"], () => {\r\n    setUserData(JSON.stringify(props.data));\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get user (finished)\r\n   */\r\n  onResponse([\"get user\", \"finished\"], () => {\r\n    if (props.rowNum === 1) {\r\n      return true;\r\n    } else {\r\n      // Something wrong with (accessing) the user data\r\n      // Probable causes:\r\n      // - user was deleted from the DB\r\n      // - user status was set to >= 2\r\n      // - multiple users with the same email address, most improbable (db constraint)\r\n      // - user changed the email address or password\r\n      // onLogOut();\r\n      setRedirectTo(\"/sign-out\");\r\n      // showMessage(\"INVALID_DATA\", \"error\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get user businesses (continue)\r\n   */\r\n  onResponse([\"get user businesses\", \"continue\"], () => {\r\n    if (userBusinesses === null) {\r\n      setUserBusinesses(JSON.stringify([props.data]));\r\n    } else {\r\n      setUserBusinesses(JSON.stringify([...userBusinesses, props.data]));\r\n    }\r\n\r\n    // getBusinessPurposes(props.data.business_id);\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get user businesses (finished)\r\n   */\r\n  onResponse([\"get user businesses\", \"finished\"], () => {\r\n    setRedirectTo(\"/my-business\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get business purposes (continue)\r\n   */\r\n  onResponse([\"get business purposes\", \"continue\"], () => {\r\n    if (businessPurposes === null) {\r\n      setBusinessPurposes(JSON.stringify([props.data]));\r\n    } else {\r\n      setBusinessPurposes(JSON.stringify([...businessPurposes, props.data]));\r\n    }\r\n\r\n    // getPurposeShareholders(props.data.purpose_id);\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get business purposes (finished)\r\n   */\r\n  onResponse([\"get business purposes\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get purpose shareholders (continue)\r\n   */\r\n  onResponse([\"get purpose shareholders\", \"continue\"], () => {\r\n    if (purposeShareholders === null) {\r\n      setPurposeShareholders(JSON.stringify([props.data]));\r\n    } else {\r\n      setPurposeShareholders(\r\n        JSON.stringify([...purposeShareholders, props.data])\r\n      );\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get purpose shareholders (finished)\r\n   */\r\n  onResponse([\"get purpose shareholders\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get user business by id (continue)\r\n   */\r\n  onResponse([\"get business by id\", \"continue\"], () => {\r\n    if (userBusinesses === null) {\r\n      setUserBusinesses(JSON.stringify([props.data]));\r\n    } else {\r\n      setUserBusinesses(JSON.stringify([...userBusinesses, props.data]));\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get business by id (finished)\r\n   */\r\n  onResponse([\"get business by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get purpose by id (continue)\r\n   */\r\n  onResponse([\"get purpose by id\", \"continue\"], () => {\r\n    if (businessPurposes === null) {\r\n      setBusinessPurposes(JSON.stringify([props.data]));\r\n    } else {\r\n      setBusinessPurposes(JSON.stringify([...businessPurposes, props.data]));\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get purpose by id (finished)\r\n   */\r\n  onResponse([\"get purpose by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get shareholder by id (continue)\r\n   */\r\n  onResponse([\"get shareholder by id\", \"continue\"], () => {\r\n    if (purposeShareholders === null) {\r\n      setPurposeShareholders(JSON.stringify([props.data]));\r\n    } else {\r\n      setPurposeShareholders(\r\n        JSON.stringify([...purposeShareholders, props.data])\r\n      );\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get shareholder by id (finished)\r\n   */\r\n  onResponse([\"get shareholder by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Upload file (ready)\r\n   */\r\n  onResponse([\"upload file\", \"finished\"], () => {\r\n    setAccountPhotoPath(props + \"?r=\" + Math.random());\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Register account (success)\r\n   */\r\n  onResponse([\"register account\", \"continue\"], () => {\r\n    if (props.results.affectedRows < 1) {\r\n      // error registering account\r\n      setUID(null);\r\n      setAccountNumber(null);\r\n      showMessage(\"INVALID_DATA\", \"error\");\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register account (success)\r\n   */\r\n  onResponse([\"register account\", \"success\"], () => {\r\n    // setAccountNumber(props.uid);\r\n    // setUID(props.uid);\r\n    // sendRequest({\r\n    //   req: \"get account data\",\r\n    //   data: { uid: accountNumber },\r\n    // });\r\n    getAccountData();\r\n    // onRedirect(\"/balance\");\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get account data (continue)\r\n   */\r\n  onResponse([\"get account data\", \"continue\"], () => {\r\n    // setUserData(JSON.stringify(props.data));\r\n    // return false;\r\n\r\n    if (props.rowNum === 1) {\r\n      // all is good\r\n      setUserData(JSON.stringify(props.data));\r\n      return false;\r\n    } else {\r\n      // Account not reachable\r\n      showMessage(\"INVALID_DATA\", \"error\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get account data (finished)\r\n   */\r\n  onResponse([\"get account data\", \"finished\"], () => {\r\n    // if (props.rowNum === 1) {\r\n    //   // all is good\r\n    //   return true;\r\n    // } else {\r\n    //   // Account not reachable\r\n    //   showMessage(\"INVALID_DATA\", \"error\");\r\n    //   return true;\r\n    // }\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2S\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (continue)\r\n   */\r\n  onResponse([\"transfer U2S\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (success)\r\n   */\r\n  onResponse([\"transfer U2S\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2U\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (continue)\r\n   */\r\n  onResponse([\"transfer U2U\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (success)\r\n   */\r\n  onResponse([\"transfer U2U\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2B\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (continue)\r\n   */\r\n  onResponse([\"transfer U2B\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (success)\r\n   */\r\n  onResponse([\"transfer U2B\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register business\r\n   ============================================================================================*/\r\n  onResponse([\"register business\", \"continue\"], () => {\r\n    // console.log(\"RESPONSE register business:\", props);\r\n\r\n    if (props.results.insertId > 0) {\r\n      // showMessage(\"REGISTER_BUSINESS_SUCCESS\", \"info\");\r\n\r\n      // sendRequest({\r\n      //   req: \"get business by id\",\r\n      //   data: { id: props.results.insertId },\r\n      // });\r\n      setLastInsertId(props.results.insertId);\r\n      return false;\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register business\", \"success\"], () => {\r\n    // console.log(\"RESPONSE register business:\", props);\r\n\r\n    sendRequest({\r\n      req: \"get business by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    // getBusinesses();\r\n    return false;\r\n    // return true;\r\n  });\r\n\r\n  onResponse([\"register currency\", \"continue\"], () => {\r\n    // console.log(\"RESPONSE register business:\", props);\r\n\r\n    if (props.results.insertId > 0) {\r\n      setLastInsertId(props.results.insertId);\r\n\r\n      return false;\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register currency\", \"success\"], () => {\r\n    sendRequest({\r\n      req: \"get currency by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currencies (continue)\r\n   */\r\n  onResponse([\"get currencies\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT currencies\") {\r\n      if (currencies === null) {\r\n        setCurrencies(JSON.stringify([props.results]));\r\n      } else {\r\n        setCurrencies(JSON.stringify([...currencies, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT currencies\") {\r\n      setCountCurrencies(props.results.count_currencies);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currencies (finished)\r\n   */\r\n  onResponse([\"get currencies\", \"finished\"], () => {\r\n    setRedirectTo(\"/currency\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (continue)\r\n   */\r\n  onResponse([\"get currency by id\", \"continue\"], () => {\r\n    if (currencies === null) {\r\n      setCurrencies(JSON.stringify([props.data]));\r\n    } else {\r\n      setCurrencies(JSON.stringify([...currencies, props.data]));\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (finished)\r\n   */\r\n  onResponse([\"get currency by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get transactions (continue)\r\n   */\r\n  onResponse([\"get transactions\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT transactions\") {\r\n      if (transactions === null) {\r\n        setTransactions(JSON.stringify([props.results]));\r\n      } else {\r\n        setTransactions(JSON.stringify([...transactions, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT transactions\") {\r\n      setCountTransactions(props.results.count_transaction_positions);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get transactions (finished)\r\n   */\r\n  onResponse([\"get transactions\", \"finished\"], () => {\r\n    setRedirectTo(\"/balance\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get shares (continue)\r\n   */\r\n  onResponse([\"get shares\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT shares\") {\r\n      if (shares === null) {\r\n        setShares(JSON.stringify([props.results]));\r\n      } else {\r\n        setShares(JSON.stringify([...shares, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT shares\") {\r\n      setCountShares(props.results.count_shares);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get shares (finished)\r\n   */\r\n  onResponse([\"get shares\", \"finished\"], () => {\r\n    // setRedirectTo(\"/balance\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get transaction by id (continue)\r\n   */\r\n  onResponse([\"get transaction by id\", \"continue\"], () => {\r\n    if (transactions === null) {\r\n      setTransactions(JSON.stringify([props.data]));\r\n    } else {\r\n      setTransactions(JSON.stringify([...transactions, props.data]));\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (finished)\r\n   */\r\n  onResponse([\"get transaction by id\", \"finished\"], () => {\r\n    getAccountData();\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register purpose\", \"continue\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get purpose by id\",\r\n    //   data: { id: props.results.insertId },\r\n    // });\r\n    if (props.results.insertId > 0) {\r\n      setLastInsertId(props.results.insertId);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register purpose\", \"success\"], () => {\r\n    sendRequest({\r\n      req: \"get purpose by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register shareholder\", \"continue\"], () => {\r\n    if (props.results.insertId > 0) {\r\n      // showMessage(\"REGISTER_SHAREHOLDER_SUCCESS\", \"info\");\r\n\r\n      // return sendRequest({\r\n      //   req: \"get shareholder by id\",\r\n      //   data: { id: props.results.insertId },\r\n      // });\r\n      setLastInsertId(props.results.insertId);\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register shareholder\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    getPurposeShareholders(activeBusinesPurpose);\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"change share\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    // getPurposeShareholders(activeBusinesPurpose);\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"remove shareholder\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    getPurposeShareholders(activeBusinesPurpose);\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"reset password\", \"success\"], () => {\r\n    setPasswordResetTokenValidated(false);\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"change password\", \"success\"], () => {\r\n    // TOTO: If NO_ROWS_CHANGE - probably the currently saved password was submitted\r\n    setPasswordResetTokenValidated(null);\r\n    setPasswordResetTokenEmail(null);\r\n    onRedirect(\"/sign-in\");\r\n    showMessage(\"PASSWORD_CHANGE_SUCCESS\", \"info\");\r\n    return true;\r\n  });\r\n\r\n  // onResponse([\"unknown\"], () => {\r\n  //   if (\r\n  //     status === \"pending\" ||\r\n  //     status === \"continue\" ||\r\n  //     status === \"finished\" ||\r\n  //     status === \"success\"\r\n  //   ) {\r\n  //     return false;\r\n  //   } else {\r\n  //     showMessage(`${req}: ${status}`, \"info\");\r\n  //     return true;\r\n  //   }\r\n  // });\r\n\r\n  onResponse([\"unknown\"], () => {\r\n    return false;\r\n  });\r\n\r\n  return responseFound;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"ValidateEmail\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { validateTokenEmail } = props.barrelGetters;\r\n  const { setValidateTokenEmail } = props.barrelSetters;\r\n  const { getUrlParam, sendEmailValidationRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Hooks\r\n    ============================================================================ */\r\n\r\n  // setToken(getUrlParam(\"token\"));\r\n  // setEmail(getUrlParam(\"email\"));\r\n\r\n  const token = getUrlParam(\"token\");\r\n  const email = getUrlParam(\"email\");\r\n\r\n  /**\r\n    * Effects\r\n    ============================================================================ */\r\n  useEffect(() => {\r\n    if (token === null || email === null) return;\r\n\r\n    setValidateTokenEmail(\r\n      JSON.stringify({\r\n        token,\r\n        email,\r\n      })\r\n    );\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    // const queryString = window.location.search;\r\n    // const urlParams = new URLSearchParams(queryString);\r\n\r\n    return token === null ? (\r\n      <>\r\n        <h4>{t(\"A verification link has been sent to your email account.\")}</h4>\r\n        <hr />\r\n        <p>\r\n          {t(\r\n            \"Please click on the link that has just been sent to your email account\"\r\n          )}\r\n        </p>\r\n      </>\r\n    ) : (\r\n      <div className=\"text-center\">\r\n        <Spinner\r\n          as=\"span\"\r\n          animation=\"border\"\r\n          size=\"sm\"\r\n          role=\"status\"\r\n          aria-hidden=\"true\"\r\n          hidden={false}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\nimport Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"ChangePassword\",\r\n    request: \"change password\",\r\n    email: null,\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  const {\r\n    passwordResetTokenValidated,\r\n    passwordResetTokenEmail,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation([\r\n    passwordResetTokenValidated === true ? \"SignUp\" : \"ChangePassword\",\r\n  ]); // adjust namespace\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n\r\n  /**\r\n     * Functions\r\n     ============================================================================ */\r\n  const onSubmit = (data) => {\r\n    data.email = passwordResetTokenEmail;\r\n    // console.log(data);\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  /** \r\n     * Yup schema\r\n     ============================================================================ */\r\n  const schema = yup.object({\r\n    password: yup\r\n      .string()\r\n      .required(t(\"No password provided\"))\r\n      .min(8, t(\"Password is too short\"))\r\n      // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n      .matches(\r\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n        t(\"Password is too weak\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n     * Form\r\n     ============================================================================ */\r\n  const ChangePasswordForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"New password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type={passwordVisible ? \"text\" : \"password\"}\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text\r\n              id=\"inputGroupAppend\"\r\n              onClick={togglePassword}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              {passwordVisible ? (\r\n                <VisibilityOff\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\" }}\r\n                />\r\n              ) : (\r\n                <Visibility fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n              )}\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <SubmitButton\r\n        {...args}\r\n        caption={t(\"Submit\")}\r\n        request={props.request}\r\n        namespace={props.namespace}\r\n      />\r\n    </Form>\r\n  );\r\n\r\n  /**\r\n     * Return\r\n     ============================================================================ */\r\n  if (passwordResetTokenValidated === true) {\r\n    // if (true) {\r\n    return (\r\n      <Formik\r\n        component={ChangePasswordForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          password: \"\",\r\n        }}\r\n      />\r\n    );\r\n  } else {\r\n    // if (passwordResetTokenValidated === false)\r\n    return <>{t(\"Awaiting validation\")}</>;\r\n    // } else {\r\n    //   // null\r\n    //   return <>How did you land here???</>;\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(\"Logout\");\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { error, language } = props.barrelGetters;\r\n  const { setLanguage } = props.barrelSetters;\r\n  const { showMessage } = props.barrelFunctions;\r\n  const { onLogOut } = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Default Properties\r\n   */\r\n  // let defaults = {};\r\n  // const props = Object.assign(defaults, authorizedData);\r\n\r\n  const [logOut] = useState(true);\r\n\r\n  // console.log(\"sendUserLogOutRequest\", props);\r\n\r\n  useEffect(() => {\r\n    if (logOut !== true) return;\r\n    // console.log(\"LOG OUT =============\");\r\n\r\n    const tempError = error;\r\n    const tempLanguage = language;\r\n\r\n    onLogOut();\r\n\r\n    setLanguage(tempLanguage);\r\n\r\n    if (tempError !== null) {\r\n      showMessage(tempError, \"error\");\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [logOut]);\r\n\r\n  return (\r\n    <>\r\n      <h4>{t(\"See you soon\")}</h4>\r\n      <hr />\r\n\r\n      <br />\r\n      <p className=\"text-center\">\r\n        <a href=\"/\">{t(\"Sign in\")}</a>\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button, Spinner } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n  * Default export\r\n  ============================================================================ */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"ResetPassword\", request: \"reset password\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { language } = props.barrelGetters;\r\n  const { setValidateTokenPasswordReset } = props.barrelSetters;\r\n  const { sendRequest, getUrlParam } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  const token = getUrlParam(\"token\");\r\n  const email = getUrlParam(\"email\");\r\n\r\n  /**\r\n    * Effects\r\n    ============================================================================ */\r\n  useEffect(() => {\r\n    if (token === null || email === null) return;\r\n\r\n    setValidateTokenPasswordReset(\r\n      JSON.stringify({\r\n        token,\r\n        email,\r\n      })\r\n    );\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n    * Event listeners\r\n    ============================================================================ */\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    // console.log(data);\r\n    data.language = language;\r\n    sendRequest({\r\n      req: props.request,\r\n      data: data,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n  });\r\n\r\n  const passwordResetForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Reset password\")}</h3>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n\r\n  // return (\r\n  //   <Formik\r\n  //     component={passwordResetForm}\r\n  //     validationSchema={schema}\r\n  //     onSubmit={onSubmit}\r\n  //     initialValues={{\r\n  //       email: \"\",\r\n  //     }}\r\n  //   />\r\n  // );\r\n\r\n  return token === null ? (\r\n    <Formik\r\n      component={passwordResetForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        email: \"\",\r\n      }}\r\n    />\r\n  ) : (\r\n    <div className=\"text-center\">\r\n      <Spinner\r\n        as=\"span\"\r\n        animation=\"border\"\r\n        size=\"sm\"\r\n        role=\"status\"\r\n        aria-hidden=\"true\"\r\n        hidden={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","// import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Loading.css\";\r\nimport React from \"react\";\r\n// import MainSkeleton from \"../pages/main\";\r\n\r\nexport default () => {\r\n  //\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"lds-hourglass\"></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { Suspense, lazy } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./normalize.css\";\r\nimport \"./index.css\";\r\n// import UnderConstruction from \"./components/pages/underConstruction\";\r\nimport Main from \"./components/pages/main\";\r\nimport Loading from \"./components/loading\";\r\n\r\n// const Main = React.lazy(() => import(\"./components/pages/main\"));\r\n\r\nReactDOM.render(\r\n  <Suspense fallback={<Loading />}>\r\n    <Main />\r\n  </Suspense>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}