{"version":3,"sources":["components/locale lazy /^/.*$/ groupOptions: {} namespace object","translations/i18n.js","utils/config.js","components/card/Card.js","components/dropzone/Dropzone.js","components/submitButton/SubmitButton.js","utils/useTimeout.js","components/errorBoundary/ErrorBoundary.js","components/modalMessage/ModalMessage.js","utils/state.js","components/accountRegistration/AccountRegistration.js","components/businessRegistration/businessRegistration.js","components/pagination/Pagination.js","components/transactions/Transactions.js","components/shareholder/Shareholder.js","components/shares/Shares.js","components/transfer/Balance.js","components/transfer/TransferToSelf.js","components/transfer/TransferToPerson.js","components/transfer/TransferToBusiness.js","components/purposeRegistration/PurposeRegistration.js","components/shareholderRegistration/shareholderRegistration.js","components/myBusiness/MyBusiness.js","components/userEditor/UserEditor.js","components/currencies/Currencies.js","components/currencyRegistration/CurrencyRegistration.js","components/idleTimer/IdleTimer.js","utils/useInterval.js","utils/useEventListener.js","components/pages/summary/Summary.js","components/currencyContainer/CurrencyContainer.js","components/transfer/Transfer.js","utils/sockets.js","components/login/LogIn.js","components/signup/SignUp.js","components/alert/Alert.js","components/language-selector/LanguageSelector.js","components/pages/main/Main.js","utils/requestHandler.js","utils/errorHandler.js","utils/responseHandler.js","components/validateEmail/ValidateEmail.js","components/changePassword/ChangePassword.js","components/logout/Logout.js","components/passwordReset/passwordReset.js","components/loading/Loading.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","react","wait","withRef","bindI18n","bindStore","nsMode","config","args","defaults","title","navigation","undefined","footer","header","body","headerContent","onNavigationClick","props","assign","key","Footer","Header","className","Title","Nav","variant","defaultActiveKey","navigationdefaultActiveKey","item","Item","Link","href","link","onClick","style","color","name","Body","React","Children","children","child","cloneElement","styles","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","outline","transition","activeStyle","acceptStyle","rejectStyle","data","accountPhotoPath","barrelGetters","sendRequest","barrelFunctions","useState","setFiles","useTranslation","onDrop","useCallback","acceptedFiles","useDropzone","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useMemo","Figure","Image","width","height","alt","src","caption","request","namespace","visible","marginTop","timeout","onSubmit","setRequest","barrelSetters","showMessage","requestExpired","setRequestExpired","callback","delay","savedCallback","useRef","useEffect","current","setTimeout","clearTimeout","useTimeout","console","log","Button","type","block","disabled","Spinner","as","animation","size","role","aria-hidden","hidden","ErrorBoundary","state","hasError","error","errorInfo","this","Component","centered","message","onHide","file","backdrop","ExternalFile","lazy","Modal","aria-labelledby","closeButton","Navbar","background","boxShadow","Brand","maxHeight","overflowY","useStickyState","defaultValue","stickyValue","window","localStorage","getItem","JSON","parse","value","setValue","setItem","stringify","signedIn","accountNumber","userData","getReviser","getWorkplace","userAgreementShow","setUserAgreementShow","privacyPolicyShow","setPrivacyPolicyShow","schema","yup","dropzoneHook","required","terms","personalID","matches","RegExp","test","exclusive","params","pid","replace","split","n","parseInt","Alert","Heading","i18nKey","ModalMessage","show","component","handleSubmit","handleChange","values","handleBlur","touched","errors","isValid","validateForm","setFieldValue","Form","noValidate","Group","controlId","Label","Text","Dropzone","Control","onChange","isInvalid","Feedback","InputGroup","Prepend","placeholder","aria-describedby","Check","label","feedback","KeyboardArrowRight","onMouseDown","SubmitButton","validationSchema","reviser","workplace","email","sendAccountRegistrationRequest","initialValues","barrelEventHandlers","onBusinessRegistration","businessTitle","min","max","trim","businessDescription","optional","rows","uid","registerBusiness","countItems","itemsPerPage","active","align","pages","Math","ceil","getPages","items","number","push","Pagination","Ellipsis","textAlign","margin","First","Prev","Next","Last","getJSX","transactions","countTransactions","activePageTransactions","transactionsPerPage","getTransactions","format","formatDate","formatPerCent","cnt","ListGroup","transaction","keyTransactions","business_title","conv_amount","created","sender_firstname","sender_lastname","purpose_id","purpose_title","recipient_id","roles","share","share_per_cent","i_am_recipient","roles_available","arrRoles","shares_available","action","float","Badge","pill","purpose","shareholder","rangeControl","sharePerCent","purposeTitle","businessOwnerFirstname","businessOwnerLastname","sharesCreated","purposeShareholders","setPurposeShareholders","userQuery","setUserQuery","delayedQuery","_","debounce","q","sendQuery","target","onClose","shareholder_id","ps","sharesLabelId","Toast","minWidth","firstname","lastname","Settings","fontSize","step","month","day","year","shares","countShares","activePageShares","sharesPerPage","getShares","keyShares","owner_firstname","owner_lastname","shares_created","shares_roles","shares_share","Shareholder","accordionView","setAccountType","setRedirectTo","setAccordionView","getAccountData","userDataParsed","onAccountTypeSelected","available","acc_curr","acc_cred","acc_save","Accordion","Toggle","Card","eventKey","cursor","Collapse","Transactions","Shares","accountType","language","currencyAbbr","parseLocaleNumber","fromAccount","toAccount","amount","custom","Intl","NumberFormat","notation","minimumFractionDigits","transferToSelf","toPersonalID","description","transferToPerson","purposeID","currency","transferToBusiness","businessID","barrels","onPurposeRegistration","purposeDescription","RegisterPurpose","shareholderRoles","typeError","userBusinesses","countBusinesses","businessesPerPage","activePageBusinesses","userBusinessesLoaded","activeBusiness","activeBusinessID","businessPurposes","countBusinessPurposes","businessPurposesPerPage","activePageBusinessPurposes","activeBusinesPurpose","getBusinesses","getBusinessPurposes","getPurposeShareholders","menuItems","purposes","countShareholders","business","keyBusiness","keyPurpose","business_id","TogglePurpose","whiteSpace","Extension","Tab","Pane","bg","keyShareholder","Add","jsx","date","Date","businessSince","DateTimeFormat","ToggleBusiness","Store","Container","Row","Col","sm","Content","border","PurposeRegistration","mode","editFirstname","setEditFirstname","editLastname","setEditLastname","editEmail","setEditEmail","editPassword","setEditPassword","passwordVisible","setPasswordVisible","submitButtonVisible","setSubmitButtonVisible","togglePassword","yupObject","firstName","lastName","password","Close","Edit","Append","VisibilityOff","Visibility","sendUserRegistrationRequest","currencies","countCurrencies","activePageCurrencies","currenciesPerPage","setCurrencyAbbr","getCurrencies","formatExchangeRate","onCurrencySelected","currency_id","onPageSelect","Table","responsive","striped","bordered","hover","keyCUrrency","abbr","rate","region","checked","aria-label","curr_abbr","curr_title","curr_region","curr_rate","timestamp","stage2","stage3","onTimeout","events","onSessionTimeout","seconds","setSeconds","modalMessageShow","setModalMessageShow","setInterval","clearInterval","useInterval","eventHandler","i","addEventListener","removeEventListener","useEventListener","currTime","timeFormatted","minute","second","modalMessage","fontWeight","OverlayTrigger","placement","overlay","Tooltip","AvTimer","setGotFocus","location","useLocation","fluid","paddingRight","paddingLeft","PowerSettingsNew","IdleTimer","collapseOnSelect","expand","pathname","aria-controls","viewBalanceOrTransfer","exact","path","Balance","AccountRegistration","UserEditor","accordionViewCurrency","setAccordionViewCurrency","Currencies","CurrencyRegistration","CurrencyContainer","MyBusiness","transferType","onTransferTypeChange","transferCard","setTransferCard","TransferToSelf","TransferToPerson","TransferToBusiness","Transfer","dev","uri","ENDPOINT","hostname","socket","openSocket","connect","secure","reconnect","sendData","emit","sendUserLogInRequest","rememberMe","validateEmail","info","onAlertClose","dismissible","changeLanguage","lng","selectLanguage","setDebug","loggingOut","setLoggingOut","pageLoading","setPageLoading","now","instance","setInstance","uuidv4","session","setSession","connected","setConnected","setSignedIn","currencyRate","setCurrencyRate","setCurrencies","setTransactions","setShares","setCountCurrencies","setCountTransactions","setCountShares","setActivePageCurrencies","setActivePageTransactions","setActivePageShares","setCurrenciesPerPage","setTransactionsPerPage","setSharesPerPage","setUserData","setUID","setAccountNumber","setUserBusinesses","setCountBusinesses","setBusinessesPerPage","setActivePageBusinesses","setUserBusinessesLoaded","setActiveBusiness","setActiveBusinessID","setBusinessPurposes","setCountBusinessPurposes","setBusinessPurposesPerPage","setActivePageBusinessPurposes","setActiveBusinesPurpose","redirectTo","lastInsertId","setLastInsertId","validateTokenEmail","setValidateTokenEmail","validateTokenPasswordReset","setValidateTokenPasswordReset","passwordResetTokenValidated","setPasswordResetTokenValidated","passwordResetTokenEmail","setPasswordResetTokenEmail","tmrConnected","options","setLanguage","setTransferType","setAccountPhotoPath","setError","setInfo","responseData","setResponseData","on","useSocket","processResponse","processRequest","requestFound","onRequest","requestHandler","status","context","errorFound","onError","res","errorHandler","getTransactionById","onRedirect","responseFound","onResponse","reqData","results","insertId","affectedRows","currency_abbr","isNaN","currency_rate","queryCnt","rowNum","count_businesses","count_purposes","count_currencies","count_transaction_positions","count_shares","responseHandler","hideMessage","getUrlParam","param","queryString","search","URLSearchParams","get","sendEmailValidationRequest","token","msg","maximumFractionDigits","ts","hour","newPage","page","limit","selected","stringNumber","locale","parts_local","formatToParts","group","decimal","forEach","parseFloat","to","onSignUp","onTransferSuccess","onTransfer","onLogOut","endSession","clear","startSession","sendPasswordResetRequest","wrapperClass","innerClass","getContainerClass","appClass","Summary","Login","SignUp","ValidateEmail","ChangePassword","tempError","tempLanguage","Logout","PasswordReset","LanguageSelector","ReactDOM","render","fallback","document","getElementById"],"mappings":"2NAAA,IAAIA,EAAM,CACT,iBAAkB,CACjB,IACA,EACA,GAED,qBAAsB,CACrB,IACA,EACA,GAED,wBAAyB,CACxB,IACA,EACA,GAED,qBAAsB,CACrB,IACA,EACA,GAED,wBAAyB,CACxB,IACA,EACA,IAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBU,EAAED,EAAID,EAAI,OAGvCV,EAAoBa,KAAO,WAC1B,OAAOC,OAAOD,KAAKd,IAEpBC,EAAoBW,GAAK,IACzBI,EAAOC,QAAUhB,G,gPCpCjBiB,IAGGC,IAAIC,KAGJD,IAAIE,KAEJF,IAAIG,KAGJC,KAAK,CACJC,YAAa,KACbC,OAAO,EAEPC,GAAI,CAAC,QAAS,UACdC,UAAW,UACXC,cAAc,EACdC,cAAe,CACbC,aAAa,GAEfC,MAAO,CACLC,MAAM,EACNC,SAAS,EACTC,SAAU,yBACVC,UAAW,gBACXC,OAAQ,aAIClB,ICZXmB,EDYWnB,IAAf,E,mHEhCe,WAACoB,GACd,IAAIC,EAAW,CACbC,MAAO,WACPC,gBAAYC,EACZC,YAAQD,EACRE,QAAQ,EACRC,MAAM,EACNC,cAAe,KACfC,kBAAmB,cAEjBC,EAAQjC,OAAOkC,OAAOV,EAAUD,GAEhCY,EAAM,EAENP,EAASK,EAAML,OAAS,kBAAC,IAAKQ,OAAN,KAAcH,EAAML,QAAwB,GAExE,OACE,kBAAC,IAAD,KAEGK,EAAMJ,QACL,kBAAC,IAAKQ,OAAN,CAAaC,UAAU,eACI,OAAxBL,EAAMF,cACLE,EAAMF,cAEN,oCACE,kBAAC,IAAKQ,MAAN,KAAaN,EAAMR,OACnB,kBAACe,EAAA,EAAD,CACEC,QAAQ,OACRC,iBAAkBT,EAAMU,4BAEvBV,EAAMP,YACLO,EAAMP,WAAWzC,KAAI,SAAC2D,EAAMT,GAAP,OACnB,kBAACK,EAAA,EAAIK,KAAL,CAAUV,IAAKA,GACb,kBAACK,EAAA,EAAIM,KAAL,CACER,UAAU,cACVS,KAAMH,EAAKI,KACXC,QAAS,kBAAMhB,EAAMD,kBAAkBY,EAAKI,OAC5CE,MAAO,CAAEC,MAAO,UAEfP,EAAKQ,aAUvBnB,EAAMH,MACL,kBAAC,IAAKuB,KAAN,CAAWf,UAAU,eAClBgB,IAAMC,SAAStE,IAAIsC,EAAKiC,UAAU,SAACC,GAClC,MAAqB,kBAAVA,EACFA,GAEPtB,IACOuB,uBAAaD,EAAO,CACzBE,OAAQ,KACRxB,IAAKA,SAMdP,I,iCCjEDgC,EAAY,CAChBC,KAAM,EACNC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,QAAS,OACTC,YAAa,EACbC,aAAc,EACdC,YAAa,UACbC,YAAa,SACbC,gBAAiB,UACjBnB,MAAO,UACPoB,QAAS,OACTC,WAAY,2BAGRC,EAAc,CAClBL,YAAa,WAGTM,EAAc,CAClBN,YAAa,WAGTO,EAAc,CAClBP,YAAa,WAMA,WAAC7C,GAKd,IAKMU,EAAQjC,OAAOkC,OALN,GAKuBX,EAAKqD,MAKrCC,EAAqB5C,EAAM6C,cAA3BD,iBAEEE,EAAgB9C,EAAM+C,gBAAtBD,YAjBe,EAuBFE,mBAAS,MAArBC,EAvBc,oBA4BfpF,EAAMqF,YAAe,uBAArBrF,EAMiB,KAArB+E,IACFjB,EAAUK,QAAU,EACpBL,EAAUS,YAAc,OACxBT,EAAUU,gBAAkB,QAQ9B,IAAMc,EAASC,uBAAY,SAACC,GAM1BJ,EAASI,GAMTP,EAAY,CAAE5F,IAAK,cAAeyF,KADvB,CAAEU,cAAeA,OAI3B,IA5DoB,EAsEnBC,YAAY,CACdC,OAAQ,UACRJ,WAPAK,EAjEqB,EAiErBA,aACAC,EAlEqB,EAkErBA,cACAC,EAnEqB,EAmErBA,aACAC,EApEqB,EAoErBA,aACAC,EArEqB,EAqErBA,aAWI3C,EAAQ4C,mBACZ,iCACKlC,EADL,GAEM+B,EAAelB,EAAc,GAFnC,GAGMmB,EAAelB,EAAc,GAHnC,GAIMmB,EAAelB,EAAc,MAEnC,CAACgB,EAAcC,EAAcC,IAG/B,MAAyB,KAArBhB,EAEA,yBAAKvC,UAAU,aACb,wBAASmD,EAAa,CAAEvC,UACtB,0BAAWwC,KACX,2BAAI5F,EAAE,sCAMZ+E,EAAmB,mBAGjB,oCACE,yBAAKvC,UAAU,aACb,wBAASmD,EAAa,CAAEvC,UACtB,0BAAWwC,KACX,kBAACK,EAAA,EAAOC,MAAR,CACEC,MAAO,IACPC,OAAQ,IACRC,IAAI,UACJC,IAAKvB,S,kBCtIJ,WAACtD,GAId,IAaMU,EAAQjC,OAAOkC,OAbN,CACbmE,QAAS,SACTC,QAAS,KACTC,UAAW,SACXC,SAAS,EACTC,UAAW,EACXC,QAAS,IACTC,SAAU,cAM0BpF,GAK9B+E,EAAYrE,EAAM6C,cAAlBwB,QACAM,EAAe3E,EAAM4E,cAArBD,WACAE,EAAgB7E,EAAM+C,gBAAtB8B,YAxBe,EAgCqB7B,oBAAS,GAhC9B,mBAgChB8B,EAhCgB,KAgCAC,EAhCA,MCbC,SAACC,EAAUC,GACnC,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAEJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIrH,EAAK0H,YAJX,WACEJ,EAAcG,YAGYJ,GAC1B,OAAO,kBAAMM,aAAa3H,OAE3B,CAACqH,IDgCJO,EAAW,WACLnB,IAAYrE,EAAMqE,UACtBoB,QAAQC,IAAI,cAIZX,GAAkB,GAClBJ,EAAW,MACXE,EAAY,kBAAmB,YAC9B7E,EAAMyE,SAsCT,OAAO,oCA5BGzE,EAAMuE,QAGZ,kBAACoB,EAAA,EAAD,CACEC,KAAK,SACL5E,QAAShB,EAAM0E,SACfmB,OAAK,EACLC,SAAUzB,IAAYrE,EAAMqE,UAAYS,EACxC7D,MAAO,CAAEuD,UAAWxE,EAAMwE,UAAY,OAEtC,kBAACuB,EAAA,EAAD,CACEC,GAAG,OACHC,UAAU,SACVC,KAAK,KACLC,KAAK,SACLC,cAAY,OACZC,OAAQhC,IAAYrE,EAAMqE,SAAWS,IAbzC,OAgBG9E,EAAMoE,QAhBT,QAFA,uC,6CExCSkC,E,kDA3Bb,WAAYtG,GAAQ,IAAD,8BACjB,cAAMA,IACDuG,MAAQ,CAAEC,UAAU,GAFR,E,8DAUDC,EAAOC,GAGvBjB,QAAQC,IAAI,kBAAmBe,EAAOC,K,+BAItC,OAAIC,KAAKJ,MAAMC,SAGN,qCAGFG,KAAK3G,MAAMuB,Y,gDAlBYkF,GAE9B,MAAO,CAAED,UAAU,O,GARKnF,IAAMuF,WCenB,WAACtH,GAId,IAgBMU,EAAQjC,OAAOkC,OAhBN,CACbqE,UAAW,eACXuC,UAAU,EACVC,QAAS,GACTtH,MAAO,KACPG,OAAQ,KAERoH,OAAQ,aACRb,KAAM,KACNc,KAAM,KACNC,UAAU,GAM0B3H,GAa9BzB,EAAMqF,YAAe,CAAClD,EAAMsE,YAA5BzG,EAEFqJ,EACW,OAAflH,EAAMgH,KACF3F,IAAM8F,MAAK,kBAAM,OAAO,YAAanH,EAAMgH,UAC3C,GA4EN,OAAO,oCA/DH,kBAACI,EAAA,EAAD,iBACMpH,EADN,CAEEkG,KAAMlG,EAAMkG,KACZmB,kBAAgB,gCAChBR,SAAU7G,EAAM6G,SAChBI,SAAUjH,EAAMiH,WAEC,OAAhBjH,EAAMR,OACL,kBAAC4H,EAAA,EAAMhH,OAAP,CAAckH,aAAW,GACvB,kBAACC,EAAA,EAAD,CAKEtG,MAAO,CACLiB,aAAc,MACdsF,WAAY,yBAEZnF,gBAAiB,GACjBoF,UAAW,SAIb,kBAACF,EAAA,EAAOG,MAAR,CAAc5G,KAAK,KACjB,yBACEqD,IAAI,sBACJH,MAAM,OACNC,OAAO,KACP5D,UAAU,2BACV6D,IAAKrG,EAAE,WAGX,kBAAC0C,EAAA,EAAD,CAAKF,UAAU,WACb,kBAAC+G,EAAA,EAAM9G,MAAP,CAAa1C,GAAG,iCACboC,EAAMR,UAMjB,kBAAC4H,EAAA,EAAMhG,KAAP,CACEH,MAAO,CAAE0G,UAAW,sBAAuBC,UAAW,SAEnC,KAAlB5H,EAAM8G,QACL9G,EAAM8G,QAEN,kBAAC,EAAD,KACE,kBAACI,EAAD,QAIY,OAAjBlH,EAAML,QACL,kBAACyH,EAAA,EAAMjH,OAAP,KACE,kBAACwF,EAAA,EAAD,CAAQ3E,QAAShB,EAAM+G,QAAvB,aCvHCc,EAAiB,SAACC,EAAc5H,GAAS,IAAD,EACzB8C,oBAAS,WACjC,IAAM+E,EAAcC,OAAOC,aAAaC,QAAQhI,GAChD,OAAuB,OAAhB6H,EAAuBI,KAAKC,MAAML,GAAeD,KAHP,mBAC5CO,EAD4C,KACrCC,EADqC,KAQnD,OAHAlD,qBAAU,WACR4C,OAAOC,aAAaM,QAAQrI,EAAKiI,KAAKK,UAAUH,MAC/C,CAACnI,EAAKmI,IACF,CAACA,EAAOC,ICQF,WAAChJ,GAKd,IAQMU,EAAQjC,OAAOkC,OARN,CACboE,QAAS,mBACTC,UAAW,uBAMyBhF,GAbf,EAwBnBU,EAAM6C,cALR4F,EAnBqB,EAmBrBA,SACAC,EApBqB,EAoBrBA,cACA9F,EArBqB,EAqBrBA,iBACA+F,EAtBqB,EAsBrBA,SACAlK,EAvBqB,EAuBrBA,MAvBqB,EA0B2BuB,EAAM+C,gBAAhD6F,EA1Be,EA0BfA,WAAYC,EA1BG,EA0BHA,aAAc/F,EA1BX,EA0BWA,YA1BX,EAiC2B+E,GAChD,EACA,qBAnCqB,mBAiChBiB,EAjCgB,KAiCGC,EAjCH,OAqC2BlB,GAChD,EACA,qBAvCqB,mBAqChBmB,EArCgB,KAqCGC,EArCH,KA6CfpL,EAAMqF,YAAelD,EAAMsE,WAA3BzG,EAKFqL,EAASC,IAAW,CACxBC,aAAcD,MAAaE,SAASxL,EAAE,yBACtCyL,MAAOH,MAAYE,SAASxL,EAAE,sBAC9B0L,WAAYJ,MAETE,SAASxL,EAAE,4BACX2L,QACC,IAAIC,OAAO5L,EAAE,sBACbA,EAAE,6BAEH6L,KAAK,CACJvI,KAAM,YACNwI,WAAW,EACXC,OAAQ,GACR9C,QAASjJ,EAAE,4BACX6L,KAAM,SAACrB,GACL,GAAqB,qBAAVA,EAAuB,OAAO,EACzC,IAAIwB,EAAMxB,EACPyB,QAAQ,IAAK,IACbC,MAAM,IACN/M,KAAI,SAAUgN,GACb,OAAOC,SAASD,EAAG,OAevB,OAFgB,MAVd,EAAIH,EAAI,GACR,EAAIA,EAAI,GACR,EAAIA,EAAI,GACR,EAAIA,EAAI,GACR,EAAIA,EAAI,GACR,GAAKA,EAAI,GACT,EAAIA,EAAI,GACR,EAAIA,EAAI,GACR,EAAIA,EAAI,GACR,EAAIA,EAAI,KACqB,KAEXA,EAAI,SA6KhC,OAAiB,IAAbpB,EAEA,oCACE,kBAACyB,EAAA,EAAD,CAAO1J,QAAQ,QACb,kBAAC0J,EAAA,EAAMC,QAAP,KAAgBtM,EAAE,uBAClB,2BACE,kBAAC,IAAD,CAAOuM,QAAQ,2CAAf,2BAQL3L,GAA2B,OAAlBiK,EAoBZ,oCACE,kBAAC2B,EAAD,CACEC,KAAMxB,EACN9B,KAAK,mBACLd,KAAK,KACLW,UAAU,EACVrH,MAAO3B,EAAE,kBACT8B,OAAO,GACPoH,OAAQ,kBAAMgC,GAAqB,MAGrC,kBAACsB,EAAD,CACEC,KAAMtB,EACNhC,KAAK,mBACLd,KAAK,KACLW,UAAU,EACVrH,MAAO3B,EAAE,kBACT8B,OAAO,GACPoH,OAAQ,kBAAMkC,GAAqB,MAGrC,kBAAC,EAAD,CAAMzJ,MAAO3B,EAAE,iBACb,kBAAC,IAAD,CACE0M,UAvKwB,SAAC,GAAD,IAC9BC,EAD8B,EAC9BA,aACAC,EAF8B,EAE9BA,aAEAC,GAJ8B,EAG9BC,WAH8B,EAI9BD,QACAE,EAL8B,EAK9BA,QAIAC,GAT8B,EAM9BC,QAN8B,EAO9BC,aAP8B,EAQ9BC,cAR8B,EAS9BH,QAT8B,OAW9B,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAACxG,SAAU8F,GACzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,2BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,aAEf,kBAACoN,EAAA,EAAKK,KAAN,KACE,kBAAC,IAAD,CAAOlB,QAAQ,6CAAf,iGAMF,6BACA,kBAACmB,EAAD,CAAU5I,KAAM3C,KAGlB,kBAACiL,EAAA,EAAKE,MAAN,CAAYC,UAAU,gCACpB,kBAACH,EAAA,EAAKO,QAAN,CACE5F,KAAK,OACLzE,KAAK,eACLkH,MAAOzF,EACP6I,SAAUhB,EACViB,YAAab,EAAOzB,aACpBnI,MAAO,CAAEY,QAAS,UAGpB,kBAACoJ,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOzB,gBAIX,EAUD,kBAAC6B,EAAA,EAAKE,MAAN,CAAYC,UAAU,8BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,gBACf,kBAAC+N,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWN,KAAZ,CAAiB1N,GAAG,qBAApB,OAEF,kBAACqN,EAAA,EAAKO,QAAN,CACE5F,KAAK,OACLkG,YAAajO,EAAE,gBACfkO,mBAAiB,oBACjB5K,KAAK,aACLkH,MAAOqC,EAAOnB,WACdkC,SAAUhB,EACViB,YAAab,EAAOtB,YAAcqB,EAAQrB,aAE5C,kBAAC0B,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOtB,cAKd,kBAAC0B,EAAA,EAAKE,MAAN,KACE,kBAACF,EAAA,EAAKe,MAAN,CACE3C,UAAQ,EACRlI,KAAK,QACL8K,MAAOpO,EAAE,iCACT4N,SAAUhB,EACViB,YAAab,EAAOvB,OAASsB,EAAQtB,MACrC4C,SAAUrB,EAAOvB,MACjB1L,GAAG,uBAIP,kBAAC,IAAD,CAAOwM,QAAQ,iEACb,kBAAC+B,EAAA,EAAD,CAAoBlL,MAAO,CAAEC,MAAO,iBACpC,uBAAGJ,KAAK,IAAIsL,YAAa,kBAAMrD,GAAqB,KAApD,kBAIA,6BAEA,kBAACoD,EAAA,EAAD,CAAoBlL,MAAO,CAAEC,MAAO,iBACpC,uBAAGJ,KAAK,IAAIsL,YAAa,kBAAMnD,GAAqB,KAApD,mBAKF,6BACA,6BAEA,kBAACoD,EAAD,iBACM/M,EADN,CAEE8E,QAASvG,EAAE,UACXwG,QAASrE,EAAMqE,QACfC,UAAWtE,EAAMsE,eA+DfgI,iBAAkBpD,EAClBxE,SA1MS,SAAC/B,IAjBqB,SAACA,GACzB,OAATA,IAEJA,EAAK4J,QAAU3D,IACfjG,EAAK6J,UAAY3D,IAGjBlG,EAAK8J,MAAQ9D,EAAS8D,MAEf3J,EAAY,CAAE5F,IAAK8C,EAAMqE,QAAS1B,UASrC+J,CAA+B/J,IA0M7BgK,cAAe,CACbpD,WAAY,GACZD,MAAO,GACPF,aAAcxG,OA/CpB,oCACE,kBAACsH,EAAA,EAAD,CAAO1J,QAAQ,QACb,kBAAC0J,EAAA,EAAMC,QAAP,KAAgBtM,EAAE,oCAClB,2BACE,kBAAC,IAAD,CACEuM,QAAQ,4EACR1B,cAAeA,GAFjB,+BAKE,gCAAS,CAAEA,kBALb,gCCjSG,WAACpJ,GAId,IAKMU,EAAQjC,OAAOkC,OALN,GAKuBX,GAK9BoJ,EAAkB1I,EAAM6C,cAAxB6F,cAde,EAsBnB1I,EAAM+C,gBAHRD,EAnBqB,EAmBrBA,YACA8F,EApBqB,EAoBrBA,WACAC,EArBqB,EAqBrBA,aAMMhL,GAJ2BmC,EAAM4M,oBAAjCC,uBAIM3J,YAAe,CAAC,yBAAtBrF,GAEFqL,EAASC,IAAW,CACxB2D,cAAe3D,MAEZE,SAASxL,EAAE,uCACXkP,IAAI,EAAGlP,EAAE,6BACTmP,IAAI,GAAInP,EAAE,4BACVoP,OACHC,oBAAqB/D,MAAagE,aAqEpC,OACE,kBAAC,IAAD,CACE5C,UAjDyB,SAAC,GAAD,IAC3BC,EAD2B,EAC3BA,aACAC,EAF2B,EAE3BA,aAEAC,GAJ2B,EAG3BC,WAH2B,EAI3BD,QACAE,EAL2B,EAK3BA,QAEAC,GAP2B,EAM3BC,QAN2B,EAO3BD,QAP2B,OAS3B,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAACxG,SAAU8F,GAEzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,wCACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,mBACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAK,OACLkG,YAAY,GACZC,mBAAiB,oBACjB5K,KAAK,gBACLkH,MAAOqC,EAAOoC,cACdrB,SAAUhB,EACViB,YAAab,EAAOiC,eAAiBlC,EAAQkC,gBAE/C,kBAAC7B,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOiC,iBAMd,kBAAC7B,EAAA,EAAKE,MAAN,CACEC,UAAU,sBACVjK,KAAK,sBACLkH,MAAOqC,EAAOwC,oBACdzB,SAAUhB,GAEV,kBAACQ,EAAA,EAAKI,MAAN,KAAaxN,EAAE,yBACf,kBAACoN,EAAA,EAAKO,QAAN,CAAcxF,GAAG,WAAWoH,KAAK,OAInC,kBAACzH,EAAA,EAAD,CAAQC,KAAK,SAASC,OAAK,GACxBhI,EAAE,aAQLyO,iBAAkBpD,EAClBxE,SAvDa,SAAC/B,IAXO,SAACA,GACxBA,EAAK4J,QAAU3D,IACfjG,EAAK6J,UAAY3D,IACjBlG,EAAK0K,IAAM3E,EAKX5F,EAAY,CAAE5F,IAAK,oBAAqByF,KAAMA,IAI9C2K,CAAiB3K,IAuDfgK,cAAe,CACbG,cAAe,GACfI,oBAAqB,O,0DCvGd,YAAC5N,GAId,IAaMU,EAAQjC,OAAOkC,OAbN,CACbqE,UAAW,aACX4B,KAAM,KACNqH,WAAY,EACZC,aAAc,EACdC,OAAQ,EACRzM,QAAS,aACT0M,MAAO,UAM6BpO,GAEhCqO,EAAQC,KAAKC,KAAK7N,EAAMuN,WAAavN,EAAMwN,cAEjD,GAAIG,EAAQ,EAAG,OAAO,qCAetB,IAyBMG,EAAW,WAEf,IADA,IAAIC,EAAQ,GADS,WAEZC,GAEM,IAAXA,GACAA,IAAWL,GACVK,GAAUhO,EAAMyN,OAAS,GAAKO,GAAUhO,EAAMyN,OAAS,EAExDM,EAAME,KACJ,kBAACC,GAAA,EAAWtN,KAAZ,CACEV,IAAK8N,EACLP,OAAQO,IAAWhO,EAAMyN,OACzBzM,QAAS,kBArCH,SAACgN,GAEf,OAAQA,GACN,IAAK,QACHA,EAAS,EACT,MACF,IAAK,OACHA,EAAShO,EAAMyN,OAAS,EAAIzN,EAAMyN,OAAS,EAAI,EAC/C,MACF,IAAK,OACHO,EACEhO,EAAMyN,OAASG,KAAKC,KAAK7N,EAAMuN,WAAavN,EAAMwN,cAC9CxN,EAAMyN,OAAS,EACfG,KAAKC,KAAK7N,EAAMuN,WAAavN,EAAMwN,cACzC,MACF,IAAK,OACHQ,EAASJ,KAAKC,KAAK7N,EAAMuN,WAAavN,EAAMwN,cAMhDxN,EAAMgB,QAAQgN,GAeShN,CAAQgN,KAEtBA,IAGe,IAAXA,GAAgBA,IAAWL,EAAQ,GAC5CI,EAAME,KAAK,kBAACC,GAAA,EAAWC,SAAZ,CAAqBjO,IAAK8N,EAAQlI,UAAQ,MAhBhDkI,EAAS,EAAGA,GAAUL,EAAOK,IAAW,EAAxCA,GAmBT,OAAOD,GA0CT,OAAO,oCApCQ,WAAO,IACZL,EAAU1N,EAAV0N,MAER,OACE,yBACEzM,MAAO,CACLmN,UAAU,GAAD,OAAKV,KAIhB,0BAAMzM,MAAO,CAAEY,QAAS,iBACtB,kBAACqM,GAAA,EAAD,CAAYhI,KAAMlG,EAAMkG,KAAMjF,MAAO,CAAEe,QAAS,EAAGqM,OAAQ,IACxDV,EAAQ,GACP,oCACE,kBAACO,GAAA,EAAWI,MAAZ,CAAkBtN,QAAS,kBAAMhB,EAAMgB,QAAQ,YAC/C,kBAACkN,GAAA,EAAWK,KAAZ,CAAiBvN,QAAS,kBAAMhB,EAAMgB,QAAQ,YAIjD8M,IAEAH,EAAQ,GACP,oCACE,kBAACO,GAAA,EAAWM,KAAZ,CAAiBxN,QAAS,kBAAMhB,EAAMgB,QAAQ,WAC9C,kBAACkN,GAAA,EAAWO,KAAZ,CAAiBzN,QAAS,kBAAMhB,EAAMgB,QAAQ,eAYlD0N,KC5GG,YAACpP,GAId,IAQMU,EAAQjC,OAAOkC,OARN,CACboE,QAAS,mBACTC,UAAW,gBAMyBhF,GAZf,EAuBnBU,EAAM6C,cALR8L,EAlBqB,EAkBrBA,aACAC,EAnBqB,EAmBrBA,kBACAC,EApBqB,EAoBrBA,uBACAC,EArBqB,EAqBrBA,oBACApG,EAtBqB,EAsBrBA,cAtBqB,EAiCnB1I,EAAM+C,gBAJRgM,EA7BqB,EA6BrBA,gBACAC,EA9BqB,EA8BrBA,OACAC,EA/BqB,EA+BrBA,WACAC,EAhCqB,EAgCrBA,cAOMrR,EAAMqF,YAAe,CAAClD,EAAMsE,YAA5BzG,EAoCJsR,EAAM,EAKV,OACE,oCACE,kBAACC,GAAA,EAAD,CAAW5O,QAAQ,SACC,OAAjBmO,GACCA,EAAa3R,KAAI,SAACqS,EAAaC,GAC7BH,IADiD,IAS/CI,EAyBEF,EAzBFE,eAEAC,EAuBEH,EAvBFG,YACAC,EAsBEJ,EAtBFI,QAGAC,EAmBEL,EAnBFK,iBACAC,EAkBEN,EAlBFM,gBAIAC,EAcEP,EAdFO,WAIAC,EAUER,EAVFQ,cACAC,EASET,EATFS,aACAC,EAQEV,EARFU,MACAC,EAOEX,EAPFW,MACAC,EAMEZ,EANFY,eAKArK,EACEyJ,EADFzJ,KAIIsK,EAAiBJ,IAAiBpH,EAElCyH,EACM,OAAVJ,GAA4B,MAAVA,GAAkC,qBAAVA,EACtCK,EAAWD,EAAkBJ,EAAMhG,MAAM,KAAO,GAEhDsG,EACa,qBAAVL,GAAmC,OAAVA,GAA4B,MAAVA,EAEpD,MAAa,iBAATpK,GAYgB,iBAATA,EAVP,kBAACwJ,GAAA,EAAUxO,KAAX,CAAgBV,IAAKoP,EAAiBgB,QAAM,GACzCZ,EADH,IACsBC,EACpB,0BAAM1O,MAAO,CAAEsP,MAAO,UACnBL,EAAiB,GAAK,IACtBlB,EAAOQ,IAEV,6BACA,+BAAQP,EAAWQ,KAeL,iBAAT7J,EAEP,kBAACwJ,GAAA,EAAUxO,KAAX,CAAgBV,IAAKoP,EAAiBgB,QAAM,GACzCV,EACD,0BAAM3O,MAAO,CAAEsP,MAAO,UACnBL,EAAiB,GAAK,IACtBlB,EAAOQ,IAEV,6BACCD,EAPH,SAO6BM,EAC3B,6BACCH,EATH,IASsBC,EACnBQ,GACC,oCACE,6BACCC,EAASpT,KAAI,SAACmJ,EAAMjG,GACnB,OACE,0BAAMA,IAAKA,GACR,IACD,kBAACsQ,EAAA,EAAD,CAAOC,MAAI,EAACjQ,QAAQ,aACjB2F,QAMV,IACFkK,GACC,oCACE,6BACCL,EAFH,IAEWnS,EAAE,UAFb,KAE0BqR,EAAce,GAFxC,KAKF,6BACA,+BAAQhB,EAAWQ,MAMvBhK,QAAQC,IAAI,yBAEL,0CAIN,IAARyJ,GACC,uBAAG9O,UAAU,0BAA0BxC,EAAE,oBAE3C,6BAEA,kBAAC,GAAD,iBACMyB,EADN,CAEEqO,MAAOC,KAAKC,KAAKe,EAAoBE,GACrCrB,OAAQoB,EACR7N,QAhKe,SAACgN,GAEpB,OAAQA,GACN,IAAK,QACHA,EAAS,EACT,MACF,IAAK,OACHA,EAASa,EAAyB,EAAIA,EAAyB,EAAI,EACnE,MACF,IAAK,OACHb,EACEa,EACAjB,KAAKC,KAAKe,EAAoBE,GAC1BD,EAAyB,EACzBjB,KAAKC,KAAKe,EAAoBE,GACpC,MACF,IAAK,OACHd,EAASJ,KAAKC,KAAKe,EAAoBE,GAM3CC,EAAgBf,S,yCCxFL,YAAC1O,GAId,IAkBMU,EAAQjC,OAAOkC,OAlBN,CACbqE,UAAW,cACXD,QAAS,eACTqM,QAAS,KACTC,YAAa,KACbrJ,aAAa,EACbsJ,cAAc,EACdC,aAAc,KACd/D,cAAe,KACfgE,aAAc,KACdC,uBAAwB,KACxBC,sBAAuB,KACvBC,cAAe,MAMqB3R,GAK9B4R,EAAwBlR,EAAM6C,cAA9BqO,oBACAC,EAA2BnR,EAAM4E,cAAjCuM,uBA5Be,EA6B4BnR,EAAM+C,gBAAjDD,EA7Be,EA6BfA,YAAaoM,EA7BE,EA6BFA,cAAeD,EA7Bb,EA6BaA,WA7Bb,EAmCWjM,mBAAShD,EAAMgQ,OAnC1B,mBAmChBoB,EAnCgB,KAmCLC,EAnCK,KAoCjBC,EAAenM,iBAAOoM,KAAEC,UAAS,SAACC,GAAD,OAAOC,EAAUD,KAAI,MAAOpM,QAK3DxH,EAAMqF,YAAe,CAAClD,EAAMsE,YAA5BzG,EAEF4N,EAAW,SAACjO,GAEhB6T,EAAa7T,EAAEmU,OAAOtJ,OACtBiJ,EAAa9T,EAAEmU,OAAOtJ,QAGlBuJ,EAAU,WAEd,IAAIjP,EAAO,GAGX,OAFAA,EAAKiN,WAAa5P,EAAM0Q,QACxB/N,EAAKkP,eAAiB7R,EAAM2Q,YACrB7N,EAAY,CAAE5F,IAAK,qBAAsByF,UAG5C+O,EAAY,SAACJ,GAEjB,IAAMQ,EAAKZ,EACXY,EAAG9R,EAAMpC,IAAIoS,MAAQsB,EACrBH,EAAuBhJ,KAAKK,UAAUsJ,IACtC,IAAInP,EAAO,GAKX,OAJAA,EAAKiN,WAAa5P,EAAM0Q,QACxB/N,EAAKkP,eAAiB7R,EAAM2Q,YAC5BhO,EAAKqN,MAAQsB,EAENxO,EAAY,CAAE5F,IAAK8C,EAAMqE,QAAS1B,UAyF3C,OAAO,oCAnFQ,WACb,IAAMoP,EAAa,qBAAiB/R,EAAME,KAC1C,OACE,kBAAC8R,GAAA,EAAD,CAAO9R,IAAKF,EAAME,IAAK0R,QAASA,EAAS3Q,MAAO,CAAEgR,SAAU,SAC1D,kBAACD,GAAA,EAAM5R,OAAP,CAAckH,YAAatH,EAAMsH,aAC/B,4BAAQjH,UAAU,WACfL,EAAMkS,UADT,IACqBlS,EAAMmS,SAAU,IACnC,+BACE,kBAACC,GAAA,EAAD,CACE/L,QAAQ,EACRgM,SAAS,QACTpR,MAAO,CAAEC,MAAO,mBAItB,+BACE,0BAAMtD,GAAImU,GAAgBX,GAD5B,IAC+CvT,EAAE,YAGnD,kBAACmU,GAAA,EAAM5Q,KAAP,KACE,kBAAC6J,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKE,MAAN,CAAYC,UAAU,aACpB,6BACGpL,EAAM+P,MAAM/S,KAAI,SAACmJ,EAAMjG,GACtB,OACE,0BAAMA,IAAKA,GACT,kBAACsQ,EAAA,EAAD,CAAOC,MAAI,EAACjQ,QAAQ,aACjB2F,GACM,UAOlBnG,EAAM4Q,cACL,kBAAC3F,EAAA,EAAKE,MAAN,CAAYC,UAAU,kBACpB,kBAACH,EAAA,EAAKO,QAAN,CACE5F,KAAK,QACLpF,QAAQ,QAERsH,aAAcsJ,EAEdrE,IAAK,EACLC,IAAK,IACLsF,KAAM,EAEN7G,SAAUA,MAKlB,8BAC0B,OAAvBzL,EAAM6Q,cAAyB3B,EAAclP,EAAM6Q,cAAe,IAC1C,OAAxB7Q,EAAM8M,eAA0B9M,EAAM8M,cAAe,IAC7B,OAAxB9M,EAAM8M,eAAiD,OAAvB9M,EAAM8Q,cACrC,8CAEsB,OAAvB9Q,EAAM8Q,cAAyB9Q,EAAM8Q,aAAc,KAE7B,OAAxB9Q,EAAMiR,eACL,oCACE,6BACChC,EAAWjP,EAAMiR,cAAe,CAC/BsB,MAAO,OACPC,IAAK,UACLC,KAAM,aAGT,KACgC,OAAjCzS,EAAM+Q,wBAC0B,OAAhC/Q,EAAMgR,wBAAmC,6BACT,OAAjChR,EAAM+Q,wBACL/Q,EAAM+Q,uBAAwB,IACC,OAAhC/Q,EAAMgR,uBAAkChR,EAAMgR,sBAAuB,MASpEtC,KCjJG,YAACpP,GAId,IAQMU,EAAQjC,OAAOkC,OARN,CACboE,QAAS,aACTC,UAAW,UAMyBhF,GAZf,EAwBnBU,EAAM6C,cANR6P,EAlBqB,EAkBrBA,OACAC,EAnBqB,EAmBrBA,YACAC,EApBqB,EAoBrBA,iBACAC,EArBqB,EAqBrBA,cAEAlK,EAvBqB,EAuBrBA,SAOAmK,EAIE9S,EAAM+C,gBAJR+P,UAUMjV,EAAMqF,YAAe,CAAClD,EAAMsE,YAA5BzG,EAmCJsR,EAAM,EAKV,OACE,oCACc,OAAXuD,GACCA,EAAO1V,KAAI,SAACgT,EAAO+C,GACjB5D,IAD+B,IAS7BI,EAmBES,EAnBFT,eACAyD,EAkBEhD,EAlBFgD,gBACAC,EAiBEjD,EAjBFiD,eAIArD,EAaEI,EAbFJ,WAIAC,EASEG,EATFH,cACAgC,EAQE7B,EARF6B,eACAqB,EAOElD,EAPFkD,eAEAjD,EAKED,EALFC,eACAkD,EAIEnD,EAJFmD,aACAC,EAGEpD,EAHFoD,aAKIhD,EAA4B,OAAjB+C,EAAwBA,EAAapJ,MAAM,KAAO,GAOnE,OACE,kBAACsJ,GAAD,iBACM/T,EADN,CAEEY,IAAK6S,EACLnV,GAAImV,EACJpC,YAAakB,EACbnB,QAASd,EACTsC,UAAWvJ,EAASuJ,UACpBC,SAAUxJ,EAASwJ,SACnBnC,MAAOoD,EACPrD,MAAOK,EACP9I,aAAa,EACbsJ,cAAc,EACdC,aAAcZ,EACdc,uBAAwBiC,EACxBhC,sBAAuBiC,EACvBnG,cAAeyC,EACfuB,aAAcjB,EACdoB,cAAeiC,QAKd,IAAR/D,GAAa,uBAAG9O,UAAU,0BAA0BxC,EAAE,cAEvD,kBAAC,GAAD,iBACMyB,EADN,CAEEqO,MAAOC,KAAKC,KAAK8E,EAAcE,GAC/BpF,OAAQmF,EACR5R,QAnGe,SAACgN,GAEpB,OADAvI,QAAQC,IAAI,iBAAkBsI,GACtBA,GACN,IAAK,QACHA,EAAS,EACT,MACF,IAAK,OACHA,EAAS4E,EAAmB,EAAIA,EAAmB,EAAI,EACvD,MACF,IAAK,OACH5E,EACE4E,EAAmBhF,KAAKC,KAAK8E,EAAcE,GACvCD,EAAmB,EACnBhF,KAAKC,KAAK8E,EAAcE,GAC9B,MACF,IAAK,OACH7E,EAASJ,KAAKC,KAAK8E,EAAcE,GAMrCC,EAAU9E,SCtFC,YAAC1O,GAOd,IAKMU,EAAQjC,OAAOkC,OALN,GAKuBX,GAZf,EAsBnBU,EAAM6C,cAJR8F,EAlBqB,EAkBrBA,SACAD,EAnBqB,EAmBrBA,cACA4K,EApBqB,EAoBrBA,cApBqB,EA2BnBtT,EAAM4E,cAHR2O,EAxBqB,EAwBrBA,eACAC,EAzBqB,EAyBrBA,cACAC,EA1BqB,EA0BrBA,iBA1BqB,EAiCnBzT,EAAM+C,gBAJRiM,EA7BqB,EA6BrBA,OACA0E,EA9BqB,EA8BrBA,eACA3E,EA/BqB,EA+BrBA,gBACA+D,EAhCqB,EAgCrBA,UAMMjV,EAAMqF,YAAe,WAArBrF,EAMF8V,EAAiBhL,EAejBiL,EAAwB,SAAChO,GAG7B2N,EAAe3N,GACf4N,EAAc,cAIVK,EACe,OAAnBF,EACI3E,EACE2E,EAAeG,SACbH,EAAeI,SACfJ,EAAeK,UAEnB,KACFF,EACiB,OAAnBH,EAA0B3E,EAAO2E,EAAeG,UAAY,KAC1DC,EACiB,OAAnBJ,EAA0B3E,EAAO2E,EAAeI,UAAY,KAC1DC,EACiB,OAAnBL,EAA0B3E,EAAO2E,EAAeK,UAAY,KAWxC,OAAlBtL,GAAwB8K,EAAc,aAoB1C,OACE,oCACE,kBAACS,EAAA,EAAD,CAAWxT,iBAAkB6S,GAC3B,kBAAC,IAAD,KACE,kBAACW,EAAA,EAAUC,OAAX,CACElO,GAAImO,IAAK/T,OACTgU,SAAS,UACTnT,MAAO,CACLoT,OAAQ,WAGVrT,QA7BY,WAEpByS,EAAiB,WACjBC,MA4BS7V,EAAE,YAGL,kBAACoW,EAAA,EAAUK,SAAX,CAAoBF,SAAS,WAC3B,kBAAC,IAAKhT,KAAN,KACE,kBAAC6J,EAAA,EAAD,CAAMC,YAAU,GACd,kBAACD,EAAA,EAAKE,MAAN,KACE,kBAACF,EAAA,EAAKI,MAAN,KAAaxN,EAAE,cACf,kBAACoN,EAAA,EAAKK,KAAN,KACE,yBAAKrK,MAAO,CAAEoR,SAAU,QAAUwB,KAGtC,kBAAC5I,EAAA,EAAKE,MAAN,KACE,wBAAI9K,UAAU,cACZ,wBAAIA,UAAU,qEACZ,yBAAKY,MAAO,IAAKpD,EAAE,oBACnB,0BACEwC,UAAU,OACVW,QAAS,kBAAM4S,EAAsB,cAErC,kBAACpD,EAAA,EAAD,CAAOhQ,QAAQ,SAASsT,GAJ1B,OAME,kBAAC,KAAD,CAAqB7S,MAAO,CAAEC,MAAO,mBAGzC,wBAAIb,UAAU,qEACZ,yBAAKY,MAAO,IAAKpD,EAAE,mBAEnB,0BACEwC,UAAU,OACVW,QAAS,kBAAM4S,EAAsB,cAErC,kBAACpD,EAAA,EAAD,CAAOhQ,QAAQ,SAASuT,GAJ1B,OAME,kBAAC,KAAD,CAAqB9S,MAAO,CAAEC,MAAO,mBAGzC,wBAAIb,UAAU,qEACZ,yBAAKY,MAAO,IAAKpD,EAAE,oBACnB,0BACEwC,UAAU,OACVW,QAAS,kBAAM4S,EAAsB,cAErC,kBAACpD,EAAA,EAAD,CAAOhQ,QAAQ,SAASwT,GAJ1B,OAME,kBAAC,KAAD,CAAqB/S,MAAO,CAAEC,MAAO,yBAUrD,kBAAC,IAAD,KACE,kBAAC+S,EAAA,EAAUC,OAAX,CACElO,GAAImO,IAAK/T,OACTgU,SAAS,eACTnT,MAAO,CAAEoT,OAAQ,WACjBrT,QArFiB,WAEzByS,EAAiB,gBACjB1E,EAAgB,KAoFPlR,EAAE,iBAGL,kBAACoW,EAAA,EAAUK,SAAX,CAAoBF,SAAS,gBAC3B,kBAAC,IAAKhT,KAAN,KACE,kBAACmT,GAAiBjV,MAKxB,kBAAC,IAAD,KACE,kBAAC2U,EAAA,EAAUC,OAAX,CACElO,GAAImO,IAAK/T,OACTgU,SAAS,SACTnT,MAAO,CAAEoT,OAAQ,WACjBrT,QAhGW,WAEnByS,EAAiB,UACjBX,EAAU,KA+FDjV,EAAE,WAGL,kBAACoW,EAAA,EAAUK,SAAX,CAAoBF,SAAS,UAC3B,kBAAC,IAAKhT,KAAN,KACE,kBAACoT,GAAWlV,SCrNX,eAMR,IALLA,EAKI,EALJA,KACAE,EAII,EAJJA,MACAC,EAGI,EAHJA,WACAiB,EAEI,EAFJA,2BACAX,EACI,EADJA,kBAaMC,EAAQjC,OAAOkC,OARN,CACboE,QAAS,eACTC,UAAW,YAMyBhF,GAZlC,EA0BAU,EAAM6C,cALR8F,EArBE,EAqBFA,SACAD,EAtBE,EAsBFA,cACA+L,EAvBE,EAuBFA,YACAC,EAxBE,EAwBFA,SACAC,EAzBE,EAyBFA,aAzBE,EAkCA3U,EAAM+C,gBALRiM,EA7BE,EA6BFA,OACA4F,EA9BE,EA8BFA,kBACA9R,EA/BE,EA+BFA,YACA8F,EAhCE,EAgCFA,WACAC,EAjCE,EAiCFA,aAMMhL,EAAMqF,YAAe,CAAClD,EAAMsE,YAA5BzG,EAOFqL,EAASC,IAAW,CACxB0L,YAAa1L,MAAaE,SAASxL,EAAE,6BACrCiX,UAAW3L,MAAaE,SAASxL,EAAE,2BACnCkX,OAAQ5L,MAELE,SAASxL,EAAE,uBACX2L,QAAQ,IAAIC,OAAO5L,EAAE,iBAAkBA,EAAE,0BAG1CiW,EAAW,GACXC,EAAW,GACXC,EAAW,GACE,OAAbrL,IACFmL,EAAW,KAAO9E,EAAOrG,EAASmL,UAAY,IAC9CC,EAAW,KAAO/E,EAAOrG,EAASoL,UAAY,IAC9CC,EAAW,KAAOhF,EAAOrG,EAASqL,UAAY,KA4IhD,OACE,kBAAC,IAAD,CACEzJ,UApHuB,SAAC,GAAD,IACzBC,EADyB,EACzBA,aACAC,EAFyB,EAEzBA,aAEAC,GAJyB,EAGzBC,WAHyB,EAIzBD,QACAE,EALyB,EAKzBA,QAGAC,GARyB,EAMzBC,QANyB,EAOzBC,aAPyB,EAQzBF,QARyB,OAUzB,kBAAC,EAAD,CACErL,MAAOA,EACPC,WAAYA,EACZiB,2BAA4BA,EAC5BX,kBAAmBA,GAEnB,kBAACkL,EAAA,EAAD,CAAMC,YAAU,EAACxG,SAAU8F,GACzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,yBACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,iBACf,kBAACoN,EAAA,EAAKO,QAAN,CACExF,GAAG,SACHgP,QAAM,EACN7T,KAAK,cACLsK,SAAUhB,EACViB,YAAab,EAAOgK,aAAejK,EAAQiK,aAE3C,4BAAQxM,MAAM,IAAIxK,EAAE,cACpB,4BACEwK,MAAM,WACNhC,OAAwB,OAAhBoO,GAAwC,aAAhBA,GAE/B5W,EAAE,mBACFiW,GAEH,4BACEzL,MAAM,WACNhC,OAAwB,OAAhBoO,GAAwC,aAAhBA,GAE/B5W,EAAE,kBACFkW,GAEH,4BACE1L,MAAM,WACNhC,OAAwB,OAAhBoO,GAAwC,aAAhBA,GAE/B5W,EAAE,mBACFmW,IAGL,kBAAC/I,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOgK,cAGZ,kBAAC5J,EAAA,EAAKE,MAAN,CAAYC,UAAU,uBACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,eACf,kBAACoN,EAAA,EAAKO,QAAN,CACExF,GAAG,SACHgP,QAAM,EACN7T,KAAK,YACLsK,SAAUhB,EACViB,YAAab,EAAOiK,WAAalK,EAAQkK,WAEzC,4BAAQzM,MAAM,IAAIxK,EAAE,cACpB,4BAAQwK,MAAM,WAAWhC,OAAwB,aAAhBoO,GAC9B5W,EAAE,mBACFiW,GAEH,4BAAQzL,MAAM,WAAWhC,OAAwB,aAAhBoO,GAC9B5W,EAAE,kBACFkW,GAEH,4BAAQ1L,MAAM,WAAWhC,OAAwB,aAAhBoO,GAC9B5W,EAAE,mBACFmW,IAGL,kBAAC/I,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOiK,YAGZ,kBAAC7J,EAAA,EAAKE,MAAN,CAAYC,UAAU,0BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,WACf,kBAAC+N,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWN,KAAZ,CAAiB1N,GAAG,qBACjB+W,IAGL,kBAAC1J,EAAA,EAAKO,QAAN,CAEEM,YAAakD,EAAO,EAAG,IACvBjD,mBAAiB,oBACjB5K,KAAK,SACLkH,MAAOqC,EAAOqK,OACdtJ,SAAUhB,EAEViB,YAAab,EAAOkK,QAAUnK,EAAQmK,SAExC,kBAAC9J,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOkK,UAKd,kBAAC1I,EAAD,iBACM/M,EADN,CAEE8E,QAASvG,EAAE,UACXwG,QAAQ,eACRC,UAAWtE,EAAMsE,gBASrBgI,iBAAkBpD,EAClBxE,SA1Ha,SAAC/B,IAfK,SAACA,GAEtBA,EAAK4J,QAAU3D,IACfjG,EAAK6J,UAAY3D,IACjBlG,EAAK0K,IAAM3E,EACX/F,EAAKoS,OAASH,EAAkBjS,EAAKoS,OAAQL,GAC7C/R,EAAKoS,OAAS,IAAIE,KAAKC,aAAa,QAAS,CAC3CC,SAAU,WACVC,sBAAuB,IACtBpG,OAAOrM,EAAKoS,QAGfjS,EAAY,CAAE5F,IAAK8C,EAAMqE,QAAS1B,KAAMA,IAIxC0S,CAAe1S,IA0HbgK,cAAe,CACbkI,YAAa,GACbC,UAAW,GACXC,OAAQ,OC7MD,eAMR,IALLzV,EAKI,EALJA,KACAE,EAII,EAJJA,MACAC,EAGI,EAHJA,WACAiB,EAEI,EAFJA,2BACAX,EACI,EADJA,kBAUMC,EAAQjC,OAAOkC,OALN,CAAEoE,QAAS,eAAgBC,UAAW,YAKfhF,GATlC,EAqBAU,EAAM6C,cALR8F,EAhBE,EAgBFA,SACAD,EAjBE,EAiBFA,cACAgM,EAlBE,EAkBFA,SACAD,EAnBE,EAmBFA,YACAE,EApBE,EAoBFA,aApBE,EA6BA3U,EAAM+C,gBALRiM,EAxBE,EAwBFA,OACA4F,EAzBE,EAyBFA,kBACA9R,EA1BE,EA0BFA,YACA8F,EA3BE,EA2BFA,WACAC,EA5BE,EA4BFA,aAOMhL,EAAMqF,YAAe,CAAClD,EAAMsE,YAA5BzG,EAUFqL,EAASC,IAAW,CACxB0L,YAAa1L,MAAaE,SAASxL,EAAE,6BACrCyX,aAAcnM,MAEXE,SAASxL,EAAE,uCACX2L,QACC,IAAIC,OAAO5L,EAAE,sBACbA,EAAE,6BAENkX,OAAQ5L,MAELE,SAASxL,EAAE,uBACX2L,QAAQ,IAAIC,OAAO5L,EAAE,iBAAkBA,EAAE,0BAG1CiW,EAAW,GACXC,EAAW,GACXC,EAAW,GACE,OAAbrL,IACFmL,EAAW,KAAO9E,EAAOrG,EAASmL,UAAY,IAC9CC,EAAW,KAAO/E,EAAOrG,EAASoL,UAAY,IAC9CC,EAAW,KAAOhF,EAAOrG,EAASqL,UAAY,KAwJhD,OACE,kBAAC,IAAD,CACEzJ,UA9HyB,SAAC,GAAD,IAC3BC,EAD2B,EAC3BA,aACAC,EAF2B,EAE3BA,aAEAC,GAJ2B,EAG3BC,WAH2B,EAI3BD,QACAE,EAL2B,EAK3BA,QAEAC,GAP2B,EAM3BC,QAN2B,EAO3BD,QAP2B,OAS3B,kBAAC,EAAD,CACErL,MAAOA,EACPC,WAAYA,EACZiB,2BAA4BA,EAC5BX,kBAAmBA,GAEnB,kBAACkL,EAAA,EAAD,CAAMC,YAAU,EAACxG,SAAU8F,GAEzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,yBACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,iBACf,kBAACoN,EAAA,EAAKO,QAAN,CACExF,GAAG,SACHgP,QAAM,EACN7T,KAAK,cACLsK,SAAUhB,EACViB,YAAab,EAAOgK,aAAejK,EAAQiK,aAE3C,4BAAQxM,MAAM,IAAIxK,EAAE,cACpB,4BACEwK,MAAM,WACNhC,OAAwB,OAAhBoO,GAAwC,aAAhBA,GAE/B5W,EAAE,mBACFiW,GAEH,4BACEzL,MAAM,WACNhC,OAAwB,OAAhBoO,GAAwC,aAAhBA,GAE/B5W,EAAE,kBACFkW,GAEH,4BACE1L,MAAM,WACNhC,OAAwB,OAAhBoO,GAAwC,aAAhBA,GAE/B5W,EAAE,mBACFmW,IAGL,kBAAC/I,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOgK,cAKZ,kBAAC5J,EAAA,EAAKE,MAAN,CAAYC,UAAU,gCACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,mBACf,kBAAC+N,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWN,KAAZ,CAAiB1N,GAAG,qBAApB,OAEF,kBAACqN,EAAA,EAAKO,QAAN,CACE5F,KAAK,OACLkG,YAAY,eACZC,mBAAiB,oBACjB5K,KAAK,eACLkH,MAAOqC,EAAO4K,aACd7J,SAAUhB,EACViB,YAAab,EAAOyK,cAAgB1K,EAAQ0K,eAE9C,kBAACrK,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOyK,gBAMd,kBAACrK,EAAA,EAAKE,MAAN,CACEC,UAAU,cACVjK,KAAK,cACLkH,MAAOqC,EAAO6K,YACd9J,SAAUhB,GAEV,kBAACQ,EAAA,EAAKI,MAAN,KAAaxN,EAAE,gBACf,kBAACoN,EAAA,EAAKO,QAAN,CAAcxF,GAAG,WAAWoH,KAAK,OAInC,kBAACnC,EAAA,EAAKE,MAAN,CAAYC,UAAU,0BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,WACf,kBAAC+N,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWN,KAAZ,CAAiB1N,GAAG,qBACjB+W,IAGL,kBAAC1J,EAAA,EAAKO,QAAN,CAEEM,YAAakD,EAAO,EAAG,IACvBjD,mBAAiB,oBACjB5K,KAAK,SACLkH,MAAOqC,EAAOqK,OACdtJ,SAAUhB,EAEViB,YAAab,EAAOkK,QAAUnK,EAAQmK,SAExC,kBAAC9J,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOkK,UAOd,kBAAC1I,EAAD,iBACM/M,EADN,CAEE8E,QAASvG,EAAE,UACXwG,QAASrE,EAAMqE,QACfC,UAAWtE,EAAMsE,gBASrBgI,iBAAkBpD,EAClBxE,SApIa,SAAC/B,IAjBO,SAACA,GAExBA,EAAK4J,QAAU3D,IACfjG,EAAK6J,UAAY3D,IACjBlG,EAAK0K,IAAM3E,EACX/F,EAAKoS,OAASH,EAAkBjS,EAAKoS,OAAQL,GAC7C/R,EAAKoS,OAAS,IAAIE,KAAKC,aAAa,QAAS,CAC3CC,SAAU,WACVC,sBAAuB,IACtBpG,OAAOrM,EAAKoS,QAEfjS,EAAY,CAAE5F,IAAK8C,EAAMqE,QAAS1B,KAAMA,IAOxC6S,CAAiB7S,IAoIfgK,cAAe,CACbkI,YAAa,GACbS,aAAc,GACdP,OAAQ,GACRQ,YAAa,OCnPN,eAMR,IALLjW,EAKI,EALJA,KACAE,EAII,EAJJA,MACAC,EAGI,EAHJA,WACAiB,EAEI,EAFJA,2BACAX,EACI,EADJA,kBAUMC,EAAQjC,OAAOkC,OALN,CAAEoE,QAAS,eAAgBC,UAAW,YAKfhF,GATlC,EAuBAU,EAAM6C,cALR8F,EAlBE,EAkBFA,SACAD,EAnBE,EAmBFA,cACAgM,EApBE,EAoBFA,SACAD,EArBE,EAqBFA,YACAE,EAtBE,EAsBFA,aAtBE,EA+BA3U,EAAM+C,gBALRiM,EA1BE,EA0BFA,OACA4F,EA3BE,EA2BFA,kBACA9R,EA5BE,EA4BFA,YACA8F,EA7BE,EA6BFA,WACAC,EA9BE,EA8BFA,aAMMhL,EAAMqF,YAAe,CAAClD,EAAMsE,YAA5BzG,EAOFqL,EAASC,IAAW,CACxB0L,YAAa1L,MAAaE,SAASxL,EAAE,6BAIrC4X,UAAWtM,MAAaE,SAASxL,EAAE,2BACnCkX,OAAQ5L,MAELE,SAASxL,EAAE,uBACX2L,QAAQ,IAAIC,OAAO5L,EAAE,iBAAkBA,EAAE,0BAG1CiW,EAAW,GACXC,EAAW,GACXC,EAAW,GACE,OAAbrL,IACFmL,EAAW,KAAO9E,EAAOrG,EAASmL,UAAY,IAC9CC,EAAW,KAAO/E,EAAOrG,EAASoL,UAAY,IAC9CC,EAAW,KAAOhF,EAAOrG,EAASqL,UAAY,KAuKhD,OACE,kBAAC,IAAD,CACEzJ,UA7I2B,SAAC,GAAD,IAC7BC,EAD6B,EAC7BA,aACAC,EAF6B,EAE7BA,aAEAC,GAJ6B,EAG7BC,WAH6B,EAI7BD,QACAE,EAL6B,EAK7BA,QAEAC,GAP6B,EAM7BC,QAN6B,EAO7BD,QAP6B,OAS7B,kBAAC,EAAD,CACErL,MAAOA,EACPC,WAAYA,EACZiB,2BAA4BA,EAC5BX,kBAAmBA,GAGnB,kBAACkL,EAAA,EAAD,CAAMC,YAAU,EAACxG,SAAU8F,GACzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,yBACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,iBACf,kBAACoN,EAAA,EAAKO,QAAN,CACExF,GAAG,SACHgP,QAAM,EACN7T,KAAK,cACLsK,SAAUhB,EACViB,YAAab,EAAOgK,aAAejK,EAAQiK,aAE3C,4BAAQxM,MAAM,IAAIxK,EAAE,cACpB,4BACEwK,MAAM,WACNhC,OAAwB,OAAhBoO,GAAwC,aAAhBA,GAE/B5W,EAAE,mBACFiW,GAEH,4BACEzL,MAAM,WACNhC,OAAwB,OAAhBoO,GAAwC,aAAhBA,GAE/B5W,EAAE,kBACFkW,GAEH,4BACE1L,MAAM,WACNhC,OAAwB,OAAhBoO,GAAwC,aAAhBA,GAE/B5W,EAAE,mBACFmW,IAGL,kBAAC/I,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOgK,cAyBZ,kBAAC5J,EAAA,EAAKE,MAAN,CAAYC,UAAU,wCACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,kBACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAK,OACLkG,YAAY,GACZC,mBAAiB,oBACjB5K,KAAK,YACLkH,MAAOqC,EAAO+K,UACdhK,SAAUhB,EACViB,YAAab,EAAO4K,WAAa7K,EAAQ6K,YAE3C,kBAACxK,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAO4K,aAMd,kBAACxK,EAAA,EAAKE,MAAN,CACEC,UAAU,cACVjK,KAAK,cACLkH,MAAOqC,EAAO6K,YACd9J,SAAUhB,GAEV,kBAACQ,EAAA,EAAKI,MAAN,KAAaxN,EAAE,gBACf,kBAACoN,EAAA,EAAKO,QAAN,CAAcxF,GAAG,WAAWoH,KAAK,OAInC,kBAACnC,EAAA,EAAKE,MAAN,CAAYC,UAAU,0BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,WACf,kBAAC+N,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWN,KAAZ,CAAiB1N,GAAG,qBACjB+W,IAGL,kBAAC1J,EAAA,EAAKO,QAAN,CACE5F,KAAK,SACLkG,YAAakD,EAAO,EAAG,IACvBjD,mBAAiB,oBACjB5K,KAAK,SACLkH,MAAOqC,EAAOqK,OACdtJ,SAAUhB,EACViB,YAAab,EAAOkK,QAAUnK,EAAQmK,SAExC,kBAAC9J,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOkK,UAMd,kBAAC1I,EAAD,iBACM/M,EADN,CAEE8E,QAASvG,EAAE,UACXwG,QAASrE,EAAMqE,QACfC,UAAWtE,EAAMsE,gBASrBgI,iBAAkBpD,EAClBxE,SAnJa,SAAC/B,IAjBS,SAACA,GAC1BA,EAAK4J,QAAU3D,IACfjG,EAAK6J,UAAY3D,IACjBlG,EAAK0K,IAAM3E,EACX/F,EAAK+S,SAAWf,EAChBhS,EAAKoS,OAASH,EAAkBjS,EAAKoS,OAAQL,GAC7C/R,EAAKoS,OAAS,IAAIE,KAAKC,aAAa,QAAS,CAC3CC,SAAU,WACVC,sBAAuB,IACtBpG,OAAOrM,EAAKoS,QAIfjS,EAAY,CAAE5F,IAAK8C,EAAMqE,QAAS1B,KAAMA,IAKxCgT,CAAmBhT,IAmJjBgK,cAAe,CACbkI,YAAa,GACbY,UAAW,GACXV,OAAQ,GACRQ,YAAa,O,wCCpPN,YAACjW,GAId,IAKMU,EAAQjC,OAAOkC,OALN,CAAE2V,WAAY,MAKStW,GAIhCuW,EAAU7V,EAAM2C,KACdiT,EAAe5V,EAAf4V,WAde,EAqBcC,EAAQ9S,gBAArC6F,EArBe,EAqBfA,WAAYC,EArBG,EAqBHA,aACZiN,EAA0BD,EAAQjJ,oBAAlCkJ,sBAIAjY,EAAMqF,YAAe,CAAC,wBAAtBrF,EAEFqL,EAASC,IAAW,CACxB2H,aAAc3H,MAEXE,SAASxL,EAAE,sCACXkP,IAAI,EAAGlP,EAAE,4BACTmP,IAAI,GAAInP,EAAE,2BACVoP,OACH8I,mBAAoB5M,MAAagE,aAoEnC,OACE,kBAAC,IAAD,CACE5C,UAjDwB,SAAC,GAAD,IAC1BC,EAD0B,EAC1BA,aACAC,EAF0B,EAE1BA,aAEAC,GAJ0B,EAG1BC,WAH0B,EAI1BD,QACAE,EAL0B,EAK1BA,QAEAC,GAP0B,EAM1BC,QAN0B,EAO1BD,QAP0B,OAS1B,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAACxG,SAAU8F,GAEzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,6BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,kBACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAK,OACLkG,YAAY,GACZC,mBAAiB,oBACjB5K,KAAK,eACLkH,MAAOqC,EAAOoG,aACdrF,SAAUhB,EACViB,YAAab,EAAOiG,cAAgBlG,EAAQkG,eAE9C,kBAAC7F,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOiG,gBAMd,kBAAC7F,EAAA,EAAKE,MAAN,CACEC,UAAU,qBACVjK,KAAK,qBACLkH,MAAOqC,EAAOqL,mBACdtK,SAAUhB,GAEV,kBAACQ,EAAA,EAAKI,MAAN,KAAaxN,EAAE,wBACf,kBAACoN,EAAA,EAAKO,QAAN,CAAcxF,GAAG,WAAWoH,KAAK,OAInC,kBAACzH,EAAA,EAAD,CAAQC,KAAK,SAASC,OAAK,GACxBhI,EAAE,aAQLyO,iBAAkBpD,EAClBxE,SAvDa,SAAC/B,IAVM,SAACA,GACvBA,EAAK4J,QAAU3D,IACfjG,EAAK6J,UAAY3D,IACjBlG,EAAKiT,WAAaA,EAIlBE,EAAsB,CAAE5Y,IAAK,mBAAoByF,KAAMA,IAIvDqT,CAAgBrT,IAuDdgK,cAAe,CACbmE,aAAc,GACdiF,mBAAoB,OC7Gb,YAACzW,GAId,IAQMU,EAAQjC,OAAOkC,OARN,CACboE,QAAS,uBACTC,UAAW,2BAMyBhF,GAEhCuW,EAAU7V,EACRyV,EAAczV,EAAdyV,UAKA/M,EAAkBmN,EAAQhT,cAA1B6F,cApBe,EA4BnBmN,EAAQ9S,gBAHV6F,EAzBqB,EAyBrBA,WACAC,EA1BqB,EA0BrBA,aACA/F,EA3BqB,EA2BrBA,YAMMjF,EAAMqF,YAAe,CAAClD,EAAMsE,YAA5BzG,EAIFqL,EAASC,IAAW,CACxBI,WAAYJ,MAETE,SAASxL,EAAE,4BACX2L,QACC,IAAIC,OAAO5L,EAAE,sBACbA,EAAE,6BAENoY,iBAAkB9M,MAAagE,WAC/BuF,OAAQvJ,MAEL+M,UAAUrY,EAAE,4BACZwL,SAASxL,EAAE,uBACXkP,IAAI,EAAGlP,EAAE,mBACTmP,IAAI,IAAMnP,EAAE,sBA8GjB,OACE,kBAAC,IAAD,CACE0M,UA7F4B,SAAC,GAAD,IAC9BC,EAD8B,EAC9BA,aACAC,EAF8B,EAE9BA,aAEAC,GAJ8B,EAG9BC,WAH8B,EAI9BD,QACAE,EAL8B,EAK9BA,QAEAC,GAP8B,EAM9BC,QAN8B,EAO9BD,QAP8B,OAS9B,kBAACI,EAAA,EAAD,CAAMrN,GAAG,8BAA8BsN,YAAU,EAACxG,SAAU8F,GAC1D,kBAACwH,GAAA,EAAD,CAAO/Q,MAAO,CAAEgR,SAAU,SAMxB,kBAACD,GAAA,EAAM5Q,KAAP,KACE,kBAAC6J,EAAA,EAAKE,MAAN,CAAYC,UAAU,yCACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,4BACf,kBAAC+N,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWN,KAAZ,CAAiB1N,GAAG,qBAApB,OAEF,kBAACqN,EAAA,EAAKO,QAAN,CACE5F,KAAK,OACLkG,YAAajO,EAAE,gBACfkO,mBAAiB,oBACjB5K,KAAK,aACLkH,MAAOqC,EAAOnB,WACdkC,SAAUhB,EACViB,YAAab,EAAOtB,YAAcqB,EAAQrB,aAE5C,kBAAC0B,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOtB,cAKd,kBAAC0B,EAAA,EAAKE,MAAN,CAAYC,UAAU,oCACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,sBACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAK,OACLkG,YAAY,GACZC,mBAAiB,oBACjB5K,KAAK,mBACLkH,MAAOqC,EAAOuL,iBACdxK,SAAUhB,EACViB,YACIb,EAAOoL,kBAAoBrL,EAAQqL,mBAGzC,kBAAChL,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOoL,oBAMd,kBAAChL,EAAA,EAAKE,MAAN,CAAYC,UAAU,oCACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,WACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAK,SACLmH,IAAK,EACLC,IAAK,IACLsF,KAAM,EACNxG,YAAY,GACZC,mBAAiB,oBACjB5K,KAAK,SACLkH,MAAOqC,EAAOgI,OACdjH,SAAUhB,EACViB,YAAab,EAAO6H,QAAU9H,EAAQ8H,SAExC,kBAACzH,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAO6H,UAKd,kBAACrG,EAAD,iBACM/M,EADN,CAEE8E,QAASvG,EAAE,UACXwG,QAASrE,EAAMqE,QACfC,UAAWtE,EAAMsE,iBAUvBgI,iBAAkBpD,EAClBxE,SA3Ga,SAAC/B,GAChBA,EAAK4J,QAAU3D,IACfjG,EAAK6J,UAAY3D,IACjBlG,EAAK0K,IAAM3E,EACX/F,EAAK8S,UAAYA,EAKjB3S,EAAY,CAAE5F,IAAK8C,EAAMqE,QAAS1B,KAAMA,KAmGtCgK,cAAe,CACbpD,WAAY,GACZmJ,OAAQ,EACRuD,iBAAkB,OCpJX,YAAC3W,GAId,IAKMU,EAAQjC,OAAOkC,OALN,CAAEqE,UAAW,cAKUhF,GATf,EAkCnBU,EAAM6C,cAfRsT,EAnBqB,EAmBrBA,eACAC,EApBqB,EAoBrBA,gBACAC,EArBqB,EAqBrBA,kBACAC,EAtBqB,EAsBrBA,qBACAC,EAvBqB,EAuBrBA,qBACAC,EAxBqB,EAwBrBA,eACAC,EAzBqB,EAyBrBA,iBACAC,EA1BqB,EA0BrBA,iBACAC,EA3BqB,EA2BrBA,sBACAC,EA5BqB,EA4BrBA,wBACAC,EA7BqB,EA6BrBA,2BACAC,EA9BqB,EA8BrBA,qBACA5F,EA/BqB,EA+BrBA,oBACAwD,EAhCqB,EAgCrBA,SACAhM,EAjCqB,EAiCrBA,cAEM8K,EAAkBxT,EAAM4E,cAAxB4O,cAnCe,EAwCnBxT,EAAM+C,gBAHRgU,EArCqB,EAqCrBA,cACAC,EAtCqB,EAsCrBA,oBACAC,EAvCqB,EAuCrBA,uBAIMpZ,EAAMqF,YAAe,CAAClD,EAAMsE,YAA5BzG,EAERuH,qBAAU,cAIP,IAaH,IAwFI8R,EAAY,GACZC,EAAW,GACXC,EAAoB,EACL,OAAnBjB,GACEpY,OAAOD,KAAKqY,GAAgBnZ,KAAI,SAACqa,EAAUC,GAoKzC,OAnKAJ,EAAUI,GAAe,GACzBH,EAASG,GAAe,GACH,OAArBZ,GACE3Y,OAAOD,KAAK4Y,GAAkB1Z,KAAI,SAAC0T,EAAS6G,GA8J1C,OA5JEb,EAAiBhG,GAAS8G,cAC1BrB,EAAekB,GAAUG,cAEzBN,EAAUI,GAAaC,GACrB,kBAACnI,GAAA,EAAUxO,KAAX,CACE0P,QAAM,EACNpQ,IAAKwW,EAAiBhG,GAASd,WAC/BwE,SAAUsC,EAAiBhG,GAASd,WACpC5O,QAAS,kBAvCD,SAAC,GAA6B,IAA3BoT,EAA0B,EAA1BA,SAAUqB,EAAgB,EAAhBA,UACjCwB,EAAuBxB,EAAWrB,GAuCpBqD,CAAc,CACZrD,SAAUmD,EACV9B,UAAWiB,EAAiBhG,GAASd,eAIzC,0BAAM3O,MAAO,CAAEyW,WAAY,WACzB,kBAACC,GAAA,EAAD,CAAW1W,MAAO,CAAEC,MAAO,iBAAoB,IAC9CwV,EAAiBhG,GAASlR,QAKjC2X,EAASG,GAAaC,GACpB,kBAACK,GAAA,EAAIC,KAAL,CACE3X,IAAKwW,EAAiBhG,GAASd,WAC/BwE,SAAUsC,EAAiBhG,GAASd,YAEpC,kBAACqE,EAAA,EAAD,CAAWxT,iBAAiB,gBAE1B,kBAAC,IAAD,CAAMqX,GAAG,SACP,kBAAC7D,EAAA,EAAUC,OAAX,CACElO,GAAImO,IAAK/T,OACTa,MAAO,CAAEoT,OAAQ,WACjBD,SAAS,cAERvW,EAAE,eAEL,kBAACoW,EAAA,EAAUK,SAAX,CAAoBF,SAAS,cAC3B,kBAAC,IAAKhT,KAAN,KACE,kBAAC,IAAKkK,KAAN,KACGoL,EAAiBhG,GAASd,eAMnC,kBAAC,IAAD,CAAMkI,GAAG,SACP,kBAAC7D,EAAA,EAAUC,OAAX,CACElO,GAAImO,IAAK/T,OACTa,MAAO,CAAEoT,OAAQ,WACjBD,SAAS,eAERvW,EAAE,wBAEL,kBAACoW,EAAA,EAAUK,SAAX,CAAoBF,SAAS,eAC3B,kBAAC,IAAKhT,KAAN,KACE,kBAAC,IAAKkK,KAAN,KACGoL,EAAiBhG,GAAS6E,gBAKnC,kBAAC,IAAD,CAAMuC,GAAG,SACP,kBAAC7D,EAAA,EAAUC,OAAX,CACElO,GAAImO,IAAK/T,OACTa,MAAO,CAAEoT,OAAQ,WACjBD,SAAS,gBAERvW,EAAE,yBAIL,kBAACoW,EAAA,EAAUK,SAAX,CAAoBF,SAAS,gBAC3B,kBAAC,IAAKhT,KAAN,KACkC,qBAAxB8P,GACkB,OAAxBA,GACAnT,OAAOD,KAAKoT,GAAqBlU,KAC/B,SAAC2T,EAAaoH,GACZ,GACE7G,EAAoBP,GAAaf,aACjC8G,EAAiBhG,GAASd,WAC1B,CAAC,IACOA,EAAesB,EACrBP,GADMf,WADR,EAWIsB,EAAoBP,GANtBkB,EALF,EAKEA,eACAK,EANF,EAMEA,UACAC,EAPF,EAOEA,SAEApC,EATF,EASEA,MACAC,EAVF,EAUEA,MAGFoH,IAEA,IAAMhH,EACM,OAAVL,EAAiBA,EAAMhG,MAAM,KAAO,GAEtC,OACE,kBAACsJ,GAAD,iBACM/T,EADN,CAEEY,IAAK6X,EACLna,GAAIma,EACJpH,YAAakB,EACbnB,QAASd,EACTsC,UAAWA,EACXC,SAAUA,EACVnC,MAAOA,EACPD,MAAOK,KAIX,MAAO,MAIQ,IAAtBgH,GACC,kBAAC,IAAK9L,KAAN,CAAWjL,UAAU,cAClBxC,EAAE,uBASb,kBAAC,IAAD,CAAMia,GAAG,SACP,kBAAC7D,EAAA,EAAUC,OAAX,CACElO,GAAImO,IAAK/T,OACTa,MAAO,CAAEoT,OAAQ,WACjBD,SAAS,KAET,0BAAMnT,MAAO,CAAEyW,WAAY,WACzB,kBAACM,GAAA,EAAD,CACE3F,SAAS,QACTpR,MAAO,CAAEC,MAAO,iBAHpB,OAKSrD,EAAE,qBAGb,kBAACoW,EAAA,EAAUK,SAAX,CAAoBF,SAAS,KAC3B,kBAAC,IAAKhT,KAAN,KACE,kBAAC,GAAD,iBACM9B,EADN,CAEEmW,UAAWiB,EAAiBhG,GAASd,oBASrDwH,EAAoB,GACb,MAEJ,KAGX,IAAMa,EACJ,oCACE,kBAAChE,EAAA,EAAD,CACExT,iBACqB,OAAnB+V,GAA4BD,EAExB,eADAC,GAKN,kBAAC,IAAD,KACE,kBAACvC,EAAA,EAAUC,OAAX,CACElO,GAAImO,IAAK/T,OACTgU,SAAS,cACTnT,MAAO,CAAEoT,OAAQ,YAEjB,8BACE,kBAAC2D,GAAA,EAAD,CAAK3F,SAAS,QAAQpR,MAAO,CAAEC,MAAO,iBADxC,OAGGrD,EAAE,kBAGP,kBAACoW,EAAA,EAAUK,SAAX,CAAoBF,SAAS,eAC3B,kBAAC,IAAKhT,KAAN,KACE,kBAAC,EAAyB9B,MAMZ,OAAnB6W,GACCpY,OAAOD,KAAKqY,GAAgBnZ,KAAI,SAACqa,EAAUC,GACzC,IAAMY,EAAO,IAAIC,KAAKhC,EAAekB,GAAU5H,SACzC2I,EAAgB,IAAInD,KAAKoD,eAAe3D,GAAU1F,OACtDkJ,GAGF,OACE,kBAAC,IAAD,CAAMhY,IAAKoX,GACT,kBAACrD,EAAA,EAAUC,OAAX,CACElO,GAAImO,IAAK/T,OACTgU,SAAUkD,EACVrW,MAAO,CAAEoT,OAAQ,WACjBrT,QAAS,kBA9SF,SAAC,GAA8B,IAA5BoT,EAA2B,EAA3BA,SAAUwB,EAAiB,EAAjBA,WAClCoB,EAAoBpB,EAAYxB,EAAU,GA8S1BkE,CAAe,CACblE,SAAUkD,EACV1B,WAAYO,EAAekB,GAAUG,gBAIzC,kBAACe,GAAA,EAAD,CAAOtX,MAAO,CAAEC,MAAO,iBAAoB,IAC1CiV,EAAekB,GAAU7X,OAE5B,kBAACyU,EAAA,EAAUK,SAAX,CAAoBF,SAAUkD,GAC5B,kBAAC,IAAKlW,KAAN,KACE,kBAACwW,GAAA,EAAIY,UAAL,CACE5a,GAAG,oBACH6C,iBAC2B,OAAzBqW,EACIA,EACA,iBAGN,kBAAC2B,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACvJ,GAAA,EAAD,CAAW5O,QAAQ,SAEjB,kBAAC4O,GAAA,EAAUxO,KAAX,CAAgB0P,QAAM,EAAC8D,SAAS,iBAC7BvW,EAAE,UAIL,kBAACuR,GAAA,EAAUxO,KAAX,CAAgB0P,QAAM,EAAC8D,SAAS,cAC9B,0BAAMnT,MAAO,CAAEyW,WAAY,WACzB,kBAACM,GAAA,EAAD,CACE3F,SAAS,QACTpR,MAAO,CAAEC,MAAO,iBAHpB,OAKSrD,EAAE,iBAKZqZ,EAAUI,IAIc,OAA1BX,GACC,oCACE,6BACA,kBAAC,GAAD,iBACMrX,EADN,CAEE4G,KAAK,KACLqH,WAAYoJ,EACZnJ,aAAcoJ,EACdnJ,OAAQoJ,EACR7V,QAAS,SAACgN,GAAD,OACPgJ,EACEP,EACA,EACAzI,SASZ,kBAAC0K,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACf,GAAA,EAAIgB,QAAL,KACE,kBAAChB,GAAA,EAAIC,KAAL,CAAUzD,SAAS,iBACjB,kBAACH,EAAA,EAAD,CAAWxT,iBAAiB,cAuB1B,kBAAC,IAAD,KACE,kBAACwT,EAAA,EAAUC,OAAX,CACElO,GAAImO,IAAK/T,OACTa,MAAO,CAAEoT,OAAQ,WACjBD,SAAS,cAERvW,EAAE,gBAEL,kBAACoW,EAAA,EAAUK,SAAX,CAAoBF,SAAS,cAC3B,kBAAC,IAAD,CAAMyE,OAAO,SACX,kBAAC,IAAKzX,KAAN,KACE,kBAAC,IAAKkK,KAAN,KACG6K,EAAekB,GAAUG,iBAQpC,kBAAC,IAAD,KACE,kBAACvD,EAAA,EAAUC,OAAX,CACElO,GAAImO,IAAK/T,OACTa,MAAO,CAAEoT,OAAQ,WACjBD,SAAS,uBAERvW,EAAE,yBAEL,kBAACoW,EAAA,EAAUK,SAAX,CAAoBF,SAAS,uBAC3B,kBAAC,IAAD,CAAMyE,OAAO,SACX,kBAAC,IAAKzX,KAAN,KACE,kBAAC,IAAKkK,KAAN,KACG6K,EAAekB,GAAU9B,iBAQpC,kBAAC,IAAD,KACE,kBAACtB,EAAA,EAAUC,OAAX,CACElO,GAAImO,IAAK/T,OACTa,MAAO,CAAEoT,OAAQ,WACjBD,SAAS,wBAERvW,EAAE,qBAEL,kBAACoW,EAAA,EAAUK,SAAX,CAAoBF,SAAS,wBAC3B,kBAAC,IAAD,CAAMyE,OAAO,SACX,kBAAC,IAAKzX,KAAN,KACE,kBAAC,IAAKkK,KAAN,KAAY8M,SASvBjB,EAASG,GAIV,kBAACM,GAAA,EAAIC,KAAL,CAAUzD,SAAS,cACjB,kBAACH,EAAA,EAAD,CAAWxT,iBAAiB,cAC1B,kBAAC,IAAD,KACE,kBAACwT,EAAA,EAAUC,OAAX,CACElO,GAAImO,IAAK/T,OACTgU,SAAS,cAERvW,EAAE,gBAEL,kBAACoW,EAAA,EAAUK,SAAX,CAAoBF,SAAS,cAC3B,kBAAC,IAAKhT,KAAN,KACE,kBAAC0X,GAAD,CACEnW,KAAMrD,EACNsW,WACEO,EAAekB,GAAUG,8BAsB1D,GAkBiB,OAAnBrB,GACC,oCACE,6BAEA,kBAAC,GAAD,iBACM7W,EADN,CAEE4G,KAAK,KACLqH,WAAY6I,EACZ5I,aAAc6I,EACd5I,OAAQ6I,EACRtV,QAAS,SAACgN,GAAD,OAAY+I,EAAc/I,SAS7C,OAFsB,OAAlBtF,GAAwB8K,EAAc,aAEnC,oCAAGyE,I,iDC/lBG,YAAC3Y,GAId,IASMU,EAAQjC,OAAOkC,OATN,CACbqE,UAAW,aACXD,QAAS,cACT0U,KAAM,SAM8BzZ,GAbf,EA0BnBU,EAAM6C,cALR8F,EArBqB,EAqBrBA,SACAD,EAtBqB,EAsBrBA,cAtBqB,EA4B2B1I,EAAM+C,gBAAhDD,EA5Be,EA4BfA,YAAa8F,EA5BE,EA4BFA,WAAYC,EA5BV,EA4BUA,aA5BV,EAkCmB7F,oBAAS,GAlC5B,mBAkChBgW,EAlCgB,KAkCDC,EAlCC,OAmCiBjW,oBAAS,GAnC1B,mBAmChBkW,EAnCgB,KAmCFC,EAnCE,OAoCWnW,oBAAS,GApCpB,mBAoChBoW,EApCgB,KAoCLC,EApCK,OAqCiBrW,oBAAS,GArC1B,mBAqChBsW,EArCgB,KAqCFC,EArCE,OAsCuBvW,oBAAS,GAtChC,mBAsChBwW,EAtCgB,KAsCCC,EAtCD,OAuC+BzW,oBAAS,GAvCxC,mBAuChB0W,EAvCgB,KAuCKC,EAvCL,KAyCvBvU,qBAAU,WAENuU,KADEX,GAAiBE,GAAgBE,GAAaE,MAOjD,CAACN,EAAeE,EAAcE,EAAWE,IAjDrB,IAmDfzb,EAAMqF,YAAe,CAAClD,EAAMsE,YAA5BzG,EAMF+b,EAAiB,WACrBH,GAAoBD,IA8BhBK,EAAY,CAChBC,UAAWd,EACP7P,MAAaE,SAASxL,EAAE,2BACxBsL,MAAagE,WACjB4M,SAAUb,EACN/P,MAAaE,SAASxL,EAAE,0BACxBsL,MAAagE,WACjBV,MAAO2M,EACHjQ,MAEGsD,MAAM5O,EAAE,0BACRwL,SAASxL,EAAE,sBACdsL,MAAagE,WACjB6M,SAAUV,EACNnQ,MAEGE,SAASxL,EAAE,yBACXkP,IAAI,EAAGlP,EAAE,0BAET2L,QACC,mEACA3L,EAAE,yBAENsL,MAAagE,YAMbjE,EAASC,IAAW0Q,GAK1B,GAAiB,OAAblR,EAAmB,OAAO,qCA1HP,IA+HfoQ,EAAS/Y,EAAT+Y,KAEN7G,EAMEvJ,EANFuJ,UACAC,EAKExJ,EALFwJ,SACA1F,EAIE9D,EAJF8D,MA6OIwL,EACK,UAATc,EACE,0BAAM9X,MAAO,CAAEyW,WAAY,WACxBxF,EADH,IACeC,GAGf,kBAAC,IAAD,CACE5H,UA7OiB,SAAC,GAAD,IACrBC,EADqB,EACrBA,aACAC,EAFqB,EAErBA,aAEAC,GAJqB,EAGrBC,WAHqB,EAIrBD,QACAE,EALqB,EAKrBA,QAGAC,GARqB,EAMrBC,QANqB,EAOrBC,aAPqB,EAQrBF,QARqB,OAUrB,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAACxG,SAAU8F,GACzB,kBAAC,EAAD,CAAMhL,MAAO3B,EAAE,YAEb,kBAACuR,GAAA,EAAD,CAAW5O,QAAQ,SACjB,kBAAC4O,GAAA,EAAUxO,KAAX,CAAgBoF,GAAG,MAAMsK,QAAM,GAC7B,kBAACrF,EAAA,EAAKI,MAAN,KAAaxN,EAAE,eACbmb,EAaA,0BAAM/X,MAAO,CAAEsP,MAAO,UACpB,kBAAC0J,GAAA,EAAD,CACEjZ,QAAS,kBAAMiY,GAAiB,IAChC5G,SAAS,QACTpR,MAAO,CAAEC,MAAO,cAAemT,OAAQ,cAhB3C,oCACE,0BAAMpT,MAAO,CAAEsP,MAAO,UACpB,kBAAC2J,GAAA,EAAD,CACElZ,QAAS,kBAAMiY,GAAiB,IAChC5G,SAAS,QACTpR,MAAO,CAAEC,MAAO,cAAemT,OAAQ,cAG3C,6BACA,+BAAQnC,IAYX8G,GACC,kBAAC/N,EAAA,EAAKE,MAAN,CAAYC,UAAU,6BACpB,kBAACQ,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAK,OACLkG,YAAajO,EAAE,oBACfsD,KAAK,YACLkH,MAAOqC,EAAOoP,UACdrO,SAAUhB,EACViB,YAAab,EAAOiP,WAAalP,EAAQkP,YAE3C,kBAAC7O,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOiP,cAQlB,kBAAC1K,GAAA,EAAUxO,KAAX,CAAgBoF,GAAG,MAAMsK,QAAM,GAC7B,kBAACrF,EAAA,EAAKI,MAAN,KAAaxN,EAAE,cACbqb,EAaA,0BAAMjY,MAAO,CAAEsP,MAAO,UACpB,kBAAC0J,GAAA,EAAD,CACEjZ,QAAS,kBAAMmY,GAAgB,IAC/B9G,SAAS,QACTpR,MAAO,CAAEC,MAAO,cAAemT,OAAQ,cAhB3C,oCACE,0BAAMpT,MAAO,CAAEsP,MAAO,UACpB,kBAAC2J,GAAA,EAAD,CACElZ,QAAS,kBAAMmY,GAAgB,IAC/B9G,SAAS,QACTpR,MAAO,CAAEC,MAAO,cAAemT,OAAQ,cAG3C,6BACA,+BAAQlC,IAYX+G,GACC,kBAACjO,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACQ,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAK,OACLkG,YAAajO,EAAE,mBACfsD,KAAK,WACLkH,MAAOqC,EAAOqP,SACdtO,SAAUhB,EACViB,YAAab,EAAOkP,UAAYnP,EAAQmP,WAE1C,kBAAC9O,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOkP,aAQC,OAAlBrR,GACC,kBAAC0G,GAAA,EAAUxO,KAAX,CAAgBoF,GAAG,MAAMsK,QAAM,GAC7B,kBAACrF,EAAA,EAAKI,MAAN,KAAaxN,EAAE,kBACbub,EAaA,0BAAMnY,MAAO,CAAEsP,MAAO,UACpB,kBAAC0J,GAAA,EAAD,CACEjZ,QAAS,kBAAMqY,GAAa,IAC5BhH,SAAS,QACTpR,MAAO,CAAEC,MAAO,cAAemT,OAAQ,cAhB3C,oCACE,0BAAMpT,MAAO,CAAEsP,MAAO,UACpB,kBAAC2J,GAAA,EAAD,CACElZ,QAAS,kBAAMqY,GAAa,IAC5BhH,SAAS,QACTpR,MAAO,CAAEC,MAAO,cAAemT,OAAQ,cAG3C,6BACA,+BAAQ5H,IAYX2M,GACC,kBAACnO,EAAA,EAAKE,MAAN,CAAYC,UAAU,yBACpB,kBAACQ,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACEM,YAAajO,EAAE,eACfsD,KAAK,QACLkH,MAAOqC,EAAO+B,MACdhB,SAAUhB,EAEViB,YAAab,EAAO4B,OAAS7B,EAAQ6B,QAEvC,kBAACxB,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAO4B,UASpB,kBAAC2C,GAAA,EAAUxO,KAAX,CAAgBoF,GAAG,MAAMsK,QAAM,GAC7B,kBAACrF,EAAA,EAAKI,MAAN,KAAaxN,EAAE,aACbyb,EAWA,0BAAMrY,MAAO,CAAEsP,MAAO,UACpB,kBAAC0J,GAAA,EAAD,CACEjZ,QAAS,kBAAMuY,GAAgB,IAC/BlH,SAAS,QACTpR,MAAO,CAAEC,MAAO,cAAemT,OAAQ,cAd3C,oCACE,0BAAMpT,MAAO,CAAEsP,MAAO,UACpB,kBAAC2J,GAAA,EAAD,CACElZ,QAAS,kBAAMuY,GAAgB,IAC/BlH,SAAS,QACTpR,MAAO,CAAEC,MAAO,cAAemT,OAAQ,eAc9CiF,GACC,oCAEE,kBAACrO,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACQ,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAM4T,EAAkB,OAAS,WACjC1N,YAAajO,EAAE,sBACfsD,KAAK,WACLkH,MAAOqC,EAAOsP,SACdvO,SAAUhB,EAEViB,YAAab,EAAOmP,UAAYpP,EAAQoP,WAE1C,kBAACpO,EAAA,EAAWuO,OAAZ,KACE,kBAACvO,EAAA,EAAWN,KAAZ,CACE1N,GAAG,mBACHoD,QAAS4Y,EACT3Y,MAAO,CACLoT,OAAQ,YAGTmF,EACC,kBAACY,GAAA,EAAD,CACE/H,SAAS,QACTpR,MAAO,CAAEC,MAAO,cAAemT,OAAQ,aAGzC,kBAACgG,GAAA,EAAD,CACEhI,SAAS,QACTpR,MAAO,CAAEC,MAAO,cAAemT,OAAQ,eAM/C,kBAACpJ,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOmP,eAStB,kBAAC/O,EAAA,EAAKE,MAAN,CAAYC,UAAU,0BACpB,kBAACiB,EAAD,iBACM/M,EADN,CAEE8E,QAASvG,EAAE,UACX0G,QAASmV,EACTlV,UAAW,GACXH,QAASrE,EAAMqE,QACfC,UAAWtE,EAAMsE,iBAerBgI,iBAAkBpD,EAClBxE,SA/SW,SAAC/B,GAChBA,EAAK4G,WAAab,EACbsQ,IAAerW,EAAKuP,UAAY,MAChCgH,IAAcvW,EAAKwP,SAAW,MAC9BiH,IAAWzW,EAAK8J,MAAQ9D,EAAS8D,OACjC6M,IAAc3W,EAAKqX,SAAW,MAlBD,SAACrX,GACtB,OAATA,IACJA,EAAK4J,QAAU3D,IACfjG,EAAK6J,UAAY3D,IAGV/F,EAAY,CAAE5F,IAAK8C,EAAMqE,QAAS1B,UAgBrC2X,CAA4B3X,IAuS5BgK,cAAe,CACbmN,UAAWnR,EAASuJ,UACpB6H,SAAUpR,EAASwJ,SACnB1F,MAAO9D,EAAS8D,MAChBuN,SAAU,MAKlB,OAAO,oCAAG/B,I,UC1XG,YAAC3Y,GAId,IAQMU,EAAQjC,OAAOkC,OARN,CACboE,QAAS,oBACTC,UAAW,cAMyBhF,GAZf,EAwBnBU,EAAM6C,cANR0X,EAlBqB,EAkBrBA,WACAC,EAnBqB,EAmBrBA,gBACAC,EApBqB,EAoBrBA,qBACAC,EArBqB,EAqBrBA,kBACA/F,EAtBqB,EAsBrBA,aACAhM,EAvBqB,EAuBrBA,SAEMgS,EAAoB3a,EAAM4E,cAA1B+V,gBAzBe,EAgCnB3a,EAAM+C,gBAHRD,EA7BqB,EA6BrBA,YACA8X,EA9BqB,EA8BrBA,cACAC,EA/BqB,EA+BrBA,mBAOMhd,EAAMqF,YAAe,CAAClD,EAAMsE,YAA5BzG,EAUFid,EAAqB,SAACtd,GAC1Bmd,EAAgBnd,EAAEmU,OAAO/T,IACzBkF,EAAY,CACV5F,IAAK,yBACLyF,KAAM,CAAE8J,MAAO9D,EAAS8D,MAAOsO,YAAavd,EAAEmU,OAAO/T,OAInDod,EAAe,SAAChN,GAEpB,OAAQA,GACN,IAAK,QACHA,EAAS,EACT,MACF,IAAK,OACHA,EAASyM,EAAuB,EAAIA,EAAuB,EAAI,EAC/D,MACF,IAAK,OACHzM,EACEyM,EAAuB7M,KAAKC,KAAK2M,EAAkBE,GAC/CD,EAAuB,EACvB7M,KAAKC,KAAK2M,EAAkBE,GAClC,MACF,IAAK,OACH1M,EAASJ,KAAKC,KAAK2M,EAAkBE,GAMzCE,EAAc5M,IAqEhB,OACE,kBAAC,IAAD,CACEzD,UAjEmB,SAAC,GAAD,EACrBC,aADqB,EAErBC,aAFqB,EAGrBE,WAHqB,EAIrBD,OAJqB,EAKrBE,QALqB,EAMrBE,QANqB,EAOrBC,aAPqB,EAQrBF,OARqB,OAUrB,oCACE,kBAACoQ,GAAA,EAAD,CAAOC,YAAU,EAACC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACnV,KAAK,MAC5C,+BACE,4BACE,wBAAIjF,MAAO,CAAEmN,UAAW,WAAavQ,EAAE,WACvC,wBAAIoD,MAAO,CAAEmN,UAAW,WAAavQ,EAAE,SACvC,wBAAIoD,MAAO,CAAEmN,UAAW,WAAavQ,EAAE,SACvC,wBAAIoD,MAAO,CAAEmN,UAAW,WAAavQ,EAAE,WACvC,wBAAIoD,MAAO,CAAEmN,UAAW,WAAavQ,EAAE,WAG3C,+BACkB,OAAf0c,GACCA,EAAWvd,KAAI,SAAC0Y,EAAU4F,GAAgB,IAGhCna,EAA6BuU,EAA7BvU,KAAMoa,EAAuB7F,EAAvB6F,KAAMC,EAAiB9F,EAAjB8F,KAAMC,EAAW/F,EAAX+F,OAC1B,OACE,wBAAIvb,IAAKob,GACP,wBAAIra,MAAO,CAAEmN,UAAW,WACtB,kBAACnD,EAAA,EAAKe,MAAN,CACEpG,KAAK,QACL8V,QAAS/G,IAAiB4G,EAC1Bpa,KAAK,oBACLvD,GAAI2d,EACJI,aAAW,WACXlQ,SAAUqP,KAGd,wBAAI7Z,MAAO,CAAEmN,UAAW,WAAamN,GACrC,wBAAIta,MAAO,CAAEmN,UAAW,SAAWjN,GACnC,wBAAIF,MAAO,CAAEmN,UAAW,SAAWqN,GACnC,wBAAIxa,MAAO,CAAEmN,UAAW,UACrByM,EAAmBW,UAOlC,kBAAC,GAAD,iBACMlc,EADN,CAEEqO,MAAOC,KAAKC,KAAK2M,EAAkBE,GACnCjN,OAAQgN,EACRzZ,QAASga,OAYXrO,cAAe,CACbiP,UAAW,GACXC,WAAY,GACZC,YAAa,GACbC,UAAW,MC1JJ,YAACzc,GAId,IAQMU,EAAQjC,OAAOkC,OARN,CACbqE,UAAW,uBACXD,QAAS,qBAM2B/E,GAZf,EA6BnBU,EAAM+C,gBAJR6F,EAzBqB,EAyBrBA,WACAC,EA1BqB,EA0BrBA,aACA/F,EA3BqB,EA2BrBA,YAQMjF,EAAMqF,YAAe,CAAC,yBAAtBrF,EAKFqL,EAASC,IAAW,CACxByS,UAAWzS,MAERE,SAASxL,EAAE,sCACXkP,IAAI,EAAGlP,EAAE,uCACTmP,IAAI,EAAGnP,EAAE,sCACZge,WAAY1S,MAETE,SAASxL,EAAE,8BACXkP,IAAI,EAAGlP,EAAE,+BACTmP,IAAI,GAAInP,EAAE,8BACbie,YAAa3S,MAEVE,SAASxL,EAAE,gCACXkP,IAAI,EAAGlP,EAAE,iCACTmP,IAAI,GAAInP,EAAE,gCACbke,UAAW5S,MAERE,SAASxL,EAAE,8BACX2L,QACC,IAAIC,OAAO5L,EAAE,wBACbA,EAAE,iCA6HR,OACE,kBAAC,IAAD,CACE0M,UAzG6B,SAAC,GAAD,IAC/BC,EAD+B,EAC/BA,aACAC,EAF+B,EAE/BA,aAEAC,GAJ+B,EAG/BC,WAH+B,EAI/BD,QACAE,EAL+B,EAK/BA,QAGAC,GAR+B,EAM/BC,QAN+B,EAO/BC,aAP+B,EAQ/BF,QAR+B,OAU/B,oCACE,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAACxG,SAAU8F,GAEzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,iBACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAK,SACLkG,YAAa,GACbC,mBAAiB,oBACjB5K,KAAK,YACLkH,MAAOqC,EAAOkR,UACdnQ,SAAUhB,EACViB,YAAab,EAAO+Q,WAAahR,EAAQgR,YAE3C,kBAAC3Q,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAO+Q,aAMd,kBAAC3Q,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,kBACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAK,SACLkG,YAAa,GACbC,mBAAiB,oBACjB5K,KAAK,aACLkH,MAAOqC,EAAOmR,WACdpQ,SAAUhB,EACViB,YAAab,EAAOgR,YAAcjR,EAAQiR,aAE5C,kBAAC5Q,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOgR,cAMd,kBAAC5Q,EAAA,EAAKE,MAAN,CAAYC,UAAU,8BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,oBACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAK,SACLkG,YAAa,GACbC,mBAAiB,oBACjB5K,KAAK,cACLkH,MAAOqC,EAAOoR,YACdrQ,SAAUhB,EACViB,YAAab,EAAOiR,aAAelR,EAAQkR,cAE7C,kBAAC7Q,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOiR,eAMd,kBAAC7Q,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,0BACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAK,SACLkG,YAAa,GACbC,mBAAiB,oBACjB5K,KAAK,YACLkH,MAAOqC,EAAOqR,UACdtQ,SAAUhB,EACViB,YAAab,EAAOkR,WAAanR,EAAQmR,YAE3C,kBAAC9Q,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOkR,aAOd,kBAAC1P,EAAD,iBACM/M,EADN,CAEE8E,QAASvG,EAAE,UACXwG,QAASrE,EAAMqE,QACfC,UAAWtE,EAAMsE,gBAYrBgI,iBAAkBpD,EAClBxE,SA1Ha,SAAC/B,GAKhB,OAJA8C,QAAQC,IAAI/C,GACZA,EAAK4J,QAAU3D,IACfjG,EAAK6J,UAAY3D,IAEV/F,EAAY,CAAE5F,IAAK8C,EAAMqE,QAAS1B,UAsHvCgK,cAAe,CACbiP,UAAW,GACXC,WAAY,GACZC,YAAa,GACbC,UAAW,M,8BCtMJ,YAACzc,GAId,IAKIC,EAAW,CACb+E,UAAW,YACXG,QAAS,IACTuX,UAAW,KACXC,OAAQ,GACRC,OAAQ,GAERC,UAAW,aAEXC,OAAQ,CAAC,OAAQ,YAAa,YAAa,QAAS,SAAU,aAM1Dpc,EAAQjC,OAAOkC,OAAOV,EAAUD,GAO9B2P,EAAejP,EAAM+C,gBAArBkM,WACAoN,EAAqBrc,EAAM4M,oBAA3ByP,iBAKAxe,EAAMqF,YAAelD,EAAMsE,WAA3BzG,EArCe,EAuCOmF,mBAAShD,EAAMyE,SAvCtB,mBAuChB6X,EAvCgB,KAuCPC,EAvCO,OAwCyBlb,IAAM2B,UAAS,GAxCxC,mBAwChBwZ,EAxCgB,KAwCEC,EAxCF,MCpBE,SAACzX,EAAUC,GACpC,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIrH,EAAK8e,aAJX,WACExX,EAAcG,YAGaJ,GAC3B,OAAO,kBAAM0X,cAAc/e,OAE5B,CAACqH,ID6CJ2X,EAAY,WAEVL,EAAWD,EAAU,KACpB,KE5D2B,SAACtX,EAAUoX,GACzC,IAYMpc,EAAQjC,OAAOkC,OAZN,CACbqE,UAAW,YAGX6X,UAAW,aAEXC,OAAQ,CAAC,OAAQ,YAAa,YAAa,QAAS,SAAU,aAM1B,CAAEA,OAAQA,IAIhDhX,qBAAU,WAGR,IAAMyX,EAAe,SAACrf,GAEpBwH,EAASxH,IAIX,IAAK,IAAIsf,KAAK9c,EAAMoc,OAClBpU,OAAO+U,iBAAiB/c,EAAMoc,OAAOU,GAAID,GAK3C,OAAO,WACL,IAAK,IAAIC,KAAK9c,EAAMoc,OAElBpU,OAAOgV,oBAAoBhd,EAAMoc,OAAOU,GAAID,MAI/C,IFuBHI,EAAiB,WACfV,EAAWvc,EAAMyE,WAChB,CAAC,YAAa,QAAS,SAAU,aAEpCW,qBAAU,WACJkX,IAAYtc,EAAMyE,SAASgY,GAAoB,GAC/CH,IAAYtc,EAAMkc,QAAQO,GAAoB,GAClC,IAAZH,GAAeD,MAGlB,CAACC,IAkHJ,OAAO,oCAhHQ,WACb,IAAIY,EACwBA,EAAxBZ,EAAUtc,EAAMic,OAAmBrO,KAAKC,KAAKyO,EAzDpC,IA0DGA,EAEhB,IAAMa,EAAgBlO,EAAW,IAAIkJ,KAAK,KAAM,EAAG,EAAG,EAAG,EAAG+E,GAAW,CACrEE,OAAQ,UACRC,OAAQ,YAUJC,EACJ,oCACE,kBAAC,IAAD,CACElT,QAAQ,6BACR+S,cAAeA,GAEf,yBAAK9c,UAAU,eAAf,uBACA,yBACEA,UAAU,cACVY,MAAO,CAAEoR,SAAU,MAAOkL,WAAY,OAAQrc,MAAO,YAEpD,CAAEic,kBAEL,yBAAK9c,UAAU,eAAf,yCAIF,6BACA,kBAACgM,EAAD,iBACM/M,EADN,CAEE8E,QAASvG,EAAE,gBACXwG,QAAQ,mBACRK,SA7BoB,WACxBe,QAAQC,IAAI,qBAEZ6W,EAAWvc,EAAMyE,SACjBgY,GAAoB,IA0BhBnY,UAAWtE,EAAMsE,cAKvB,OACE,oCACE,kBAAC+F,EAAD,CACEC,KAAMkS,EACN1V,QAASwW,EACTvW,OAAQ,kBAAM0V,GAAoB,MAEpC,kBAACe,GAAA,EAAD,CACEC,UAAU,SACVC,QACE,kBAACC,GAAA,EAAD,KACGrB,EAAUtc,EAAMic,OACf,kBAAC,IAAD,CACE7R,QAAQ,2CACR8S,SAAUA,GAFZ,2CAI2C,CAAEA,YAAY,IAJzD,YAQA,kBAAC,IAAD,CACE9S,QAAQ,2CACR8S,SAAUA,GAFZ,2CAI2C,CAAEA,YAAY,IAJzD,cAWN,yBAAKjc,MAAO,CAAEyW,WAAY,SAAUrD,OAAQ,YAC1C,kBAACuJ,GAAA,EAAD,CAAS3c,MAAO,CAAEC,MAAO,iBAD3B,OAGGob,EAAUtc,EAAMic,OACf,oCACE,0BAAM5b,UAAU,iCACd,kBAAC,IAAD,CAAO+J,QAAQ,oBAAoB8S,SAAUA,GAC1C,CAAEA,YADL,aAIF,0BAAM7c,UAAU,iCACd,kBAAC,IAAD,CAAO+J,QAAQ,gBAAgB8S,SAAUA,GACtC,CAAEA,YADL,UAMJ,oCACE,0BAAM7c,UAAU,iCACd,kBAAC,IAAD,CAAO+J,QAAQ,oBAAoB8S,SAAUA,GAC1C,CAAEA,YADL,aAIF,0BAAM7c,UAAU,iCACd,kBAAC,IAAD,CAAO+J,QAAQ,gBAAgB8S,SAAUA,GACvC,8BAAO,CAAEA,aADX,aAYNxO,KG7IG,YAACpP,GAKd,IAKMU,EAAQjC,OAAOkC,OALN,CAAEqE,UAAW,WAKUhF,GAVf,EAeaU,EAAM6C,cAAlC4F,EAfe,EAefA,SAAUC,EAfK,EAeLA,cAfK,EAgBgB1I,EAAM4E,cACrCmS,GAjBe,EAgBfvD,cAhBe,EAgBAqK,YACG7d,EAAM+C,gBAAxBgU,eAGAlZ,EAAMqF,YAAelD,EAAMsE,WAA3BzG,EAKR,IAAiB,IAAb4K,EAEF,OAAO,0DAQT,IAAMqV,EAAWC,cAIXte,EACJ,oCACE,kBAAC+Y,EAAA,EAAD,CACEwF,OAAK,EACL/c,MAAO,CAELgd,aAAc,IACdC,YAAa,MAGf,kBAACzF,EAAA,EAAD,KAIE,kBAACC,EAAA,EAAD,KACE,kBAACnR,EAAA,EAAD,CAKEtG,MAAO,CACLiB,aAAc,MAGdG,gBAAiB,eACjBoF,UAAW,SAIb,kBAACF,EAAA,EAAOG,MAAR,CAAc5G,KAAK,KACjB,yBACEqD,IAAI,sBACJH,MAAM,OACNC,OAAO,KACP5D,UAAU,2BACV6D,IAAKrG,EAAE,WAGX,kBAAC0C,EAAA,EAAD,CAAKF,UAAU,WACb,kBAACE,EAAA,EAAIM,KAAL,CAAUuT,SAAS,UAAUtT,KAAK,YAChC,kBAAC,GAAexB,KAGpB,kBAACiB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIM,KAAL,CAAUuT,SAAS,WAAWtT,KAAK,aACjC,0BAAMG,MAAO,CAAEyW,WAAY,WACzB,8BACE,kBAACyG,EAAA,EAAD,CAAkBld,MAAO,CAAEC,MAAO,kBAGpC,0BAAMb,UAAU,sBAAhB,OAEGxC,EAAE,gBAMT,kBAAC0C,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIK,KAAL,KACE,kBAACwd,GAAc9e,QAO3B,kBAACmZ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yBAAKzX,MAAO,CAAEgD,OAAQ,SACtB,kBAACsD,EAAA,EAAD,CACE8W,kBAAgB,EAChBC,OAAO,KAIP9d,QAAQ,OACRS,MAAO,CACLiB,aAAc,MACdsF,WAAY,yBACZnF,gBAAiB,cACjBoF,UAAW,SAGb,kBAAClH,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIM,KAAL,CACER,UAAU,aACV+T,SAAS,UACTtT,KAAK,WACLG,MAAO,CACLsc,WACwB,aAAtBO,EAASS,SAA0B,OAAS,WAG/C1gB,EAAE,aAGP,kBAAC0J,EAAA,EAAO2M,OAAR,CAAesK,gBAAc,0BAC7B,kBAACjX,EAAA,EAAO+M,SAAR,CAAiB1W,GAAG,yBAClB,kBAAC2C,EAAA,EAAD,CAAKF,UAAU,WACM,OAAlBqI,GACC,oCACE,kBAACnI,EAAA,EAAIM,KAAL,CACER,UAAU,aACV+T,SAAS,WACTtT,KAAK,YACLG,MAAO,CACLsc,WACwB,cAAtBO,EAASS,SACL,OACA,WAGP1gB,EAAE,aAEL,kBAAC0C,EAAA,EAAIM,KAAL,CACER,UAAU,aACV+T,SAAS,cACTpT,QAAS,kBAAM+V,EAAc,IAC7BjW,KAAK,IACLG,MAAO,CACLsc,WACwB,iBAAtBO,EAASS,SACL,OACA,WAGP1gB,EAAE,aAEL,kBAAC0C,EAAA,EAAIM,KAAL,CACER,UAAU,aACV+T,SAAS,WACTtT,KAAK,YACLG,MAAO,CACLsc,WACwB,cAAtBO,EAASS,SACL,OACA,WAGP1gB,EAAE,qBAanB4gB,EACJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLpU,UAAW,WACT,OAAyB,OAAlB7B,EACHkW,GAAQtf,GACRuf,EAAoBvf,MAG5B,kBAAC,IAAD,CACEof,OAAK,EACLC,KAAK,WACLpU,UAAW,WACT,OAAyB,OAAlB7B,EACHkW,GAAQtf,GACRuf,EAAoBvf,MAG5B,kBAAC,IAAD,CACEof,OAAK,EACLC,KAAK,wBACLpU,UAAW,WACT,OAAOsU,EAAoBvf,MAG/B,kBAAC,IAAD,CACEof,OAAK,EACLC,KAAK,WACLpU,UAAW,WACT,OAAOuU,GAAW,eAAKxf,EAAN,CAAYyZ,KAAM,gBAGvC,kBAAC,IAAD,CACE2F,OAAK,EACLC,KAAK,YACLpU,UAAW,WACT,OC1QG,SAACjL,GAId,IAKMU,EAAQjC,OAAOkC,OALN,CAAEqE,UAAW,qBAKUhF,GATf,EAkBnBU,EAAM6C,cAHRkc,EAfqB,EAerBA,sBACAtE,EAhBqB,EAgBrBA,qBACA/R,EAjBqB,EAiBrBA,cAjBqB,EAmB6B1I,EAAM4E,cAAlDoa,EAnBe,EAmBfA,yBAA0BxL,EAnBX,EAmBWA,cAC1BoH,EAAkB5a,EAAM+C,gBAAxB6X,cAMA/c,EAAMqF,YAAe,CAAClD,EAAMsE,YAA5BzG,EAsBR,OALsB,OAAlB6K,GAAwB8K,EAAc,aAMxC,oCACE,kBAACS,EAAA,EAAD,CAAWxT,iBAAkBse,GAC3B,kBAAC,IAAD,KACE,kBAAC9K,EAAA,EAAUC,OAAX,CACElO,GAAImO,IAAK/T,OACTgU,SAAS,aACTnT,MAAO,CAAEoT,OAAQ,WACjBrT,QAzBe,WAEvBge,EAAyB,cACzBpE,EAAcH,KAwBL5c,EAAE,eAGL,kBAACoW,EAAA,EAAUK,SAAX,CAAoBF,SAAS,cAC3B,kBAAC,IAAKhT,KAAN,KACE,kBAAC6d,GAAe3f,MAKtB,kBAAC,IAAD,KACE,kBAAC2U,EAAA,EAAUC,OAAX,CACElO,GAAImO,IAAK/T,OACTgU,SAAS,uBACTnT,MAAO,CAAEoT,OAAQ,WACjBrT,QApCyB,WAEjCge,EAAyB,0BAoChBnhB,EAAE,0BAGL,kBAACoW,EAAA,EAAUK,SAAX,CAAoBF,SAAS,wBAC3B,kBAAC,IAAKhT,KAAN,KACE,kBAAC8d,GAAyB5f,QD0LrB6f,CAAkB,eAAK7f,OAYlC,kBAAC,IAAD,CACEof,OAAK,EACLC,KAAK,eACLpU,UAAW,WACT,OAAO6U,GAAW9f,MAGtB,kBAAC,IAAD,CACEof,OAAK,EACLC,KAAK,WACLpU,UAAW,WACT,OAAOqU,GAAQtf,MAGnB,kBAAC,IAAD,CACEof,OAAK,EACLC,KAAK,YACLpU,UAAW,WACT,OElSG,SAACjL,GAId,IAKMU,EAAQjC,OAAOkC,OALN,GAKuBX,GATf,EAgBiBU,EAAM6C,cAAtC6F,EAhBe,EAgBfA,cAAe2W,EAhBA,EAgBAA,aACf7L,EAAkBxT,EAAM4E,cAAxB4O,cACAxE,EAAWhP,EAAM+C,gBAAjBiM,OACAsQ,EAAyBtf,EAAM4M,oBAA/B0S,qBAEAzhB,EAAMqF,YAAe,YAArBrF,EAEF8E,EAAO3C,EAAM2C,KACbiD,EAAOyZ,EAxBU,EA6BiBrc,mBAAS,MA7B1B,mBA6BhBuc,EA7BgB,KA6BFC,EA7BE,KA+BjBzf,EAAoB,SAACnC,GACzB0hB,EAAqB1hB,IAGjB6B,EAAa,CACjB,CACE0B,KAAMtD,EAAE,OACRkD,KAAM,QAER,CACEI,KAAMtD,EAAE,OACRkD,KAAM,QAER,CACEI,KAAMtD,EAAE,OACRkD,KAAM,SAoEV,OA7DAqE,qBAAU,WACR,GAAa,OAATQ,EAGJ,OAAQA,GACN,IAAK,OACH4Z,EACE,kBAACC,GAAD,CACEjgB,MAAO3B,EAAE,uBACTyB,KAAMU,EACNP,WAAYA,EACZiB,2BAA4BkF,EAC5B7F,kBAAmBA,KAGvB,MACF,IAAK,OACHyf,EACE,kBAACE,GAAD,CACElgB,MAAO3B,EAAE,uBACTyB,KAAMU,EACNP,WAAYA,EACZiB,2BAA4BkF,EAC5B7F,kBAAmBA,KAGvB,MACF,IAAK,OACHyf,EACE,kBAACG,GAAD,CACEngB,MAAO3B,EAAE,uBACTyB,KAAMU,EACNP,WAAYA,EACZiB,2BAA4BkF,EAC5B7F,kBAAmBA,QAS1B,CAAC4C,EAAMqM,EAAQpJ,IAEI,OAAlB8C,GAAwB8K,EAAc,aAgBnC,oCAAG+L,GFgLOK,CAAStgB,QAO1B,OACE,oCAME,kBAACkZ,EAAA,EAAD,CAAWwF,MAAM,MACf,kBAACvF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGjZ,EACD,yBAAKwB,MAAO,CAAEgD,OAAQ,WAM1B,kBAACwU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAM+F,O3BlVVoB,GAAM,CACVC,IAAK,CACHC,SAAU,0BA0Bd,OAHiB/X,QAAUA,OAAO8V,UAAY9V,OAAO8V,SAASkC,UAI5D,IAAK,YACH3gB,EAASwgB,GACT,MACF,IAAK,gBACHxgB,EA1BS,CACXygB,IAAK,CACHC,SAAU,8BAyBV,MACF,IAAK,cACH1gB,EAvBY,CACdygB,IAAK,CACHC,SAAU,wBAsBV,MACF,IAAK,UACH1gB,EApBS,CACXygB,IAAK,CACHC,SAAU,oBAmBV,MACF,QACE1gB,EAASwgB,GAIE,sBACVxgB,G,U8B3CD4gB,G,QAASC,EAAWC,QAAQ9gB,GAAOygB,IAAIC,SAAU,CACnDK,QAAQ,EACRC,WAAW,IAOAC,GAAW,SAAC3d,GAAyB,IAAnBlE,EAAkB,wDAO/C,OANIA,GAAOgH,QAAQC,IAAR,mBAAwB/C,EAAKzF,KAAOyF,GAK/Csd,GAAOM,KAAP,iBAA8B5d,IACvB,GCHM,YAACrD,GAId,IAJuB,EASTvB,OAAOkC,OALN,GAKuBX,GASkByD,gBAAhD6F,EAlBe,EAkBfA,WAAYC,EAlBG,EAkBHA,aAAc/F,EAlBX,EAkBWA,YAG1BjF,EAAMqF,YAAe,SAArBrF,EAOFqL,EAASC,IAAW,CACxBsD,MAAOtD,MAEJsD,MAAM5O,EAAE,0BACRwL,SAASxL,EAAE,sBACdmc,SAAU7Q,MAAaE,SAASxL,EAAE,2BA4HpC,OACE,oCACE,kBAAC,IAAD,CACE0M,UAvGgB,SAAC,GAAD,IACpBC,EADoB,EACpBA,aACAC,EAFoB,EAEpBA,aAEAC,GAJoB,EAGpBC,WAHoB,EAIpBD,QACAE,EALoB,EAKpBA,QAGAC,GARoB,EAMpBC,QANoB,EAOpBC,aAPoB,EAQpBF,QARoB,OAUpB,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAACxG,SAAU8F,GACzB,4BAAK3M,EAAE,YAGP,kBAACoN,EAAA,EAAKE,MAAN,CAAYC,UAAU,yBACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,kBACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACEM,YAAajO,EAAE,eACfsD,KAAK,QACLkH,MAAOqC,EAAO+B,MACdhB,SAAUhB,EAEViB,YAAab,EAAO4B,OAAS7B,EAAQ6B,QAEvC,kBAACxB,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAO4B,SAMd,kBAACxB,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,aACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAK,WACLkG,YAAajO,EAAE,kBACfsD,KAAK,WACLkH,MAAOqC,EAAOsP,SACdvO,SAAUhB,EAEViB,YAAab,EAAOmP,UAAYpP,EAAQoP,WAE1C,kBAAC/O,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOmP,YAoBd,kBAAC/O,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACiB,EAAD,iBACM/M,EADN,CAEE8E,QAASvG,EAAE,UACXwG,QAAQ,eACRC,UAAU,YAId,kBAACkU,EAAA,EAAD,CAAWwF,MAAM,MACf,kBAACvF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,uBAAGrY,UAAU,2BACX,kBAAC,IAAD,CAAO+J,QAAQ,4BAAf,WACU,uBAAGtJ,KAAK,YAAR,kBAId,kBAAC4X,EAAA,EAAD,KACE,uBAAGrY,UAAU,4BACX,kBAAC,IAAD,CAAO+J,QAAQ,yBAAf,UACS,uBAAGtJ,KAAK,UAAR,oBAkBfwL,iBAAkBpD,EAClBxE,SA/GW,SAAC/B,IAXW,SAACA,GAE5BA,EAAK4J,QAAU3D,IACfjG,EAAK6J,UAAY3D,IACjB/F,EAAY,CAAE5F,IAAK,eAAgByF,SAQnC6d,CAAqB7d,IA+GjBgK,cAAe,CACbF,MAAO,GACPuN,SAAU,GACVyG,WAAY,QC5KP,YAACnhB,GAId,IAKMU,EAAQjC,OAAOkC,OALN,CAAEoE,QAAS,gBAAiBC,UAAW,UAKhBhF,GAK9BoV,EAAa1U,EAAM6C,cAAnB6R,SAde,EAgB2B1U,EAAM+C,gBAAhD6F,EAhBe,EAgBfA,WAAYC,EAhBG,EAgBHA,aAAc/F,EAhBX,EAgBWA,YAhBX,EAwBuBE,oBAAS,GAxBhC,mBAwBhBwW,EAxBgB,KAwBCC,EAxBD,KA8Bf5b,EAAMqF,YAAelD,EAAMsE,WAA3BzG,EAKFqL,EAASC,IAAW,CACxB2Q,UAAW3Q,MAAaE,SAASxL,EAAE,2BACnCkc,SAAU5Q,MAAaE,SAASxL,EAAE,0BAClC4O,MAAOtD,MAEJsD,MAAM5O,EAAE,0BACRwL,SAASxL,EAAE,sBACdmc,SAAU7Q,MAEPE,SAASxL,EAAE,yBACXkP,IAAI,EAAGlP,EAAE,0BAET2L,QACC,mEACA3L,EAAE,2BAOF+b,EAAiB,WACrBH,GAAoBD,IAsJtB,OACE,kBAAC,IAAD,CACEjP,UA5HyB,SAAC,GAAD,IAC3BC,EAD2B,EAC3BA,aACAC,EAF2B,EAE3BA,aAEAC,GAJ2B,EAG3BC,WAH2B,EAI3BD,QACAE,EAL2B,EAK3BA,QAGAC,GAR2B,EAM3BC,QAN2B,EAO3BC,aAP2B,EAQ3BF,QAR2B,OAU3B,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAACxG,SAAU8F,GACzB,4BAAK3M,EAAE,YAGP,kBAACoN,EAAA,EAAKE,MAAN,CAAYC,UAAU,6BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,eACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAK,OACLkG,YAAajO,EAAE,oBACfsD,KAAK,YACLkH,MAAOqC,EAAOoP,UACdrO,SAAUhB,EACViB,YAAab,EAAOiP,WAAalP,EAAQkP,YAE3C,kBAAC7O,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOiP,aAMd,kBAAC7O,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,cACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAK,OACLkG,YAAajO,EAAE,mBACfsD,KAAK,WACLkH,MAAOqC,EAAOqP,SACdtO,SAAUhB,EACViB,YAAab,EAAOkP,UAAYnP,EAAQmP,WAE1C,kBAAC9O,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOkP,YAMd,kBAAC9O,EAAA,EAAKE,MAAN,CAAYC,UAAU,yBACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,kBACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACEM,YAAajO,EAAE,eACfsD,KAAK,QACLkH,MAAOqC,EAAO+B,MACdhB,SAAUhB,EAEViB,YAAab,EAAO4B,OAAS7B,EAAQ6B,QAEvC,kBAACxB,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAO4B,SAMd,kBAACxB,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,aACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAM4T,EAAkB,OAAS,WACjC1N,YAAajO,EAAE,kBACfsD,KAAK,WACLkH,MAAOqC,EAAOsP,SACdvO,SAAUhB,EAEViB,YAAab,EAAOmP,UAAYpP,EAAQoP,WAE1C,kBAACpO,EAAA,EAAWuO,OAAZ,KACE,kBAACvO,EAAA,EAAWN,KAAZ,CACE1N,GAAG,mBACHoD,QAAS4Y,EACT3Y,MAAO,CACLoT,OAAQ,YAGTmF,EACC,kBAACY,GAAA,EAAD,CACE/H,SAAS,QACTpR,MAAO,CAAEC,MAAO,iBAGlB,kBAACmZ,GAAA,EAAD,CAAYhI,SAAS,QAAQpR,MAAO,CAAEC,MAAO,mBAKnD,kBAAC+J,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOmP,YAKd,kBAAC/O,EAAA,EAAKE,MAAN,CAAYC,UAAU,0BACpB,kBAACiB,EAAD,iBACM/M,EADN,CAEE8E,QAASvG,EAAE,UACXwG,QAASrE,EAAMqE,QACfC,UAAWtE,EAAMsE,cAIrB,uBAAGjE,UAAU,4BACX,kBAAC,IAAD,CAAO+J,QAAQ,6BAAf,sBACqB,uBAAGtJ,KAAK,YAAR,gBASvBwL,iBAAkBpD,EAClBxE,SAtIa,SAAC/B,IAbkB,SAACA,GACtB,OAATA,IACJA,EAAK4J,QAAU3D,IACfjG,EAAK6J,UAAY3D,IACjBlG,EAAK+R,SAAWA,EAChB/R,EAAK+d,eAAgB,EACd5d,EAAY,CAAE5F,IAAK8C,EAAMqE,QAAS1B,UAQrC2X,CAA4B3X,IAsI9BgK,cAAe,CACbmN,UAAW,GACXC,SAAU,GACVtN,MAAO,GACPuN,SAAU,O,SC/NH,YAAC1a,GAId,IAKMU,EAAQjC,OAAOkC,OALN,GAKuBX,EAAKqD,MATpB,EAgBC3C,EAAM6C,cAAtB4D,EAhBe,EAgBfA,MAAOka,EAhBQ,EAgBRA,KAGO/O,EAAY5R,EAAM4M,oBAAhCgU,aAQR,GAAc,OAAVna,EAAgB,CAAC,IACb5I,EAAMqF,YAAe,UAArBrF,EACN,OACE,kBAACqM,EAAA,EAAD,CAAO1J,QAAQ,SAASoR,QAAS,kBAAMA,KAAWiP,aAAW,GAC1DhjB,EAAE4I,IAGF,GAAa,OAATka,EAAe,CAAC,IACnB9iB,EAAMqF,YAAe,SAArBrF,EAEN,OACE,kBAACqM,EAAA,EAAD,CAAO1J,QAAQ,OAAOoR,QAAS,kBAAMA,KAAWiP,aAAW,GACxDhjB,EAAE8iB,IAIT,OAAO,sCCxCM,YAACrhB,GAId,IAKMU,EAAQjC,OAAOkC,OALN,CAAEqE,UAAW,qBAKUhF,GAK9BqJ,EAAa3I,EAAM6C,cAAnB8F,SAEA7F,EAAgB9C,EAAM+C,gBAAtBD,YAIFge,GADQ5d,YAAe,oBAArBrF,EACe,SAACkjB,GACtB7iB,EAAK4iB,eAAeC,KAShBC,EAAiB,SAACtM,GACtBoM,EAAepM,GAEE,OAAb/L,GACF7F,EAAY,CACV5F,IAAK,yBACLyF,KAAM,CAAE8J,MAAO9D,EAAS8D,MAAOiI,eAMnC,OACE,oCACE,yBAAKzT,MAAO,CAAEgD,OAAQ,SACtB,kBAACuM,EAAA,EAAD,CACEC,MAAI,EACJjQ,QAAQ,QACRS,MAAO,CAAEoT,OAAQ,WACjBrT,QAAS,WACPggB,EAAe,QALnB,MASS,IACT,kBAACxQ,EAAA,EAAD,CACEC,MAAI,EACJjQ,QAAQ,QACRS,MAAO,CAAEoT,OAAQ,WACjBrT,QAAS,WACPggB,EAAe,QALnB,QCbO,cAAM,MASOhe,oBAAS,GAThB,mBASZvE,EATY,KASLwiB,EATK,OAUiBje,oBAAS,GAV1B,mBAUZke,EAVY,KAUAC,EAVA,OAWmBne,oBAAS,GAX5B,mBAWZoe,EAXY,KAWCC,EAXD,OAaWxZ,EAAe,KAAM,WAbhC,mBAaZxD,EAbY,KAaHM,EAbG,OAea3B,mBAASmV,KAAKmJ,OAf3B,mBAeZC,EAfY,KAeFC,EAfE,OAiBW3Z,EAAe4Z,cAAU,WAjBpC,mBAiBZC,EAjBY,KAiBHC,EAjBG,OAkBe9Z,GAAe,EAAO,aAlBrC,mBAkBZ+Z,EAlBY,KAkBDC,EAlBC,OAmBaha,GAAe,EAAO,YAnBnC,mBAmBZY,EAnBY,KAmBFqZ,EAnBE,OAoBqBja,EAAe,IAAK,gBApBzC,mBAoBZ8M,EApBY,KAoBEgG,EApBF,OAqBqB3X,mBAAS,EAAG,gBArBjC,mBAqBZ+e,EArBY,KAqBEC,GArBF,QAsBiBna,EAAe,KAAM,cAtBtC,qBAsBZ0S,GAtBY,MAsBA0H,GAtBA,SAuBqBpa,EAAe,KAAM,gBAvB1C,qBAuBZ8G,GAvBY,MAuBEuT,GAvBF,SAwBSra,EAAe,KAAM,UAxB9B,qBAwBZ6K,GAxBY,MAwBJyP,GAxBI,SAyBuBta,EACxC,UACA,iBA3BiB,qBAyBZyL,GAzBY,MAyBGG,GAzBH,SA6BuC5L,EACxD,KACA,yBA/BiB,qBA6BZkX,GA7BY,MA6BWC,GA7BX,SAiC2BnX,EAC5C,KACA,mBAnCiB,qBAiCZ2S,GAjCY,MAiCK4H,GAjCL,SAqC+Bva,EAChD,KACA,qBAvCiB,qBAqCZ+G,GArCY,MAqCOyT,GArCP,SAyCmBxa,EAAe,KAAM,eAzCxC,qBAyCZ8K,GAzCY,MAyCC2P,GAzCD,SA0CqCza,EACtD,EACA,wBA5CiB,qBA0CZ4S,GA1CY,MA0CU8H,GA1CV,SA8CyC1a,EAC1D,EACA,0BAhDiB,qBA8CZgH,GA9CY,MA8CY2T,GA9CZ,SAkD6B3a,EAC9C,EACA,oBApDiB,qBAkDZ+K,GAlDY,MAkDM6P,GAlDN,SAsD+B5a,EAChD,EACA,qBAxDiB,qBAsDZ6S,GAtDY,MAsDOgI,GAtDP,SA0DmC7a,EACpD,EACA,uBA5DiB,qBA0DZiH,GA1DY,MA0DS6T,GA1DT,SA8DuB9a,EAAe,EAAG,iBA9DzC,qBA8DZgL,GA9DY,MA8DG+P,GA9DH,SA+Da/a,EAAe,KAAM,YA/DlC,qBA+DZc,GA/DY,MA+DFka,GA/DE,SAgEGhb,EAAe,KAAM,OAhExB,qBAgEZwF,GAhEY,MAgEPyV,GAhEO,SAiEuBjb,EACxC,KACA,iBAnEiB,qBAiEZa,GAjEY,MAiEGqa,GAjEH,SAqEmBlb,EAAe,KAAM,eArExC,qBAqEZ4M,GArEY,MAqEClB,GArED,SAsEyB1L,EAC1C,KACA,kBAxEiB,qBAsEZsO,GAtEY,MAsEI6M,GAtEJ,SA0E2Bnb,EAC5C,KACA,mBA5EiB,qBA0EZuO,GA1EY,MA0EK6M,GA1EL,SA8E+Bpb,EAChD,EACA,qBAhFiB,qBA8EZwO,GA9EY,MA8EO6M,GA9EP,SAkFqCrb,EACtD,EACA,wBApFiB,qBAkFZyO,GAlFY,MAkFU6M,GAlFV,SAsFqCtb,GACtD,EACA,wBAxFiB,qBAsFZ0O,GAtFY,MAsFU6M,GAtFV,SA0FyBvb,EAC1C,KACA,kBA5FiB,qBA0FZ2O,GA1FY,MA0FI6M,GA1FJ,SA8F6Bxb,EAC9C,KACA,oBAhGiB,qBA8FZ4O,GA9FY,MA8FM6M,GA9FN,SAmG6Bzb,EAC9C,KACA,oBArGiB,qBAmGZ6O,GAnGY,MAmGM6M,GAnGN,SAwGuC1b,EACxD,KACA,yBA1GiB,qBAwGZ8O,GAxGY,MAwGW6M,GAxGX,SA4G2C3b,EAC5D,EACA,2BA9GiB,qBA4GZ+O,GA5GY,MA4Ga6M,GA5Gb,SAmHf5b,EAAe,EAAG,8BAnHH,qBAiHjBgP,GAjHiB,MAkHjB6M,GAlHiB,SAqHqC7b,EACtD,KACA,wBAvHiB,qBAqHZiP,GArHY,MAqHU6M,GArHV,SA0HmC9b,EACpD,KACA,uBA5HiB,qBA0HZqJ,GA1HY,MA0HSC,GA1HT,SAiIiBnO,mBAAS,MAjI1B,qBAiIZ4gB,GAjIY,MAiIApQ,GAjIA,SAkIqBxQ,mBAAS,MAlI9B,qBAkIZ6gB,GAlIY,MAkIEC,GAlIF,SAoIiC9gB,mBAAS,MApI1C,qBAoIZ+gB,GApIY,MAoIQC,GApIR,SAqIiDhhB,mBAClE,MAtIiB,qBAqIZihB,GArIY,MAqIgBC,GArIhB,SAiJflhB,mBAAS,MAjJM,qBA+IjBmhB,GA/IiB,MAgJjBC,GAhJiB,SAkJ2CphB,mBAAS,MAlJpD,qBAkJZqhB,GAlJY,MAkJaC,GAlJb,SAoJIthB,mBAAS,MAAzBuhB,GApJY,wBAqJa1c,EAC9B3J,EAAKsmB,QAAQhmB,YAAY,GACzB,YAvJiB,qBAqJZkW,GArJY,MAqJF+P,GArJE,SAyJqB5c,EACtC,OACA,gBA3JiB,qBAyJZwX,GAzJY,MAyJEqF,GAzJF,SAiK6B1hB,mBAAS,IAjKtC,qBAiKZJ,GAjKY,MAiKM+hB,GAjKN,SAkKO3hB,mBAAS,MAlKhB,qBAkKZyD,GAlKY,MAkKLme,GAlKK,SAmKK5hB,mBAAS,MAnKd,qBAmKZ2d,GAnKY,MAmKNkE,GAnKM,MA4KbhiB,GAAgB,CACpBpE,QAEAyiB,aAGAE,cACA/c,UAEAkd,WAEAG,UAGAnH,WAAYpS,KAAKC,MAAMmS,IACvB5L,aAAcxG,KAAKC,MAAMuG,IACzB+D,OAAQvK,KAAKC,MAAMsK,IACnBY,iBACAyL,yBACAvE,mBACA5L,qBACA+D,eACA8H,wBACA5L,0BACA+D,oBACA8H,qBACA5L,uBACA+D,iBACAlK,SAAUR,KAAKC,MAAMO,IAErBib,cACAC,gBACAjC,YACAnZ,WACAkM,eACAoN,eAEArZ,iBACA+L,eACApH,OACA8I,eAAgBhO,KAAKC,MAAM+N,IAC3BC,mBACAC,qBACAC,wBACAC,wBACAC,kBACAC,oBACAC,iBAAkBvO,KAAKC,MAAMsO,IAC7BC,yBACAC,2BACAC,8BACAC,wBACA5F,oBAAqB/I,KAAKC,MAAM8I,IAEhCqT,gBACAR,sBACAE,8BACAE,+BACAE,2BACA3P,YACA2K,gBAEAzc,oBACA6D,SACAka,SAOI/b,GAAgB,CACpBqc,WAEAE,gBAGAE,iBACA1c,aAEA6c,cAEAG,aAEAM,iBACAC,mBACAC,aACA1O,oBACAuL,4BACAoD,sBACAC,wBACAC,kBACAC,2BACAC,6BACAC,uBACAC,wBACAC,0BACAC,oBACAf,eACA4C,eACA5B,eAEAf,cACAnH,kBACAqH,mBAEAxO,iBACAsQ,mBACAf,oBACAxP,kBACAuP,UACAE,qBACAC,sBACAC,wBACAC,2BACAC,2BACAC,qBACAC,uBACAC,uBACAC,4BACAC,8BACAC,iCACAC,2BACAxS,0BAEAwT,uBACAX,yBACAE,iCACAE,kCACAE,gCL9SqB,SAACtf,GAAc,IAAD,EACGhC,mBAAS,MADZ,mBAC9B8hB,EAD8B,KAChBC,EADgB,KAErC9E,GAAO+E,GAAP,kBAA4B,SAACriB,GAC3BoiB,EAAgBpiB,MAWlByC,qBAAU,WACa,OAAjB0f,GAEJ9f,EAAS8f,KAER,CAACA,IKsSJG,EAAU,SAACtiB,GAUTuiB,GAAgB,CACd5lB,KAAMqD,EACNkT,QAASA,QA2Bb,IAAM/S,GAAc,SAAC,GAA0B,IAAxB5F,EAAuB,EAAvBA,IAAuB,IAAlByF,YAAkB,MAAX,KAAW,EAC5C,QAAIwiB,GAAe,CAAEjoB,MAAKyF,OAAM+e,UAASrU,IAAK,MAAOwI,eAInDpQ,QAAQC,IAAI,8BACL4a,GAAS,CAAEpjB,MAAKmQ,IAAK,MAAOqU,UAAS/e,QAAQlE,KAQlD0mB,GAAiB,SAAC,GAA0C,IAAxCjoB,EAAuC,EAAvCA,IAAKyF,EAAkC,EAAlCA,KAAM+e,EAA4B,EAA5BA,QAASrU,EAAmB,EAAnBA,IAAKwI,EAAc,EAAdA,QAUjD,OAJAlT,EAAK4e,SAAWA,EAEhB5c,EAAWzH,GCpaA,SAACoC,GAId,IAKMU,EAAQjC,OAAOkC,OALN,GAKuBX,GAC9BpC,EAAqC8C,EAArC9C,IAAKyF,EAAgC3C,EAAhC2C,KAAM+e,EAA0B1hB,EAA1B0hB,QAASrU,EAAiBrN,EAAjBqN,IAAKwI,EAAY7V,EAAZ6V,QAOzBpX,EAAUoX,EAAQhT,cAAlBpE,MAjBe,EAuBnBoX,EAAQjR,cAJVie,EAnBqB,EAmBrBA,YACAC,EApBqB,EAoBrBA,OACAC,EArBqB,EAqBrBA,iBAMEqC,GAAe,EAKbC,EAAY,SAACnoB,EAAK8H,GAClBogB,GACAloB,IAAQ8C,EAAM9C,KAAe,YAARA,IACvB8H,IACAogB,GAAe,IAwDnB,OAhDAC,EAAU,gBAAgB,WAIxBxC,EAAY1a,KAAKK,UAAU7F,IAC3B2d,GAAS,CAAEpjB,MAAKyF,OAAM0K,MAAKqU,WAAWjjB,MAGxC4mB,EAAU,oBAAoB,WAE5BvC,EAAOngB,EAAK4G,YACZwZ,EAAiBpgB,EAAK4G,YACtB+W,GAAS,CAAEpjB,MAAKyF,OAAM0K,MAAKqU,WAAWjjB,MAwBxC4mB,EAAU,WAAW,WAGnB,OAFA/E,GAAS,CAAEpjB,MAAKyF,OAAM0K,MAAKqU,WAAWjjB,IAE/B,KASF2mB,ED0UEE,CAAe,CACpBpoB,MACAyF,OACA+e,UACArU,MACAwI,aAQEqP,GAAkB,SAAC,GAAuB,IAArB5lB,EAAoB,EAApBA,KAAMuW,EAAc,EAAdA,QAO/B,MAAuB,UAAhBvW,EAAKimB,OE1bD,YAAwB,IAArBjmB,EAAoB,EAApBA,KAAMuW,EAAc,EAAdA,QAShB7V,EAAQjC,OAAOkC,OALN,GAKuBX,GATF,EAeauW,EAAQjR,cAAjDD,EAf4B,EAe5BA,WAAYme,EAfgB,EAehBA,OAAQC,EAfQ,EAeRA,iBACpBle,EAAgBgR,EAAQ9S,gBAAxB8B,YAIA3H,EAAwB8C,EAAxB9C,IAAKuJ,EAAmBzG,EAAnByG,MAAO+e,EAAYxlB,EAAZwlB,QACpB/f,QAAQC,IAAR,iBAAsBxI,GAAOuJ,EAAO+e,EAASxlB,EAAO6V,GAGpD,IAAI4P,GAAa,EAKXC,EAAU,SAAC/iB,EAAMqC,GACrB,IAAIygB,EAAJ,CADkC,kBAEZ9iB,EAFY,GAE3BgjB,EAF2B,KAEtBJ,EAFsB,KAGlC,OAAKI,IAAQzoB,GAAOqoB,IAAW9e,EAAM/I,MAAiB,YAARioB,KAC5C3gB,IACAL,EAAW,MACX8gB,GAAa,GACN,KAyFX,OA7EAC,EAAQ,CAAC,eAAgB,oBAAoB,WAE3C,OADA7gB,EAAY,mBAAoB,UACzB,KAGT6gB,EAAQ,CAAC,eAAgB,oBAAoB,WAE3C,OADA7gB,EAAY,mBAAoB,UACzB,KAGT6gB,EAAQ,CAAC,eAAgB,oBAAoB,WAE3C,OADA7gB,EAAY,mBAAoB,UACzB,KAGT6gB,EAAQ,CAAC,gBAAiB,oBAAoB,WAE5C,OADA7gB,EAAY,4BAA6B,UAClC,KAGT6gB,EAAQ,CAAC,yBAA0B,oBAAoB,WAErD,OAAO,KAGTA,EAAQ,CAAC,uBAAwB,oBAAoB,WAEnD,OADA7gB,EAAY,0BAA2B,UAChC,KAGT6gB,EAAQ,CAAC,gCAAiC,oBAAoB,WAE5D,OADA7gB,EAAY,0BAA2B,UAChC,KAGT6gB,EAAQ,CAAC,iBAAkB,oBAAoB,WAE7C,OAAO,KAGTA,EAAQ,CAAC,yBAA0B,oBAAoB,WAErD,OAAO,KAGTA,EAAQ,CAAC,cAAe,oBAAoB,WAE1C,OAAO,KAGTA,EAAQ,CAAC,mBAAoB,iBAAiB,WAI5C,OAHA5C,EAAO,MACPC,EAAiB,MACjBle,EAAY,iCAAkC,UACvC,KAGT6gB,EACE,CAAC,mBAAoB,6CACrB,WAIE,OAHA5C,EAAO,MACPC,EAAiB,MACjBle,EAAY,iCAAkC,UACvC,KAIX6gB,EAAQ,CAAC,uBAAwB,2BAA2B,WAE1D,OADA7gB,EAAY,iBAAkB,UACvB,KAGT6gB,EAAQ,CAAC,YAAY,WAEnB,OADA7gB,EAAY4B,EAAM/I,KAAM,UACjB,MAGF,EF8TDkoB,CAAa,CACXtmB,KAAMA,EACN+N,IAAKA,GACLwI,QAASA,IGhcJ,YAAwB,IAArBvW,EAAoB,EAApBA,KAAMuW,EAAc,EAAdA,QAShB7V,EAAQjC,OAAOkC,OALN,GAKuBX,GATF,EAiChCuW,EAAQhT,cAhBVpE,EAjBkC,EAiBlCA,MAEA8iB,EAnBkC,EAmBlCA,SACAhH,EApBkC,EAoBlCA,WACA5L,EArBkC,EAqBlCA,aACA+D,EAtBkC,EAsBlCA,OAGA/J,EAzBkC,EAyBlCA,SAGAwN,GA5BkC,EA0BlCzN,cA1BkC,EA4BlCyN,gBACAO,EA7BkC,EA6BlCA,iBACAxF,EA9BkC,EA8BlCA,oBACA4F,EA/BkC,EA+BlCA,qBACA+M,EAhCkC,EAgClCA,aAhCkC,EAkEhChO,EAAQjR,cA/BVD,EAnCkC,EAmClCA,WACAgd,EApCkC,EAoClCA,WACAM,EArCkC,EAqClCA,cACAC,EAtCkC,EAsClCA,gBACAC,EAvCkC,EAuClCA,UACAC,EAxCkC,EAwClCA,mBACAC,EAzCkC,EAyClCA,qBACAC,EA1CkC,EA0ClCA,eACAT,EA3CkC,EA2ClCA,aAEAgB,EA7CkC,EA6ClCA,YACAf,EA9CkC,EA8ClCA,YACAnH,EA/CkC,EA+ClCA,gBACAqH,EAhDkC,EAgDlCA,gBAGAxO,EAnDkC,EAmDlCA,cACAsQ,EApDkC,EAoDlCA,gBACAf,EArDkC,EAqDlCA,iBACAD,EAtDkC,EAsDlCA,OACAE,EAvDkC,EAuDlCA,kBACAC,EAxDkC,EAwDlCA,mBACAG,EAzDkC,EAyDlCA,wBACAG,EA1DkC,EA0DlCA,oBACAC,EA3DkC,EA2DlCA,yBACArS,EA5DkC,EA4DlCA,uBAEAwT,EA9DkC,EA8DlCA,oBACAP,EA/DkC,EA+DlCA,+BACAE,EAhEkC,EAgElCA,2BAhEkC,EA+EhCzO,EAAQ9S,gBAXVD,EApEkC,EAoElCA,YAGA4Q,GAvEkC,EAsElCqD,cAtEkC,EAuElCrD,gBACAmS,EAxEkC,EAwElCA,mBACA7O,EAzEkC,EAyElCA,oBACAC,EA1EkC,EA0ElCA,uBACApS,EA3EkC,EA2ElCA,YACAic,EA5EkC,EA4ElCA,eAMAgF,EAEEjQ,EAAQjJ,oBAFVkZ,WAOM5oB,EAAQ8C,EAAR9C,IAUJuB,GAAOgH,QAAQC,IAAR,oBAAyBxI,GAAO8C,EAAO6V,GAElD,IAAIkQ,IAAgB,EAKdC,GAAa,SAACrjB,EAAMqC,GACxB,IAAI+gB,GAAJ,CADqC,kBAEfpjB,EAFe,GAE9BgjB,EAF8B,KAEzBJ,EAFyB,MASlChE,IAAavhB,EAAMimB,QAAQ1E,UAC1BoE,IAAQ3lB,EAAM9C,KACdqoB,IAAWvlB,EAAMulB,QACX,YAARI,KAEI3gB,KACFL,EAAW,MAEbohB,IAAgB,KA24BpB,OA93BAC,GAAW,CAAC,gBAAiB,YAAY,WAEvC,OADAnE,GAAa,IACN,KAMTmE,GAAW,CAAC,cAAe,YAAY,WAIrC,OADAnE,GAAa,IACN,KAMTmE,GAAW,CAAC,gBAAiB,YAAY,WAEvC,OAAO,KAGTA,GAAW,CAAC,gBAAiB,aAAa,WACxC,MAAmB,sBAAfhmB,EAAMmB,QACJnB,EAAMkmB,QAAQC,SAAW,MAcjCH,GAAW,CAAC,gBAAiB,YAAY,WAYrC,OADAF,EAAW,oBACJ,KAIXE,GAAW,CAAC,uBAAwB,aAAa,WAC/C,MAAmB,6BAAfhmB,EAAMmB,OACJnB,EAAMkmB,QAAQE,aAAe,GAUhB,iBAAfpmB,EAAMmB,SACJnB,EAAMkmB,QAAQE,aAAe,KAE/BN,EAAW,aACJ,OAyBbE,GAAW,CAAC,gCAAiC,YAAY,WAGvD,OAFA5B,GAA+B,IAExB,KAMT4B,GAAW,CAAC,eAAgB,aAAa,WAEvC,GAAmB,iBAAfhmB,EAAMmB,KAAyB,CAKjC,GAA6B,IAAzBnB,EAAMkmB,QAAQX,OAchB,OAZA1C,EAAY1a,KAAKK,UAAUxI,EAAMkmB,UACjCnD,EAAiB/iB,EAAMkmB,QAAQ7Y,KAC/BsU,EAAW3hB,EAAMkmB,QAAQzZ,OACzBkO,EAAgB3a,EAAMkmB,QAAQG,eAC9BrE,EACEsE,MAAMtmB,EAAMkmB,QAAQK,eAAiB,EAAIvmB,EAAMkmB,QAAQK,eAEzDzF,EAAe9gB,EAAMkmB,QAAQxR,UAC7BoN,GAAY,GAGZgE,EAAW,aACJ,EAKF,GAA6B,IAAzB9lB,EAAMkmB,QAAQX,OAEvB,OADAO,EAAW,oBACJ,EAKF,GAA6B,IAAzB9lB,EAAMkmB,QAAQX,OAGvB,OAFA/R,EAAc,aACd3O,EAAY,oBAAqB,UAC1B,EAKF,GAA6B,IAAzB7E,EAAMkmB,QAAQX,OAGvB,OAFA/R,EAAc,aACd3O,EAAY,kBAAmB,UACxB,MAQbmhB,GAAW,CAAC,eAAgB,aAAa,WACvC,OAAIhmB,EAAMwmB,SAAW,IAGnB3hB,EAAY,kBAAmB,SAC/B2O,EAAc,eAHP,KAQXwS,GAAW,CAAC,eAAgB,YAAY,WACtC,OAAO,KAMTA,GAAW,CAAC,cAAe,YAAY,WAErC,OADAljB,EAAY,CAAE5F,IAAK,WAAYyF,KAAM,CAAE8J,MAAO9D,EAAS8D,UAChD,KAMTuZ,GAAW,CAAC,WAAY,aAAa,WACnC,MAAmB,iBAAfhmB,EAAMmB,OACR0hB,EAAY1a,KAAKK,UAAUxI,EAAMkmB,WAC1B,MAQXF,GAAW,CAAC,WAAY,aAAa,WACnC,MAAmB,iBAAfhmB,EAAMmB,KACe,IAAnBnB,EAAMwmB,WAGoB,IAAnBxmB,EAAMwmB,WAQfhT,EAAc,cAEP,KAIU,IAAjBxT,EAAMymB,QAURjT,EAAc,cATP,MAeXwS,GAAW,CAAC,WAAY,YAAY,WAClC,OAAO,KAMTA,GAAW,CAAC,sBAAuB,aAAa,WAC9C,GAAmB,sBAAfhmB,EAAMmB,KAA8B,CACtC,IAAMkW,EAAWrX,EAAMkmB,QACf1O,EAAgBH,EAAhBG,YACe,OAAnBrB,GACF6M,EAAkB7a,KAAKK,UAAU,CAAC6O,KAClCL,EAAoBQ,EAAa,EAAG,IAEpCwL,EAAkB7a,KAAKK,UAAL,uBAAmB2N,GAAnB,CAAmCkB,UAE/B,qBAAfrX,EAAMmB,MACf8hB,EAAmBjjB,EAAMkmB,QAAQQ,kBAGnC,OAAO,KAMTV,GAAW,CAAC,sBAAuB,aAAa,WAI9C,OAFA5C,GAAwB,GACxB5P,EAAc,iBACP,KAGTwS,GAAW,CAAC,sBAAuB,YAAY,WAE7C,OAAO,KAMTA,GAAW,CAAC,wBAAyB,aAAa,WAyBhD,MAdmB,oBAAfhmB,EAAMmB,KAENoiB,EADuB,OAArB7M,EACkBvO,KAAKK,UAAU,CAACxI,EAAMkmB,UAGxC/d,KAAKK,UAAL,uBAAmBkO,GAAnB,CAAqC1W,EAAMkmB,YAGvB,mBAAflmB,EAAMmB,MACfqiB,EAAyBxjB,EAAMkmB,QAAQS,iBAKlC,KAMTX,GAAW,CAAC,wBAAyB,aAAa,WAChD,OAAO,KAMTA,GAAW,CAAC,2BAA4B,aAAa,WAWnD,MAVmB,kBAAfhmB,EAAMmB,MAENgQ,EAD0B,OAAxBD,EACqB/I,KAAKK,UAAU,CAACxI,EAAMkmB,UAG3C/d,KAAKK,UAAL,uBAAmB0I,GAAnB,CAAwClR,EAAMkmB,aAK7C,KAMTF,GAAW,CAAC,2BAA4B,aAAa,WACnD,OAAO,KAgBTA,GAAW,CAAC,qBAAsB,aAAa,WAW7C,MARmB,sBAAfhmB,EAAMmB,MAEN6hB,EADqB,OAAnB7M,EACgBhO,KAAKK,UAAU,CAACxI,EAAMkmB,UAEtB/d,KAAKK,UAAL,uBAAmB2N,GAAnB,CAAmCnW,EAAMkmB,aAIxD,KAMTF,GAAW,CAAC,qBAAsB,aAAa,WAG7C,QAAIhmB,EAAMwmB,SAAW,KAInB/gB,QAAQC,IAAI,iCAEL,MAIXsgB,GAAW,CAAC,qBAAsB,YAAY,WAE5C,OAAO,KAMTA,GAAW,CAAC,oBAAqB,aAAa,WAW5C,MAVmB,oBAAfhmB,EAAMmB,MAENoiB,EADuB,OAArB7M,EACkBvO,KAAKK,UAAU,CAACxI,EAAMkmB,UAGxC/d,KAAKK,UAAL,uBAAmBkO,GAAnB,CAAqC1W,EAAMkmB,aAK1C,KAMTF,GAAW,CAAC,oBAAqB,aAAa,WAC5C,OAAO,KAMTA,GAAW,CAAC,wBAAyB,aAAa,WAShD,OAPE7U,EAD0B,OAAxBD,EACqB/I,KAAKK,UAAU,CAACxI,EAAMkmB,UAG3C/d,KAAKK,UAAL,uBAAmB0I,GAAnB,CAAwClR,EAAMkmB,aAI3C,KAMTF,GAAW,CAAC,wBAAyB,aAAa,WAChD,OAAO,KAMTA,GAAW,CAAC,cAAe,aAAa,WAMtC,OALAvgB,QAAQC,IAAI,4BAIZif,EAAoBxM,KAAKmJ,QAClB,KAKT0E,GAAW,CAAC,cAAe,aAAa,WACtC,MAAmB,aAAfhmB,EAAMmB,MACe,IAAnBnB,EAAMwmB,YAWdR,GAAW,CAAC,cAAe,YAAY,WACrC,OAAO,KAMTA,GAAW,CAAC,mBAAoB,aAAa,WAC3C,OAAIhmB,EAAMkmB,QAAQE,aAAe,IAE/BtD,EAAO,MACPC,EAAiB,MACjBle,EAAY,eAAgB,UACrB,MAQXmhB,GAAW,CAAC,mBAAoB,YAAY,WAS1C,OAFAtS,KAEO,KAMTsS,GAAW,CAAC,mBAAoB,aAAa,WAIxB,iBAAfhmB,EAAMmB,MACR0hB,EAAY1a,KAAKK,UAAUxI,EAAMkmB,aAiBrCF,GAAW,CAAC,mBAAoB,aAAa,WAC3C,MAAmB,iBAAfhmB,EAAMmB,MACe,IAAnBnB,EAAMwmB,WAER3hB,EAAY,eAAgB,UACrB,MAiBbmhB,GAAW,CAAC,eAAgB,YAAY,WAEtC,OAAO,KAMTA,GAAW,CAAC,eAAgB,aAAa,WACvC,MAAmB,6BAAfhmB,EAAMmB,SACJnB,EAAMkmB,QAAQC,SAAW,KAC3BrC,EAAgB9jB,EAAMkmB,QAAQC,WACvB,OAYbH,GAAW,CAAC,eAAgB,YAAY,WAEtC,OADAH,EAAmBhC,IACZ,KAMTmC,GAAW,CAAC,eAAgB,YAAY,WAEtC,OAAO,KAMTA,GAAW,CAAC,eAAgB,aAAa,WACvC,MAAmB,6BAAfhmB,EAAMmB,SACJnB,EAAMkmB,QAAQC,SAAW,KAC3BrC,EAAgB9jB,EAAMkmB,QAAQC,WACvB,OAYbH,GAAW,CAAC,eAAgB,YAAY,WAEtC,OADAH,EAAmBhC,IACZ,KAMTmC,GAAW,CAAC,eAAgB,YAAY,WAEtC,OAAO,KAMTA,GAAW,CAAC,eAAgB,aAAa,WACvC,MAAmB,6BAAfhmB,EAAMmB,SACJnB,EAAMkmB,QAAQC,SAAW,KAC3BrC,EAAgB9jB,EAAMkmB,QAAQC,WACvB,OAYbH,GAAW,CAAC,eAAgB,YAAY,WAEtC,OADAH,EAAmBhC,IACZ,KAMTmC,GAAW,CAAC,oBAAqB,aAAa,WAG5C,QAAIhmB,EAAMkmB,QAAQC,SAAW,KAC3BrC,EAAgB9jB,EAAMkmB,QAAQC,WACvB,MAOXH,GAAW,CAAC,oBAAqB,YAAY,WAS3C,OALAljB,EAAY,CACV5F,IAAK,qBACLyF,KAAM,CAAE/E,GAAIimB,MAGP,KAITmC,GAAW,CAAC,oBAAqB,aAAa,WAG5C,QAAIhmB,EAAMkmB,QAAQC,SAAW,KAC3BrC,EAAgB9jB,EAAMkmB,QAAQC,WAEvB,MAOXH,GAAW,CAAC,oBAAqB,YAAY,WAK3C,OAJAljB,EAAY,CACV5F,IAAK,qBACLyF,KAAM,CAAE/E,GAAIimB,MAEP,KAMTmC,GAAW,CAAC,iBAAkB,aAAa,WAazC,MAVmB,sBAAfhmB,EAAMmB,KAEN8gB,EADiB,OAAf1H,EACYpS,KAAKK,UAAU,CAACxI,EAAMkmB,UAEtB/d,KAAKK,UAAL,uBAAmB+R,GAAnB,CAA+Bva,EAAMkmB,YAE7B,qBAAflmB,EAAMmB,MACfihB,EAAmBpiB,EAAMkmB,QAAQU,mBAG5B,KAMTZ,GAAW,CAAC,iBAAkB,aAAa,WAEzC,OADAxS,EAAc,cACP,KAMTwS,GAAW,CAAC,qBAAsB,aAAa,WAS7C,MARmB,sBAAfhmB,EAAMmB,MAEN8gB,EADiB,OAAf1H,EACYpS,KAAKK,UAAU,CAACxI,EAAMkmB,UAEtB/d,KAAKK,UAAL,uBAAmB+R,GAAnB,CAA+Bva,EAAMkmB,aAIhD,KAMTF,GAAW,CAAC,qBAAsB,aAAa,WAC7C,OAAO,KAMTA,GAAW,CAAC,mBAAoB,aAAa,WAa3C,MAVmB,wBAAfhmB,EAAMmB,KAEN+gB,EADmB,OAAjBvT,EACcxG,KAAKK,UAAU,CAACxI,EAAMkmB,UAEtB/d,KAAKK,UAAL,uBAAmBmG,GAAnB,CAAiC3O,EAAMkmB,YAEjC,uBAAflmB,EAAMmB,MACfkhB,EAAqBriB,EAAMkmB,QAAQW,8BAG9B,KAMTb,GAAW,CAAC,mBAAoB,aAAa,WAE3C,OADAxS,EAAc,aACP,KAMTwS,GAAW,CAAC,aAAc,aAAa,WAarC,MAVmB,kBAAfhmB,EAAMmB,KAENghB,EADa,OAAXzP,EACQvK,KAAKK,UAAU,CAACxI,EAAMkmB,UAEtB/d,KAAKK,UAAL,uBAAmBkK,GAAnB,CAA2B1S,EAAMkmB,YAErB,iBAAflmB,EAAMmB,MACfmhB,EAAetiB,EAAMkmB,QAAQY,eAGxB,KAMTd,GAAW,CAAC,aAAc,aAAa,WAErC,OAAO,KAMTA,GAAW,CAAC,wBAAyB,aAAa,WAOhD,OALE9D,EADmB,OAAjBvT,EACcxG,KAAKK,UAAU,CAACxI,EAAMkmB,UAEtB/d,KAAKK,UAAL,uBAAmBmG,GAAnB,CAAiC3O,EAAMkmB,aAGlD,KAMTF,GAAW,CAAC,wBAAyB,aAAa,WAEhD,OADAtS,KACO,KAGTsS,GAAW,CAAC,mBAAoB,aAAa,WAK3C,QAAIhmB,EAAMkmB,QAAQC,SAAW,KAC3BrC,EAAgB9jB,EAAMkmB,QAAQC,WACvB,MAMXH,GAAW,CAAC,mBAAoB,YAAY,WAK1C,OAJAljB,EAAY,CACV5F,IAAK,oBACLyF,KAAM,CAAE/E,GAAIimB,MAEP,KAGTmC,GAAW,CAAC,uBAAwB,aAAa,WAC/C,KAAIhmB,EAAMkmB,QAAQC,SAAW,GAU3B,OAAO,EAHPrC,EAAgB9jB,EAAMkmB,QAAQC,aAOlCH,GAAW,CAAC,uBAAwB,YAAY,WAO9C,OADA/O,EAAuBH,IAChB,KAGTkP,GAAW,CAAC,eAAgB,YAAY,WAOtC,OAAO,KAGTA,GAAW,CAAC,qBAAsB,YAAY,WAO5C,OADA/O,EAAuBH,IAChB,KAGTkP,GAAW,CAAC,iBAAkB,YAAY,WAExC,OADA5B,GAA+B,IACxB,KAGT4B,GAAW,CAAC,kBAAmB,YAAY,WAMzC,OAJA5B,EAA+B,MAC/BE,EAA2B,MAC3BwB,EAAW,YACXjhB,EAAY,0BAA2B,SAChC,KAiBTmhB,GAAW,CAAC,YAAY,WACtB,OAAO,KAGFD,GHpkBDgB,CAAgB,CACdznB,KAAMA,EACN+N,IAAKA,GACLwI,QAASA,KAmBXmR,GAAc,WAClBpC,GAAS,MACTC,GAAQ,OAsJJoC,GAAc,SAACC,GACnB,IAAMC,EAAcnf,OAAO8V,SAASsJ,OAEpC,OADkB,IAAIC,gBAAgBF,GACrBG,IAAIJ,IAajBK,GAA6B,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAO/a,EAAY,EAAZA,MAG3C3J,GAAY,CACV5F,IAAK,uBACLyF,KAAM,CAAE6kB,QAAO/a,YA+Ib1J,GAAkB,CACtBD,eAEA+B,YAzUkB,SAAC4iB,GAAyB,IAApB7hB,EAAmB,uDAAZ,QAItB,UAATA,EAAmBgf,GAAS6C,GAAO5C,GAAQ4C,IAsU3CT,eAGAlG,eAlSqB,SAACC,GACtB7iB,EAAK4iB,eAAeC,GACpB0D,GAAY1D,IAiSZ/R,OA1Ra,SAAChB,GAAqC,IAA7B0H,EAA4B,uDAAjBf,EACjC,OACE,IAAIM,KAAKC,aAAaR,GAAU,CAC9BS,SAAU,WACVC,sBAAuB,IACtBpG,OAAOhB,EAAS+T,GACnB,IACArM,GAoRFxG,cA3QoB,SAAClB,GACrB,OACE,IAAIiH,KAAKC,aAAaR,GAAU,CAC9BS,SAAU,WACVC,sBAAuB,EACvBsS,sBAAuB,IACtB1Y,OAAOhB,GAAU,KAsQtB6M,mBA9PyB,SAAC7M,GAC1B,OAAO,IAAIiH,KAAKC,aAAaR,GAAU,CACrCS,SAAU,WACVC,sBAAuB,EACvBsS,sBAAuB,IACtB1Y,OAAOhB,IA0PViB,WAnNiB,SACjB0Y,GAQI,IAPJnD,EAOG,uDAPO,CACRjS,MAAO,OACPC,IAAK,UACLC,KAAM,UACNmV,KAAM,UACNxK,OAAQ,WAsBJlF,EAAO,IAAIC,KAAKwP,GACtB,OAAO,IAAI1S,KAAKoD,eAAe3D,GAAU8P,GAASxV,OAAOkJ,IAsLzDqP,8BACAN,eACAvT,eAxEqB,WACrB5Q,GAAY,CACV5F,IAAK,mBACLyF,KAAM,CAAE0K,IAAK3E,OAsEfmd,mBAlEyB,SAACjoB,GAC1BkF,GAAY,CACV5F,IAAK,wBACLyF,KAAM,CAAE/E,GAAIA,MAgEdmZ,cAvHoB,WAAkB,IAAjB8Q,EAAgB,uDAAN,EAC/B7E,GAAkB,MAClBQ,GAAyB,MACzBE,GAA8B,GAC9BJ,GAAoB,MACpBxgB,GAAY,CACV5F,IAAK,sBACLyF,KAAM,CAAE0K,IAAK3E,GAAeof,KAAMD,EAASE,MAAO1R,MAEpD8M,GAAwB0E,IA+GxB7Q,oBA5G0B,SAACQ,GAA+C,IAAlCwQ,EAAiC,uDAAtB,KAAMH,EAAgB,uDAAN,EAWnE,OARiB,OAAbG,IACF3E,GAAkB2E,GAClBrE,GAAwB,OAE1BJ,GAAoB,MACpBC,GAAyB,MACzBE,GAA8BmE,GAC9BvE,GAAoB9L,GACb1U,GAAY,CACjB5F,IAAK,wBACLyF,KAAM,CACJ6U,YAAaA,EACbsQ,KAAMD,EACNE,MAAOnR,OA6FXK,uBAxF6B,SAACrH,GAAiC,IAArBoY,EAAoB,uDAAT,KAMrD,OALiB,OAAbA,GAEFrE,GAAwB/T,GAE1BuB,GAAuB,MAChBrO,GAAY,CACjB5F,IAAK,2BACLyF,KAAM,CAAEiN,WAAYA,MAiFtBgL,cArJoB,SAACiN,GACrB5F,GAAc,MACdnf,GAAY,CACV5F,IAAK,iBACLyF,KAAM,CAAEmlB,KAAMD,EAASE,MAAOrN,MAEhC6H,GAAwBsF,IAgJxB9Y,gBA7IsB,SAAC8Y,GACvB3F,GAAgB,MAChBpf,GAAY,CACV5F,IAAK,mBACLyF,KAAM,CAAEmlB,KAAMD,EAASE,MAAOjZ,GAAqBzB,IAAK3E,MAE1D8Z,GAA0BqF,IAwI1B/U,UArIgB,SAAC+U,GACjB1F,GAAU,MACVrf,GAAY,CACV5F,IAAK,aACLyF,KAAM,CAAEmlB,KAAMD,EAASE,MAAOlV,GAAexF,IAAK3E,MAEpD+Z,GAAoBoF,IAgIpBjT,kBAlQwB,SAACqT,EAAcC,GACvC,IAKEC,EAJY,IAAIlT,KAAKC,aAAagT,EAAQ,CACxCjnB,MAAO,WACPyU,SAAU,QAEY0S,cALhB,YAMRC,EAAQ,GACRC,EAAU,GACV5S,EAAW,GAmBb,OAhBAyS,EAAYI,SAAQ,SAAUzL,GAC5B,OAAQA,EAAElX,MACR,IAAK,QACHyiB,EAAQvL,EAAEzU,MACV,MACF,IAAK,UACHigB,EAAUxL,EAAEzU,MACZ,MACF,IAAK,WACHqN,EAAWoH,EAAEzU,UAOZmgB,WACLP,EACGne,QAAQ,IAAIL,OAAO,KAAO4e,EAAO,KAAM,IACvCve,QAAQ,IAAIL,OAAO,KAAO6e,GAAU,KACpCxe,QAAQ,IAAIL,OAAO,KAAOiM,EAAU,KAAM,MAmO/C9M,WAlCiB,WACjB,MAAO,OAkCPC,aA/BmB,WACnB,MAAO,WAyCT3K,EAAK8mB,GAAG,mBAAmB,SAAUjE,GACnC0D,GAAY1D,MAOd,IAAM+E,GAAa,SAAC2C,GAClBjV,GAAciV,IAuIV7b,GAAsB,CAC1BkZ,cACA4C,SAxHe,SAAC/lB,GAGhB,OAAOG,GAAY,CAAE5F,IAAK,gBAAiByF,UAsH3C0Z,iBAnHuB,WACnB5d,IACJgH,QAAQC,IAAI,wBAEZyb,GAAc,GACd3N,GAAc,eAgHd8L,qBA9F2B,SAAC1hB,GAE5B8mB,GAAgB9mB,IA6FhB+qB,kBA1FwB,aA2FxBC,WAnFiB,SAACjmB,GAGlBG,GAAYH,IAmFZmT,sBA1E4B,SAACnT,GAG7BG,GAAYH,IAyEZkmB,SA3De,WAIf,IAAIlmB,EAAO,CACXA,QAAe,OACfA,EAAK4e,SAAWA,EL13BM,SAAC5e,EAAM+e,GAA4B,IAAnBjjB,EAAkB,wDACtDA,GAAOgH,QAAQC,IAAR,uBAAoC/C,EAAM+e,GACrDzB,GAAOM,KAAP,cAA2B,CAEzB5d,KAAMA,EAEN+e,QAASA,EACTxkB,IAAK,gBKo3BL4rB,CAAWnmB,EAAM+e,EAASjjB,GAG1BqjB,GAAY,GAGZG,GAAc,MACdC,GAAgB,MAChBC,GAAU,MACV1O,GAAiB,WACjBuL,GAAyB,MACzB+D,GAAiB,MACjBxP,GAAe,MACfmR,GAAgB,QAChBrC,GAAqB,MACrBQ,GAAY,MACZG,GAAkB,MAClBI,IAAwB,GACxBC,GAAkB,MAClBE,GAAoB,MACpBI,GAAwB,MACxBxS,GAAuB,MACvBwT,GAAoB,IACpBP,GAA+B,MAC/BE,GAA2B,MAE3BM,GAAS,MACTC,GAAQ,OA0BRjE,aArBmB,WAEnBoG,OA0BF5hB,qBAAU,WAeR,OAT6B,OAAzB6hB,GAAY,WACdjf,OAAOC,aAAa8gB,QACpBtjB,QAAQC,IAAI,0BAOP,eAKN,IAKHN,qBAAU,WACR,GAAgB,OAAZsc,EAAJ,CACA,IAAI/e,EAAO,CACXA,QAAe,SACfA,EAAK4e,SAAWA,ELh+BQ,SAAC5e,EAAM+e,GAA4B,IAAnBjjB,EAAkB,wDAExDA,GAAOgH,QAAQC,IAAR,yBAAsC/C,EAAM+e,GAEvDzB,GAAOM,KAAP,gBAA6B,CAC3B5d,KAAMA,EACN+e,QAASA,EACTxkB,IAAK,kBK09BL8rB,CAAarmB,EAAM+e,EAASjjB,MAE3B,CAACijB,IAQJtc,qBAAU,cAMP,CAACwc,IAKJxc,qBAAU,cAUP,CAACqD,IAiBJrD,qBAAU,cAIP,CAACsD,KAKJtD,qBAAU,WACmB,OAAvB2e,IAEJwD,GAA2Bpf,KAAKC,MAAM2b,OAGrC,CAACA,KAUJ3e,qBAAU,WAC4B,OAAhC+e,IAKJ2B,GAAW,eAGV,CAAC3B,KAKJ/e,qBAAU,WAC2B,OAA/B6e,IAxc2B,SAAC,GAAsB,IAApBuD,EAAmB,EAAnBA,MAAO/a,EAAY,EAAZA,MAEzC6X,GAA2B7X,GAC3B3J,GAAY,CACV5F,IAAK,gCACLyF,KAAM,CAAE6kB,QAAO/a,WAucjBwc,CAAyB9gB,KAAKC,MAAM6b,OAGnC,CAACA,KAviCe,OAurBO,SAACxb,GACzB,MAAO,CACLygB,aAAczgB,EACV,oCACA,eACJ0gB,WAAY1gB,EACR,gCACA,wBA2W6B2gB,CAAkB3gB,GAA/CygB,GAziCW,GAyiCXA,aAAcC,GAziCH,GAyiCGA,WAKhBtT,GAAU,CACdhT,iBACA+B,iBACA7B,mBACA6J,wBAGIyc,GAAW5gB,EAAW,MAAQ,SAEpC,OACE,oCACE,kBAAC,IAAD,KAjXoB,OAAfmb,GAAsB,GAAK,kBAAC,IAAD,CAAU3V,MAAI,EAACwa,GAAI7E,KAoXjD,yBAAKvjB,UAAWgpB,GAAUpoB,MAAO,IAI/B,yBAAKZ,UAAW6oB,GAAcjoB,MAAO,IAInC,yBAAKZ,UAAU,oBAAoBY,MAAO,CAAEgD,OAAQ,UAKpD,yBAAK5D,UAAW8oB,IAId,yBAAKloB,MAAO,CAAEgD,OAAQ,UAKtB,6BACE,kBAAC,GAAD,CAAOtB,KAAMkT,MAMf,kBAAC,IAAD,KAIE,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,IACLpU,UAAW,WACT,OAAO9B,EAAW6gB,GAAQzT,IAAW0T,GAAM1T,OAO/C,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,WACLpU,UAAW,WACT,OAAOgf,GAAM1T,OAOjB,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,WACLpU,UAAW,WACT,OAAOif,GAAO3T,OAOlB,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,kBACLpU,UAAW,WACT,OInqCL,SAACjL,GAId,IAKMU,EAAQjC,OAAOkC,OALN,CAAEqE,UAAW,iBAKUhF,GAM9B0kB,EAA0BhkB,EAAM4E,cAAhCof,sBACAiD,EAAgBjnB,EAAM+C,gBAAtBkkB,YAMAppB,EAAMqF,YAAe,CAAClD,EAAMsE,YAA5BzG,EASF2pB,EAAQP,EAAY,SACpBxa,EAAQwa,EAAY,SAK1B7hB,qBAAU,WACM,OAAVoiB,GAA4B,OAAV/a,GAEtBuX,EACE7b,KAAKK,UAAU,CACbgf,QACA/a,aAIH,IAoCH,OAAO,oCA3BY,OAAV+a,EACL,oCACE,4BAAK3pB,EAAE,6DACP,6BACA,2BACGA,EACC,4EAKN,yBAAKwC,UAAU,eACb,kBAAC0F,EAAA,EAAD,CACEC,GAAG,OACHC,UAAU,SACVC,KAAK,KACLC,KAAK,SACLC,cAAY,OACZC,QAAQ,MJylCSojB,CAAc5T,OAOzB,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,YACLpU,UAAW,WACT,OK3qCL,SAACjL,GAId,IASMU,EAAQjC,OAAOkC,OATN,CACbqE,UAAW,iBACXD,QAAS,kBACToI,MAAO,MAM6BnN,GAbf,EAqBnBU,EAAM6C,cAFRshB,EAnBqB,EAmBrBA,4BACAE,EApBqB,EAoBrBA,wBAGMvhB,EAAgB9C,EAAM+C,gBAAtBD,YAMAjF,EAAMqF,YAAe,EACK,IAAhCihB,EAAuC,SAAW,mBAD5CtmB,EA7Be,EAoCuBmF,oBAAS,GApChC,mBAoChBwW,EApCgB,KAoCCC,EApCD,KA+CjBG,EAAiB,WACrBH,GAAoBD,IAMhBtQ,EAASC,IAAW,CACxB6Q,SAAU7Q,MAEPE,SAASxL,EAAE,yBACXkP,IAAI,EAAGlP,EAAE,0BAET2L,QACC,mEACA3L,EAAE,2BAoER,OAAoC,IAAhCsmB,EAGA,kBAAC,IAAD,CACE5Z,UAjEqB,SAAC,GAAD,IACzBC,EADyB,EACzBA,aACAC,EAFyB,EAEzBA,aAEAC,GAJyB,EAGzBC,WAHyB,EAIzBD,QACAE,EALyB,EAKzBA,QAGAC,GARyB,EAMzBC,QANyB,EAOzBC,aAPyB,EAQzBF,QARyB,OAUzB,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAACxG,SAAU8F,GAEzB,kBAACS,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,iBACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACE5F,KAAM4T,EAAkB,OAAS,WACjC1N,YAAajO,EAAE,kBACfsD,KAAK,WACLkH,MAAOqC,EAAOsP,SACdvO,SAAUhB,EAEViB,YAAab,EAAOmP,UAAYpP,EAAQoP,WAE1C,kBAACpO,EAAA,EAAWuO,OAAZ,KACE,kBAACvO,EAAA,EAAWN,KAAZ,CACE1N,GAAG,mBACHoD,QAAS4Y,EACT3Y,MAAO,CACLoT,OAAQ,YAGTmF,EACC,kBAACY,GAAA,EAAD,CACE/H,SAAS,QACTpR,MAAO,CAAEC,MAAO,iBAGlB,kBAACmZ,GAAA,EAAD,CAAYhI,SAAS,QAAQpR,MAAO,CAAEC,MAAO,mBAKnD,kBAAC+J,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAOmP,YAKd,kBAAC3N,EAAD,iBACM/M,EADN,CAEE8E,QAASvG,EAAE,UACXwG,QAASrE,EAAMqE,QACfC,UAAWtE,EAAMsE,eAajBgI,iBAAkBpD,EAClBxE,SA/FW,SAAC/B,GAGhB,OAFAA,EAAK8J,MAAQ4X,EAENvhB,EAAY,CAAE5F,IAAK8C,EAAMqE,QAAS1B,UA6FrCgK,cAAe,CACbqN,SAAU,MAMT,oCAAGnc,EAAE,wBL2hCW6rB,CAAe7T,OAO1B,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,WACLpU,UAAW,WACT,OAAO9B,EAAW6gB,GAAQzT,IAAW0T,GAAM1T,OAO/C,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,YACLpU,UAAW,WACT,OAAO9B,EAAW6gB,GAAQzT,IAAW0T,GAAM1T,OAO/C,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,YACLpU,UAAW,WACT,OM5tCL,SAACjL,GAId,IAKMU,EAAQjC,OAAOkC,OALN,GAKuBX,GAK9BzB,EAAMqF,YAAe,UAArBrF,EAde,EAqBKmC,EAAM6C,cAA1B4D,EArBe,EAqBfA,MAAOiO,EArBQ,EAqBRA,SACP+P,EAAgBzkB,EAAM4E,cAAtB6f,YACA5f,EAAgB7E,EAAM+C,gBAAtB8B,YACAgkB,EAAa7oB,EAAM4M,oBAAnBic,SA6BR,OAjBAzjB,qBAAU,WAIR,IAAMukB,EAAYljB,EACZmjB,EAAelV,EAErBmU,IAEApE,EAAYmF,GAEM,OAAdD,GACF9kB,EAAY8kB,EAAW,WAGxB,IAGD,oCACE,4BAAK9rB,EAAE,iBACP,6BAEA,6BACA,uBAAGwC,UAAU,eACX,uBAAGS,KAAK,KAAKjD,EAAE,cNgqCIgsB,CAAOhU,OAOlB,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,SACLpU,UAAW,WACT,OOztCL,SAACjL,GAId,IAKMU,EAAQjC,OAAOkC,OALN,CAAEqE,UAAW,gBAAiBD,QAAS,kBAKhB/E,GAK9BoV,EAAa1U,EAAM6C,cAAnB6R,SACAwP,EAAkClkB,EAAM4E,cAAxCsf,8BAfe,EAgBclkB,EAAM+C,gBAAnCD,EAhBe,EAgBfA,YAAamkB,EAhBE,EAgBFA,YAMbppB,EAAMqF,YAAelD,EAAMsE,WAA3BzG,EAEF2pB,EAAQP,EAAY,SACpBxa,EAAQwa,EAAY,SAK1B7hB,qBAAU,WACM,OAAVoiB,GAA4B,OAAV/a,GAEtByX,EACE/b,KAAKK,UAAU,CACbgf,QACA/a,aAIH,IAUH,IAYMvD,EAASC,IAAW,CACxBsD,MAAOtD,MAEJsD,MAAM5O,EAAE,0BACRwL,SAASxL,EAAE,wBAwDhB,OAAiB,OAAV2pB,EACL,kBAAC,IAAD,CACEjd,UAvDsB,SAAC,GAAD,IACxBC,EADwB,EACxBA,aACAC,EAFwB,EAExBA,aAEAC,GAJwB,EAGxBC,WAHwB,EAIxBD,QACAE,EALwB,EAKxBA,QAGAC,GARwB,EAMxBC,QANwB,EAOxBC,aAPwB,EAQxBF,QARwB,OAUxB,kBAACI,EAAA,EAAD,CAAMC,YAAU,EAACxG,SAAU8F,GACzB,4BAAK3M,EAAE,mBAGP,kBAACoN,EAAA,EAAKE,MAAN,CAAYC,UAAU,yBACpB,kBAACH,EAAA,EAAKI,MAAN,KAAaxN,EAAE,kBACf,kBAAC+N,EAAA,EAAD,KACE,kBAACX,EAAA,EAAKO,QAAN,CACEM,YAAajO,EAAE,eACfsD,KAAK,QACLkH,MAAOqC,EAAO+B,MACdhB,SAAUhB,EAEViB,YAAab,EAAO4B,OAAS7B,EAAQ6B,QAEvC,kBAACxB,EAAA,EAAKO,QAAQG,SAAd,CAAuB/F,KAAK,WACzBiF,EAAO4B,SAKd,kBAACxB,EAAA,EAAKE,MAAN,CAAYC,UAAU,4BACpB,kBAACiB,EAAD,iBACM/M,EADN,CAEE8E,QAASvG,EAAE,UACXwG,QAASrE,EAAMqE,QACfC,UAAWtE,EAAMsE,gBAoBrBgI,iBAAkBpD,EAClBxE,SA5Ea,SAAC/B,GAEhBA,EAAK+R,SAAWA,EAChB5R,EAAY,CACV5F,IAAK8C,EAAMqE,QACX1B,KAAMA,KAwENgK,cAAe,CACbF,MAAO,MAIX,yBAAKpM,UAAU,eACb,kBAAC0F,EAAA,EAAD,CACEC,GAAG,OACHC,UAAU,SACVC,KAAK,KACLC,KAAK,SACLC,cAAY,OACZC,QAAQ,KP8kCWyjB,CAAcjU,OAOzB,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,wBACLpU,UAAW,WACT,OAAO+e,GAAQzT,OAOnB,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,yBACLpU,UAAW,WACT,OAAO+e,GAAQzT,OAOnB,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,eACLpU,UAAW,WACT,OAAO+e,GAAQzT,OAOnB,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,WACLpU,UAAW,WACT,OAAO+e,GAAQzT,OAOnB,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,YACLpU,UAAW,WACT,OAAO+e,GAAQzT,OAOnB,kBAAC,IAAD,CACE6I,OAAK,EACLC,KAAK,WACLpU,UAAW,WACT,OAAO+e,GAAQzT,QAQrB,yBAAKxV,UAAU,eACb,kBAAC0pB,GAAqBlU,WQhzCvB,I,OAAA,WAEb,OACE,oCACE,yBAAKxV,UAAU,aACb,yBAAKA,UAAU,sBCAvB2pB,IAASC,OACP,kBAAC,WAAD,CAAUC,SAAU,kBAAC,GAAD,OAClB,kBAAC,GAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.bc94f028.chunk.js","sourcesContent":["var map = {\n\t\"./document.css\": [\n\t\t269,\n\t\t7,\n\t\t5\n\t],\n\t\"./en/PrivacyPolicy\": [\n\t\t201,\n\t\t9,\n\t\t0\n\t],\n\t\"./en/PrivacyPolicy.js\": [\n\t\t201,\n\t\t9,\n\t\t0\n\t],\n\t\"./en/UserAgreement\": [\n\t\t202,\n\t\t9,\n\t\t1\n\t],\n\t\"./en/UserAgreement.js\": [\n\t\t202,\n\t\t9,\n\t\t1\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[2]).then(function() {\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 229;\nmodule.exports = webpackAsyncContext;","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nimport Backend from \"i18next-xhr-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\n// not like to use this?\r\n// have a look at the Quick start guide\r\n// for passing in lng and translations on init\r\n\r\ni18n\r\n  // load translation using xhr -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-xhr-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    fallbackLng: \"lv\",\r\n    debug: false,\r\n    // lng: \"lv\",\r\n    ns: [\"LogIn\", \"SignUp\"],\r\n    defaultNS: \"Default\",\r\n    keySeparator: false,\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n    react: {\r\n      wait: false,\r\n      withRef: false,\r\n      bindI18n: \"languageChanged loaded\",\r\n      bindStore: \"added removed\",\r\n      nsMode: \"default\",\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","const dev = {\r\n  uri: {\r\n    ENDPOINT: \"http://localhost:9000\",\r\n    // ENDPOINT: \"http://192.168.2.100:9000\"\r\n  },\r\n};\r\n\r\nconst dev2 = {\r\n  uri: {\r\n    ENDPOINT: \"http://192.168.2.100:5000\",\r\n  },\r\n};\r\n\r\nconst staging = {\r\n  uri: {\r\n    ENDPOINT: \"https://dev.zime.lv\",\r\n  },\r\n};\r\n\r\nconst prod = {\r\n  uri: {\r\n    ENDPOINT: \"https://zime.lv\",\r\n  },\r\n};\r\n\r\nconst hostname = window && window.location && window.location.hostname;\r\n\r\nlet config;\r\nswitch (hostname) {\r\n  case \"localhost\":\r\n    config = dev;\r\n    break;\r\n  case \"192.168.2.100\":\r\n    config = dev2;\r\n    break;\r\n  case \"dev.zime.lv\":\r\n    config = staging;\r\n    break;\r\n  case \"zime.lv\":\r\n    config = prod;\r\n    break;\r\n  default:\r\n    config = dev;\r\n    break;\r\n}\r\n\r\nexport default {\r\n  ...config,\r\n};\r\n","import \"./Card.css\";\r\nimport React, { cloneElement } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n// import { Container, Row, Col, Button } from \"react-bootstrap\";\r\n// import Button from \"react-bootstrap/Button\";\r\n\r\nexport default (args) => {\r\n  let defaults = {\r\n    title: \"Untitled\",\r\n    navigation: undefined,\r\n    footer: undefined,\r\n    header: true,\r\n    body: true,\r\n    headerContent: null,\r\n    onNavigationClick: () => {},\r\n  };\r\n  let props = Object.assign(defaults, args);\r\n\r\n  let key = 0;\r\n\r\n  let footer = props.footer ? <Card.Footer>{props.footer}</Card.Footer> : \"\";\r\n\r\n  return (\r\n    <Card>\r\n      {/* <Card.Img variant=\"top\" src=\"holder.js/100px180?text=Image cap\" /> */}\r\n      {props.header && (\r\n        <Card.Header className=\"custom-card\">\r\n          {props.headerContent !== null ? (\r\n            props.headerContent\r\n          ) : (\r\n            <>\r\n              <Card.Title>{props.title}</Card.Title>\r\n              <Nav\r\n                variant=\"tabs\"\r\n                defaultActiveKey={props.navigationdefaultActiveKey}\r\n              >\r\n                {props.navigation &&\r\n                  props.navigation.map((item, key) => (\r\n                    <Nav.Item key={key}>\r\n                      <Nav.Link\r\n                        className=\"custom-card\"\r\n                        href={item.link}\r\n                        onClick={() => props.onNavigationClick(item.link)}\r\n                        style={{ color: \"black\" }}\r\n                      >\r\n                        {item.name}\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                  ))}\r\n              </Nav>\r\n            </>\r\n          )}\r\n        </Card.Header>\r\n      )}\r\n\r\n      {props.body && (\r\n        <Card.Body className=\"custom-card\">\r\n          {React.Children.map(args.children, (child) => {\r\n            if (typeof child !== \"object\") {\r\n              return child;\r\n            } else {\r\n              key++;\r\n              return cloneElement(child, {\r\n                styles: null,\r\n                key: key,\r\n              });\r\n            }\r\n          })}\r\n        </Card.Body>\r\n      )}\r\n      {footer}\r\n    </Card>\r\n  );\r\n};\r\n","import React, { useCallback, useMemo, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nimport { Figure } from \"react-bootstrap\";\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  padding: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  backgroundColor: \"#fafafa\",\r\n  color: \"#bdbdbd\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\n/**\r\n * App: Dropzone\r\n */\r\nexport default (args) => {\r\n  // console.log(\"DROPZONE\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args.data);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  let { accountPhotoPath } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [, setFiles] = useState(null);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(\"AccountRegistration\");\r\n\r\n  // let setFieldValue = data.setFieldValue;\r\n  // let data = args.data;\r\n\r\n  // let accountPhotoPath = data.accountPhotoPath;\r\n  if (accountPhotoPath !== \"\") {\r\n    baseStyle.padding = 0;\r\n    baseStyle.borderStyle = \"none\"; // \"solid\";\r\n    baseStyle.backgroundColor = \"none\";\r\n  }\r\n\r\n  // const [thisData] = useState(data);\r\n  // console.log(\"THIS DATA =====\");\r\n\r\n  // console.log(data);\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    // console.log(getRootProps());\r\n\r\n    // args.onDrop(1);\r\n    // args.context.dropzoneUntouched = false;\r\n\r\n    setFiles(acceptedFiles);\r\n    // sendRequest({\r\n    //   req: \"upload file\",\r\n    //   data: { acceptedFiles: acceptedFiles },\r\n    // });\r\n    let data = { acceptedFiles: acceptedFiles };\r\n    sendRequest({ req: \"upload file\", data: data });\r\n    // setFieldValue(1);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const {\r\n    // acceptedFilesItems,\r\n    // rejectedFilesItems,\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({\r\n    accept: \"image/*\",\r\n    onDrop,\r\n  });\r\n\r\n  // const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n  // const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n  //   onDrop\r\n  // });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragAccept, isDragReject]\r\n  );\r\n\r\n  if (accountPhotoPath === \"\") {\r\n    return (\r\n      <div className=\"container\">\r\n        <div {...getRootProps({ style })}>\r\n          <input {...getInputProps()} />\r\n          <p>{t(\"Click to select the image file\")}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    // accountPhotoPath = \"http://localhost:9000/\" + accountPhotoPath;\r\n    accountPhotoPath = \"gfx/photo_id.png\";\r\n\r\n    return (\r\n      <>\r\n        <div className=\"container\">\r\n          <div {...getRootProps({ style })}>\r\n            <input {...getInputProps()} />\r\n            <Figure.Image\r\n              width={171}\r\n              height={180}\r\n              alt=\"171x180\"\r\n              src={accountPhotoPath}\r\n            />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState } from \"react\";\r\n// import { useTranslation } from \"react-i18next\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport { useTimeout } from \"../../utils/useTimeout\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    caption: \"Submit\",\r\n    request: null,\r\n    namespace: \"Button\",\r\n    visible: true,\r\n    marginTop: 0,\r\n    timeout: 7000, // milliseconds\r\n    onSubmit: () => {},\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { request } = props.barrelGetters;\r\n  const { setRequest } = props.barrelSetters;\r\n  const { showMessage } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  // const { t } = useTranslation([props.namespace]); // adjust namespace\r\n\r\n  const [requestExpired, setRequestExpired] = useState(false);\r\n\r\n  useTimeout(() => {\r\n    if (request !== props.request) return;\r\n    console.log(\"useTimeout\");\r\n\r\n    // Your custom logic here\r\n    // setSeconds(seconds - 1);\r\n    setRequestExpired(true);\r\n    setRequest(null);\r\n    showMessage(\"REQUEST_EXPIRED\", \"error\");\r\n  }, props.timeout);\r\n\r\n  // useEffect(() => {\r\n  //   if (requestExpired)\r\n  // }, [requestExpired]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    return !props.visible ? (\r\n      <></>\r\n    ) : (\r\n      <Button\r\n        type=\"submit\"\r\n        onClick={props.onSubmit}\r\n        block\r\n        disabled={request === props.request && !requestExpired}\r\n        style={{ marginTop: props.marginTop + \"px\" }}\r\n      >\r\n        <Spinner\r\n          as=\"span\"\r\n          animation=\"border\"\r\n          size=\"sm\"\r\n          role=\"status\"\r\n          aria-hidden=\"true\"\r\n          hidden={request !== props.request || requestExpired}\r\n        />\r\n        &nbsp;\r\n        {props.caption}\r\n        &nbsp;\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport const useTimeout = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setTimeout(tick, delay);\r\n      return () => clearTimeout(id);\r\n    }\r\n  }, [delay]);\r\n};\r\n","import React from \"react\";\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // You can also log the error to an error reporting service\r\n    // logErrorToMyService(error, errorInfo);\r\n    console.log(\"Error boundary:\", error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      //   return <h1>Something went wrong.</h1>;\r\n      return <></>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Button, Modal, Navbar, Nav } from \"react-bootstrap\";\r\nimport ErrorBoundary from \"../errorBoundary\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"ModalMessage\",\r\n    centered: true,\r\n    message: \"\",\r\n    title: null,\r\n    footer: null,\r\n    // bodyStyle: { padding: \"1rem\" },\r\n    onHide: () => {},\r\n    size: \"sm\",\r\n    file: null,\r\n    backdrop: true, // \"static\"\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  const ExternalFile =\r\n    props.file !== null\r\n      ? React.lazy(() => import(`../locale/${props.file}`))\r\n      : \"\";\r\n\r\n  // async function loadExternalFile() {\r\n  //   await React.preloadLazy(ExternalFile);\r\n  // }\r\n\r\n  // loadExternalFile();\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size={props.size}\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered={props.centered}\r\n        backdrop={props.backdrop}\r\n      >\r\n        {props.title !== null && (\r\n          <Modal.Header closeButton>\r\n            <Navbar\r\n              // className=\"card-header\"\r\n              // className=\"navbar-trans\"\r\n              // bg=\"light\"\r\n              // variant=\"light\"\r\n              style={{\r\n                borderRadius: \"5px\",\r\n                background: \"transparent !important\",\r\n                // color: \"#f7f7f7\",\r\n                backgroundColor: \"\", // e8f6f3\r\n                boxShadow: \"none\",\r\n                // whiteSpace: \"nowrap\",\r\n              }}\r\n            >\r\n              <Navbar.Brand href=\"/\">\r\n                <img\r\n                  src=\"gfx/zlogo_light.png\"\r\n                  width=\"auto\"\r\n                  height=\"30\"\r\n                  className=\"d-inline-block align-top\"\r\n                  alt={t(\"Logo\")}\r\n                />\r\n              </Navbar.Brand>\r\n              <Nav className=\"mr-auto\">\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                  {props.title}\r\n                </Modal.Title>\r\n              </Nav>\r\n            </Navbar>\r\n          </Modal.Header>\r\n        )}\r\n        <Modal.Body\r\n          style={{ maxHeight: \"calc(100vh - 210px)\", overflowY: \"auto\" }}\r\n        >\r\n          {props.message !== \"\" ? (\r\n            props.message\r\n          ) : (\r\n            <ErrorBoundary>\r\n              <ExternalFile />\r\n            </ErrorBoundary>\r\n          )}\r\n        </Modal.Body>\r\n        {props.footer !== null && (\r\n          <Modal.Footer>\r\n            <Button onClick={props.onHide}>Close</Button>\r\n          </Modal.Footer>\r\n        )}\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nexport const useStickyState = (defaultValue, key) => {\r\n  const [value, setValue] = useState(() => {\r\n    const stickyValue = window.localStorage.getItem(key);\r\n    return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\r\n  });\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n  }, [key, value]);\r\n  return [value, setValue];\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport { Form, InputGroup, Alert } from \"react-bootstrap\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import ChevronRight from \"@material-ui/icons/ArrowForwardIos\";\r\nimport { KeyboardArrowRight } from \"@material-ui/icons\";\r\nimport Card from \"../card\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import { useStickyState } from \"../../utils/state\";\r\nimport Dropzone from \"../dropzone\";\r\nimport SubmitButton from \"../submitButton\";\r\nimport ModalMessage from \"../modalMessage\";\r\nimport { useStickyState } from \"../../utils/state\";\r\n\r\n// const UserAgreement = React.lazy(() => import(\"../locale/en/UserAgreement\"));\r\n\r\nexport default (args) => {\r\n  // console.log(\"ACCOUNT REGISTRATION ARGS:\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"register account\",\r\n    namespace: \"AccountRegistration\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    signedIn,\r\n    accountNumber,\r\n    accountPhotoPath,\r\n    userData,\r\n    debug,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  // const [redirect, setRedirect] = useState(false);\r\n  const [userAgreementShow, setUserAgreementShow] = useStickyState(\r\n    false,\r\n    \"userAgreementShow\"\r\n  );\r\n  const [privacyPolicyShow, setPrivacyPolicyShow] = useStickyState(\r\n    false,\r\n    \"privacyPolicyShow\"\r\n  );\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    dropzoneHook: yup.string().required(t(\"Photo ID is required\")),\r\n    terms: yup.array().required(t(\"Terms is required\")),\r\n    personalID: yup\r\n      .string()\r\n      .required(t(\"Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      )\r\n      .test({\r\n        name: \"integrity\",\r\n        exclusive: true,\r\n        params: {},\r\n        message: t(\"PersonalID must be valid\"),\r\n        test: (value) => {\r\n          if (typeof value === \"undefined\") return false;\r\n          let pid = value\r\n            .replace(\"-\", \"\")\r\n            .split(\"\")\r\n            .map(function (n) {\r\n              return parseInt(n, 10);\r\n            });\r\n          let calc =\r\n            1 * pid[0] +\r\n            6 * pid[1] +\r\n            3 * pid[2] +\r\n            7 * pid[3] +\r\n            9 * pid[4] +\r\n            10 * pid[5] +\r\n            5 * pid[6] +\r\n            8 * pid[7] +\r\n            4 * pid[8] +\r\n            2 * pid[9];\r\n          let checksum = (1101 - calc) % 11;\r\n\r\n          return checksum === pid[10];\r\n        },\r\n      }),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n\r\n  /**\r\n   * Send account registration request\r\n   * @param {object} data\r\n   */\r\n  const sendAccountRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    // data.data = userData;\r\n    // data.email = JSON.parse(userData).email;\r\n    data.email = userData.email;\r\n\r\n    return sendRequest({ req: props.request, data });\r\n    // return onAccountRegistration(data);\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    if (sendAccountRegistrationRequest(data)) {\r\n      // Account registration request was submitted\r\n    }\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   // console.log(modalMessageShow);\r\n  //   // eslint-disable-next-line\r\n  // }, [userAgreementShow]);\r\n\r\n  // const UAText = <p>Permission is hereby granted</p>;\r\n\r\n  // const userAgreement = () => {\r\n  //   let key;\r\n  //   return (\r\n  //     <div>\r\n  //       {Array(4)\r\n  //         .fill()\r\n  //         .map((_, i) => {\r\n  //           key = `AccountRegistration:User Agreement ${i + 1}`;\r\n  //           return (\r\n  //             <p key={i}>\r\n  //               <Trans i18nKey={key}>[html]</Trans>\r\n  //             </p>\r\n  //           );\r\n  //         })}\r\n  //     </div>\r\n  //   );\r\n  // };\r\n\r\n  // let dropzoneUntouched = true;\r\n\r\n  const AccountRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    setFieldValue,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <Form.Group controlId=\"validationFormikPhotoId\">\r\n        <Form.Label>{t(\"Photo ID\")}</Form.Label>\r\n\r\n        <Form.Text>\r\n          <Trans i18nKey=\"AccountRegistration:Photo ID requirements\">\r\n            Photo of me holding my passport. The personal identification number\r\n            must be clearly legible.\r\n          </Trans>\r\n        </Form.Text>\r\n\r\n        <br />\r\n        <Dropzone data={props} />\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationFormikDropzoneHook\">\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"dropzoneHook\"\r\n          value={accountPhotoPath}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.dropzoneHook}\r\n          style={{ display: \"none\" }}\r\n        />\r\n\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {errors.dropzoneHook}\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n\r\n      {false && (\r\n        <Form.Group controlId=\"validationFormikCountry\">\r\n          <Form.Label>{t(\"Country\")}</Form.Label>\r\n          <Form.Control as=\"select\" custom>\r\n            <option>Latvija</option>\r\n            <option>Deutschland</option>\r\n          </Form.Control>\r\n        </Form.Group>\r\n      )}\r\n\r\n      <Form.Group controlId=\"validationFormikPersonalId\">\r\n        <Form.Label>{t(\"Personal ID\")}</Form.Label>\r\n        <InputGroup>\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"XXXXXX-XXXXX\")}\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"personalID\"\r\n            value={values.personalID}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.personalID && touched.personalID}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.personalID}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Check\r\n          required\r\n          name=\"terms\"\r\n          label={t(\"Agree to terms and conditions\")}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.terms && touched.terms}\r\n          feedback={errors.terms}\r\n          id=\"validationFormik0\"\r\n        />\r\n      </Form.Group>\r\n\r\n      <Trans i18nKey=\"AccountRegistration:The User Agreement and the Privacy Policy\">\r\n        <KeyboardArrowRight style={{ color: \"var(--dark)\" }} />\r\n        <a href=\"#\" onMouseDown={() => setUserAgreementShow(true)}>\r\n          User Agreement\r\n        </a>\r\n\r\n        <br />\r\n\r\n        <KeyboardArrowRight style={{ color: \"var(--dark)\" }} />\r\n        <a href=\"#\" onMouseDown={() => setPrivacyPolicyShow(true)}>\r\n          Privacy Policy\r\n        </a>\r\n      </Trans>\r\n\r\n      <br />\r\n      <br />\r\n\r\n      <SubmitButton\r\n        {...args}\r\n        caption={t(\"Submit\")}\r\n        request={props.request}\r\n        namespace={props.namespace}\r\n      />\r\n    </Form>\r\n  );\r\n\r\n  if (signedIn === false)\r\n    return (\r\n      <>\r\n        <Alert variant=\"info\">\r\n          <Alert.Heading>{t(\"User not logged in\")}</Alert.Heading>\r\n          <p>\r\n            <Trans i18nKey=\"AccountRegistration:Please log in first\">\r\n              Please log in first.\r\n            </Trans>\r\n          </p>\r\n        </Alert>\r\n      </>\r\n    );\r\n\r\n  if (!debug && accountNumber !== null)\r\n    return (\r\n      <>\r\n        <Alert variant=\"info\">\r\n          <Alert.Heading>{t(\"Account successfully registered\")}</Alert.Heading>\r\n          <p>\r\n            <Trans\r\n              i18nKey=\"AccountRegistration:Account with your personal ID successfully registered\"\r\n              accountNumber={accountNumber}\r\n            >\r\n              Account with the personal ID\r\n              <strong>{{ accountNumber }}</strong>\r\n              successfully registered.\r\n            </Trans>\r\n          </p>\r\n        </Alert>\r\n      </>\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <ModalMessage\r\n        show={userAgreementShow}\r\n        file=\"en/UserAgreement\"\r\n        size=\"lg\"\r\n        centered={false}\r\n        title={t(\"User Agreement\")}\r\n        footer=\"\"\r\n        onHide={() => setUserAgreementShow(false)}\r\n      />\r\n\r\n      <ModalMessage\r\n        show={privacyPolicyShow}\r\n        file=\"en/PrivacyPolicy\"\r\n        size=\"lg\"\r\n        centered={false}\r\n        title={t(\"Privacy Policy\")}\r\n        footer=\"\"\r\n        onHide={() => setPrivacyPolicyShow(false)}\r\n      />\r\n\r\n      <Card title={t(\"Open account\")}>\r\n        <Formik\r\n          component={AccountRegistrationForm}\r\n          validationSchema={schema}\r\n          onSubmit={onSubmit}\r\n          initialValues={{\r\n            personalID: \"\",\r\n            terms: \"\",\r\n            dropzoneHook: accountPhotoPath,\r\n          }}\r\n        />\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import Card from \"../card\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const {\r\n    // format,\r\n    // parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  const { onBusinessRegistration } = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([\"BusinessRegistration\"]);\r\n\r\n  const schema = yup.object({\r\n    businessTitle: yup\r\n      .string()\r\n      .required(t(\"Business title is a required field\"))\r\n      .min(3, t(\"Business title too short\"))\r\n      .max(70, t(\"Business title too long\"))\r\n      .trim(),\r\n    businessDescription: yup.string().optional(),\r\n  });\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const registerBusiness = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n\r\n    // console.log(\"REGISTER BUSINESS DATA:\", data);\r\n\r\n    // onBusinessRegistration({ req: \"register business\", data: data });\r\n    sendRequest({ req: \"register business\", data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    registerBusiness(data);\r\n  };\r\n\r\n  const RegisterBusinessForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Business Title (Business ID) */}\r\n      <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n        <Form.Label>{t(\"Business Title\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"\"\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"businessTitle\"\r\n            value={values.businessTitle}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.businessTitle && touched.businessTitle}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.businessTitle}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Business Description */}\r\n      <Form.Group\r\n        controlId=\"businessDescription\"\r\n        name=\"businessDescription\"\r\n        value={values.businessDescription}\r\n        onChange={handleChange}\r\n      >\r\n        <Form.Label>{t(\"Business Description\")}</Form.Label>\r\n        <Form.Control as=\"textarea\" rows=\"3\" />\r\n      </Form.Group>\r\n\r\n      {/* Submit button */}\r\n      <Button type=\"submit\" block>\r\n        {t(\"Submit\")}\r\n      </Button>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterBusinessForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        businessTitle: \"\",\r\n        businessDescription: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\n// import { useTranslation } from \"react-i18next\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"Pagination\",\r\n    size: \"md\",\r\n    countItems: 0,\r\n    itemsPerPage: 5,\r\n    active: 0, // active page\r\n    onClick: () => {},\r\n    align: \"center\",\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  const pages = Math.ceil(props.countItems / props.itemsPerPage);\r\n\r\n  if (pages < 2) return <></>;\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  // const { t } = useTranslation([props.namespace]);\r\n\r\n  const onClick = (number) => {\r\n    // console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = props.active > 1 ? props.active - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          props.active < Math.ceil(props.countItems / props.itemsPerPage)\r\n            ? props.active + 1\r\n            : Math.ceil(props.countItems / props.itemsPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(props.countItems / props.itemsPerPage);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    // getBusinesses(number);\r\n    props.onClick(number);\r\n  };\r\n\r\n  const getPages = () => {\r\n    let items = [];\r\n    for (let number = 1; number <= pages; number++) {\r\n      if (\r\n        number === 1 ||\r\n        number === pages ||\r\n        (number >= props.active - 2 && number <= props.active + 2)\r\n      ) {\r\n        items.push(\r\n          <Pagination.Item\r\n            key={number}\r\n            active={number === props.active}\r\n            onClick={() => onClick(number)}\r\n          >\r\n            {number}\r\n          </Pagination.Item>\r\n        );\r\n      } else if (number === 2 || number === pages - 1) {\r\n        items.push(<Pagination.Ellipsis key={number} disabled />);\r\n      }\r\n    }\r\n    return items;\r\n  };\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    const { align } = props;\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          textAlign: `${align}`,\r\n          // backgroundColor: \"red\",\r\n        }}\r\n      >\r\n        <span style={{ display: \"inline-block\" }}>\r\n          <Pagination size={props.size} style={{ padding: 0, margin: 0 }}>\r\n            {pages > 5 && (\r\n              <>\r\n                <Pagination.First onClick={() => props.onClick(\"First\")} />\r\n                <Pagination.Prev onClick={() => props.onClick(\"Prev\")} />\r\n              </>\r\n            )}\r\n\r\n            {getPages()}\r\n\r\n            {pages > 5 && (\r\n              <>\r\n                <Pagination.Next onClick={() => props.onClick(\"Next\")} />\r\n                <Pagination.Last onClick={() => props.onClick(\"Last\")} />\r\n              </>\r\n            )}\r\n          </Pagination>\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport {\r\n  // Form,\r\n  // InputGroup,\r\n  // Button,\r\n  // Table,\r\n  ListGroup,\r\n  Badge,\r\n} from \"react-bootstrap\";\r\n// import { Formik } from \"formik\";\r\n// import * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\n// import SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    request: \"get transactions\",\r\n    namespace: \"Transactions\",\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const {\r\n    transactions,\r\n    countTransactions,\r\n    activePageTransactions,\r\n    transactionsPerPage,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  // const { setActivePageTransactions } = props.barrelSetters;\r\n  const {\r\n    // getReviser,\r\n    // getWorkplace,\r\n    // sendRequest,\r\n    getTransactions,\r\n    format,\r\n    formatDate,\r\n    formatPerCent,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  const onPageSelect = (number) => {\r\n    // console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageTransactions > 1 ? activePageTransactions - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageTransactions <\r\n          Math.ceil(countTransactions / transactionsPerPage)\r\n            ? activePageTransactions + 1\r\n            : Math.ceil(countTransactions / transactionsPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countTransactions / transactionsPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getTransactions(number);\r\n  };\r\n\r\n  let cnt = 0;\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return (\r\n    <>\r\n      <ListGroup variant=\"flush\">\r\n        {transactions !== null &&\r\n          transactions.map((transaction, keyTransactions) => {\r\n            cnt++;\r\n\r\n            const {\r\n              // business_description,\r\n              // business_id,\r\n              // business_image,\r\n              // business_link,\r\n              // business_status,\r\n              business_title,\r\n              // comment,\r\n              conv_amount,\r\n              created,\r\n              // currency,\r\n              // exchange_rate,\r\n              sender_firstname,\r\n              sender_lastname,\r\n              // recipient_firstname,\r\n              // recipient_lastname,\r\n              // purpose_description,\r\n              purpose_id,\r\n              // purpose_image,\r\n              // purpose_link,\r\n              // purpose_status,\r\n              purpose_title,\r\n              recipient_id,\r\n              roles,\r\n              share,\r\n              share_per_cent,\r\n              // sender_id,\r\n              // sender_status,\r\n              // recipient_status,\r\n              // to_account,\r\n              type,\r\n            } = transaction;\r\n\r\n            // const i_am_sender = sender_id === accountNumber;\r\n            const i_am_recipient = recipient_id === accountNumber;\r\n\r\n            const roles_available =\r\n              roles !== null && roles !== \"-\" && typeof roles !== \"undefined\";\r\n            const arrRoles = roles_available ? roles.split(\",\") : [];\r\n\r\n            const shares_available =\r\n              typeof share !== \"undefined\" && share !== null && share !== \"-\";\r\n\r\n            if (type === \"transfer U2S\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {sender_firstname} {sender_lastname}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n            } else if (type === \"transfer U2U\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {sender_firstname} {sender_lastname}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n            } else if (type === \"transfer U2B\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {purpose_id}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  {business_title} &middot; {purpose_title}\r\n                  <br />\r\n                  {sender_firstname} {sender_lastname}\r\n                  {roles_available && (\r\n                    <>\r\n                      <br />\r\n                      {arrRoles.map((role, key) => {\r\n                        return (\r\n                          <span key={key}>\r\n                            {\" \"}\r\n                            <Badge pill variant=\"secondary\">\r\n                              {role}\r\n                            </Badge>\r\n                          </span>\r\n                        );\r\n                      })}\r\n                    </>\r\n                  )}{\" \"}\r\n                  {shares_available && (\r\n                    <>\r\n                      <br />\r\n                      {share} {t(\"shares\")} ({formatPerCent(share_per_cent)})\r\n                    </>\r\n                  )}\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n\r\n              // TODO: check if this works\r\n            } else {\r\n              console.log(\"Unknown transfer type\");\r\n\r\n              return <></>;\r\n            }\r\n          })}\r\n      </ListGroup>\r\n      {cnt === 0 && (\r\n        <p className=\"text-center text-muted\">{t(\"No transactions\")}</p>\r\n      )}\r\n      <br />\r\n\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countTransactions / transactionsPerPage)}\r\n        active={activePageTransactions}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState, useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, Toast, Badge } from \"react-bootstrap\";\r\nimport { Settings } from \"@material-ui/icons\";\r\nimport _ from \"lodash\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"Shareholder\",\r\n    request: \"change share\",\r\n    purpose: null,\r\n    shareholder: null,\r\n    closeButton: true,\r\n    rangeControl: true,\r\n    sharePerCent: null,\r\n    businessTitle: null,\r\n    purposeTitle: null,\r\n    businessOwnerFirstname: null,\r\n    businessOwnerLastname: null,\r\n    sharesCreated: null,\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { purposeShareholders } = props.barrelGetters;\r\n  const { setPurposeShareholders } = props.barrelSetters;\r\n  const { sendRequest, formatPerCent, formatDate } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const [userQuery, setUserQuery] = useState(props.share);\r\n  const delayedQuery = useRef(_.debounce((q) => sendQuery(q), 2000)).current;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  const onChange = (e) => {\r\n    // console.log(props.shareholder, e.target.value);\r\n    setUserQuery(e.target.value);\r\n    delayedQuery(e.target.value);\r\n  };\r\n\r\n  const onClose = () => {\r\n    // console.log(\"delete\", props.purpose, props.shareholder);\r\n    let data = {};\r\n    data.purpose_id = props.purpose;\r\n    data.shareholder_id = props.shareholder;\r\n    return sendRequest({ req: \"remove shareholder\", data });\r\n  };\r\n\r\n  const sendQuery = (delayedQuery) => {\r\n    // console.log(props.purpose, props.shareholder, delayedQuery);\r\n    const ps = purposeShareholders;\r\n    ps[props.id].share = delayedQuery;\r\n    setPurposeShareholders(JSON.stringify(ps));\r\n    let data = {};\r\n    data.purpose_id = props.purpose;\r\n    data.shareholder_id = props.shareholder;\r\n    data.share = delayedQuery;\r\n    // console.log(data);\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    const sharesLabelId = `sharesLabel${props.key}`;\r\n    return (\r\n      <Toast key={props.key} onClose={onClose} style={{ minWidth: \"100%\" }}>\r\n        <Toast.Header closeButton={props.closeButton}>\r\n          <strong className=\"mr-auto\">\r\n            {props.firstname} {props.lastname}{\" \"}\r\n            <small>\r\n              <Settings\r\n                hidden={true}\r\n                fontSize=\"small\"\r\n                style={{ color: \"var(--dark)\" }}\r\n              />\r\n            </small>\r\n          </strong>\r\n          <small>\r\n            <span id={sharesLabelId}>{userQuery}</span> {t(\"shares\")}\r\n          </small>\r\n        </Toast.Header>\r\n        <Toast.Body>\r\n          <Form>\r\n            <Form.Group controlId=\"formRoles\">\r\n              <div>\r\n                {props.roles.map((role, key) => {\r\n                  return (\r\n                    <span key={key}>\r\n                      <Badge pill variant=\"secondary\">\r\n                        {role}\r\n                      </Badge>{\" \"}\r\n                    </span>\r\n                  );\r\n                })}\r\n              </div>\r\n            </Form.Group>\r\n\r\n            {props.rangeControl && (\r\n              <Form.Group controlId=\"formBasicRange\">\r\n                <Form.Control\r\n                  type=\"range\"\r\n                  variant=\"light\"\r\n                  // value={share}\r\n                  defaultValue={userQuery}\r\n                  // value={userQuery}\r\n                  min={0}\r\n                  max={1000}\r\n                  step={1}\r\n                  // ref={this.input}\r\n                  onChange={onChange}\r\n                />\r\n              </Form.Group>\r\n            )}\r\n          </Form>\r\n          <span>\r\n            {props.sharePerCent !== null && formatPerCent(props.sharePerCent)}{\" \"}\r\n            {props.businessTitle !== null && props.businessTitle}{\" \"}\r\n            {props.businessTitle !== null && props.purposeTitle !== null && (\r\n              <> &middot; </>\r\n            )}\r\n            {props.purposeTitle !== null && props.purposeTitle}{\" \"}\r\n          </span>\r\n          {props.sharesCreated !== null && (\r\n            <>\r\n              <br />\r\n              {formatDate(props.sharesCreated, {\r\n                month: \"long\",\r\n                day: \"numeric\",\r\n                year: \"numeric\",\r\n              })}\r\n            </>\r\n          )}{\" \"}\r\n          {(props.businessOwnerFirstname !== null ||\r\n            props.businessOwnerLastname !== null) && <br />}\r\n          {props.businessOwnerFirstname !== null &&\r\n            props.businessOwnerFirstname}{\" \"}\r\n          {props.businessOwnerLastname !== null && props.businessOwnerLastname}{\" \"}\r\n        </Toast.Body>\r\n      </Toast>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\n// import { Form, InputGroup, Button, Table, ListGroup } from \"react-bootstrap\";\r\n// import { Formik } from \"formik\";\r\n// import * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n// import Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\n// import Card from \"../card\";\r\n// import SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\nimport Shareholder from \"../shareholder\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    request: \"get shares\",\r\n    namespace: \"Shares\",\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  const {\r\n    shares,\r\n    countShares,\r\n    activePageShares,\r\n    sharesPerPage,\r\n    // accountNumber,\r\n    userData,\r\n  } = props.barrelGetters;\r\n  // const {  } = props.barrelSetters;\r\n  const {\r\n    // getReviser,\r\n    // getWorkplace,\r\n    // sendRequest,\r\n    getShares,\r\n    // format,\r\n    // formatPerCent,\r\n    // formatDate,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n     * Functions\r\n     ============================================================================ */\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  const onPageSelect = (number) => {\r\n    console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageShares > 1 ? activePageShares - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageShares < Math.ceil(countShares / sharesPerPage)\r\n            ? activePageShares + 1\r\n            : Math.ceil(countShares / sharesPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countShares / sharesPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getShares(number);\r\n  };\r\n\r\n  let cnt = 0;\r\n\r\n  /**\r\n     * Return\r\n     ============================================================================ */\r\n  return (\r\n    <>\r\n      {shares !== null &&\r\n        shares.map((share, keyShares) => {\r\n          cnt++;\r\n\r\n          const {\r\n            // business_description,\r\n            // business_id,\r\n            // business_image,\r\n            // business_link,\r\n            // business_status,\r\n            business_title,\r\n            owner_firstname,\r\n            owner_lastname,\r\n            // owner_status,\r\n            // owner_uid,\r\n            // purpose_description,\r\n            purpose_id,\r\n            // purpose_image,\r\n            // purpose_link,\r\n            // purpose_status,\r\n            purpose_title,\r\n            shareholder_id,\r\n            shares_created,\r\n            // shares_description,\r\n            share_per_cent,\r\n            shares_roles,\r\n            shares_share,\r\n            // shares_status,\r\n            // shares_title,\r\n          } = share;\r\n\r\n          const arrRoles = shares_roles !== null ? shares_roles.split(\",\") : [];\r\n          // const content = `${owner_firstname} ${owner_lastname} / ${formatDate(\r\n          //   shares_created\r\n          // )}`;\r\n\r\n          // console.log(\"keyShares:\", keyShares);\r\n\r\n          return (\r\n            <Shareholder\r\n              {...args}\r\n              key={keyShares}\r\n              id={keyShares}\r\n              shareholder={shareholder_id}\r\n              purpose={purpose_id}\r\n              firstname={userData.firstname}\r\n              lastname={userData.lastname}\r\n              share={shares_share}\r\n              roles={arrRoles}\r\n              closeButton={false}\r\n              rangeControl={false}\r\n              sharePerCent={share_per_cent}\r\n              businessOwnerFirstname={owner_firstname}\r\n              businessOwnerLastname={owner_lastname}\r\n              businessTitle={business_title}\r\n              purposeTitle={purpose_title}\r\n              sharesCreated={shares_created}\r\n            />\r\n          );\r\n        })}\r\n\r\n      {cnt === 0 && <p className=\"text-center text-muted\">{t(\"No shares\")}</p>}\r\n\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countShares / sharesPerPage)}\r\n        active={activePageShares}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, Badge, Accordion, Card } from \"react-bootstrap\";\r\n// import { useAccordionToggle } from \"react-bootstrap/AccordionToggle\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import Octicon, { ChevronRight } from \"@primer/octicons-react\";\r\n// import AccessAlarmIcon from \"@material-ui/icons/AccessAlarm\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\n\r\n// import ZCard from \"../card\";\r\nimport Transactions from \"../transactions\";\r\nimport Shares from \"../shares\";\r\n\r\nexport default (args) => {\r\n  // let defaults = {};\r\n  // const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userData,\r\n    accountNumber,\r\n    accordionView,\r\n    // currencyAbbr,\r\n  } = props.barrelGetters;\r\n  const {\r\n    setAccountType,\r\n    setRedirectTo,\r\n    setAccordionView,\r\n  } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    getAccountData,\r\n    getTransactions,\r\n    getShares,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // const userData = props.data.userData;\r\n  // let format = props.format;\r\n  const { t } = useTranslation(\"Balance\");\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  // console.log(\"BALANCE DATA:\", props);\r\n  // console.log(\"BALANCE userData\", userData);\r\n  // const userDataParsed = JSON.parse(userData);\r\n  const userDataParsed = userData;\r\n\r\n  // let footer = <small className=\"text-muted\">Last updated 3 mins ago</small>;\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  // const gotoNextView = () => {\r\n  //   // console.log(props);\r\n\r\n  //   // props.data.setView(\"transfer\");\r\n  //   setRedirect(true);\r\n  // };\r\n\r\n  const onAccountTypeSelected = (type) => {\r\n    // console.log(type);\r\n\r\n    setAccountType(type);\r\n    setRedirectTo(\"/transfer\");\r\n  };\r\n\r\n  // console.log(userData);\r\n  const available =\r\n    userDataParsed !== null\r\n      ? format(\r\n          userDataParsed.acc_curr +\r\n            userDataParsed.acc_cred +\r\n            userDataParsed.acc_save\r\n        )\r\n      : null;\r\n  let acc_curr =\r\n    userDataParsed !== null ? format(userDataParsed.acc_curr) : null;\r\n  let acc_cred =\r\n    userDataParsed !== null ? format(userDataParsed.acc_cred) : null;\r\n  let acc_save =\r\n    userDataParsed !== null ? format(userDataParsed.acc_save) : null;\r\n\r\n  // if (props.data.view === \"transfer\") {\r\n  //   return <Redirect push to=\"/transfer\" />;\r\n  // }\r\n\r\n  // if (redirect) {\r\n  //   // props.data.setView(\"transfer\");\r\n  //   return <Redirect push to=\"/transfer\" />;\r\n  // }\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  const ToggleBalance = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionView(\"balance\");\r\n    getAccountData();\r\n  };\r\n\r\n  const ToggleTransactions = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionView(\"transactions\");\r\n    getTransactions(1);\r\n  };\r\n\r\n  const ToggleShares = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionView(\"shares\");\r\n    getShares(1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Accordion defaultActiveKey={accordionView}>\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"balance\"\r\n            style={{\r\n              cursor: \"pointer\",\r\n              // backgroundColor: \"#e8f6f3\",\r\n            }}\r\n            onClick={ToggleBalance}\r\n          >\r\n            {t(\"Balance\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"balance\">\r\n            <Card.Body>\r\n              <Form noValidate>\r\n                <Form.Group>\r\n                  <Form.Label>{t(\"Available\")}</Form.Label>\r\n                  <Form.Text>\r\n                    <div style={{ fontSize: \"3em\" }}>{available}</div>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Current account\")}</div>\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_curr\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_curr}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Credit account\")}</div>\r\n\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_cred\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_cred}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Savings account\")}</div>\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_save\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_save}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                  </ul>\r\n                </Form.Group>\r\n              </Form>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"transactions\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleTransactions}\r\n          >\r\n            {t(\"Transactions\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"transactions\">\r\n            <Card.Body>\r\n              <Transactions {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"shares\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleShares}\r\n          >\r\n            {t(\"Shares\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"shares\">\r\n            <Card.Body>\r\n              <Shares {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"transfer U2S\",\r\n    namespace: \"Transfer\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER TO SELF DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    // request,\r\n    userData,\r\n    accountNumber,\r\n    accountType,\r\n    language,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  // const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userData = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  // const { currency_abbr } = userData;\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    toAccount: yup.string().required(t(\"To Account is required\")),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} Form data\r\n   */\r\n  const transferToSelf = (data) => {\r\n    // console.log(\"TRANSFER U2S DATA:\", data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.amount = parseLocaleNumber(data.amount, language);\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n    }).format(data.amount);\r\n\r\n    // onTransfer({ req: props.request, data: data });\r\n    sendRequest({ req: props.request, data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    transferToSelf(data);\r\n  };\r\n\r\n  const TransferToSelfForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"validationToAccount\">\r\n          <Form.Label>{t(\"To account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"toAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.toAccount && touched.toAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option value=\"acc_curr\" hidden={accountType === \"acc_curr\"}>\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option value=\"acc_cred\" hidden={accountType === \"acc_cred\"}>\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option value=\"acc_save\" hidden={accountType === \"acc_save\"}>\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.toAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              // type=\"number\"\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              // onBlur={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request=\"transfer U2S\"\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToSelfForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        toAccount: \"\",\r\n        amount: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n * User imports\r\n */\r\nimport Card from \"../card\";\r\n\r\n/**\r\n * Component: TransferToPerson\r\n */\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"transfer U2U\", namespace: \"Transfer\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    // request,\r\n    userData,\r\n    accountNumber,\r\n    language,\r\n    accountType,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  // const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  // const { onTransfer } = props.barrelEventHandlers;\r\n\r\n  /** \r\n   * Custom hooks\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /** \r\n   * Destructuring\r\n   ============================================================================ */\r\n  // const { currency_abbr } = userData;\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    toPersonalID: yup\r\n      .string()\r\n      .required(t(\"Recipients Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      ),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const transferToPerson = (data) => {\r\n    // console.log(\"TRANSFER U2U DATA:\", data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.amount = parseLocaleNumber(data.amount, language);\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n    }).format(data.amount);\r\n\r\n    sendRequest({ req: props.request, data: data });\r\n    // onTransfer({ req: props.request, data: data });\r\n  };\r\n\r\n  // return <>test</>;\r\n\r\n  const onSubmit = (data) => {\r\n    transferToPerson(data);\r\n  };\r\n\r\n  const TransferToPersonForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        {/* Field: From account */}\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        {/* Field: Recipients Personal ID */}\r\n        <Form.Group controlId=\"validationFormikToPersonalID\">\r\n          <Form.Label>{t(\"To Personal ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"XXXXXX-XXXXX\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"toPersonalID\"\r\n              value={values.toPersonalID}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.toPersonalID && touched.toPersonalID}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.toPersonalID}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Field: Description */}\r\n        <Form.Group\r\n          controlId=\"description\"\r\n          name=\"description\"\r\n          value={values.description}\r\n          onChange={handleChange}\r\n        >\r\n          <Form.Label>{t(\"Description\")}</Form.Label>\r\n          <Form.Control as=\"textarea\" rows=\"3\" />\r\n        </Form.Group>\r\n\r\n        {/* Field: Amount */}\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              // type=\"number\"\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              // onBlur={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Button: Next */}\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToPersonForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        toPersonalID: \"\",\r\n        amount: \"\",\r\n        description: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"transfer U2B\", namespace: \"Transfer\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER TO SELF DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    // request,\r\n    userData,\r\n    accountNumber,\r\n    language,\r\n    accountType,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  // const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  // const { onTransfer } = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /** \r\n   * Destructuring\r\n   ============================================================================ */\r\n  // const { currency_abbr } = userData;\r\n\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    // businessTitle: yup\r\n    //   .string()\r\n    //   .required(t(\"Recipients Business ID is required\")),\r\n    purposeID: yup.string().required(t(\"Purpose ID is required\")),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const transferToBusiness = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.currency = currencyAbbr;\r\n    data.amount = parseLocaleNumber(data.amount, language);\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n    }).format(data.amount);\r\n    // data.amount = parseFloat(data.amount);\r\n    // data.amount = Number(data.amount.replace(/[^0-9.-]+/g, \"\"));\r\n\r\n    sendRequest({ req: props.request, data: data });\r\n    // onTransfer({ req: props.request, data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    transferToBusiness(data);\r\n  };\r\n\r\n  const TransferToBusinessForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      {/* From account */}\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        {/*\r\n        <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n          <Form.Label>{t(\"To Business ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"businessTitle\"\r\n              value={values.businessTitle}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.businessTitle && touched.businessTitle}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.businessTitle}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n        */}\r\n\r\n        {/* To purpose */}\r\n        <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n          <Form.Label>{t(\"To Purpose ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"purposeID\"\r\n              value={values.purposeID}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.purposeID && touched.purposeID}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.purposeID}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Field: Description */}\r\n        <Form.Group\r\n          controlId=\"description\"\r\n          name=\"description\"\r\n          value={values.description}\r\n          onChange={handleChange}\r\n        >\r\n          <Form.Label>{t(\"Description\")}</Form.Label>\r\n          <Form.Control as=\"textarea\" rows=\"3\" />\r\n        </Form.Group>\r\n\r\n        {/* Amount */}\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              type=\"string\" // do NOT change to number!!\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Submit button */}\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToBusinessForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        purposeID: \"\",\r\n        amount: \"\",\r\n        description: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import Card from \"../card\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { businessID: null };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"PURPOSE REGISTRATION PROPS:\", props);\r\n\r\n  const barrels = props.data;\r\n  const { businessID } = props;\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  // const { userData, accountNumber, language } = barrels.barrelGetters;\r\n  // const {} = barrels.barrelSetters;\r\n  const { getReviser, getWorkplace } = barrels.barrelFunctions;\r\n  const { onPurposeRegistration } = barrels.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([\"PurposeRegistration\"]);\r\n\r\n  const schema = yup.object({\r\n    purposeTitle: yup\r\n      .string()\r\n      .required(t(\"Purpose title is a required field\"))\r\n      .min(3, t(\"Purpose title too short\"))\r\n      .max(70, t(\"Purpose title too long\"))\r\n      .trim(),\r\n    purposeDescription: yup.string().optional(),\r\n  });\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const RegisterPurpose = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.businessID = businessID;\r\n\r\n    // console.log(\"REGISTER PURPOSE DATA:\", data);\r\n\r\n    onPurposeRegistration({ req: \"register purpose\", data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    RegisterPurpose(data);\r\n  };\r\n\r\n  const RegisterPurposeForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Purpose Title (Purpose ID) */}\r\n      <Form.Group controlId=\"validationFormikPurposeID\">\r\n        <Form.Label>{t(\"Purpose Title\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"\"\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"purposeTitle\"\r\n            value={values.purposeTitle}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.purposeTitle && touched.purposeTitle}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.purposeTitle}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Purpose Description */}\r\n      <Form.Group\r\n        controlId=\"purposeDescription\"\r\n        name=\"purposeDescription\"\r\n        value={values.purposeDescription}\r\n        onChange={handleChange}\r\n      >\r\n        <Form.Label>{t(\"Purpose Description\")}</Form.Label>\r\n        <Form.Control as=\"textarea\" rows=\"3\" />\r\n      </Form.Group>\r\n\r\n      {/* Submit button */}\r\n      <Button type=\"submit\" block>\r\n        {t(\"Submit\")}\r\n      </Button>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterPurposeForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        purposeTitle: \"\",\r\n        purposeDescription: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Toast } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"register shareholder\",\r\n    namespace: \"ShareholderRegistration\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  const barrels = props;\r\n  const { purposeID } = props;\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber } = barrels.barrelGetters;\r\n  // const {} = barrels.barrelSetters;\r\n  const {\r\n    // format,\r\n    // parseLocaleNumber,\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n  } = barrels.barrelFunctions;\r\n  // const {} = barrels.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  // const thisRef = createRef();\r\n\r\n  const schema = yup.object({\r\n    personalID: yup\r\n      .string()\r\n      .required(t(\"Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      ),\r\n    shareholderRoles: yup.string().optional(),\r\n    shares: yup\r\n      .number()\r\n      .typeError(t(\"Shares must be a number\"))\r\n      .required(t(\"Shares is required\"))\r\n      .min(0, t(\"Shares too few\"))\r\n      .max(1000, t(\"Shares too many\")),\r\n  });\r\n\r\n  /**\r\n   * Send shareholder registration request\r\n   * @param {object} data\r\n   */\r\n  const onSubmit = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.purposeID = purposeID;\r\n\r\n    // console.log(\"REGISTER SHAREHOLDER DATA:\", data);\r\n\r\n    // onShareholderRegistration({ req: props.request, data: data });\r\n    sendRequest({ req: props.request, data: data });\r\n  };\r\n\r\n  const RegisterShareholderForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form id=\"shareholderRegistrationForm\" noValidate onSubmit={handleSubmit}>\r\n      <Toast style={{ minWidth: \"100%\" }}>\r\n        {/*\r\n        <Toast.Header closeButton={false}>\r\n          <strong className=\"mr-auto\">{t(\"Add Shareholder\")}</strong>\r\n        </Toast.Header>\r\n        */}\r\n        <Toast.Body>\r\n          <Form.Group controlId=\"validationFormikShareholderPersonalID\">\r\n            <Form.Label>{t(\"Shareholder Personal ID\")}</Form.Label>\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"XXXXXX-XXXXX\")}\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"personalID\"\r\n                value={values.personalID}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.personalID && touched.personalID}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.personalID}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n          {/* Shareholder Roles */}\r\n          <Form.Group controlId=\"validationFormikShareholderRoles\">\r\n            <Form.Label>{t(\"Shareholder Roles\")}</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"\"\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"shareholderRoles\"\r\n                value={values.shareholderRoles}\r\n                onChange={handleChange}\r\n                isInvalid={\r\n                  !!errors.shareholderRoles && touched.shareholderRoles\r\n                }\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.shareholderRoles}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          {/* Shares */}\r\n          <Form.Group controlId=\"validationFormikShareholderRoles\">\r\n            <Form.Label>{t(\"Shares\")}</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type=\"number\"\r\n                min={0}\r\n                max={1000}\r\n                step={1}\r\n                placeholder=\"\"\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"shares\"\r\n                value={values.shares}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.shares && touched.shares}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.shares}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          <SubmitButton\r\n            {...args}\r\n            caption={t(\"Submit\")}\r\n            request={props.request}\r\n            namespace={props.namespace}\r\n          />\r\n        </Toast.Body>\r\n      </Toast>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterShareholderForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        personalID: \"\",\r\n        shares: 0,\r\n        shareholderRoles: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Accordion,\r\n  Card,\r\n  Tab,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  // Nav,\r\n  // Form,\r\n  // Toast,\r\n  // Badge,\r\n  // Container,\r\n  // Button,\r\n} from \"react-bootstrap\";\r\n// import { useAccordionToggle } from \"react-bootstrap/AccordionToggle\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Octicon, { Plus, PlusSmall, Gear } from \"@primer/octicons-react\";\r\nimport { Add, Extension, Store } from \"@material-ui/icons\";\r\n\r\n// import Dropzone from \"../dropzone\";\r\n\r\nimport BusinessRegistration from \"../businessRegistration\";\r\nimport PurposeRegistration from \"../purposeRegistration\";\r\nimport ShareholderRegistration from \"../shareholderRegistration\";\r\n// import shareholderRegistration from \"../shareholderRegistration\";\r\nimport Shareholder from \"../shareholder\";\r\nimport Pagination from \"../pagination\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { namespace: \"MyBusiness\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER DATA\", props);\r\n\r\n  // const [businessLoaded, setBusinessLoaded] = useState(null);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userBusinesses,\r\n    countBusinesses,\r\n    businessesPerPage,\r\n    activePageBusinesses,\r\n    userBusinessesLoaded,\r\n    activeBusiness,\r\n    activeBusinessID,\r\n    businessPurposes,\r\n    countBusinessPurposes,\r\n    businessPurposesPerPage,\r\n    activePageBusinessPurposes,\r\n    activeBusinesPurpose,\r\n    purposeShareholders,\r\n    language,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  const { setRedirectTo } = props.barrelSetters;\r\n  const {\r\n    getBusinesses,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n  } = props.barrelFunctions;\r\n  // const {  } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  useEffect(() => {\r\n    // getBusinesses();\r\n    // getBusinesses();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n   * Toggle business (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  // const ToggleBusiness = ({ children, eventKey, businessID }) => {\r\n  //   const decoratedOnClick = useAccordionToggle(eventKey, () =>\r\n  //     getBusinessPurposes(businessID, eventKey)\r\n  //   );\r\n\r\n  //   return <div onClick={decoratedOnClick}>{children}</div>;\r\n  // };\r\n  const ToggleBusiness = ({ eventKey, businessID }) => {\r\n    getBusinessPurposes(businessID, eventKey, 1);\r\n  };\r\n\r\n  // const onPageSelect = (number) => {\r\n  //   // console.log(\"on page select\", number);\r\n  //   switch (number) {\r\n  //     case \"First\":\r\n  //       number = 1;\r\n  //       break;\r\n  //     case \"Prev\":\r\n  //       number = activePageBusinesses > 1 ? activePageBusinesses - 1 : 1;\r\n  //       break;\r\n  //     case \"Next\":\r\n  //       number =\r\n  //         activePageBusinesses < Math.ceil(countBusinesses / businessesPerPage)\r\n  //           ? activePageBusinesses + 1\r\n  //           : Math.ceil(countBusinesses / businessesPerPage);\r\n  //       break;\r\n  //     case \"Last\":\r\n  //       number = Math.ceil(countBusinesses / businessesPerPage);\r\n  //       break;\r\n  //     default:\r\n  //       break;\r\n  //   }\r\n  //   getBusinesses(number);\r\n  // };\r\n\r\n  // const onPurposesPageClick = (number) => {\r\n  //   switch (number) {\r\n  //     case \"First\":\r\n  //       number = 1;\r\n  //       break;\r\n  //     case \"Prev\":\r\n  //       number =\r\n  //         activePageBusinessPurposes > 1 ? activePageBusinessPurposes - 1 : 1;\r\n  //       break;\r\n  //     case \"Next\":\r\n  //       number =\r\n  //         activePageBusinessPurposes <\r\n  //         Math.ceil(countBusinessPurposes / businessPurposesPerPage)\r\n  //           ? activePageBusinessPurposes + 1\r\n  //           : Math.ceil(countBusinessPurposes / businessPurposesPerPage);\r\n  //       break;\r\n  //     case \"Last\":\r\n  //       number = Math.ceil(countBusinessPurposes / businessPurposesPerPage);\r\n  //       break;\r\n  //     default:\r\n  //       break;\r\n  //   }\r\n  //   getBusinessPurposes(activeBusinessID, 0, number);\r\n  // };\r\n\r\n  /**\r\n   * Toggle purpose (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  // const TogglePurpose = ({ children, eventKey, purposeID }) => {\r\n  //   const decoratedOnClick = useAccordionToggle(eventKey, () =>\r\n  //     // getBusinessPurposes(businessID, eventKey)\r\n\r\n  //     getPurposeShareholders(purposeID, eventKey)\r\n  //   );\r\n\r\n  //   return <div onClick={decoratedOnClick}>{children}</div>;\r\n  // };\r\n\r\n  const TogglePurpose = ({ eventKey, purposeID }) => {\r\n    getPurposeShareholders(purposeID, eventKey);\r\n  };\r\n\r\n  /**\r\n   * Toggle shareholders (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  // const ToggleShareholders = ({ children, eventKey, purposeID }) => {\r\n  //   const decoratedOnClick = useAccordionToggle(eventKey, () =>\r\n  //     getPurposeShareholders(purposeID, eventKey)\r\n  //   );\r\n\r\n  //   return <div onClick={decoratedOnClick}>{children}</div>;\r\n  // };\r\n\r\n  /**\r\n   * Create:\r\n   * - business menu\r\n   * - business purposes menu\r\n   */\r\n  let menuItems = [];\r\n  let purposes = [];\r\n  let countShareholders = 0;\r\n  userBusinesses !== null &&\r\n    Object.keys(userBusinesses).map((business, keyBusiness) => {\r\n      menuItems[keyBusiness] = [];\r\n      purposes[keyBusiness] = [];\r\n      businessPurposes !== null &&\r\n        Object.keys(businessPurposes).map((purpose, keyPurpose) => {\r\n          if (\r\n            businessPurposes[purpose].business_id ===\r\n            userBusinesses[business].business_id\r\n          ) {\r\n            menuItems[keyBusiness][keyPurpose] = (\r\n              <ListGroup.Item\r\n                action\r\n                key={businessPurposes[purpose].purpose_id}\r\n                eventKey={businessPurposes[purpose].purpose_id}\r\n                onClick={() =>\r\n                  TogglePurpose({\r\n                    eventKey: keyPurpose,\r\n                    purposeID: businessPurposes[purpose].purpose_id,\r\n                  })\r\n                }\r\n              >\r\n                <span style={{ whiteSpace: \"nowrap\" }}>\r\n                  <Extension style={{ color: \"var(--dark)\" }} />{\" \"}\r\n                  {businessPurposes[purpose].title}\r\n                </span>\r\n              </ListGroup.Item>\r\n            );\r\n\r\n            purposes[keyBusiness][keyPurpose] = (\r\n              <Tab.Pane\r\n                key={businessPurposes[purpose].purpose_id}\r\n                eventKey={businessPurposes[purpose].purpose_id}\r\n              >\r\n                <Accordion defaultActiveKey=\"shareholders\">\r\n                  {/* Purpose ID */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"purpose_id\"\r\n                    >\r\n                      {t(\"Purpose ID\")}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"purpose_id\">\r\n                      <Card.Body>\r\n                        <Card.Text>\r\n                          {businessPurposes[purpose].purpose_id}\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n                  {/* Purpose description */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"description\"\r\n                    >\r\n                      {t(\"Purpose Description\")}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"description\">\r\n                      <Card.Body>\r\n                        <Card.Text>\r\n                          {businessPurposes[purpose].description}\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"shareholders\"\r\n                    >\r\n                      {t(\"Purpose Shareholders\")}\r\n                    </Accordion.Toggle>\r\n\r\n                    {/* Purpose shareholders */}\r\n                    <Accordion.Collapse eventKey=\"shareholders\">\r\n                      <Card.Body>\r\n                        {typeof purposeShareholders !== \"undefined\" &&\r\n                          purposeShareholders !== null &&\r\n                          Object.keys(purposeShareholders).map(\r\n                            (shareholder, keyShareholder) => {\r\n                              if (\r\n                                purposeShareholders[shareholder].purpose_id ===\r\n                                businessPurposes[purpose].purpose_id\r\n                              ) {\r\n                                const { purpose_id } = purposeShareholders[\r\n                                  shareholder\r\n                                ];\r\n                                const {\r\n                                  shareholder_id,\r\n                                  firstname,\r\n                                  lastname,\r\n                                  // email,\r\n                                  roles,\r\n                                  share,\r\n                                } = purposeShareholders[shareholder];\r\n\r\n                                countShareholders++;\r\n\r\n                                const arrRoles =\r\n                                  roles !== null ? roles.split(\",\") : [];\r\n\r\n                                return (\r\n                                  <Shareholder\r\n                                    {...args}\r\n                                    key={keyShareholder}\r\n                                    id={keyShareholder}\r\n                                    shareholder={shareholder_id}\r\n                                    purpose={purpose_id}\r\n                                    firstname={firstname}\r\n                                    lastname={lastname}\r\n                                    share={share}\r\n                                    roles={arrRoles}\r\n                                  />\r\n                                );\r\n                              } else {\r\n                                return \"\"; // TODO: check if this works\r\n                              }\r\n                            }\r\n                          )}\r\n                        {countShareholders === 0 && (\r\n                          <Card.Text className=\"text-muted\">\r\n                            {t(\"No shareholders\")}\r\n                          </Card.Text>\r\n                        )}\r\n\r\n                        {/* End shareholders list */}\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"2\"\r\n                    >\r\n                      <span style={{ whiteSpace: \"nowrap\" }}>\r\n                        <Add\r\n                          fontSize=\"small\"\r\n                          style={{ color: \"var(--dark)\" }}\r\n                        />\r\n                        &nbsp;{t(\"Add Shareholder\")}\r\n                      </span>\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"2\">\r\n                      <Card.Body>\r\n                        <ShareholderRegistration\r\n                          {...args}\r\n                          purposeID={businessPurposes[purpose].purpose_id}\r\n                        />\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n                </Accordion>\r\n              </Tab.Pane>\r\n            );\r\n          }\r\n          countShareholders = 0;\r\n          return true;\r\n        });\r\n      return true;\r\n    });\r\n\r\n  const jsx = (\r\n    <>\r\n      <Accordion\r\n        defaultActiveKey={\r\n          activeBusiness !== null || !userBusinessesLoaded\r\n            ? activeBusiness\r\n            : \"myBusinesses\"\r\n        }\r\n      >\r\n        {/* Add business */}\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"addBusiness\"\r\n            style={{ cursor: \"pointer\" }}\r\n          >\r\n            <span>\r\n              <Add fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n              &nbsp;\r\n              {t(\"Add Business\")}\r\n            </span>\r\n          </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey=\"addBusiness\">\r\n            <Card.Body>\r\n              <BusinessRegistration {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        {/* List user businesses */}\r\n        {userBusinesses !== null &&\r\n          Object.keys(userBusinesses).map((business, keyBusiness) => {\r\n            const date = new Date(userBusinesses[business].created);\r\n            const businessSince = new Intl.DateTimeFormat(language).format(\r\n              date\r\n            );\r\n            // keyBusiness[3] = userBusinesses[business].business_id;\r\n            return (\r\n              <Card key={keyBusiness}>\r\n                <Accordion.Toggle\r\n                  as={Card.Header}\r\n                  eventKey={keyBusiness}\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() =>\r\n                    ToggleBusiness({\r\n                      eventKey: keyBusiness,\r\n                      businessID: userBusinesses[business].business_id,\r\n                    })\r\n                  }\r\n                >\r\n                  <Store style={{ color: \"var(--dark)\" }} />{\" \"}\r\n                  {userBusinesses[business].title}\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={keyBusiness}>\r\n                  <Card.Body>\r\n                    <Tab.Container\r\n                      id=\"left-tabs-example\"\r\n                      defaultActiveKey={\r\n                        activeBusinesPurpose !== null\r\n                          ? activeBusinesPurpose\r\n                          : \"aboutBusiness\"\r\n                      }\r\n                    >\r\n                      <Row>\r\n                        {/* Layout: Left side - Menu */}\r\n                        <Col sm={5}>\r\n                          <ListGroup variant=\"flush\">\r\n                            {/* Menu item: About business */}\r\n                            <ListGroup.Item action eventKey=\"aboutBusiness\">\r\n                              {t(\"About\")}\r\n                            </ListGroup.Item>\r\n\r\n                            {/* Menu item: Add purpose */}\r\n                            <ListGroup.Item action eventKey=\"addPurpose\">\r\n                              <span style={{ whiteSpace: \"nowrap\" }}>\r\n                                <Add\r\n                                  fontSize=\"small\"\r\n                                  style={{ color: \"var(--dark)\" }}\r\n                                />\r\n                                &nbsp;{t(\"Add Purpose\")}\r\n                              </span>\r\n                            </ListGroup.Item>\r\n\r\n                            {/* Menu items: Registered purposes */}\r\n                            {menuItems[keyBusiness]}\r\n\r\n                            {/* old add purpose */}\r\n                          </ListGroup>\r\n                          {countBusinessPurposes !== null && (\r\n                            <>\r\n                              <br />\r\n                              <Pagination\r\n                                {...args}\r\n                                size=\"sm\"\r\n                                countItems={countBusinessPurposes}\r\n                                itemsPerPage={businessPurposesPerPage}\r\n                                active={activePageBusinessPurposes}\r\n                                onClick={(number) =>\r\n                                  getBusinessPurposes(\r\n                                    activeBusinessID,\r\n                                    0,\r\n                                    number\r\n                                  )\r\n                                }\r\n                              />\r\n                            </>\r\n                          )}\r\n                        </Col>\r\n\r\n                        {/* Layout: Right side - Content */}\r\n                        <Col sm={7}>\r\n                          <Tab.Content>\r\n                            <Tab.Pane eventKey=\"aboutBusiness\">\r\n                              <Accordion defaultActiveKey=\"businessID\">\r\n                                {/* Business logo */}\r\n\r\n                                {/*\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  eventKey=\"businessLogo\"\r\n                                >\r\n                                  [LOGO]\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"businessLogo\">\r\n                                  <Card border=\"light\">\r\n                                    <Card.Body>\r\n                                      <Dropzone data={args} />\r\n                                    </Card.Body>\r\n                                  </Card>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n                              */}\r\n\r\n                                {/* Business ID */}\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    eventKey=\"businessID\"\r\n                                  >\r\n                                    {t(\"Business ID\")}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"businessID\">\r\n                                    <Card border=\"light\">\r\n                                      <Card.Body>\r\n                                        <Card.Text>\r\n                                          {userBusinesses[business].business_id}\r\n                                        </Card.Text>\r\n                                      </Card.Body>\r\n                                    </Card>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n\r\n                                {/* Business description */}\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    eventKey=\"businessDescription\"\r\n                                  >\r\n                                    {t(\"Business Description\")}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"businessDescription\">\r\n                                    <Card border=\"light\">\r\n                                      <Card.Body>\r\n                                        <Card.Text>\r\n                                          {userBusinesses[business].description}\r\n                                        </Card.Text>\r\n                                      </Card.Body>\r\n                                    </Card>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n\r\n                                {/* Business Creation Date */}\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    eventKey=\"businessCreationDate\"\r\n                                  >\r\n                                    {t(\"Business Created\")}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"businessCreationDate\">\r\n                                    <Card border=\"light\">\r\n                                      <Card.Body>\r\n                                        <Card.Text>{businessSince}</Card.Text>\r\n                                      </Card.Body>\r\n                                    </Card>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n                              </Accordion>\r\n                            </Tab.Pane>\r\n\r\n                            {/* Start Business purposes */}\r\n                            {purposes[keyBusiness]}\r\n                            {/* End Business purposes */}\r\n\r\n                            {/* Add new purpose */}\r\n                            <Tab.Pane eventKey=\"addPurpose\">\r\n                              <Accordion defaultActiveKey=\"newPurpose\">\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    eventKey=\"newPurpose\"\r\n                                  >\r\n                                    {t(\"New Purpose\")}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"newPurpose\">\r\n                                    <Card.Body>\r\n                                      <PurposeRegistration\r\n                                        data={args}\r\n                                        businessID={\r\n                                          userBusinesses[business].business_id\r\n                                        }\r\n                                      />\r\n                                    </Card.Body>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n                              </Accordion>\r\n                            </Tab.Pane>\r\n                          </Tab.Content>\r\n                        </Col>\r\n                      </Row>\r\n                    </Tab.Container>\r\n                    {/* pagination prev */}\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            );\r\n            // console.log(\"BUSINESS:\", userBusinesses[business]);\r\n          })}\r\n\r\n        {/* Get business */}\r\n\r\n        {false && userBusinesses === null && (\r\n          <Card>\r\n            <Accordion.Toggle\r\n              as={Card.Header}\r\n              eventKey=\"myBusinesses\"\r\n              onClick={getBusinesses}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              <span>{t(\"My Businesses\")}</span>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"myBusinesses\">\r\n              <Card.Body>{t(\"No businesses\")}</Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        )}\r\n\r\n        {/* old add business */}\r\n      </Accordion>\r\n      {userBusinesses !== null && (\r\n        <>\r\n          <br />\r\n\r\n          <Pagination\r\n            {...args}\r\n            size=\"md\"\r\n            countItems={countBusinesses}\r\n            itemsPerPage={businessesPerPage}\r\n            active={activePageBusinesses}\r\n            onClick={(number) => getBusinesses(number)}\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  return <>{jsx}</>;\r\n};\r\n","import \"./UserEditor.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ListGroup, Form, InputGroup } from \"react-bootstrap\";\r\nimport {\r\n  Visibility,\r\n  VisibilityOff,\r\n  Close,\r\n  Edit,\r\n  // Done,\r\n} from \"@material-ui/icons\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    namespace: \"UserEditor\",\r\n    request: \"update user\",\r\n    mode: \"label\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"USER EDITOR PROPS:\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userData,\r\n    accountNumber,\r\n    // currencies,\r\n    // currencyAbbr,\r\n    // language,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest, getReviser, getWorkplace } = props.barrelFunctions;\r\n  // const {  } = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [editFirstname, setEditFirstname] = useState(false);\r\n  const [editLastname, setEditLastname] = useState(false);\r\n  const [editEmail, setEditEmail] = useState(false);\r\n  const [editPassword, setEditPassword] = useState(false);\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  const [submitButtonVisible, setSubmitButtonVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (editFirstname || editLastname || editEmail || editPassword) {\r\n      setSubmitButtonVisible(true);\r\n    } else {\r\n      setSubmitButtonVisible(false);\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [editFirstname, editLastname, editEmail, editPassword]);\r\n\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  const sendUserRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    // data.language = language;\r\n    // data.email = userData.email;\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    data.personalID = accountNumber;\r\n    if (!editFirstname) data.firstname = null;\r\n    if (!editLastname) data.lastname = null;\r\n    if (!editEmail) data.email = userData.email;\r\n    if (!editPassword) data.password = null;\r\n\r\n    // console.log(\"onSubmit:\", data);\r\n\r\n    if (sendUserRegistrationRequest(data)) {\r\n      // User registration request was submitted\r\n    }\r\n  };\r\n\r\n  const yupObject = {\r\n    firstName: editFirstname\r\n      ? yup.string().required(t(\"First name is required\"))\r\n      : yup.string().optional(),\r\n    lastName: editLastname\r\n      ? yup.string().required(t(\"Last name is required\"))\r\n      : yup.string().optional(),\r\n    email: editEmail\r\n      ? yup\r\n          .string()\r\n          .email(t(\"Invalid email address\"))\r\n          .required(t(\"Email is required\"))\r\n      : yup.string().optional(),\r\n    password: editPassword\r\n      ? yup\r\n          .string()\r\n          .required(t(\"No password provided\"))\r\n          .min(8, t(\"Password is too short\"))\r\n          // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n          .matches(\r\n            /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n            t(\"Password is too weak\")\r\n          )\r\n      : yup.string().optional(),\r\n  };\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object(yupObject);\r\n\r\n  /**\r\n   * Data consistency tests\r\n   */\r\n  if (userData === null) return <></>;\r\n\r\n  /**\r\n   * Destructuring\r\n   */\r\n  const { mode } = props;\r\n  const {\r\n    firstname,\r\n    lastname,\r\n    email,\r\n    // language,\r\n    // currency_name,\r\n    // currency_abbr,\r\n  } = userData;\r\n  // const currency = `${currency_name} (${currency_abbr})`;\r\n\r\n  const UserEditorForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <Card title={t(\"Profile\")}>\r\n        {/* First name */}\r\n        <ListGroup variant=\"flush\">\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"First name\")}</Form.Label>\r\n            {!editFirstname ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditFirstname(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n                <br />\r\n                <small>{firstname}</small>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditFirstname(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editFirstname && (\r\n              <Form.Group controlId=\"validationFormikFirstName\">\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Enter first name\")}\r\n                    name=\"firstName\"\r\n                    value={values.firstName}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.firstName && touched.firstName}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.firstName}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n            )}\r\n          </ListGroup.Item>\r\n\r\n          {/* Last name */}\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"Last name\")}</Form.Label>\r\n            {!editLastname ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditLastname(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n                <br />\r\n                <small>{lastname}</small>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditLastname(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editLastname && (\r\n              <Form.Group controlId=\"validationFormikLastName\">\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Enter last name\")}\r\n                    name=\"lastName\"\r\n                    value={values.lastName}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.lastName && touched.lastName}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.lastName}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n            )}\r\n          </ListGroup.Item>\r\n\r\n          {/* Email */}\r\n          {accountNumber !== null && (\r\n            <ListGroup.Item as=\"div\" action>\r\n              <Form.Label>{t(\"Email address\")}</Form.Label>\r\n              {!editEmail ? (\r\n                <>\r\n                  <span style={{ float: \"right\" }}>\r\n                    <Edit\r\n                      onClick={() => setEditEmail(true)}\r\n                      fontSize=\"small\"\r\n                      style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                    />\r\n                  </span>\r\n                  <br />\r\n                  <small>{email}</small>\r\n                </>\r\n              ) : (\r\n                <span style={{ float: \"right\" }}>\r\n                  <Close\r\n                    onClick={() => setEditEmail(false)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n              )}\r\n\r\n              {editEmail && (\r\n                <Form.Group controlId=\"validationFormikEmail\">\r\n                  <InputGroup>\r\n                    <Form.Control\r\n                      placeholder={t(\"Enter email\")}\r\n                      name=\"email\"\r\n                      value={values.email}\r\n                      onChange={handleChange}\r\n                      // onBlur={handleChange}\r\n                      isInvalid={!!errors.email && touched.email}\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.email}\r\n                    </Form.Control.Feedback>\r\n                  </InputGroup>\r\n                </Form.Group>\r\n              )}\r\n            </ListGroup.Item>\r\n          )}\r\n\r\n          {/* Password */}\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"Password\")}</Form.Label>\r\n            {!editPassword ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditPassword(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditPassword(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editPassword && (\r\n              <>\r\n                {/* New password */}\r\n                <Form.Group controlId=\"validationFormikPassword\">\r\n                  <InputGroup>\r\n                    <Form.Control\r\n                      type={passwordVisible ? \"text\" : \"password\"}\r\n                      placeholder={t(\"Enter new password\")}\r\n                      name=\"password\"\r\n                      value={values.password}\r\n                      onChange={handleChange}\r\n                      // onBlur={handleChange}\r\n                      isInvalid={!!errors.password && touched.password}\r\n                    />\r\n                    <InputGroup.Append>\r\n                      <InputGroup.Text\r\n                        id=\"inputGroupAppend\"\r\n                        onClick={togglePassword}\r\n                        style={{\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        {passwordVisible ? (\r\n                          <VisibilityOff\r\n                            fontSize=\"small\"\r\n                            style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                          />\r\n                        ) : (\r\n                          <Visibility\r\n                            fontSize=\"small\"\r\n                            style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                          />\r\n                        )}\r\n                      </InputGroup.Text>\r\n                    </InputGroup.Append>\r\n\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.password}\r\n                    </Form.Control.Feedback>\r\n                  </InputGroup>\r\n                </Form.Group>\r\n              </>\r\n            )}\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n\r\n        <Form.Group controlId=\"validationSubmitButton\">\r\n          <SubmitButton\r\n            {...args}\r\n            caption={t(\"Submit\")}\r\n            visible={submitButtonVisible}\r\n            marginTop={20}\r\n            request={props.request}\r\n            namespace={props.namespace}\r\n          />\r\n        </Form.Group>\r\n      </Card>\r\n    </Form>\r\n  );\r\n\r\n  const jsx =\r\n    mode === \"label\" ? (\r\n      <span style={{ whiteSpace: \"nowrap\" }}>\r\n        {firstname} {lastname}\r\n      </span>\r\n    ) : (\r\n      <Formik\r\n        component={UserEditorForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          firstName: userData.firstname,\r\n          lastName: userData.lastname,\r\n          email: userData.email,\r\n          password: \"\",\r\n        }}\r\n      />\r\n    );\r\n\r\n  return <>{jsx}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, Table } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\n// import * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\n// import Card from \"../card\";\r\n// import SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {\r\n    request: \"register currency\",\r\n    namespace: \"Currencies\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    currencies,\r\n    countCurrencies,\r\n    activePageCurrencies,\r\n    currenciesPerPage,\r\n    currencyAbbr,\r\n    userData,\r\n  } = props.barrelGetters;\r\n  const { setCurrencyAbbr } = props.barrelSetters;\r\n  const {\r\n    // getReviser,\r\n    // getWorkplace,\r\n    sendRequest,\r\n    getCurrencies,\r\n    formatExchangeRate,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Destructured vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  const onCurrencySelected = (e) => {\r\n    setCurrencyAbbr(e.target.id);\r\n    sendRequest({\r\n      req: \"register user currency\",\r\n      data: { email: userData.email, currency_id: e.target.id },\r\n    });\r\n  };\r\n\r\n  const onPageSelect = (number) => {\r\n    // console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageCurrencies > 1 ? activePageCurrencies - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageCurrencies < Math.ceil(countCurrencies / currenciesPerPage)\r\n            ? activePageCurrencies + 1\r\n            : Math.ceil(countCurrencies / currenciesPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countCurrencies / currenciesPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getCurrencies(number);\r\n  };\r\n\r\n  /**\r\n   * Form\r\n   ============================================================================ */\r\n  const CurrenciesForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <>\r\n      <Table responsive striped bordered hover size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Select\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Abbr\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Name\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Region\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Rate\")}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {currencies !== null &&\r\n            currencies.map((currency, keyCUrrency) => {\r\n              // console.log(\"CURRENCY\", currency);\r\n\r\n              const { name, abbr, rate, region } = currency;\r\n              return (\r\n                <tr key={keyCUrrency}>\r\n                  <td style={{ textAlign: \"center\" }}>\r\n                    <Form.Check\r\n                      type=\"radio\"\r\n                      checked={currencyAbbr === abbr}\r\n                      name=\"selected-currency\"\r\n                      id={abbr}\r\n                      aria-label=\"option 1\"\r\n                      onChange={onCurrencySelected}\r\n                    />\r\n                  </td>\r\n                  <td style={{ textAlign: \"center\" }}>{abbr}</td>\r\n                  <td style={{ textAlign: \"left\" }}>{name}</td>\r\n                  <td style={{ textAlign: \"left\" }}>{region}</td>\r\n                  <td style={{ textAlign: \"right\" }}>\r\n                    {formatExchangeRate(rate)}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </Table>\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countCurrencies / currenciesPerPage)}\r\n        active={activePageCurrencies}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n\r\n  /**\r\n   * Formik return\r\n   ============================================================================ */\r\n  // onSubmit={onSubmit}\r\n  return (\r\n    <Formik\r\n      component={CurrenciesForm}\r\n      initialValues={{\r\n        curr_abbr: \"\",\r\n        curr_title: \"\",\r\n        curr_region: \"\",\r\n        curr_rate: 1.0,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\n// import Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n// import Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"CurrencyRegistration\",\r\n    request: \"register currency\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  // const {\r\n  //   currencies,\r\n  //   countCurrencies,\r\n  //   activePageCurrencies,\r\n  //   currenciesPerPage,\r\n  // } = props.barrelGetters;\r\n  // const { setActivePageCurrencies } = props.barrelSetters;\r\n  const {\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n    // getCurrencies,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Destructured vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([\"CurrencyRegistration\"]);\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    curr_abbr: yup\r\n      .string()\r\n      .required(t(\"Currency abbreviation is required\"))\r\n      .min(3, t(\"Currency abbreviation is too short\"))\r\n      .max(5, t(\"Currency abbreviation is too long\")),\r\n    curr_title: yup\r\n      .string()\r\n      .required(t(\"Currency name is required\"))\r\n      .min(3, t(\"Currency name is too short\")) // must be at least 3 characters\r\n      .max(70, t(\"Currency name is too long\")), // must be at most 70 characters\r\n    curr_region: yup\r\n      .string()\r\n      .required(t(\"Currency region is required\"))\r\n      .min(3, t(\"Currency region is too short\")) // must be at least 3 characters\r\n      .max(70, t(\"Currency region is too long\")), // must be at most 70 characters\r\n    curr_rate: yup\r\n      .string()\r\n      .required(t(\"Exchange rate is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Exchange Rate Regex\")),\r\n        t(\"Wrong exchange rate format\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n  const onSubmit = (data) => {\r\n    console.log(data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  /**\r\n   * Form\r\n   ============================================================================ */\r\n  const CurrencyRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <>\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        {/* Currency abbreviation */}\r\n        <Form.Group controlId=\"validationFormikCurrAbbr\">\r\n          <Form.Label>{t(\"Abbreviation\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_abbr\"\r\n              value={values.curr_abbr}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_abbr && touched.curr_abbr}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_abbr}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Currency name */}\r\n        <Form.Group controlId=\"validationFormikCurrName\">\r\n          <Form.Label>{t(\"Currency Name\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_title\"\r\n              value={values.curr_title}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_title && touched.curr_title}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_title}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Currency region */}\r\n        <Form.Group controlId=\"validationFormikCurrRegion\">\r\n          <Form.Label>{t(\"Currency Region\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_region\"\r\n              value={values.curr_region}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_region && touched.curr_region}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_region}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Initial exchange rate */}\r\n        <Form.Group controlId=\"validationFormikCurrRate\">\r\n          <Form.Label>{t(\"Initial Exchange Rate\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_rate\"\r\n              value={values.curr_rate}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_rate && touched.curr_rate}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_rate}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Submit button */}\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </>\r\n  );\r\n\r\n  /**\r\n   * Formik return\r\n   ============================================================================ */\r\n  return (\r\n    <Formik\r\n      component={CurrencyRegistrationForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        curr_abbr: \"\",\r\n        curr_title: \"\",\r\n        curr_region: \"\",\r\n        curr_rate: 1.0,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { AvTimer } from \"@material-ui/icons\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\n\r\n//  let time = new Date().toLocaleString();\r\nimport { useInterval } from \"../../utils/useInterval\";\r\nimport { useEventListener } from \"../../utils/useEventListener\";\r\n\r\nimport ModalMessage from \"../modalMessage\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Constants\r\n     ============================================================================ */\r\n  const minute = 60; // seconds, for testing purposes\r\n\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"IdleTimer\",\r\n    timeout: 5 * minute,\r\n    timestamp: null,\r\n    stage2: 60, // show seconds (vs minutes) in stage 2\r\n    stage3: 20, // show modal message on stage 3\r\n\r\n    onTimeout: () => {},\r\n\r\n    events: [\"load\", \"mousemove\", \"mousedown\", \"click\", \"scroll\", \"keypress\"],\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { formatDate } = props.barrelFunctions;\r\n  const { onSessionTimeout } = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  const [seconds, setSeconds] = useState(props.timeout);\r\n  const [modalMessageShow, setModalMessageShow] = React.useState(false);\r\n\r\n  useInterval(() => {\r\n    // Your custom logic here\r\n    setSeconds(seconds - 1);\r\n  }, 1000);\r\n\r\n  useEventListener(() => {\r\n    setSeconds(props.timeout);\r\n  }, [\"mousedown\", \"click\", \"scroll\", \"keypress\"]);\r\n\r\n  useEffect(() => {\r\n    if (seconds === props.timeout) setModalMessageShow(false);\r\n    if (seconds === props.stage3) setModalMessageShow(true);\r\n    if (seconds === 0) onSessionTimeout();\r\n\r\n    // eslint-disable-next-line\r\n  }, [seconds]);\r\n\r\n  const getJSX = () => {\r\n    let currTime;\r\n    if (seconds > props.stage2) currTime = Math.ceil(seconds / minute);\r\n    else currTime = seconds;\r\n\r\n    const timeFormatted = formatDate(new Date(1970, 1, 1, 0, 0, currTime), {\r\n      minute: \"numeric\",\r\n      second: \"numeric\",\r\n    });\r\n\r\n    const onSessionContinue = () => {\r\n      console.log(\"onSessionContinue\");\r\n      // props.timeout = 5 * minute;\r\n      setSeconds(props.timeout);\r\n      setModalMessageShow(false);\r\n    };\r\n\r\n    const modalMessage = (\r\n      <>\r\n        <Trans\r\n          i18nKey=\"IdleTimer:Automatic logout\"\r\n          timeFormatted={timeFormatted}\r\n        >\r\n          <div className=\"text-center\">Automatic logout in</div>\r\n          <div\r\n            className=\"text-center\"\r\n            style={{ fontSize: \"4em\", fontWeight: \"bold\", color: \"#A93226\" }}\r\n          >\r\n            {{ timeFormatted }}\r\n          </div>\r\n          <div className=\"text-center\">\r\n            Do you want to continue the session?\r\n          </div>\r\n        </Trans>\r\n        <br />\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Continue now\")}\r\n          request=\"continue session\"\r\n          onSubmit={onSessionContinue}\r\n          namespace={props.namespace}\r\n        />\r\n      </>\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <ModalMessage\r\n          show={modalMessageShow}\r\n          message={modalMessage}\r\n          onHide={() => setModalMessageShow(false)}\r\n        />\r\n        <OverlayTrigger\r\n          placement=\"bottom\"\r\n          overlay={\r\n            <Tooltip>\r\n              {seconds > props.stage2 ? (\r\n                <Trans\r\n                  i18nKey=\"IdleTimer:Minutes to automatical log out\"\r\n                  currTime={currTime}\r\n                >\r\n                  You will be automatically logged out in {{ currTime }}{\" \"}\r\n                  minutes.\r\n                </Trans>\r\n              ) : (\r\n                <Trans\r\n                  i18nKey=\"IdleTimer:Seconds to automatical log out\"\r\n                  currTime={currTime}\r\n                >\r\n                  You will be automatically logged out in {{ currTime }}{\" \"}\r\n                  seconds.\r\n                </Trans>\r\n              )}\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <div style={{ whiteSpace: \"nowrap\", cursor: \"default\" }}>\r\n            <AvTimer style={{ color: \"var(--dark)\" }} />\r\n            &nbsp;\r\n            {seconds > props.stage2 ? (\r\n              <>\r\n                <span className=\"d-none d-sm-inline text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:minutes\" currTime={currTime}>\r\n                    {{ currTime }} minutes\r\n                  </Trans>\r\n                </span>\r\n                <span className=\"d-inline d-sm-none text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:min\" currTime={currTime}>\r\n                    {{ currTime }} min\r\n                  </Trans>\r\n                </span>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <span className=\"d-none d-sm-inline text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:seconds\" currTime={currTime}>\r\n                    {{ currTime }} seconds\r\n                  </Trans>\r\n                </span>\r\n                <span className=\"d-inline d-sm-none text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:sec\" currTime={currTime}>\r\n                    <span>{{ currTime }}</span> sec\r\n                  </Trans>\r\n                </span>\r\n              </>\r\n            )}\r\n          </div>\r\n        </OverlayTrigger>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return <>{getJSX()}</>;\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport const useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport { useEffect } from \"react\";\r\n// import { useTranslation, Trans } from \"react-i18next\";\r\n// import { OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\n\r\nexport const useEventListener = (callback, events) => {\r\n  let defaults = {\r\n    namespace: \"IdleTimer\",\r\n    // timeout: 5 * minute,\r\n\r\n    onTimeout: () => {},\r\n\r\n    events: [\"load\", \"mousemove\", \"mousedown\", \"click\", \"scroll\", \"keypress\"],\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, { events: events });\r\n\r\n  // const [gotEvent, setGotEvent] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // console.log(props.events);\r\n\r\n    const eventHandler = (e) => {\r\n      // setGotEvent(e);\r\n      callback(e);\r\n    };\r\n\r\n    // async () => {\r\n    for (let i in props.events) {\r\n      window.addEventListener(props.events[i], eventHandler);\r\n    }\r\n\r\n    // };\r\n\r\n    return () => {\r\n      for (let i in props.events) {\r\n        // console.log(\"REMOVE LISTENER\");\r\n        window.removeEventListener(props.events[i], eventHandler);\r\n      }\r\n    };\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n       * Return\r\n       ============================================================================ */\r\n  // return gotEvent;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import { Redirect } from \"react-router-dom\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  useLocation,\r\n  // Redirect,\r\n} from \"react-router-dom\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  // Button,\r\n  // Breadcrumb,\r\n  // NavDropdown,\r\n  // Alert,\r\n} from \"react-bootstrap\";\r\n// import Octicon, { SignOut } from \"@primer/octicons-react\";\r\nimport { PowerSettingsNew } from \"@material-ui/icons\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport AccountRegistration from \"../../accountRegistration\";\r\nimport BusinessRegistration from \"../../businessRegistration\";\r\nimport { Balance, Transfer } from \"../../transfer\";\r\nimport MyBusiness from \"../../myBusiness\";\r\nimport UserEditor from \"../../userEditor\";\r\nimport CurrencyContainer from \"../../currencyContainer\";\r\nimport IdleTimer from \"../../idleTimer\";\r\n// import useIdleTimer from \"../../../utils/useIdleTimer\";\r\n\r\n// const AccountRegistration = React.lazy(() =>\r\n//   import(\"../../accountRegistration\")\r\n// );\r\n// const BusinessRegistration = React.lazy(() =>\r\n//   import(\"../../businessRegistration\")\r\n// );\r\n// const MyBusiness = React.lazy(() => import(\"../../myBusiness\"));\r\n// const UserEditor = React.lazy(() => import(\"../../userEditor\"));\r\n// const CurrencyContainer = React.lazy(() => import(\"../../currencyContainer\"));\r\n\r\n/**\r\n * Component: Summary\r\n */\r\nexport default (args) => {\r\n  // console.log(\"SUMMARY\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { namespace: \"Summary\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { signedIn, accountNumber } = props.barrelGetters;\r\n  const { setRedirectTo, setGotFocus } = props.barrelSetters;\r\n  const { getBusinesses } = props.barrelFunctions;\r\n  // const {  } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  /**\r\n   * Data consistency tests\r\n   */\r\n  if (signedIn === false) {\r\n    // setRedirectTo(\"/sign-out\");\r\n    return <>User not logged in</>;\r\n  }\r\n\r\n  // const idleTimer = useIdleTimer({ ...args, onTimeout: onSessionTimeout });\r\n  // <IdleTimer {...args} onTimeout={onSessionTimeout} />\r\n\r\n  // const topMenuBackColor = \"var(--light)\";\r\n\r\n  const location = useLocation();\r\n\r\n  // console.log(\"location:\", location);\r\n\r\n  const navigation = (\r\n    <>\r\n      <Container\r\n        fluid\r\n        style={{\r\n          // backgroundColor: \"green\",\r\n          paddingRight: \"0\",\r\n          paddingLeft: \"0\",\r\n        }}\r\n      >\r\n        <Row>\r\n          {/*\r\n           * Top Menu\r\n           */}\r\n          <Col>\r\n            <Navbar\r\n              // className=\"card-header\"\r\n              // className=\"navbar-trans\"\r\n              // bg=\"light\"\r\n              // variant=\"light\"\r\n              style={{\r\n                borderRadius: \"5px\",\r\n                // background: \"transparent !important\",\r\n                // color: \"#f7f7f7\",\r\n                backgroundColor: \"var(--light)\", // e8f6f3\r\n                boxShadow: \"none\",\r\n                // whiteSpace: \"nowrap\",\r\n              }}\r\n            >\r\n              <Navbar.Brand href=\"/\">\r\n                <img\r\n                  src=\"gfx/zlogo_light.png\"\r\n                  width=\"auto\"\r\n                  height=\"30\"\r\n                  className=\"d-inline-block align-top\"\r\n                  alt={t(\"Logo\")}\r\n                />\r\n              </Navbar.Brand>\r\n              <Nav className=\"mr-auto\">\r\n                <Nav.Link eventKey=\"profile\" href=\"/profile\">\r\n                  <UserEditor {...args} />\r\n                </Nav.Link>\r\n              </Nav>\r\n              <Nav>\r\n                <Nav.Link eventKey=\"sign-out\" href=\"/sign-out\">\r\n                  <span style={{ whiteSpace: \"nowrap\" }}>\r\n                    <span>\r\n                      <PowerSettingsNew style={{ color: \"var(--dark)\" }} />\r\n                    </span>\r\n\r\n                    <span className=\"d-none d-sm-inline\">\r\n                      &nbsp;\r\n                      {t(\"Sign out\")}\r\n                    </span>\r\n                  </span>\r\n                </Nav.Link>\r\n              </Nav>\r\n              {true && (\r\n                <Nav>\r\n                  <Nav.Item>\r\n                    <IdleTimer {...args} />\r\n                  </Nav.Item>\r\n                </Nav>\r\n              )}\r\n            </Navbar>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <div style={{ height: \"7px\" }}></div>\r\n            <Navbar\r\n              collapseOnSelect\r\n              expand=\"sm\"\r\n              // className=\"card-header\"\r\n              // className=\"navbar-trans\"\r\n              // bg=\"dark\"\r\n              variant=\"dark\"\r\n              style={{\r\n                borderRadius: \"5px\",\r\n                background: \"transparent !important\",\r\n                backgroundColor: \"var(--dark)\",\r\n                boxShadow: \"none\",\r\n              }}\r\n            >\r\n              <Nav>\r\n                <Nav.Link\r\n                  className=\"nav-link-2\"\r\n                  eventKey=\"balance\"\r\n                  href=\"/balance\"\r\n                  style={{\r\n                    fontWeight:\r\n                      location.pathname === \"/balance\" ? \"bold\" : \"normal\",\r\n                  }}\r\n                >\r\n                  {t(\"Balance\")}\r\n                </Nav.Link>\r\n              </Nav>\r\n              <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n              <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                  {accountNumber !== null && (\r\n                    <>\r\n                      <Nav.Link\r\n                        className=\"nav-link-2\"\r\n                        eventKey=\"transfer\"\r\n                        href=\"/transfer\"\r\n                        style={{\r\n                          fontWeight:\r\n                            location.pathname === \"/transfer\"\r\n                              ? \"bold\"\r\n                              : \"normal\",\r\n                        }}\r\n                      >\r\n                        {t(\"Transfer\")}\r\n                      </Nav.Link>\r\n                      <Nav.Link\r\n                        className=\"nav-link-2\"\r\n                        eventKey=\"my-business\"\r\n                        onClick={() => getBusinesses(1)}\r\n                        href=\"#\"\r\n                        style={{\r\n                          fontWeight:\r\n                            location.pathname === \"/my-business\"\r\n                              ? \"bold\"\r\n                              : \"normal\",\r\n                        }}\r\n                      >\r\n                        {t(\"Business\")}\r\n                      </Nav.Link>\r\n                      <Nav.Link\r\n                        className=\"nav-link-2\"\r\n                        eventKey=\"currency\"\r\n                        href=\"/currency\"\r\n                        style={{\r\n                          fontWeight:\r\n                            location.pathname === \"/currency\"\r\n                              ? \"bold\"\r\n                              : \"normal\",\r\n                        }}\r\n                      >\r\n                        {t(\"Currency\")}\r\n                      </Nav.Link>\r\n                    </>\r\n                  )}\r\n                </Nav>\r\n              </Navbar.Collapse>\r\n            </Navbar>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n\r\n  const viewBalanceOrTransfer = (\r\n    <Router>\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          component={() => {\r\n            return accountNumber !== null\r\n              ? Balance(args)\r\n              : AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/summary\"\r\n          component={() => {\r\n            return accountNumber !== null\r\n              ? Balance(args)\r\n              : AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/account-registration\"\r\n          component={() => {\r\n            return AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/profile\"\r\n          component={() => {\r\n            return UserEditor({ ...args, mode: \"profile\" });\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/currency\"\r\n          component={() => {\r\n            return CurrencyContainer({ ...args });\r\n          }}\r\n        />\r\n        {/* \r\n        <Route\r\n          exact\r\n          path=\"/business-registration\"\r\n          component={() => {\r\n            return BusinessRegistration(args);\r\n          }}\r\n        />\r\n        */}\r\n        <Route\r\n          exact\r\n          path=\"/my-business\"\r\n          component={() => {\r\n            return MyBusiness(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/balance\"\r\n          component={() => {\r\n            return Balance(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/transfer\"\r\n          component={() => {\r\n            return Transfer(args);\r\n          }}\r\n        />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {/* Header */}\r\n\r\n      {/* Content */}\r\n      {/*<h3>{t(\"Summary\")}</h3>*/}\r\n\r\n      <Container fluid=\"md\">\r\n        <Row>\r\n          <Col>\r\n            {navigation}\r\n            <div style={{ height: \"7px\" }}></div>\r\n          </Col>\r\n        </Row>\r\n        {/*\r\n        <Row>{viewAccountRegistration}</Row>\r\n        */}\r\n        <Row>\r\n          <Col>{viewBalanceOrTransfer}</Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Accordion, Card } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\nimport Currencies from \"../currencies\";\r\nimport CurrencyRegistration from \"../currencyRegistration\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"CurrencyContainer\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const {\r\n    accordionViewCurrency,\r\n    activePageCurrencies,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  const { setAccordionViewCurrency, setRedirectTo } = props.barrelSetters;\r\n  const { getCurrencies } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const ToggleCurrencies = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionViewCurrency(\"currencies\");\r\n    getCurrencies(activePageCurrencies);\r\n  };\r\n\r\n  const ToggleCurrencyRegistration = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionViewCurrency(\"currencyRegistration\");\r\n    // getTransactions(1);\r\n  };\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return (\r\n    <>\r\n      <Accordion defaultActiveKey={accordionViewCurrency}>\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"currencies\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleCurrencies}\r\n          >\r\n            {t(\"Currencies\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"currencies\">\r\n            <Card.Body>\r\n              <Currencies {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"currencyRegistration\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={ToggleCurrencyRegistration}\r\n          >\r\n            {t(\"Currency Registration\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"currencyRegistration\">\r\n            <Card.Body>\r\n              <CurrencyRegistration {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { TransferToSelf, TransferToPerson, TransferToBusiness } from \"./index\";\r\n// import { Alert } from \"react-bootstrap\";\r\n\r\n// const navigation = [\r\n//   {\r\n//     name: \"U2S\",\r\n//     link: \"#u2s\",\r\n//   },\r\n//   {\r\n//     name: \"U2U\",\r\n//     link: \"#u2u\",\r\n//   },\r\n//   {\r\n//     name: \"U2B\",\r\n//     link: \"#u2b\",\r\n//   },\r\n// ];\r\n\r\n/**\r\n * Component: Transfer\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber, transferType } = props.barrelGetters;\r\n  const { setRedirectTo } = props.barrelSetters;\r\n  const { format } = props.barrelFunctions;\r\n  const { onTransferTypeChange } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"Transfer\");\r\n\r\n  const data = props.data;\r\n  const type = transferType;\r\n  // const onTypeChange = args.onTypeChange;\r\n\r\n  // console.log(\"TRANSFER DATA TYPE:\", type);\r\n\r\n  const [transferCard, setTransferCard] = useState(null);\r\n\r\n  const onNavigationClick = (id) => {\r\n    onTransferTypeChange(id);\r\n  };\r\n\r\n  const navigation = [\r\n    {\r\n      name: t(\"U2S\"),\r\n      link: \"#u2s\",\r\n    },\r\n    {\r\n      name: t(\"U2U\"),\r\n      link: \"#u2u\",\r\n    },\r\n    {\r\n      name: t(\"U2B\"),\r\n      link: \"#u2b\",\r\n    },\r\n  ];\r\n\r\n  // console.log(\"TRANSFER DATA\", data);\r\n  // const title = t(\"Transfer to account\");\r\n\r\n  useEffect(() => {\r\n    if (type === null) return;\r\n\r\n    // setTransferCard()\r\n    switch (type) {\r\n      case \"#u2s\": // User to self\r\n        setTransferCard(\r\n          <TransferToSelf\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      case \"#u2u\": // User to user\r\n        setTransferCard(\r\n          <TransferToPerson\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      case \"#u2b\": // User to business\r\n        setTransferCard(\r\n          <TransferToBusiness\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [data, format, type]);\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  // return (\r\n  //   <>\r\n  //     <Alert variant=\"warning\">\r\n  //       <Alert.Heading>{t(\"Account not yet registered\")}</Alert.Heading>\r\n  //       <p>\r\n  //         <Trans i18nKey=\"Balance:Please set up your account first.\">\r\n  //           Please set up your account first. Use this{\" \"}\r\n  //           <a href=\"/account-registration\">link</a>.\r\n  //         </Trans>\r\n  //       </p>\r\n  //     </Alert>\r\n  //   </>\r\n  // );\r\n\r\n  return <>{transferCard}</>;\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport config from \"./config\";\r\nimport openSocket from \"socket.io-client\";\r\n\r\nlet socket = openSocket.connect(config.uri.ENDPOINT, {\r\n  secure: true,\r\n  reconnect: true,\r\n});\r\n\r\n/**\r\n * Send request to the server\r\n * @param {*} param0\r\n */\r\nexport const sendData = (data, debug = false) => {\r\n  if (debug) console.log(`request: ${data.req}`, data);\r\n\r\n  // No data - do not send\r\n  // if (req.length === 0) return false;\r\n\r\n  socket.emit(`onDataReceived`, data);\r\n  return true;\r\n};\r\n\r\n// Start a session\r\nexport const startSession = (data, session, debug = false) => {\r\n  // console.log(\"startSession\");\r\n  if (debug) console.log(`request: start session`, data, session);\r\n\r\n  socket.emit(`start session`, {\r\n    data: data,\r\n    session: session,\r\n    req: \"start session\",\r\n  });\r\n};\r\n\r\n// End the session\r\nexport const endSession = (data, session, debug = false) => {\r\n  if (debug) console.log(`request: end session`, data, session);\r\n  socket.emit(`end session`, {\r\n    // char: data,\r\n    data: data,\r\n    // uid: uid,\r\n    session: session,\r\n    req: \"end session\",\r\n  });\r\n};\r\n\r\n// Custom hook: useSocket\r\nexport const useSocket = (callback) => {\r\n  const [responseData, setResponseData] = useState(null);\r\n  socket.on(`onDataReceived`, (data) => {\r\n    setResponseData(data);\r\n    // callback(data);\r\n  });\r\n\r\n  // useEventListener(() => {\r\n  //   socket.on(`onDataReceived`, (data) => {\r\n  //     setResponseData(data);\r\n  //     // callback(data);\r\n  //   });\r\n  // }, [\"focus\"]);\r\n\r\n  useEffect(() => {\r\n    if (responseData === null) return;\r\n\r\n    callback(responseData);\r\n    // eslint-disable-next-line\r\n  }, [responseData]);\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport {\r\n  Form,\r\n  InputGroup,\r\n  // Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  // Spinner,\r\n} from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport SubmitButton from \"../submitButton\";\r\n// import Alert from \"../alert\";\r\n// import LanguageSelector from \"../language-selector\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"LogIn\");\r\n\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n    password: yup.string().required(t(\"No password provided\")),\r\n  });\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  const sendUserLogInRequest = (data) => {\r\n    // data.pw = data.password;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    sendRequest({ req: \"sign in user\", data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    sendUserLogInRequest(data);\r\n  };\r\n\r\n  // const languageData = { language: \"en\" };\r\n\r\n  const UserLogInForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Sign In\")}</h3>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"Password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Remember me */}\r\n      {/*\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Check\r\n          required\r\n          name=\"rememberMe\"\r\n          label={t(\"Remember me\")}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.rememberMe}\r\n          feedback={errors.rememberMe}\r\n          id=\"validationFormik0\"\r\n        />\r\n      </Form.Group>\r\n      */}\r\n\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request=\"sign in user\"\r\n          namespace=\"LogIn\"\r\n        />\r\n      </Form.Group>\r\n\r\n      <Container fluid=\"md\">\r\n        <Row>\r\n          <Col>\r\n            <p className=\"other-options text-left\">\r\n              <Trans i18nKey=\"LogIn:Not yet registered\">\r\n                Not yet <a href=\"/sign-up\">registered?</a>\r\n              </Trans>\r\n            </p>\r\n          </Col>\r\n          <Col>\r\n            <p className=\"other-options text-right\">\r\n              <Trans i18nKey=\"LogIn:Forgot password\">\r\n                Forgot <a href=\"/reset\">password?</a>\r\n              </Trans>\r\n            </p>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Form>\r\n  );\r\n\r\n  // const onAlertClose = () => {\r\n  //   setAlertVisible(false);\r\n  //   authorizedData.hideError();\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        component={UserLogInForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          email: \"\",\r\n          password: \"\",\r\n          rememberMe: \"\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","// import { Redirect } from \"react-router-dom\";\r\n// import Octicon, { Eye, EyeClosed } from \"@primer/octicons-react\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport { Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport * as yup from \"yup\";\r\n// import LanguageSelector from \"../language-selector\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"register user\", namespace: \"SignUp\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { language } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // console.log(\"SIGN UP PROPS:\", props);\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    firstName: yup.string().required(t(\"First name is required\")),\r\n    lastName: yup.string().required(t(\"Last name is required\")),\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n    password: yup\r\n      .string()\r\n      .required(t(\"No password provided\"))\r\n      .min(8, t(\"Password is too short\"))\r\n      // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n      .matches(\r\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n        t(\"Password is too weak\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  const sendUserRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.language = language;\r\n    data.validateEmail = true;\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    if (sendUserRegistrationRequest(data)) {\r\n      // User registration request was submitted\r\n    }\r\n  };\r\n\r\n  // const languageData = { language: \"en\" };\r\n\r\n  const UserRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Sign Up\")}</h3>\r\n\r\n      {/* First name */}\r\n      <Form.Group controlId=\"validationFormikFirstName\">\r\n        <Form.Label>{t(\"First name\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"Enter first name\")}\r\n            name=\"firstName\"\r\n            value={values.firstName}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.firstName && touched.firstName}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.firstName}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Last name */}\r\n      <Form.Group controlId=\"validationFormikLastName\">\r\n        <Form.Label>{t(\"Last name\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"Enter last name\")}\r\n            name=\"lastName\"\r\n            value={values.lastName}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.lastName && touched.lastName}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.lastName}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"Password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type={passwordVisible ? \"text\" : \"password\"}\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text\r\n              id=\"inputGroupAppend\"\r\n              onClick={togglePassword}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              {passwordVisible ? (\r\n                <VisibilityOff\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\" }}\r\n                />\r\n              ) : (\r\n                <Visibility fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n              )}\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationSubmitButton\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form.Group>\r\n\r\n      <p className=\"other-options text-right\">\r\n        <Trans i18nKey=\"SignUp:Already registered\">\r\n          Already registered <a href=\"/sign-in\">sign in?</a>\r\n        </Trans>\r\n      </p>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={UserRegistrationForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args.data);\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { error, info } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  const { onAlertClose: onClose } = props.barrelEventHandlers;\r\n\r\n  // const autoClose = () => {\r\n  //   window.setTimeout(() => {\r\n  //     onClose();\r\n  //   }, 5000);\r\n  // };\r\n\r\n  if (error !== null) {\r\n    let { t } = useTranslation(\"Errors\");\r\n    return (\r\n      <Alert variant=\"danger\" onClose={() => onClose()} dismissible>\r\n        {t(error)}\r\n      </Alert>\r\n    );\r\n  } else if (info !== null) {\r\n    let { t } = useTranslation(\"Infos\");\r\n    // autoClose();\r\n    return (\r\n      <Alert variant=\"info\" onClose={() => onClose()} dismissible>\r\n        {t(info)}\r\n      </Alert>\r\n    );\r\n  }\r\n  return <></>;\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"../../translations/i18n\";\r\n// import { withNamespaces } from \"react-i18next\";\r\nimport { Form, Badge } from \"react-bootstrap\";\r\n\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"CurrencyContainer\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { userData } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"LanguageSelector\");\r\n  const changeLanguage = (lng) => {\r\n    i18n.changeLanguage(lng);\r\n  };\r\n  const languages = [\r\n    { id: 1, language: \"Latviešu\", code: \"lv\" },\r\n    { id: 2, language: \"English\", code: \"en\" },\r\n  ];\r\n  const handleLanguageSelect = (e) => {\r\n    changeLanguage(e.target.value);\r\n  };\r\n  const selectLanguage = (language) => {\r\n    changeLanguage(language);\r\n\r\n    if (userData !== null) {\r\n      sendRequest({\r\n        req: \"register user language\",\r\n        data: { email: userData.email, language },\r\n      });\r\n    }\r\n  };\r\n\r\n  if (1) {\r\n    return (\r\n      <>\r\n        <div style={{ height: \"7px\" }}></div>\r\n        <Badge\r\n          pill\r\n          variant=\"light\"\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            selectLanguage(\"lv\");\r\n          }}\r\n        >\r\n          lv\r\n        </Badge>{\" \"}\r\n        <Badge\r\n          pill\r\n          variant=\"light\"\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            selectLanguage(\"en\");\r\n          }}\r\n        >\r\n          en\r\n        </Badge>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <Form.Control\r\n        as=\"select\"\r\n        id=\"languageSelector\"\r\n        onChange={handleLanguageSelect}\r\n        custom\r\n      >\r\n        <option key=\"0\" value={props.language}>\r\n          {t(\"Language\")}\r\n        </option>\r\n        {languages.map((el) => (\r\n          <option key={el.id} value={el.code}>\r\n            {el.language}\r\n          </option>\r\n        ))}\r\n      </Form.Control>\r\n    );\r\n  }\r\n};\r\n\r\n// function selectElement(id, valueToSelect) {\r\n//   let element = document.getElementById(id);\r\n//   if (!element) return;\r\n//   element.value = valueToSelect;\r\n// }\r\n\r\n// // catch the event and make changes accordingly\r\n// i18n.on(\"languageChanged\", function (lng) {\r\n//   selectElement(\"languageSelector\", lng);\r\n// });\r\n","/**\r\n * CSS\r\n */\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Main.css\";\r\n\r\n/**\r\n * System imports\r\n */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n// import { useTranslation } from \"react-i18next\";\r\n\r\n/**\r\n * User imports\r\n */\r\nimport i18n from \"../../../translations/i18n\";\r\nimport Summary from \"../summary\";\r\nimport {\r\n  useSocket,\r\n  sendData,\r\n  startSession,\r\n  endSession,\r\n} from \"../../../utils/sockets\";\r\n// import { useEventListener } from \"../../../utils/useEventListener\";\r\n// import { useEventListener } from \"../../../utils/useEventListener\";\r\nimport Login from \"../../login\";\r\nimport Logout from \"../../logout\";\r\nimport SignUp from \"../../signup\";\r\nimport PasswordReset from \"../../passwordReset\";\r\nimport errorHandler from \"../../../utils/errorHandler\";\r\nimport responseHandler from \"../../../utils/responseHandler\";\r\nimport requestHandler from \"../../../utils/requestHandler\";\r\nimport { useStickyState } from \"../../../utils/state\";\r\nimport Alert from \"../../alert\";\r\nimport LanguageSelector from \"../../language-selector\";\r\nimport ValidateEmail from \"../../validateEmail\";\r\nimport ChangePassword from \"../../changePassword\";\r\n// import { useEventListener } from \"../../../utils/useEventListener\";\r\n\r\n/**\r\n * Component: Main\r\n */\r\nexport default () => {\r\n  /**\r\n   * Properties\r\n   */\r\n  // const userDataFetchInterval = 5000; // Test: 5000 | 30000;\r\n\r\n  /** \r\n   * Hooks\r\n   ============================================================================ */\r\n  const [debug, setDebug] = useState(false);\r\n  const [loggingOut, setLoggingOut] = useState(false);\r\n  const [pageLoading, setPageLoading] = useState(true);\r\n  // const [instance, setInstance] = useStickyState(0, \"instance\");\r\n  const [request, setRequest] = useStickyState(null, \"request\");\r\n  // const [requestTS, setRequestTS] = useState(null);\r\n  const [instance, setInstance] = useState(Date.now());\r\n  // const [lastRequest, setLastRequest] = useStickyState(null, \"lastRequest\");\r\n  const [session, setSession] = useStickyState(uuidv4(), \"session\");\r\n  const [connected, setConnected] = useStickyState(false, \"connected\");\r\n  const [signedIn, setSignedIn] = useStickyState(false, \"signedIn\");\r\n  const [currencyAbbr, setCurrencyAbbr] = useStickyState(\"Z\", \"currencyAbbr\");\r\n  const [currencyRate, setCurrencyRate] = useState(1, \"currencyRate\");\r\n  const [currencies, setCurrencies] = useStickyState(null, \"currencies\");\r\n  const [transactions, setTransactions] = useStickyState(null, \"transactions\");\r\n  const [shares, setShares] = useStickyState(null, \"shares\");\r\n  const [accordionView, setAccordionView] = useStickyState(\r\n    \"balance\",\r\n    \"accordionView\"\r\n  );\r\n  const [accordionViewCurrency, setAccordionViewCurrency] = useStickyState(\r\n    null,\r\n    \"accordionViewCurrency\"\r\n  );\r\n  const [countCurrencies, setCountCurrencies] = useStickyState(\r\n    null,\r\n    \"countCurrencies\"\r\n  );\r\n  const [countTransactions, setCountTransactions] = useStickyState(\r\n    null,\r\n    \"countTransactions\"\r\n  );\r\n  const [countShares, setCountShares] = useStickyState(null, \"countShares\");\r\n  const [activePageCurrencies, setActivePageCurrencies] = useStickyState(\r\n    1,\r\n    \"activePageCurrencies\"\r\n  );\r\n  const [activePageTransactions, setActivePageTransactions] = useStickyState(\r\n    1,\r\n    \"activePageTransactions\"\r\n  );\r\n  const [activePageShares, setActivePageShares] = useStickyState(\r\n    1,\r\n    \"activePageShares\"\r\n  );\r\n  const [currenciesPerPage, setCurrenciesPerPage] = useStickyState(\r\n    5,\r\n    \"currenciesPerPage\"\r\n  );\r\n  const [transactionsPerPage, setTransactionsPerPage] = useStickyState(\r\n    5,\r\n    \"transactionsPerPage\"\r\n  );\r\n  const [sharesPerPage, setSharesPerPage] = useStickyState(5, \"sharesPerPage\");\r\n  const [userData, setUserData] = useStickyState(null, \"userData\");\r\n  const [uid, setUID] = useStickyState(null, \"uid\");\r\n  const [accountNumber, setAccountNumber] = useStickyState(\r\n    null,\r\n    \"accountNumber\"\r\n  );\r\n  const [accountType, setAccountType] = useStickyState(null, \"accountType\");\r\n  const [userBusinesses, setUserBusinesses] = useStickyState(\r\n    null,\r\n    \"userBusinesses\"\r\n  );\r\n  const [countBusinesses, setCountBusinesses] = useStickyState(\r\n    null,\r\n    \"countBusinesses\"\r\n  );\r\n  const [businessesPerPage, setBusinessesPerPage] = useStickyState(\r\n    1,\r\n    \"businessesPerPage\"\r\n  );\r\n  const [activePageBusinesses, setActivePageBusinesses] = useStickyState(\r\n    1,\r\n    \"activePageBusinesses\"\r\n  );\r\n  const [userBusinessesLoaded, setUserBusinessesLoaded] = useStickyState(\r\n    false,\r\n    \"userBusinessesLoaded\"\r\n  );\r\n  const [activeBusiness, setActiveBusiness] = useStickyState(\r\n    null,\r\n    \"activeBusiness\"\r\n  );\r\n  const [activeBusinessID, setActiveBusinessID] = useStickyState(\r\n    null,\r\n    \"activeBusinessID\"\r\n  );\r\n\r\n  const [businessPurposes, setBusinessPurposes] = useStickyState(\r\n    null,\r\n    \"businessPurposes\"\r\n  );\r\n\r\n  const [countBusinessPurposes, setCountBusinessPurposes] = useStickyState(\r\n    null,\r\n    \"countBusinessPurposes\"\r\n  );\r\n  const [businessPurposesPerPage, setBusinessPurposesPerPage] = useStickyState(\r\n    2,\r\n    \"businessPurposesPerPage\"\r\n  );\r\n  const [\r\n    activePageBusinessPurposes,\r\n    setActivePageBusinessPurposes,\r\n  ] = useStickyState(1, \"activePageBusinessPurposes\");\r\n\r\n  const [activeBusinesPurpose, setActiveBusinesPurpose] = useStickyState(\r\n    null,\r\n    \"activeBusinesPurpose\"\r\n  );\r\n\r\n  const [purposeShareholders, setPurposeShareholders] = useStickyState(\r\n    null,\r\n    \"purposeShareholders\"\r\n  );\r\n\r\n  // const [businessLoaded, setBusinessLoaded] = useState(null);\r\n  // const [redirect, setRedirect] = useState(false);\r\n  const [redirectTo, setRedirectTo] = useState(null);\r\n  const [lastInsertId, setLastInsertId] = useState(null);\r\n  // const [responseData, setResponseData] = useState(null);\r\n  const [validateTokenEmail, setValidateTokenEmail] = useState(null);\r\n  const [validateTokenPasswordReset, setValidateTokenPasswordReset] = useState(\r\n    null\r\n  );\r\n\r\n  // const [\r\n  //   passwordResetTokenValidated,\r\n  //   setPasswordResetTokenValidated,\r\n  // ] = useStickyState(\"none\", \"passwordResetTokenValidated\");\r\n\r\n  const [\r\n    passwordResetTokenValidated,\r\n    setPasswordResetTokenValidated,\r\n  ] = useState(null);\r\n  const [passwordResetTokenEmail, setPasswordResetTokenEmail] = useState(null);\r\n\r\n  const [tmrConnected] = useState(null);\r\n  const [language, setLanguage] = useStickyState(\r\n    i18n.options.fallbackLng[0],\r\n    \"language\"\r\n  ); //\r\n  const [transferType, setTransferType] = useStickyState(\r\n    \"#u2s\",\r\n    \"transferType\"\r\n  );\r\n  // const [transferSuccess, setTransferSuccess] = useStickyState(\r\n  //   false,\r\n  //   \"transferSuccess\"\r\n  // );\r\n  const [accountPhotoPath, setAccountPhotoPath] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n  const [info, setInfo] = useState(null);\r\n  // const [alertVisible, setAlertVisible] = useState(false);\r\n\r\n  // const gotEvent = useEventListener();\r\n  // console.log(gotEvent);\r\n\r\n  /**\r\n   * Barrel: Getters\r\n   */\r\n  const barrelGetters = {\r\n    debug,\r\n    // instance,\r\n    loggingOut,\r\n    // timestamp,\r\n    // startTimestamp,\r\n    pageLoading,\r\n    request,\r\n    // requestTS,\r\n    instance,\r\n    // lastRequest,\r\n    session,\r\n    // sessionTimeout,\r\n    // tmrSession,\r\n    currencies: JSON.parse(currencies),\r\n    transactions: JSON.parse(transactions),\r\n    shares: JSON.parse(shares),\r\n    accordionView,\r\n    accordionViewCurrency,\r\n    countCurrencies,\r\n    countTransactions,\r\n    countShares,\r\n    activePageCurrencies,\r\n    activePageTransactions,\r\n    activePageShares,\r\n    currenciesPerPage,\r\n    transactionsPerPage,\r\n    sharesPerPage,\r\n    userData: JSON.parse(userData),\r\n    // redirect,\r\n    redirectTo,\r\n    lastInsertId,\r\n    connected,\r\n    signedIn,\r\n    currencyAbbr,\r\n    currencyRate,\r\n    // currencyStatus,\r\n    accountNumber,\r\n    accountType,\r\n    uid,\r\n    userBusinesses: JSON.parse(userBusinesses),\r\n    countBusinesses,\r\n    businessesPerPage,\r\n    activePageBusinesses,\r\n    userBusinessesLoaded,\r\n    activeBusiness,\r\n    activeBusinessID,\r\n    businessPurposes: JSON.parse(businessPurposes),\r\n    countBusinessPurposes,\r\n    businessPurposesPerPage,\r\n    activePageBusinessPurposes,\r\n    activeBusinesPurpose,\r\n    purposeShareholders: JSON.parse(purposeShareholders),\r\n    // businessLoaded,\r\n    tmrConnected,\r\n    validateTokenEmail,\r\n    validateTokenPasswordReset,\r\n    passwordResetTokenValidated,\r\n    passwordResetTokenEmail,\r\n    language,\r\n    transferType,\r\n    // transferSuccess,\r\n    accountPhotoPath,\r\n    error,\r\n    info,\r\n    // alertVisible,\r\n  };\r\n\r\n  /**\r\n   * Barrel: Setters\r\n   */\r\n  const barrelSetters = {\r\n    setDebug,\r\n    // setInstance,\r\n    setLoggingOut,\r\n    // setTimestamp,\r\n    // setStartTimestamp,\r\n    setPageLoading,\r\n    setRequest,\r\n    // setRequestTS,\r\n    setInstance,\r\n    // setLastRequest,\r\n    setSession,\r\n    // setSessionTimeout,\r\n    setCurrencies,\r\n    setTransactions,\r\n    setShares,\r\n    setAccordionView,\r\n    setAccordionViewCurrency,\r\n    setCountCurrencies,\r\n    setCountTransactions,\r\n    setCountShares,\r\n    setActivePageCurrencies,\r\n    setActivePageTransactions,\r\n    setActivePageShares,\r\n    setCurrenciesPerPage,\r\n    setTransactionsPerPage,\r\n    setSharesPerPage,\r\n    setConnected,\r\n    setLanguage,\r\n    setUserData,\r\n    // sendRequest,\r\n    setSignedIn,\r\n    setCurrencyAbbr,\r\n    setCurrencyRate,\r\n    // setCurrencyStatus,\r\n    setRedirectTo,\r\n    setLastInsertId,\r\n    setAccountNumber,\r\n    setAccountType,\r\n    setUID,\r\n    setUserBusinesses,\r\n    setCountBusinesses,\r\n    setBusinessesPerPage,\r\n    setActivePageBusinesses,\r\n    setUserBusinessesLoaded,\r\n    setActiveBusiness,\r\n    setActiveBusinessID,\r\n    setBusinessPurposes,\r\n    setCountBusinessPurposes,\r\n    setBusinessPurposesPerPage,\r\n    setActivePageBusinessPurposes,\r\n    setActiveBusinesPurpose,\r\n    setPurposeShareholders,\r\n    // setBusinessLoaded,\r\n    setAccountPhotoPath,\r\n    setValidateTokenEmail,\r\n    setValidateTokenPasswordReset,\r\n    setPasswordResetTokenValidated,\r\n    setPasswordResetTokenEmail,\r\n    // setTransferSuccess,\r\n    // setRedirect,\r\n    // showMessage,\r\n  };\r\n\r\n  /** \r\n   * Custom hooks\r\n   ============================================================================ */\r\n  // const { t } = useTranslation(\"Errors\");\r\n\r\n  useSocket((data) => {\r\n    // console.log(\"REQUEST:\", request);\r\n\r\n    // if (!gotFocus) return;\r\n    // console.log(\"USE SOCKET:\", data);\r\n\r\n    // setResponseData(data);\r\n\r\n    // console.log(\"LAST REQUEST:\", lastRequest);\r\n\r\n    processResponse({\r\n      args: data,\r\n      barrels: barrels,\r\n    });\r\n  });\r\n\r\n  // useEventListener(\r\n  //   (e) => {\r\n  //     console.log(\"EVENT:\", e.type);\r\n  //     // setGotFocus(e.type === \"focus\");\r\n  //     setInstance(e.type === \"load\" ? instance + 1 : instance - 1);\r\n  //   },\r\n  //   [\"load\", \"onbeforeunload\"] // \"blur\",\r\n  // );\r\n\r\n  // useEventListener(() => {\r\n  //   // console.log(\"LOST FOCUS\");\r\n  //   setGotFocus(false);\r\n  // }, [\"blur\"]);\r\n\r\n  /** \r\n   * Functions\r\n   ============================================================================ */\r\n\r\n  /**\r\n   * Sends requests to the server\r\n   * @param {string} request Request name\r\n   * @param {object} data Request data\r\n   */\r\n  const sendRequest = ({ req, data = null }) => {\r\n    if (processRequest({ req, data, session, uid: \"STA\", barrels })) {\r\n      // request processed successfully\r\n      return true;\r\n    } else {\r\n      console.log(\"THIS SHOULD NOT BE REACHED\");\r\n      return sendData({ req, uid: \"STA\", session, data }, debug);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Processes user request\r\n   * @param {*} param0\r\n   */\r\n  const processRequest = ({ req, data, session, uid, barrels }) => {\r\n    // showMessage(\"PROCESSING_REQUEST\", \"info\");\r\n    // console.log(\"LAST REQUEST:\", lastRequest);\r\n\r\n    // data.ts = Date.now();\r\n    // setRequestTS(data.ts);\r\n    data.instance = instance;\r\n\r\n    setRequest(req);\r\n    // setLastRequest(req);\r\n    return requestHandler({\r\n      req,\r\n      data,\r\n      session,\r\n      uid,\r\n      barrels,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Processes server response\r\n   * @param {*} param0\r\n   */\r\n  const processResponse = ({ args, barrels }) => {\r\n    // console.log(\"PROCESS RESPONSE ARGS:\", args);\r\n\r\n    /**\r\n     * Choose a handler depending on response status:\r\n     * Error or other (success | continue | finished | pending etc.)\r\n     */\r\n    return args.status === \"error\"\r\n      ? errorHandler({\r\n          args: args,\r\n          uid: uid,\r\n          barrels: barrels,\r\n        })\r\n      : responseHandler({\r\n          args: args,\r\n          uid: uid,\r\n          barrels: barrels,\r\n        });\r\n  };\r\n\r\n  /**\r\n   * Shows a messgae (error or info)\r\n   * @param {string} msg Messgae text\r\n   * @param {string} type Message type (\"error\" | \"info\")\r\n   */\r\n  const showMessage = (msg, type = \"error\") => {\r\n    // if (type !== \"error\") {\r\n    //   hideMessage();\r\n    // }\r\n    type === \"error\" ? setError(msg) : setInfo(msg);\r\n  };\r\n\r\n  /**\r\n   * Hides the message\r\n   */\r\n  const hideMessage = () => {\r\n    setError(null);\r\n    setInfo(null);\r\n  };\r\n\r\n  // const startSessionTimeout = () => {\r\n  //   if (tmrSession.current !== false) clearInterval(tmrSession.current);\r\n  //   setSessionTimeout(10);\r\n  //   tmrSession.current = setInterval(() => {\r\n  //     console.log(\"sessionTimeout:\", sessionTimeout);\r\n\r\n  //     setSessionTimeout(sessionTimeout - 1);\r\n  //   }, 1000);\r\n  // };\r\n\r\n  // const startSessionTimeout() {\r\n  //   let [count, setCount] = useState(0);\r\n\r\n  //   useInterval(() => {\r\n  //     // Your custom logic here\r\n  //     setCount(count + 1);\r\n  //   }, 1000);\r\n\r\n  //   return <h1>{count}</h1>;\r\n  // }\r\n\r\n  // const stopSessionTimeout = () => {\r\n  //   if (tmrSession.current !== false) clearInterval(tmrSession.current);\r\n  // };\r\n\r\n  /**\r\n   * Changes the website language\r\n   */\r\n  const changeLanguage = (lng) => {\r\n    i18n.changeLanguage(lng);\r\n    setLanguage(lng);\r\n  };\r\n\r\n  /**\r\n   * Format number\r\n   * @param {number} number\r\n   */\r\n  const format = (number, currency = currencyAbbr) => {\r\n    return (\r\n      new Intl.NumberFormat(language, {\r\n        notation: \"standard\",\r\n        minimumFractionDigits: 2,\r\n      }).format(number * currencyRate) +\r\n      \" \" +\r\n      currency\r\n    );\r\n  };\r\n  //\r\n\r\n  /**\r\n   * Format per cent\r\n   * @param {number} number\r\n   */\r\n  const formatPerCent = (number) => {\r\n    return (\r\n      new Intl.NumberFormat(language, {\r\n        notation: \"standard\",\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 2,\r\n      }).format(number) + \"%\"\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Format per cent\r\n   * @param {number} number\r\n   */\r\n  const formatExchangeRate = (number) => {\r\n    return new Intl.NumberFormat(language, {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 5,\r\n      maximumFractionDigits: 5,\r\n    }).format(number);\r\n  };\r\n\r\n  const parseLocaleNumber = (stringNumber, locale) => {\r\n    let num = 123456.789,\r\n      fmt_local = new Intl.NumberFormat(locale, {\r\n        style: \"currency\",\r\n        currency: \"USD\",\r\n      }),\r\n      parts_local = fmt_local.formatToParts(num),\r\n      group = \"\",\r\n      decimal = \"\",\r\n      currency = \"\";\r\n\r\n    // separators\r\n    parts_local.forEach(function (i) {\r\n      switch (i.type) {\r\n        case \"group\":\r\n          group = i.value;\r\n          break;\r\n        case \"decimal\":\r\n          decimal = i.value;\r\n          break;\r\n        case \"currency\":\r\n          currency = i.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    return parseFloat(\r\n      stringNumber\r\n        .replace(new RegExp(\"\\\\\" + group, \"g\"), \"\")\r\n        .replace(new RegExp(\"\\\\\" + decimal), \".\")\r\n        .replace(new RegExp(\"\\\\\" + currency, \"g\"), \"\")\r\n    );\r\n  };\r\n\r\n  const formatDate = (\r\n    ts,\r\n    options = {\r\n      month: \"long\",\r\n      day: \"numeric\",\r\n      year: \"numeric\",\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n    }\r\n  ) => {\r\n    // const event = new Date(date);\r\n\r\n    // const options = {\r\n    //   weekday: \"long\",\r\n    //   year: \"numeric\",\r\n    //   month: \"long\",\r\n    //   day: \"numeric\",\r\n    // };\r\n\r\n    // return event.toLocaleDateString(language, options);\r\n\r\n    // const defaults = {\r\n    //   month: \"long\",\r\n    //   day: \"numeric\",\r\n    //   year: \"numeric\",\r\n    //   hour: \"numeric\",\r\n    //   minute: \"numeric\",\r\n    // };\r\n    // const options = Object.assign(defaults, args);\r\n    const date = new Date(ts);\r\n    return new Intl.DateTimeFormat(language, options).format(date);\r\n  };\r\n\r\n  /**\r\n   * Retrieves an URL parameter\r\n   */\r\n  const getUrlParam = (param) => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    return urlParams.get(param);\r\n  };\r\n\r\n  // /**\r\n  //  * Clear local storage (URL param ?reset)\r\n  //  */\r\n  // if (getUrlParam(\"reset\") !== null) {\r\n  //   console.log(\"Reset\");\r\n\r\n  //   window.localStorage.clear();\r\n  //   console.log(\"Local storage cleared\");\r\n  // }\r\n\r\n  const sendEmailValidationRequest = ({ token, email }) => {\r\n    // console.log(\"sendEmailValidationRequest:\", token, email);\r\n\r\n    sendRequest({\r\n      req: \"validate email token\",\r\n      data: { token, email },\r\n    });\r\n  };\r\n\r\n  const sendPasswordResetRequest = ({ token, email }) => {\r\n    // console.log(\"sendEmailValidationRequest:\", token, email);\r\n    setPasswordResetTokenEmail(email);\r\n    sendRequest({\r\n      req: \"validate password reset token\",\r\n      data: { token, email },\r\n    });\r\n  };\r\n\r\n  const getCurrencies = (newPage) => {\r\n    setCurrencies(null);\r\n    sendRequest({\r\n      req: \"get currencies\",\r\n      data: { page: newPage, limit: currenciesPerPage },\r\n    });\r\n    setActivePageCurrencies(newPage);\r\n  };\r\n\r\n  const getTransactions = (newPage) => {\r\n    setTransactions(null);\r\n    sendRequest({\r\n      req: \"get transactions\",\r\n      data: { page: newPage, limit: transactionsPerPage, uid: accountNumber },\r\n    });\r\n    setActivePageTransactions(newPage);\r\n  };\r\n\r\n  const getShares = (newPage) => {\r\n    setShares(null);\r\n    sendRequest({\r\n      req: \"get shares\",\r\n      data: { page: newPage, limit: sharesPerPage, uid: accountNumber },\r\n    });\r\n    setActivePageShares(newPage);\r\n  };\r\n\r\n  const getBusinesses = (newPage = 1) => {\r\n    setUserBusinesses(null);\r\n    setCountBusinessPurposes(null);\r\n    setActivePageBusinessPurposes(1);\r\n    setActiveBusinessID(null);\r\n    sendRequest({\r\n      req: \"get user businesses\",\r\n      data: { uid: accountNumber, page: newPage, limit: businessesPerPage },\r\n    });\r\n    setActivePageBusinesses(newPage);\r\n  };\r\n\r\n  const getBusinessPurposes = (business_id, selected = null, newPage = 1) => {\r\n    // console.log(\"BUSINESS PURPOSES FOR ID \" + business_id, businessPurposes);\r\n\r\n    if (selected !== null) {\r\n      setActiveBusiness(selected);\r\n      setActiveBusinesPurpose(null);\r\n    }\r\n    setBusinessPurposes(null);\r\n    setCountBusinessPurposes(null);\r\n    setActivePageBusinessPurposes(newPage);\r\n    setActiveBusinessID(business_id);\r\n    return sendRequest({\r\n      req: \"get business purposes\",\r\n      data: {\r\n        business_id: business_id,\r\n        page: newPage,\r\n        limit: businessPurposesPerPage,\r\n      },\r\n    });\r\n  };\r\n\r\n  const getPurposeShareholders = (purpose_id, selected = null) => {\r\n    if (selected !== null) {\r\n      // setActiveBusinesPurpose(selected);\r\n      setActiveBusinesPurpose(purpose_id);\r\n    }\r\n    setPurposeShareholders(null);\r\n    return sendRequest({\r\n      req: \"get purpose shareholders\",\r\n      data: { purpose_id: purpose_id },\r\n    });\r\n  };\r\n\r\n  const getAccountData = () => {\r\n    sendRequest({\r\n      req: \"get account data\",\r\n      data: { uid: accountNumber },\r\n    });\r\n  };\r\n\r\n  const getTransactionById = (id) => {\r\n    sendRequest({\r\n      req: \"get transaction by id\",\r\n      data: { id: id },\r\n    });\r\n  };\r\n\r\n  const getContainerClass = (signedIn) => {\r\n    return {\r\n      wrapperClass: signedIn\r\n        ? \"auth-wrapper auth-wrapper-summary\"\r\n        : \"auth-wrapper\",\r\n      innerClass: signedIn\r\n        ? \"auth-inner auth-inner-summary\"\r\n        : \"auth-inner autoWidth\",\r\n    };\r\n  };\r\n\r\n  const getRedirect = () => {\r\n    // if (redirectTo !== null) {\r\n    //   let link = redirectTo;\r\n\r\n    //   r = <Redirect push to={link} />;\r\n    // }\r\n    return redirectTo === null ? \"\" : <Redirect push to={redirectTo} />;\r\n  };\r\n\r\n  // const updateTimestamp = () => {\r\n  //   let tmr = setInterval(() => {\r\n  //     // console.log(timestamp);\r\n\r\n  //     setTimestamp(Math.floor(Date.now() / 1000));\r\n  //   }, 1000);\r\n  //   setTmrUpdateTimestamp(tmr);\r\n  // };\r\n\r\n  // const clearTimestamp = () => {\r\n  //   clearInterval(tmrUpdateTimestamp);\r\n  // };\r\n\r\n  const getReviser = () => {\r\n    return \"STA\";\r\n  };\r\n\r\n  const getWorkplace = () => {\r\n    return \"LAPSTA\";\r\n  };\r\n\r\n  /**\r\n   * Barrel: Functions\r\n   */\r\n  const barrelFunctions = {\r\n    sendRequest,\r\n    // processResponse,\r\n    showMessage,\r\n    hideMessage,\r\n    // startSessionTimeout,\r\n    // stopSessionTimeout,\r\n    changeLanguage,\r\n    format,\r\n    formatPerCent,\r\n    formatExchangeRate,\r\n    formatDate,\r\n    sendEmailValidationRequest,\r\n    getUrlParam,\r\n    getAccountData,\r\n    getTransactionById,\r\n    getBusinesses,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n    getCurrencies,\r\n    getTransactions,\r\n    getShares,\r\n    parseLocaleNumber,\r\n    getReviser,\r\n    getWorkplace,\r\n    // updateTimestamp,\r\n  };\r\n\r\n  /** \r\n   * Event handlers\r\n   ============================================================================ */\r\n\r\n  /**\r\n   * On language change\r\n   */\r\n  i18n.on(\"languageChanged\", function (lng) {\r\n    setLanguage(lng);\r\n  });\r\n\r\n  /**\r\n   * On redirect\r\n   * @param {string} to Redirect path (e.g. \"/sign-in\")\r\n   */\r\n  const onRedirect = (to) => {\r\n    setRedirectTo(to);\r\n  };\r\n\r\n  // /**\r\n  //  * On login\r\n  //  * @param {object} data Login data\r\n  //  */\r\n  // const onLogin = (data) => {\r\n  //   setUserData(JSON.stringify(data));\r\n  //   sendRequest({ req: \"sign in user\", data: data });\r\n  //   // setAuthorizationStep(1); // authorized session request pending\r\n  // };\r\n\r\n  /**\r\n   * On signup\r\n   * @param {object} data Signup data\r\n   */\r\n  const onSignUp = (data) => {\r\n    // console.log(\"SIGN UP (data):\", data);\r\n    /// setUserData(JSON.stringify(data));\r\n    return sendRequest({ req: \"register user\", data });\r\n  };\r\n\r\n  const onSessionTimeout = () => {\r\n    if (debug) return;\r\n    console.log(\"Session timed out...\");\r\n    // endSession(\"bye\", session);\r\n    setLoggingOut(true);\r\n    setRedirectTo(\"/sign-out\");\r\n    // Logout();\r\n  };\r\n\r\n  /**\r\n   * On account registration\r\n   * @param {object} data The account registration data\r\n   */\r\n  // const onAccountRegistration = (data) => {\r\n  //   // console.log(\"ACCOUNT REGISTRATION (data):\", data);\r\n  //   // setAccountNumber(data.personalID);\r\n  //   return sendRequest({ req: \"register account\", data });\r\n  // };\r\n\r\n  /**\r\n   * On transfer type change\r\n   * @param {string} id The transfer type id (\"U2S\", \"U2U\", \"U2B\" etc.)\r\n   */\r\n  const onTransferTypeChange = (id) => {\r\n    // console.log(\"setTransferType: \" + id);\r\n    setTransferType(id);\r\n  };\r\n\r\n  const onTransferSuccess = () => {\r\n    // console.log(\"ON TRANSFER SUCCESS\", barrels);\r\n  };\r\n\r\n  /**\r\n   * On transfer\r\n   * @param {object} data Transfer data\r\n   */\r\n  const onTransfer = (data) => {\r\n    // console.log(\"ON TRANSFER (data):\", data);\r\n    // sendRequest({ req: \"register account\", data: data });\r\n    sendRequest(data);\r\n  };\r\n\r\n  // const onBusinessRegistration = (data) => {\r\n  //   // console.log(\"ON BUSINESS REGISTRATION (data):\", data);\r\n  //   // sendRequest({ req: \"register account\", data: data });\r\n  //   sendRequest(data);\r\n  // };\r\n\r\n  const onPurposeRegistration = (data) => {\r\n    // console.log(\"ON PURPOSE REGISTRATION (data):\", data);\r\n    // sendRequest({ req: \"register account\", data: data });\r\n    sendRequest(data);\r\n    // getBusinesses();\r\n  };\r\n\r\n  // const onShareholderRegistration = (data) => {\r\n  //   console.log(\"ON SHAREHOLDER REGISTRATION (data):\", data);\r\n  //   // sendRequest({ req: \"register account\", data: data });\r\n  //   sendRequest(data);\r\n  //   // getBusinesses();\r\n  // };\r\n\r\n  /**\r\n   * On logout\r\n   */\r\n  const onLogOut = () => {\r\n    // setSession(null);\r\n\r\n    // TODO: refactor this to separate function (as well as the startSession)\r\n    let data = {};\r\n    data.request = \"bye\";\r\n    data.instance = instance;\r\n    endSession(data, session, debug);\r\n    // setSession(null);\r\n\r\n    setSignedIn(false);\r\n    // setTimerActive(false);\r\n\r\n    setCurrencies(null);\r\n    setTransactions(null);\r\n    setShares(null);\r\n    setAccordionView(\"balance\");\r\n    setAccordionViewCurrency(null);\r\n    setAccountNumber(null);\r\n    setAccountType(null);\r\n    setTransferType(\"#u2s\");\r\n    setCountTransactions(null);\r\n    setUserData(null);\r\n    setUserBusinesses(null);\r\n    setUserBusinessesLoaded(false);\r\n    setActiveBusiness(null);\r\n    setBusinessPurposes(null);\r\n    setActiveBusinesPurpose(null);\r\n    setPurposeShareholders(null);\r\n    setAccountPhotoPath(\"\");\r\n    setPasswordResetTokenValidated(null);\r\n    setPasswordResetTokenEmail(null);\r\n    // setSharesPerPage(1);\r\n    setError(null);\r\n    setInfo(null);\r\n    // setRedirectTo(\"/sign-in\"); // TODO: In production might disable that\r\n    // window.localStorage.clear(); // TODO: Remove in production remove\r\n  };\r\n\r\n  const onAlertClose = () => {\r\n    // setAlertVisible(false);\r\n    hideMessage();\r\n  };\r\n\r\n  /**\r\n   * Barrel: Event handlers\r\n   */\r\n  const barrelEventHandlers = {\r\n    onRedirect,\r\n    onSignUp,\r\n    onSessionTimeout,\r\n    // onAccountRegistration,\r\n    onTransferTypeChange,\r\n    onTransferSuccess,\r\n    onTransfer,\r\n\r\n    // onBusinessRegistration,\r\n    onPurposeRegistration,\r\n    // onShareholderRegistration,\r\n    onLogOut,\r\n    onAlertClose,\r\n  };\r\n\r\n  /** \r\n   * Effect hooks\r\n   ============================================================================ */\r\n\r\n  useEffect(() => {\r\n    // console.log(\"MOUNTED\");\r\n\r\n    /**\r\n     * Clear local storage (URL param ?reset)\r\n     */\r\n    if (getUrlParam(\"reset\") !== null) {\r\n      window.localStorage.clear();\r\n      console.log(\"Local storage cleared\");\r\n    }\r\n\r\n    // updateTimestamp();\r\n\r\n    // startSessionTimeout();\r\n\r\n    return () => {\r\n      // console.log(\"UNMOUNTED\");\r\n      // stopSessionTimeout();\r\n    };\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n   * On session ID change\r\n   */\r\n  useEffect(() => {\r\n    if (session === null) return;\r\n    let data = {};\r\n    data.request = \"hello\";\r\n    data.instance = instance;\r\n    startSession(data, session, debug);\r\n    // eslint-disable-next-line\r\n  }, [session]);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"sessionTimeout:\", sessionTimeout);\r\n\r\n  //   // eslint-disable-next-line\r\n  // }, [sessionTimeout]);\r\n\r\n  useEffect(() => {\r\n    // if (connected === false) {\r\n    //   // anonymize session\r\n    //   setSession(uuidv4());\r\n    // }\r\n    // eslint-disable-next-line\r\n  }, [connected]);\r\n\r\n  /**\r\n   * On signed in status change\r\n   */\r\n  useEffect(() => {\r\n    if (!signedIn) return;\r\n    // if (signedIn) {\r\n    //   updateTimestamp();\r\n    // } else {\r\n    //   clearTimestamp();\r\n    // }\r\n    // updateTimestamp();\r\n    // setTimerActive(true);\r\n    // eslint-disable-next-line\r\n  }, [signedIn]);\r\n\r\n  // useEffect(() => {\r\n  //   if (timerActive) {\r\n  //     console.log(\"SET INTERVAL\");\r\n  //     updateTimestamp();\r\n  //   } else {\r\n  //     console.log(\"CLEAR INTERVAL\");\r\n\r\n  //     clearInterval(tmrUpdateTimestamp);\r\n  //   }\r\n  //   // eslint-disable-next-line\r\n  // }, [timerActive]);\r\n\r\n  /**\r\n   * On account number change\r\n   */\r\n  useEffect(() => {\r\n    if (accountNumber === null) return;\r\n\r\n    // eslint-disable-next-line\r\n  }, [accountNumber]);\r\n\r\n  /**\r\n   * On email validation token\r\n   */\r\n  useEffect(() => {\r\n    if (validateTokenEmail === null) return;\r\n\r\n    sendEmailValidationRequest(JSON.parse(validateTokenEmail));\r\n\r\n    // eslint-disable-next-line\r\n  }, [validateTokenEmail]);\r\n\r\n  // useEffect(() => {\r\n  //   // console.log(\"EVENT\");\r\n  //   // eslint-disable-next-line\r\n  // }, [useEventListener()]);\r\n\r\n  /**\r\n   * On email validation token\r\n   */\r\n  useEffect(() => {\r\n    if (passwordResetTokenValidated === null) return;\r\n\r\n    // console.log(\"Validate token:\", passwordResetTokenValidated);\r\n\r\n    // sendEmailValidationRequest(JSON.parse(validateTokenEmail));\r\n    onRedirect(\"/password\");\r\n\r\n    // eslint-disable-next-line\r\n  }, [passwordResetTokenValidated]);\r\n\r\n  /**\r\n   * On password reset validation token\r\n   */\r\n  useEffect(() => {\r\n    if (validateTokenPasswordReset === null) return;\r\n\r\n    // console.log(\"Validate password reset token:\", validateTokenPasswordReset);\r\n\r\n    sendPasswordResetRequest(JSON.parse(validateTokenPasswordReset));\r\n\r\n    // eslint-disable-next-line\r\n  }, [validateTokenPasswordReset]);\r\n\r\n  const { wrapperClass, innerClass } = getContainerClass(signedIn);\r\n\r\n  /**\r\n   * Barrel of barrels\r\n   */\r\n  const barrels = {\r\n    barrelGetters,\r\n    barrelSetters,\r\n    barrelFunctions,\r\n    barrelEventHandlers,\r\n  };\r\n\r\n  const appClass = signedIn ? \"App\" : \"App bg\";\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        {getRedirect()}\r\n\r\n        <div className={appClass} style={{}}>\r\n          {/**\r\n           * Wrapper for the main window\r\n           */}\r\n          <div className={wrapperClass} style={{}}>\r\n            {/**\r\n             * Top margin of the main window (only for >= sm)\r\n             */}\r\n            <div className=\"d-none d-md-block\" style={{ height: \"1rem\" }}></div>\r\n\r\n            {/**\r\n             * The main window\r\n             */}\r\n            <div className={innerClass}>\r\n              {/**\r\n               * Top padding of the main window\r\n               */}\r\n              <div style={{ height: \"16px\" }}></div>\r\n\r\n              {/**\r\n               * The alert\r\n               */}\r\n              <div>\r\n                <Alert data={barrels} />\r\n              </div>\r\n\r\n              {/**\r\n               * Routes\r\n               */}\r\n              <Switch>\r\n                {/**\r\n                 * Route: Home\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/\"\r\n                  component={() => {\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Sign in\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-in\"\r\n                  component={() => {\r\n                    return Login(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Sign up\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-up\"\r\n                  component={() => {\r\n                    return SignUp(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Validate mail\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/validate-email\"\r\n                  component={() => {\r\n                    return ValidateEmail(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Change password\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/password\"\r\n                  component={() => {\r\n                    return ChangePassword(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: User profile\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/profile\"\r\n                  component={() => {\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Currency\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/currency\"\r\n                  component={() => {\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Sign out\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-out\"\r\n                  component={() => {\r\n                    return Logout(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Password reset\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/reset\"\r\n                  component={() => {\r\n                    return PasswordReset(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Account registration\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/account-registration\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Business registration\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/business-registration\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: My business\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/my-business\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Balance\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/balance\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Transfer\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/transfer\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Summary\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/summary\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n              </Switch>\r\n\r\n              {/**\r\n               * Language selector\r\n               */}\r\n              <div className=\"text-center\">\r\n                <LanguageSelector {...barrels} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n","import { sendData } from \"../utils/sockets\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n  const { req, data, session, uid, barrels } = props;\r\n\r\n  // console.log(\"RESPONSE HANDLER: \", props, barrels);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const { debug } = barrels.barrelGetters;\r\n  const {\r\n    setUserData,\r\n    setUID,\r\n    setAccountNumber,\r\n    // setUserBusinesses,\r\n  } = barrels.barrelSetters;\r\n  // const { sendRequest, showMessage } = barrels.barrelFunctions;\r\n  //   const {} = barrels.barrelEventHandlers;\r\n\r\n  let requestFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onRequest = (req, callback) => {\r\n    if (requestFound) return;\r\n    if (req === props.req || req === \"default\") {\r\n      callback();\r\n      requestFound = true;\r\n    }\r\n  };\r\n\r\n  /** \r\n   * Request handlers\r\n  ============================================================================ */\r\n\r\n  onRequest(\"sign in user\", () => {\r\n    // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n    // console.log(\"onRequest:\", data);\r\n\r\n    setUserData(JSON.stringify(data));\r\n    sendData({ req, data, uid, session }, debug);\r\n  });\r\n\r\n  onRequest(\"register account\", () => {\r\n    // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n    setUID(data.personalID);\r\n    setAccountNumber(data.personalID);\r\n    sendData({ req, data, uid, session }, debug);\r\n  });\r\n\r\n  // onRequest(\"get user businesses\", () => {\r\n  //   // setUserBusinesses(null);\r\n  //   if (userBusinesses === null) {\r\n  //     sendData({ req, data, uid, session });\r\n  //   } else {\r\n  //     //\r\n  //   }\r\n  // });\r\n\r\n  // onRequest(\"register user\", () => {\r\n  //   // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n  //   // setUserData(JSON.stringify(data));\r\n  //   sendData({ req, data, uid, session });\r\n  // });\r\n\r\n  // onRequest(\"register shareholder\", () => {\r\n  //   // console.log(\"REQUEST:\", req, data, session, uid, barrels);\r\n  //   // setUserData(JSON.stringify(data));\r\n  //   sendData({ req, data, uid, session });\r\n  // });\r\n\r\n  onRequest(\"default\", () => {\r\n    sendData({ req, data, uid, session }, debug);\r\n\r\n    return true;\r\n  });\r\n\r\n  // onRequest(\"unknown\", () => {\r\n  //   showMessage(`UNKNOWN REQUEST ${req}`, \"info\");\r\n\r\n  //   return true;\r\n  // });\r\n\r\n  return requestFound;\r\n};\r\n","// import { useTranslation } from \"react-i18next\";\r\n\r\nexport default ({ args, barrels }) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {} = barrels.barrelGetters;\r\n  const { setRequest, setUID, setAccountNumber } = barrels.barrelSetters;\r\n  const { showMessage } = barrels.barrelFunctions;\r\n  // const {} = barrels.barrelEventHandlers;\r\n\r\n  //   const { t } = useTranslation(\"Errors\");\r\n  const { req, error, context } = props;\r\n  console.log(`ERROR: ${req}`, error, context, props, barrels);\r\n  // const { showMessage } = barrels.barrelFunctions;\r\n\r\n  let errorFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onError = (data, callback) => {\r\n    if (errorFound) return;\r\n    const [res, status] = data;\r\n    if ((res === req && status === error.code) || res === \"unknown\") {\r\n      callback();\r\n      setRequest(null);\r\n      errorFound = true;\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /** \r\n   * Response handlers\r\n  ============================================================================ */\r\n\r\n  /**\r\n   * Transfer errors\r\n   */\r\n  onError([\"transfer U2S\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"transfer U2U\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"transfer U2B\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_USER_REGISTRATION\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user language\", \"NO_ROWS_CHANGED\"], () => {\r\n    // user selected the same language again - just ignore\r\n    return true;\r\n  });\r\n\r\n  onError([\"validate email token\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"TOKEN_VALIDATION_FAILED\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"validate password reset token\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"TOKEN_VALIDATION_FAILED\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"reset password\", \"NO_ROWS_CHANGED\"], () => {\r\n    // showMessage(\"REQUEST_ALREADY_SENT\", \"info\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user language\", \"NO_ROWS_CHANGED\"], () => {\r\n    // User selected the same language again - that's ok\r\n    return true;\r\n  });\r\n\r\n  onError([\"update user\", \"NO_ROWS_CHANGED\"], () => {\r\n    // User selected the same password again - that's ok\r\n    return true;\r\n  });\r\n\r\n  onError([\"register account\", \"ER_DUP_ENTRY\"], () => {\r\n    setUID(null);\r\n    setAccountNumber(null);\r\n    showMessage(\"DUPLICATE_ACCOUNT_REGISTRATION\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError(\r\n    [\"register account\", \"ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO\"],\r\n    () => {\r\n      setUID(null);\r\n      setAccountNumber(null);\r\n      showMessage(\"DUPLICATE_ACCOUNT_REGISTRATION\", \"error\");\r\n      return true;\r\n    }\r\n  );\r\n\r\n  onError([\"register shareholder\", \"ER_NO_REFERENCED_ROW_2\"], () => {\r\n    showMessage(\"USER_NOT_FOUND\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"unknown\"], () => {\r\n    showMessage(error.code, \"error\");\r\n    return true;\r\n  });\r\n\r\n  return false;\r\n};\r\n","export default ({ args, barrels }) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"RESPONSE HANDLER: \", props, barrels);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    debug,\r\n    // requestTS,\r\n    instance,\r\n    currencies,\r\n    transactions,\r\n    shares,\r\n    // transactionsPerPage,\r\n    // sharesPerPage,\r\n    userData,\r\n    accountNumber,\r\n    // uid,\r\n    userBusinesses,\r\n    businessPurposes,\r\n    purposeShareholders,\r\n    activeBusinesPurpose,\r\n    lastInsertId,\r\n  } = barrels.barrelGetters;\r\n  const {\r\n    setRequest,\r\n    setSession,\r\n    setCurrencies,\r\n    setTransactions,\r\n    setShares,\r\n    setCountCurrencies,\r\n    setCountTransactions,\r\n    setCountShares,\r\n    setConnected,\r\n    // setLanguage,\r\n    setUserData,\r\n    setSignedIn,\r\n    setCurrencyAbbr,\r\n    setCurrencyRate,\r\n    // setCurrencyStatus,\r\n    // setTransferSuccess,\r\n    setRedirectTo,\r\n    setLastInsertId,\r\n    setAccountNumber,\r\n    setUID,\r\n    setUserBusinesses,\r\n    setCountBusinesses,\r\n    setUserBusinessesLoaded,\r\n    setBusinessPurposes,\r\n    setCountBusinessPurposes,\r\n    setPurposeShareholders,\r\n    // setBusinessLoaded,\r\n    setAccountPhotoPath,\r\n    setPasswordResetTokenValidated,\r\n    setPasswordResetTokenEmail,\r\n    // setRedirect,\r\n  } = barrels.barrelSetters;\r\n  const {\r\n    sendRequest,\r\n    // processResponse,\r\n    getBusinesses,\r\n    getAccountData,\r\n    getTransactionById,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n    showMessage,\r\n    changeLanguage,\r\n    // updateTimestamp,\r\n    // hideMessage,\r\n  } = barrels.barrelFunctions;\r\n  const {\r\n    // onTransferSuccess,\r\n    onRedirect,\r\n    // onLogOut,\r\n  } = barrels.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   ============================================================================ */\r\n  const { req } = props; // req, status\r\n  // const { userData, accountNumber } = barrels.barrelGetters;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  // console.log(\"USER DATA PARSED:\", userDataParsed);\r\n\r\n  /**\r\n   * Log response\r\n   */\r\n  if (debug) console.log(`response: ${req}`, props, barrels);\r\n\r\n  let responseFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onResponse = (data, callback) => {\r\n    if (responseFound) return;\r\n    const [res, status] = data;\r\n    // console.log(\"INSTANCE: \", instance, props.reqData.instance);\r\n\r\n    // if (instance !== props.reqData.instance)\r\n    //   console.log(\"WRONG INSTANCE:\", instance, props.reqData.instance);\r\n\r\n    if (\r\n      (instance === props.reqData.instance &&\r\n        res === props.req &&\r\n        status === props.status) ||\r\n      res === \"unknown\"\r\n    ) {\r\n      if (callback()) {\r\n        setRequest(null);\r\n      }\r\n      responseFound = true;\r\n      // return true;\r\n    }\r\n    // return false;\r\n  };\r\n\r\n  /** \r\n   * Response handlers\r\n  ============================================================================ */\r\n\r\n  /**\r\n   * Start session (success)\r\n   */\r\n  onResponse([\"start session\", \"success\"], () => {\r\n    setConnected(true);\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * End session (success)\r\n   */\r\n  onResponse([\"end session\", \"success\"], () => {\r\n    // console.log(\"ON END SESSION\");\r\n\r\n    setConnected(false);\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Register user (pending)\r\n   */\r\n  onResponse([\"register user\", \"pending\"], () => {\r\n    // Might show some user feedback\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register user\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO users\") {\r\n      if (props.results.insertId > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register user (success)\r\n   */\r\n  onResponse([\"register user\", \"success\"], () => {\r\n    // console.log(\"REGISTER USER PROPS:\", props);\r\n    const noEmailValidation = false;\r\n\r\n    if (noEmailValidation) {\r\n      setSignedIn(true);\r\n      setSession(props.email); // TODO: Might restore\r\n      onRedirect(\"/account-registration\");\r\n      sendRequest({ req: \"get user\", data: { email: props.email } }); // to not require a log in\r\n      return false;\r\n    } else {\r\n      onRedirect(\"/validate-email\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"validate email token\", \"continue\"], () => {\r\n    if (props.name === \"UPDATE validation tokens\") {\r\n      if (props.results.affectedRows > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        // onRedirect(\"/sign-in\");\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (props.name === \"UPDATE users\") {\r\n      if (props.results.affectedRows > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        onRedirect(\"/sign-in\");\r\n        return true;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  // onResponse([\"validate password reset token\", \"continue\"], () => {\r\n  //   if (props.name === \"UPDATE validation tokens\") {\r\n  //     if (props.results.affectedRows > 0) {\r\n  //       // onRedirect(\"/password\");\r\n  //       setPasswordResetTokenValidated(true);\r\n  //       return true;\r\n  //     } else {\r\n  //       // No row was inserted - an error was returned\r\n  //       return true;\r\n  //     }\r\n  //   }\r\n\r\n  //   return false;\r\n  // });\r\n\r\n  onResponse([\"validate password reset token\", \"success\"], () => {\r\n    setPasswordResetTokenValidated(true);\r\n\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Sign in user (continue)\r\n   */\r\n  onResponse([\"sign in user\", \"continue\"], () => {\r\n    // console.log(\"REDIRECT TO SUMMARY: \", props.name);\r\n    if (props.name === \"SELECT users\") {\r\n      // console.log(\"REDIRECT TO SUMMARY: SELECT users\");\r\n      /**\r\n       * Validated user\r\n       */\r\n      if (props.results.status === 1) {\r\n        // console.log(\"REDIRECT TO SUMMARY: props.results.status\");\r\n        setUserData(JSON.stringify(props.results));\r\n        setAccountNumber(props.results.uid);\r\n        setSession(props.results.email); // TODO: Might restore\r\n        setCurrencyAbbr(props.results.currency_abbr);\r\n        setCurrencyRate(\r\n          isNaN(props.results.currency_rate) ? 1 : props.results.currency_rate\r\n        );\r\n        changeLanguage(props.results.language);\r\n        setSignedIn(true);\r\n        // console.log(\"REDIRECT TO SUMMARY\");\r\n\r\n        onRedirect(\"/summary\");\r\n        return false;\r\n\r\n        /**\r\n         * Not yet validated user\r\n         */\r\n      } else if (props.results.status === 0) {\r\n        onRedirect(\"/validate-email\");\r\n        return true;\r\n\r\n        /**\r\n         * Suspended user\r\n         */\r\n      } else if (props.results.status === 2) {\r\n        setRedirectTo(\"/sign-out\");\r\n        showMessage(\"ACCOUNT_SUSPENDED\", \"error\");\r\n        return true;\r\n\r\n        /**\r\n         * Deleted user\r\n         */\r\n      } else if (props.results.status === 3) {\r\n        setRedirectTo(\"/sign-out\");\r\n        showMessage(\"ACCOUNT_DELETED\", \"error\");\r\n        return true;\r\n      }\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Sign in user (finished)\r\n   */\r\n  onResponse([\"sign in user\", \"finished\"], () => {\r\n    if (props.queryCnt > 0) {\r\n      return true;\r\n    } else {\r\n      showMessage(\"INVALID_SIGN_IN\", \"error\");\r\n      setRedirectTo(\"/sign-out\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"sign in user\", \"success\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Update user (success)\r\n   */\r\n  onResponse([\"update user\", \"success\"], () => {\r\n    sendRequest({ req: \"get user\", data: { email: userData.email } });\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get user (continue)\r\n   */\r\n  onResponse([\"get user\", \"continue\"], () => {\r\n    if (props.name === \"SELECT users\") {\r\n      setUserData(JSON.stringify(props.results));\r\n      return false;\r\n    }\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get user (finished)\r\n   */\r\n  onResponse([\"get user\", \"finished\"], () => {\r\n    if (props.name === \"SELECT users\") {\r\n      if (props.queryCnt === 1) {\r\n        // exactly one user found - all is good\r\n        return false;\r\n      } else if (props.queryCnt === 0) {\r\n        // Something wrong with (accessing) the user data\r\n        // Probable causes:\r\n        // - user was deleted from the DB\r\n        // - user status was set to >= 2\r\n        // - multiple users with the same email address, most improbable (db constraint)\r\n        // - user changed the email address or password\r\n        // onLogOut();\r\n        setRedirectTo(\"/sign-out\");\r\n        // showMessage(\"INVALID_DATA\", \"error\");\r\n        return true;\r\n      }\r\n      return true;\r\n    }\r\n    if (props.rowNum === 1) {\r\n      return true;\r\n    } else {\r\n      // Something wrong with (accessing) the user data\r\n      // Probable causes:\r\n      // - user was deleted from the DB\r\n      // - user status was set to >= 2\r\n      // - multiple users with the same email address, most improbable (db constraint)\r\n      // - user changed the email address or password\r\n      // onLogOut();\r\n      setRedirectTo(\"/sign-out\");\r\n      // showMessage(\"INVALID_DATA\", \"error\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"get user\", \"success\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get user businesses (continue)\r\n   */\r\n  onResponse([\"get user businesses\", \"continue\"], () => {\r\n    if (props.name === \"SELECT businesses\") {\r\n      const business = props.results;\r\n      const { business_id } = business;\r\n      if (userBusinesses === null) {\r\n        setUserBusinesses(JSON.stringify([business]));\r\n        getBusinessPurposes(business_id, 0, 1);\r\n      } else {\r\n        setUserBusinesses(JSON.stringify([...userBusinesses, business]));\r\n      }\r\n    } else if (props.name === \"COUNT businesses\") {\r\n      setCountBusinesses(props.results.count_businesses);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get user businesses (finished)\r\n   */\r\n  onResponse([\"get user businesses\", \"finished\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n    setUserBusinessesLoaded(true);\r\n    setRedirectTo(\"/my-business\");\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"get user businesses\", \"success\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get business purposes (continue)\r\n   */\r\n  onResponse([\"get business purposes\", \"continue\"], () => {\r\n    // if (props.name === \"SELECT purposes\") {\r\n    //   if (businessPurposes === null) {\r\n    //     setBusinessPurposes(JSON.stringify([props.results]));\r\n    //   } else {\r\n    //     setBusinessPurposes(\r\n    //       JSON.stringify([...businessPurposes, props.results])\r\n    //     );\r\n    //   }\r\n    // }\r\n\r\n    if (props.name === \"SELECT purposes\") {\r\n      if (businessPurposes === null) {\r\n        setBusinessPurposes(JSON.stringify([props.results]));\r\n      } else {\r\n        setBusinessPurposes(\r\n          JSON.stringify([...businessPurposes, props.results])\r\n        );\r\n      }\r\n    } else if (props.name === \"COUNT purposes\") {\r\n      setCountBusinessPurposes(props.results.count_purposes);\r\n    }\r\n\r\n    // getPurposeShareholders(props.results.purpose_id);\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get business purposes (finished)\r\n   */\r\n  onResponse([\"get business purposes\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get purpose shareholders (continue)\r\n   */\r\n  onResponse([\"get purpose shareholders\", \"continue\"], () => {\r\n    if (props.name === \"SELECT shares\") {\r\n      if (purposeShareholders === null) {\r\n        setPurposeShareholders(JSON.stringify([props.results]));\r\n      } else {\r\n        setPurposeShareholders(\r\n          JSON.stringify([...purposeShareholders, props.results])\r\n        );\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get purpose shareholders (finished)\r\n   */\r\n  onResponse([\"get purpose shareholders\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get user business by id (continue)\r\n   */\r\n  // onResponse([\"get business by id\", \"continue\"], () => {\r\n  //   if (userBusinesses === null) {\r\n  //     setUserBusinesses(JSON.stringify([props.results]));\r\n  //   } else {\r\n  //     setUserBusinesses(JSON.stringify([...userBusinesses, props.results]));\r\n  //   }\r\n\r\n  //   return false;\r\n  // });\r\n\r\n  onResponse([\"get business by id\", \"continue\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n\r\n    if (props.name === \"SELECT businesses\") {\r\n      if (userBusinesses === null) {\r\n        setUserBusinesses(JSON.stringify([props.results]));\r\n      } else {\r\n        setUserBusinesses(JSON.stringify([...userBusinesses, props.results]));\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get business by id (finished)\r\n   */\r\n  onResponse([\"get business by id\", \"finished\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n\r\n    if (props.queryCnt > 0) {\r\n      // getting business was successful - query returned results\r\n      return false;\r\n    } else {\r\n      console.log(\"Error getting business by id\");\r\n\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"get business by id\", \"success\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get purpose by id (continue)\r\n   */\r\n  onResponse([\"get purpose by id\", \"continue\"], () => {\r\n    if (props.name === \"SELECT purposes\") {\r\n      if (businessPurposes === null) {\r\n        setBusinessPurposes(JSON.stringify([props.results]));\r\n      } else {\r\n        setBusinessPurposes(\r\n          JSON.stringify([...businessPurposes, props.results])\r\n        );\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get purpose by id (finished)\r\n   */\r\n  onResponse([\"get purpose by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get shareholder by id (continue)\r\n   */\r\n  onResponse([\"get shareholder by id\", \"continue\"], () => {\r\n    if (purposeShareholders === null) {\r\n      setPurposeShareholders(JSON.stringify([props.results]));\r\n    } else {\r\n      setPurposeShareholders(\r\n        JSON.stringify([...purposeShareholders, props.results])\r\n      );\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get shareholder by id (finished)\r\n   */\r\n  onResponse([\"get shareholder by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Upload file (ready)\r\n   */\r\n  onResponse([\"upload file\", \"continue\"], () => {\r\n    console.log(\"UPLOAD FILE =========== \");\r\n\r\n    // if (props.name === \"SELECT 1\") {\r\n    // setAccountPhotoPath(props + \"?r=\" + Math.random());\r\n    setAccountPhotoPath(Date.now()); // ok\r\n    return false;\r\n    // }\r\n    // return true;\r\n  });\r\n\r\n  onResponse([\"upload file\", \"finished\"], () => {\r\n    if (props.name === \"SELECT 1\") {\r\n      if (props.queryCnt === 0) {\r\n        // something went wrong\r\n        // setAccountPhotoPath(\"ok\");\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"upload file\", \"success\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Register account (success)\r\n   */\r\n  onResponse([\"register account\", \"continue\"], () => {\r\n    if (props.results.affectedRows < 1) {\r\n      // error registering account\r\n      setUID(null);\r\n      setAccountNumber(null);\r\n      showMessage(\"INVALID_DATA\", \"error\");\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register account (success)\r\n   */\r\n  onResponse([\"register account\", \"success\"], () => {\r\n    // setAccountNumber(props.uid);\r\n    // setUID(props.uid);\r\n    // sendRequest({\r\n    //   req: \"get account data\",\r\n    //   data: { uid: accountNumber },\r\n    // });\r\n    getAccountData();\r\n    // onRedirect(\"/balance\");\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get account data (continue)\r\n   */\r\n  onResponse([\"get account data\", \"continue\"], () => {\r\n    // setUserData(JSON.stringify(props.results));\r\n    // return false;\r\n\r\n    if (props.name === \"SELECT users\") {\r\n      setUserData(JSON.stringify(props.results));\r\n\r\n      // if (props.rowNum === 1) {\r\n      //   // all is good\r\n      //   setUserData(JSON.stringify(props.results));\r\n      //   return false;\r\n      // } else {\r\n      //   // Account not reachable\r\n      //   showMessage(\"INVALID_DATA\", \"error\");\r\n      //   return true;\r\n      // }\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get account data (finished)\r\n   */\r\n  onResponse([\"get account data\", \"finished\"], () => {\r\n    if (props.name === \"SELECT users\") {\r\n      if (props.queryCnt === 0) {\r\n        // Account not reachable\r\n        showMessage(\"INVALID_DATA\", \"error\");\r\n        return true;\r\n      }\r\n    }\r\n    // if (props.rowNum === 1) {\r\n    //   // all is good\r\n    //   return true;\r\n    // } else {\r\n    //   // Account not reachable\r\n    //   showMessage(\"INVALID_DATA\", \"error\");\r\n    //   return true;\r\n    // }\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2S\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (continue)\r\n   */\r\n  onResponse([\"transfer U2S\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (success)\r\n   */\r\n  onResponse([\"transfer U2S\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2U\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (continue)\r\n   */\r\n  onResponse([\"transfer U2U\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (success)\r\n   */\r\n  onResponse([\"transfer U2U\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2B\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (continue)\r\n   */\r\n  onResponse([\"transfer U2B\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (success)\r\n   */\r\n  onResponse([\"transfer U2B\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register business\r\n   ============================================================================================*/\r\n  onResponse([\"register business\", \"continue\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n\r\n    if (props.results.insertId > 0) {\r\n      setLastInsertId(props.results.insertId);\r\n      return false;\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register business\", \"success\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n    // console.log(\"RESPONSE register business:\", props);\r\n\r\n    sendRequest({\r\n      req: \"get business by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    // getBusinesses();\r\n    return false;\r\n    // return true;\r\n  });\r\n\r\n  onResponse([\"register currency\", \"continue\"], () => {\r\n    // console.log(\"RESPONSE register business:\", props);\r\n\r\n    if (props.results.insertId > 0) {\r\n      setLastInsertId(props.results.insertId);\r\n\r\n      return false;\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register currency\", \"success\"], () => {\r\n    sendRequest({\r\n      req: \"get currency by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currencies (continue)\r\n   */\r\n  onResponse([\"get currencies\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT currencies\") {\r\n      if (currencies === null) {\r\n        setCurrencies(JSON.stringify([props.results]));\r\n      } else {\r\n        setCurrencies(JSON.stringify([...currencies, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT currencies\") {\r\n      setCountCurrencies(props.results.count_currencies);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currencies (finished)\r\n   */\r\n  onResponse([\"get currencies\", \"finished\"], () => {\r\n    setRedirectTo(\"/currency\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (continue)\r\n   */\r\n  onResponse([\"get currency by id\", \"continue\"], () => {\r\n    if (props.name === \"SELECT currencies\") {\r\n      if (currencies === null) {\r\n        setCurrencies(JSON.stringify([props.results]));\r\n      } else {\r\n        setCurrencies(JSON.stringify([...currencies, props.results]));\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (finished)\r\n   */\r\n  onResponse([\"get currency by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get transactions (continue)\r\n   */\r\n  onResponse([\"get transactions\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT transactions\") {\r\n      if (transactions === null) {\r\n        setTransactions(JSON.stringify([props.results]));\r\n      } else {\r\n        setTransactions(JSON.stringify([...transactions, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT transactions\") {\r\n      setCountTransactions(props.results.count_transaction_positions);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get transactions (finished)\r\n   */\r\n  onResponse([\"get transactions\", \"finished\"], () => {\r\n    setRedirectTo(\"/balance\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get shares (continue)\r\n   */\r\n  onResponse([\"get shares\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT shares\") {\r\n      if (shares === null) {\r\n        setShares(JSON.stringify([props.results]));\r\n      } else {\r\n        setShares(JSON.stringify([...shares, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT shares\") {\r\n      setCountShares(props.results.count_shares);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get shares (finished)\r\n   */\r\n  onResponse([\"get shares\", \"finished\"], () => {\r\n    // setRedirectTo(\"/balance\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get transaction by id (continue)\r\n   */\r\n  onResponse([\"get transaction by id\", \"continue\"], () => {\r\n    if (transactions === null) {\r\n      setTransactions(JSON.stringify([props.results]));\r\n    } else {\r\n      setTransactions(JSON.stringify([...transactions, props.results]));\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (finished)\r\n   */\r\n  onResponse([\"get transaction by id\", \"finished\"], () => {\r\n    getAccountData();\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register purpose\", \"continue\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get purpose by id\",\r\n    //   data: { id: props.results.insertId },\r\n    // });\r\n    if (props.results.insertId > 0) {\r\n      setLastInsertId(props.results.insertId);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register purpose\", \"success\"], () => {\r\n    sendRequest({\r\n      req: \"get purpose by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register shareholder\", \"continue\"], () => {\r\n    if (props.results.insertId > 0) {\r\n      // showMessage(\"REGISTER_SHAREHOLDER_SUCCESS\", \"info\");\r\n\r\n      // return sendRequest({\r\n      //   req: \"get shareholder by id\",\r\n      //   data: { id: props.results.insertId },\r\n      // });\r\n      setLastInsertId(props.results.insertId);\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register shareholder\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    getPurposeShareholders(activeBusinesPurpose);\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"change share\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    // getPurposeShareholders(activeBusinesPurpose);\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"remove shareholder\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    getPurposeShareholders(activeBusinesPurpose);\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"reset password\", \"success\"], () => {\r\n    setPasswordResetTokenValidated(false);\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"change password\", \"success\"], () => {\r\n    // TOTO: If NO_ROWS_CHANGE - probably the currently saved password was submitted\r\n    setPasswordResetTokenValidated(null);\r\n    setPasswordResetTokenEmail(null);\r\n    onRedirect(\"/sign-in\");\r\n    showMessage(\"PASSWORD_CHANGE_SUCCESS\", \"info\");\r\n    return true;\r\n  });\r\n\r\n  // onResponse([\"unknown\"], () => {\r\n  //   if (\r\n  //     status === \"pending\" ||\r\n  //     status === \"continue\" ||\r\n  //     status === \"finished\" ||\r\n  //     status === \"success\"\r\n  //   ) {\r\n  //     return false;\r\n  //   } else {\r\n  //     showMessage(`${req}: ${status}`, \"info\");\r\n  //     return true;\r\n  //   }\r\n  // });\r\n\r\n  onResponse([\"unknown\"], () => {\r\n    return false;\r\n  });\r\n\r\n  return responseFound;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"ValidateEmail\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {  } = props.barrelGetters;\r\n  const { setValidateTokenEmail } = props.barrelSetters;\r\n  const { getUrlParam } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Hooks\r\n    ============================================================================ */\r\n\r\n  // setToken(getUrlParam(\"token\"));\r\n  // setEmail(getUrlParam(\"email\"));\r\n\r\n  const token = getUrlParam(\"token\");\r\n  const email = getUrlParam(\"email\");\r\n\r\n  /**\r\n    * Effects\r\n    ============================================================================ */\r\n  useEffect(() => {\r\n    if (token === null || email === null) return;\r\n\r\n    setValidateTokenEmail(\r\n      JSON.stringify({\r\n        token,\r\n        email,\r\n      })\r\n    );\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    // const queryString = window.location.search;\r\n    // const urlParams = new URLSearchParams(queryString);\r\n\r\n    return token === null ? (\r\n      <>\r\n        <h4>{t(\"A verification link has been sent to your email account.\")}</h4>\r\n        <hr />\r\n        <p>\r\n          {t(\r\n            \"Please click on the link that has just been sent to your email account\"\r\n          )}\r\n        </p>\r\n      </>\r\n    ) : (\r\n      <div className=\"text-center\">\r\n        <Spinner\r\n          as=\"span\"\r\n          animation=\"border\"\r\n          size=\"sm\"\r\n          role=\"status\"\r\n          aria-hidden=\"true\"\r\n          hidden={false}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\n// import Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"ChangePassword\",\r\n    request: \"change password\",\r\n    email: null,\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  const {\r\n    passwordResetTokenValidated,\r\n    passwordResetTokenEmail,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation([\r\n    passwordResetTokenValidated === true ? \"SignUp\" : \"ChangePassword\",\r\n  ]); // adjust namespace\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n\r\n  /**\r\n     * Functions\r\n     ============================================================================ */\r\n  const onSubmit = (data) => {\r\n    data.email = passwordResetTokenEmail;\r\n    // console.log(data);\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  /** \r\n     * Yup schema\r\n     ============================================================================ */\r\n  const schema = yup.object({\r\n    password: yup\r\n      .string()\r\n      .required(t(\"No password provided\"))\r\n      .min(8, t(\"Password is too short\"))\r\n      // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n      .matches(\r\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n        t(\"Password is too weak\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n     * Form\r\n     ============================================================================ */\r\n  const ChangePasswordForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"New password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type={passwordVisible ? \"text\" : \"password\"}\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text\r\n              id=\"inputGroupAppend\"\r\n              onClick={togglePassword}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              {passwordVisible ? (\r\n                <VisibilityOff\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\" }}\r\n                />\r\n              ) : (\r\n                <Visibility fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n              )}\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <SubmitButton\r\n        {...args}\r\n        caption={t(\"Submit\")}\r\n        request={props.request}\r\n        namespace={props.namespace}\r\n      />\r\n    </Form>\r\n  );\r\n\r\n  /**\r\n     * Return\r\n     ============================================================================ */\r\n  if (passwordResetTokenValidated === true) {\r\n    // if (true) {\r\n    return (\r\n      <Formik\r\n        component={ChangePasswordForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          password: \"\",\r\n        }}\r\n      />\r\n    );\r\n  } else {\r\n    // if (passwordResetTokenValidated === false)\r\n    return <>{t(\"Awaiting validation\")}</>;\r\n    // } else {\r\n    //   // null\r\n    //   return <>How did you land here???</>;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(\"Logout\");\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { error, language } = props.barrelGetters;\r\n  const { setLanguage } = props.barrelSetters;\r\n  const { showMessage } = props.barrelFunctions;\r\n  const { onLogOut } = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Default Properties\r\n   */\r\n  // let defaults = {};\r\n  // const props = Object.assign(defaults, authorizedData);\r\n\r\n  // const [logOut] = useState(true);\r\n\r\n  // console.log(\"sendUserLogOutRequest\", props);\r\n\r\n  useEffect(() => {\r\n    // if (logOut !== true) return;\r\n    // console.log(\"LOG OUT =============\");\r\n\r\n    const tempError = error;\r\n    const tempLanguage = language;\r\n\r\n    onLogOut();\r\n\r\n    setLanguage(tempLanguage);\r\n\r\n    if (tempError !== null) {\r\n      showMessage(tempError, \"error\");\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []); // logOut\r\n\r\n  return (\r\n    <>\r\n      <h4>{t(\"See you soon\")}</h4>\r\n      <hr />\r\n\r\n      <br />\r\n      <p className=\"text-center\">\r\n        <a href=\"/\">{t(\"Sign in\")}</a>\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Spinner } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n  * Default export\r\n  ============================================================================ */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"ResetPassword\", request: \"reset password\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { language } = props.barrelGetters;\r\n  const { setValidateTokenPasswordReset } = props.barrelSetters;\r\n  const { sendRequest, getUrlParam } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  const token = getUrlParam(\"token\");\r\n  const email = getUrlParam(\"email\");\r\n\r\n  /**\r\n    * Effects\r\n    ============================================================================ */\r\n  useEffect(() => {\r\n    if (token === null || email === null) return;\r\n\r\n    setValidateTokenPasswordReset(\r\n      JSON.stringify({\r\n        token,\r\n        email,\r\n      })\r\n    );\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n    * Event listeners\r\n    ============================================================================ */\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    // console.log(data);\r\n    data.language = language;\r\n    sendRequest({\r\n      req: props.request,\r\n      data: data,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n  });\r\n\r\n  const passwordResetForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Reset password\")}</h3>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n\r\n  // return (\r\n  //   <Formik\r\n  //     component={passwordResetForm}\r\n  //     validationSchema={schema}\r\n  //     onSubmit={onSubmit}\r\n  //     initialValues={{\r\n  //       email: \"\",\r\n  //     }}\r\n  //   />\r\n  // );\r\n\r\n  return token === null ? (\r\n    <Formik\r\n      component={passwordResetForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        email: \"\",\r\n      }}\r\n    />\r\n  ) : (\r\n    <div className=\"text-center\">\r\n      <Spinner\r\n        as=\"span\"\r\n        animation=\"border\"\r\n        size=\"sm\"\r\n        role=\"status\"\r\n        aria-hidden=\"true\"\r\n        hidden={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","// import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Loading.css\";\r\nimport React from \"react\";\r\n// import MainSkeleton from \"../pages/main\";\r\n\r\nexport default () => {\r\n  //\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"lds-hourglass\"></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./normalize.css\";\r\nimport \"./index.css\";\r\n// import UnderConstruction from \"./components/pages/underConstruction\";\r\nimport Main from \"./components/pages/main\";\r\nimport Loading from \"./components/loading\";\r\n\r\n// const Main = React.lazy(() => import(\"./components/pages/main\"));\r\n\r\nReactDOM.render(\r\n  <Suspense fallback={<Loading />}>\r\n    <Main />\r\n  </Suspense>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}