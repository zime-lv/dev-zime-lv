{"version":3,"sources":["components/locale lazy /^/.*$/ groupOptions: {} namespace object","translations/i18n.js","utils/config.js","utils/state.js","components/card/Card.js","components/submitButton/SubmitButton.js","utils/useTimeout.js","components/errorBoundary/ErrorBoundary.js","components/modalMessage/ModalMessage.js","components/accountRegistration/AccountRegistration.js","components/pagination/Pagination.js","components/transactions/Transactions.js","components/shareholder/Shareholder.js","components/shares/Shares.js","components/transfer/Balance.js","components/transfer/TransferToSelf.js","components/tanInput/TanInput.js","components/transfer/TransferToPerson.js","components/transfer/TransferToBusiness.js","components/businessRegistration/businessRegistration.js","components/purposeRegistration/PurposeRegistration.js","components/shareholderRegistration/shareholderRegistration.js","components/myBusiness/MyBusiness.js","components/userEditor/UserEditor.js","components/currencies/Currencies.js","components/currencyRegistration/CurrencyRegistration.js","utils/useInterval.js","components/idleTimer/IdleTimer.js","utils/useEventListener.js","components/login/LogIn.js","components/pages/summary/Summary.js","components/currencyContainer/CurrencyContainer.js","components/transfer/Transfer.js","components/signup/SignUp.js","components/alert/Alert.js","components/language-selector/LanguageSelector.js","components/pages/main/Main.js","components/auth/Auth.js","components/validateEmail/ValidateEmail.js","components/changePassword/ChangePassword.js","components/logout/Logout.js","components/passwordReset/passwordReset.js","utils/sockets.js","Dispatcher.js","utils/requestHandler.js","utils/errorHandler.js","utils/responseHandler.js","components/loading/Loading.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","react","wait","withRef","bindI18n","bindStore","nsMode","config","useStickyState","defaultValue","key","useState","stickyValue","window","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","args","defaults","title","navigation","undefined","footer","header","body","headerContent","onNavigationClick","props","assign","Footer","Header","className","Title","Nav","variant","defaultActiveKey","navigationdefaultActiveKey","item","Item","Link","href","link","onClick","style","color","name","Body","React","Children","children","child","cloneElement","styles","caption","request","namespace","visible","marginTop","timeout","onSubmit","barrelGetters","setRequest","barrelSetters","showMessage","barrelFunctions","requestExpired","setRequestExpired","callback","delay","savedCallback","useRef","current","setTimeout","clearTimeout","useTimeout","Button","type","block","disabled","Spinner","as","animation","size","role","aria-hidden","hidden","ErrorBoundary","state","hasError","error","errorInfo","console","log","this","Component","centered","message","onHide","file","backdrop","useTranslation","ExternalFile","lazy","Modal","aria-labelledby","closeButton","Navbar","borderRadius","background","backgroundColor","boxShadow","Brand","src","width","height","alt","maxHeight","overflowY","signedIn","accountNumber","accountPhotoPath","userData","language","getReviser","getWorkplace","sendRequest","formatDate","userAgreementShow","setUserAgreementShow","privacyPolicyShow","setPrivacyPolicyShow","Date","now","schema","yup","dropzoneHook","optional","terms","required","timezone","birthDate","test","exclusive","params","RegExp","date2en","month","day","year","_","isDate","timezones_sorted","timezones","sort","a","b","Offset","Name","Alert","Heading","Trans","i18nKey","ModalMessage","show","component","handleSubmit","handleChange","values","handleBlur","touched","errors","isValid","validateForm","setFieldValue","Form","noValidate","Group","controlId","Label","InputGroup","Control","placeholder","aria-describedby","onChange","isInvalid","Feedback","custom","element","toString","padStart","Check","label","feedback","KeyboardArrowRight","onMouseDown","SubmitButton","validationSchema","data","reviser","workplace","email","sendAccountRegistrationRequest","initialValues","countItems","itemsPerPage","active","align","pages","Math","ceil","getPages","items","number","push","Pagination","Ellipsis","textAlign","display","padding","margin","First","Prev","Next","Last","getJSX","transactions","countTransactions","activePageTransactions","transactionsPerPage","getTransactions","format","formatPerCent","cnt","ListGroup","transaction","keyTransactions","business_title","conv_amount","created","sender_firstname","sender_lastname","purpose_id","purpose_title","recipient_id","roles","share","share_per_cent","from_account","to_account","i_am_recipient","t_from_account","t_to_account","roles_available","arrRoles","split","shares_available","action","float","ArrowRightAlt","Badge","pill","purpose","shareholder","rangeControl","sharePerCent","businessTitle","purposeTitle","businessOwnerFirstname","businessOwnerLastname","sharesCreated","purposeShareholders","setPurposeShareholders","userQuery","setUserQuery","delayedQuery","debounce","q","sendQuery","target","onClose","shareholder_id","ps","sharesLabelId","Toast","minWidth","firstname","lastname","Settings","fontSize","min","max","step","shares","countShares","activePageShares","sharesPerPage","getShares","keyShares","owner_firstname","owner_lastname","shares_created","shares_roles","shares_share","Shareholder","accordionView","setAccountType","setRedirectTo","setAccordionView","getAccountData","userDataParsed","onAccountTypeSelected","available","acc_curr","acc_cred","acc_save","toggleView","view","newView","Accordion","Toggle","Card","eventKey","cursor","Collapse","Text","Transactions","Shares","accountType","currencyAbbr","parseLocaleNumber","fromAccount","toAccount","amount","matches","Prepend","uid","Intl","NumberFormat","notation","minimumFractionDigits","useGrouping","transferToSelf","tanRequired","setTanRequired","tan","setTransferRequest","toPersonalID","TanInput","description","rows","transferType","transferToPerson","purposeID","currency","transferToBusiness","barrelEventHandlers","onBusinessRegistration","trim","businessDescription","registerBusiness","businessID","barrels","businessPurposes","setBusinessPurposes","onPurposeRegistration","purposeDescription","RegisterPurpose","shareholderRoles","typeError","personalID","userBusinesses","countBusinesses","businessesPerPage","activePageBusinesses","userBusinessesLoaded","activeBusiness","activeBusinessID","countBusinessPurposes","businessPurposesPerPage","activePageBusinessPurposes","activeBusinesPurpose","activePurposeProperty","activePurposeData","setActiveBusinesPurpose","setActivePurposeProperty","setActivePurposeData","getBusinesses","getBusinessPurposes","getPurposeShareholders","menuItems","purposes","countShareholders","business","keyBusiness","keyPurpose","business_id","TogglePurpose","whiteSpace","Edit","stopPropagation","Tab","Pane","bg","Add","keyShareholder","bp","status","purpose_status","checked","jsx","date","businessSince","DateTimeFormat","ToggleBusiness","Store","Container","Row","Col","sm","Content","border","PurposeRegistration","mode","editFirstname","setEditFirstname","editLastname","setEditLastname","editEmail","setEditEmail","editPassword","setEditPassword","passwordVisible","setPasswordVisible","submitButtonVisible","setSubmitButtonVisible","togglePassword","yupObject","firstName","lastName","password","Close","Append","VisibilityOff","Visibility","sendUserRegistrationRequest","currencies","settings","countCurrencies","activePageCurrencies","currenciesPerPage","setCurrencyAbbr","getCurrencies","formatExchangeRate","onCurrencySelected","currency_id","onPageSelect","Table","responsive","striped","bordered","hover","keyCUrrency","abbr","rate","region","length","includes","aria-label","curr_abbr","curr_title","curr_region","curr_rate","useInterval","setInterval","clearInterval","timestamp","stage2","stage3","onTick","onTimerReset","onTimeout","events","onSessionTimeout","updateLastSeenUser","seconds","setSeconds","modalMessageShow","setModalMessageShow","eventHandler","i","addEventListener","removeEventListener","useEventListener","currTime","timeFormatted","minute","second","modalMessage","fontWeight","OverlayTrigger","placement","overlay","Tooltip","AvTimer","ip","setLoggingIn","setUpdateInterval","getUri","fluid","uri","sendUserLogInRequest","rememberMe","sessionTimeout","onLastSeenUser","location","useLocation","paddingRight","paddingLeft","PowerSettingsNew","IdleTimer","collapseOnSelect","expand","pathname","aria-controls","viewBalanceOrTransfer","exact","path","Balance","AccountRegistration","UserEditor","accordionViewCurrency","setAccordionViewCurrency","Currencies","CurrencyRegistration","CurrencyContainer","MyBusiness","onTransferTypeChange","transferCard","setTransferCard","TransferToSelf","TransferToPerson","TransferToBusiness","Transfer","validateEmail","info","onAlertClose","dismissible","changeLanguage","lng","selectLanguage","session","instance","externalRequest","updateInterval","cartContent","validateTokenEmail","passwordResetTokenValidated","validateTokenPasswordReset","connected","isExternalRequest","setSessionTimeoutApplied","setSignedIn","setIsExternalRequest","getIP","processResponse","getCart","getCartPurposes","sendEmailValidationRequest","sendPasswordResetRequest","getContainerClass","getRedirect","onRedirect","onSessionStart","onSessionEnd","customer","cart","wrapperClass","innerClass","appClass","Summary","Login","SignUp","cartPurposes","Cart","priceTotal","priceReal","price","product_found","find","products","product","Auth","validationTokenEmail","validationTokenEmailResent","setValidateTokenEmail","getUrlParam","token","ValidateEmail","passwordResetTokenEmail","ChangePassword","sessionTimeoutApplied","setLanguage","onLogOut","tempError","tempInfo","tempLanguage","tempSessionTimeoutApplied","Logout","setValidateTokenPasswordReset","PasswordReset","LanguageSelector","dev","ENDPOINT","hostname","socket","openSocket","connect","secure","reconnect","sendData","emit","setDebug","loggingOut","setLoggingOut","loggingIn","pageLoading","setPageLoading","setInstance","uuidv4","setSession","setSettings","setSessionTimeout","setConnected","setIP","setExternalRequest","setCartContent","currencyRate","setCurrencyRate","setCurrencies","setTransactions","setShares","setCountCurrencies","setCountTransactions","setCountShares","setActivePageCurrencies","setActivePageTransactions","setActivePageShares","setCurrenciesPerPage","setTransactionsPerPage","setSharesPerPage","setUserData","setUID","setAccountNumber","userSequence","setUserSequence","setUserBusinesses","setCountBusinesses","setBusinessesPerPage","setActivePageBusinesses","setUserBusinessesLoaded","setActiveBusiness","setActiveBusinessID","setCartPurposes","setCountBusinessPurposes","setBusinessPurposesPerPage","setActivePageBusinessPurposes","redirectTo","lastInsertId","setLastInsertId","setPasswordResetTokenValidated","setPasswordResetTokenEmail","tmrConnected","setValidationTokenEmail","setValidationTokenEmailResent","options","setTransferType","transferRequest","setAccountPhotoPath","setError","setInfo","processRequest","requestFound","onRequest","dt","fullyear","getFullYear","getMonth","getDate","slice","initial","toUpperCase","icode","charCodeAt","scode","tcode","sequence","requestHandler","context","errorFound","onError","res","errorHandler","getTransactionById","sortObjectArray","getObjectArrayElementIndex","showTanInput","responseFound","onResponse","reqData","results","content","queryCnt","insertId","tags","resent","affectedRows","currency_abbr","isNaN","currency_rate","count_businesses","count_purposes","index","splice","temp","seconds_since_last_seen","count_currencies","count_transaction_positions","count_shares","responseHandler","hideMessage","param","queryString","search","URLSearchParams","get","msg","array","property","properties","indexOf","maximumFractionDigits","ts","hour","isUTC","locales","diff","getTimezoneOffset","moment","add","toDate","to","fetch","method","headers","json","catch","page","limit","checkTimeout","newPage","selected","stringNumber","locale","parts_local","formatToParts","group","decimal","forEach","parseFloat","replace","on","endSession","onSignUp","onTransferSuccess","onTransfer","startSession","onSessionReset","responseData","setResponseData","useSocket","clear","ReactDOM","render","fallback","Dispatcher","document","getElementById"],"mappings":"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","file":"static/js/main.31537be0.chunk.js","sourcesContent":["var map = {\n\t\"./document.css\": [\n\t\t264,\n\t\t7,\n\t\t5\n\t],\n\t\"./en/PrivacyPolicy\": [\n\t\t194,\n\t\t9,\n\t\t0\n\t],\n\t\"./en/PrivacyPolicy.js\": [\n\t\t194,\n\t\t9,\n\t\t0\n\t],\n\t\"./en/UserAgreement\": [\n\t\t195,\n\t\t9,\n\t\t1\n\t],\n\t\"./en/UserAgreement.js\": [\n\t\t195,\n\t\t9,\n\t\t1\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[2]).then(function() {\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 220;\nmodule.exports = webpackAsyncContext;","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nimport Backend from \"i18next-xhr-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\n// not like to use this?\r\n// have a look at the Quick start guide\r\n// for passing in lng and translations on init\r\n\r\ni18n\r\n  // load translation using xhr -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-xhr-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    fallbackLng: \"lv\",\r\n    debug: false,\r\n    // lng: \"lv\",\r\n    ns: [\"LogIn\", \"SignUp\"],\r\n    defaultNS: \"Default\",\r\n    keySeparator: false,\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n    react: {\r\n      wait: false,\r\n      withRef: false,\r\n      bindI18n: \"languageChanged loaded\",\r\n      bindStore: \"added removed\",\r\n      nsMode: \"default\",\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","const dev = {\r\n  uri: {\r\n    ENDPOINT: \"http://localhost:9000\",\r\n    // ENDPOINT: \"http://192.168.2.100:9000\"\r\n  },\r\n};\r\n\r\nconst dev2 = {\r\n  uri: {\r\n    ENDPOINT: \"http://192.168.2.100:5000\",\r\n  },\r\n};\r\n\r\nconst staging = {\r\n  uri: {\r\n    ENDPOINT: \"https://dev.zime.lv\",\r\n  },\r\n};\r\n\r\nconst prod = {\r\n  uri: {\r\n    ENDPOINT: \"https://zime.lv\",\r\n  },\r\n};\r\n\r\nconst hostname = window && window.location && window.location.hostname;\r\n\r\nlet config;\r\nswitch (hostname) {\r\n  case \"localhost\":\r\n    config = dev;\r\n    break;\r\n  case \"192.168.2.100\":\r\n    config = dev2;\r\n    break;\r\n  case \"dev.zime.lv\":\r\n    config = staging;\r\n    break;\r\n  case \"zime.lv\":\r\n    config = prod;\r\n    break;\r\n  default:\r\n    config = dev;\r\n    break;\r\n}\r\n\r\nexport default {\r\n  ...config,\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nexport const useStickyState = (defaultValue, key) => {\r\n  const [value, setValue] = useState(() => {\r\n    const stickyValue = window.localStorage.getItem(key);\r\n    return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\r\n  });\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n  }, [key, value]);\r\n  return [value, setValue];\r\n};\r\n","import \"./Card.css\";\r\nimport React, { cloneElement } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n// import { Container, Row, Col, Button } from \"react-bootstrap\";\r\n// import Button from \"react-bootstrap/Button\";\r\n\r\nexport default (args) => {\r\n  let defaults = {\r\n    title: \"Untitled\",\r\n    navigation: undefined,\r\n    footer: undefined,\r\n    header: true,\r\n    body: true,\r\n    headerContent: null,\r\n    onNavigationClick: () => {},\r\n  };\r\n  let props = Object.assign(defaults, args);\r\n\r\n  let key = 0;\r\n\r\n  let footer = props.footer ? <Card.Footer>{props.footer}</Card.Footer> : \"\";\r\n\r\n  return (\r\n    <Card>\r\n      {/* <Card.Img variant=\"top\" src=\"holder.js/100px180?text=Image cap\" /> */}\r\n      {props.header && (\r\n        <Card.Header className=\"custom-card\">\r\n          {props.headerContent !== null ? (\r\n            props.headerContent\r\n          ) : (\r\n            <>\r\n              <Card.Title>{props.title}</Card.Title>\r\n              <Nav\r\n                variant=\"tabs\"\r\n                defaultActiveKey={props.navigationdefaultActiveKey}\r\n              >\r\n                {props.navigation &&\r\n                  props.navigation.map((item, key) => (\r\n                    <Nav.Item key={key}>\r\n                      <Nav.Link\r\n                        className=\"custom-card\"\r\n                        href={item.link}\r\n                        onClick={() => props.onNavigationClick(item.link)}\r\n                        style={{ color: \"black\" }}\r\n                      >\r\n                        {item.name}\r\n                      </Nav.Link>\r\n                    </Nav.Item>\r\n                  ))}\r\n              </Nav>\r\n            </>\r\n          )}\r\n        </Card.Header>\r\n      )}\r\n\r\n      {props.body && (\r\n        <Card.Body className=\"custom-card\">\r\n          {React.Children.map(args.children, (child) => {\r\n            if (typeof child !== \"object\") {\r\n              return child;\r\n            } else {\r\n              key++;\r\n              return cloneElement(child, {\r\n                styles: null,\r\n                key: key,\r\n              });\r\n            }\r\n          })}\r\n        </Card.Body>\r\n      )}\r\n      {footer}\r\n    </Card>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState } from \"react\";\r\n// import { useTranslation } from \"react-i18next\";\r\nimport { Button, Spinner } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport { useTimeout } from \"../../utils/useTimeout\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    caption: \"Submit\",\r\n    request: null,\r\n    namespace: \"Button\",\r\n    visible: true,\r\n    marginTop: 0,\r\n    timeout: 15000, // milliseconds\r\n    onSubmit: () => {},\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { request } = props.barrelGetters;\r\n  const { setRequest } = props.barrelSetters;\r\n  const { showMessage } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  // const { t } = useTranslation([props.namespace]); // adjust namespace\r\n\r\n  const [requestExpired, setRequestExpired] = useState(false);\r\n\r\n  useTimeout(() => {\r\n    if (request !== props.request) return;\r\n    // console.log(\"useTimeout\");\r\n\r\n    // Your custom logic here\r\n    // setSeconds(seconds - 1);\r\n    setRequestExpired(true);\r\n    setRequest(null);\r\n    showMessage(\"REQUEST_EXPIRED\", \"error\");\r\n  }, props.timeout);\r\n\r\n  // useEffect(() => {\r\n  //   if (requestExpired)\r\n  // }, [requestExpired]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    return !props.visible ? (\r\n      <></>\r\n    ) : (\r\n      <Button\r\n        type=\"submit\"\r\n        onClick={props.onSubmit}\r\n        block\r\n        disabled={request === props.request && !requestExpired}\r\n        style={{ marginTop: props.marginTop + \"px\" }}\r\n      >\r\n        <Spinner\r\n          as=\"span\"\r\n          animation=\"border\"\r\n          size=\"sm\"\r\n          role=\"status\"\r\n          aria-hidden=\"true\"\r\n          hidden={request !== props.request || requestExpired}\r\n        />\r\n        &nbsp;\r\n        {props.caption}\r\n        &nbsp;\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport const useTimeout = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    function tick() {\r\n      if (delay > 0) savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setTimeout(tick, delay);\r\n      return () => clearTimeout(id);\r\n    }\r\n  }, [delay]);\r\n};\r\n","import React from \"react\";\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // You can also log the error to an error reporting service\r\n    // logErrorToMyService(error, errorInfo);\r\n    console.log(\"Error boundary:\", error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      //   return <h1>Something went wrong.</h1>;\r\n      return <></>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Button, Modal, Navbar, Nav } from \"react-bootstrap\";\r\nimport ErrorBoundary from \"../errorBoundary\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"ModalMessage\",\r\n    centered: true,\r\n    message: \"\",\r\n    title: null,\r\n    footer: null,\r\n    // bodyStyle: { padding: \"1rem\" },\r\n    onHide: () => {},\r\n    size: \"sm\",\r\n    file: null,\r\n    backdrop: true, // \"static\"\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  const ExternalFile =\r\n    props.file !== null\r\n      ? React.lazy(() => import(`../locale/${props.file}`))\r\n      : \"\";\r\n\r\n  // async function loadExternalFile() {\r\n  //   await React.preloadLazy(ExternalFile);\r\n  // }\r\n\r\n  // loadExternalFile();\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size={props.size}\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered={props.centered}\r\n        backdrop={props.backdrop}\r\n      >\r\n        {props.title !== null && (\r\n          <Modal.Header closeButton>\r\n            <Navbar\r\n              // className=\"card-header\"\r\n              // className=\"navbar-trans\"\r\n              // bg=\"light\"\r\n              // variant=\"light\"\r\n              style={{\r\n                borderRadius: \"5px\",\r\n                background: \"transparent !important\",\r\n                // color: \"#f7f7f7\",\r\n                backgroundColor: \"\", // e8f6f3\r\n                boxShadow: \"none\",\r\n                // whiteSpace: \"nowrap\",\r\n              }}\r\n            >\r\n              <Navbar.Brand href=\"/\">\r\n                <img\r\n                  src=\"gfx/zlogo_light.png\"\r\n                  width=\"auto\"\r\n                  height=\"30\"\r\n                  className=\"d-inline-block align-top\"\r\n                  alt={t(\"Logo\")}\r\n                />\r\n              </Navbar.Brand>\r\n              <Nav className=\"mr-auto\">\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                  {props.title}\r\n                </Modal.Title>\r\n              </Nav>\r\n            </Navbar>\r\n          </Modal.Header>\r\n        )}\r\n        <Modal.Body\r\n          style={{ maxHeight: \"calc(100vh - 210px)\", overflowY: \"auto\" }}\r\n        >\r\n          {props.message !== \"\" ? (\r\n            props.message\r\n          ) : (\r\n            <ErrorBoundary>\r\n              <ExternalFile />\r\n            </ErrorBoundary>\r\n          )}\r\n        </Modal.Body>\r\n        {props.footer !== null && (\r\n          <Modal.Footer>\r\n            <Button block onClick={props.onHide}>\r\n              {t(\"Close\")}\r\n            </Button>\r\n          </Modal.Footer>\r\n        )}\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","// System CSS\r\n// import \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n// System imports\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport { Form, InputGroup, Alert } from \"react-bootstrap\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import ChevronRight from \"@material-ui/icons/ArrowForwardIos\";\r\nimport { KeyboardArrowRight } from \"@material-ui/icons\";\r\nimport moment from \"moment-timezone\";\r\n// import DatePicker from \"react-datepicker\";\r\nimport { Today } from \"@material-ui/icons\";\r\n// import { Today } from \"@material-ui/icons\";\r\n// import DatePicker from \"react-date-picker\";\r\n// import MomentUtils from \"@date-io/moment\";\r\n// import { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\n// import { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport _ from \"lodash\";\r\n\r\n// User imports\r\nimport Card from \"../card\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import { useStickyState } from \"../../utils/state\";\r\nimport Dropzone from \"../dropzone\";\r\nimport SubmitButton from \"../submitButton\";\r\nimport ModalMessage from \"../modalMessage\";\r\nimport { useStickyState } from \"../../utils/state\";\r\nimport timezones from \"./timezones.en.json\";\r\n\r\n// const UserAgreement = React.lazy(() => import(\"../locale/en/UserAgreement\"));\r\n\r\nexport default (args) => {\r\n  // console.log(\"ACCOUNT REGISTRATION ARGS:\", args);\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"get user sequence\", // \"register account\",\r\n    namespace: \"AccountRegistration\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    signedIn,\r\n    accountNumber,\r\n    accountPhotoPath,\r\n    userData,\r\n    language,\r\n    debug,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const {\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n    formatDate,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  // const [redirect, setRedirect] = useState(false);\r\n  const [userAgreementShow, setUserAgreementShow] = useStickyState(\r\n    false,\r\n    \"userAgreementShow\"\r\n  );\r\n  const [privacyPolicyShow, setPrivacyPolicyShow] = useStickyState(\r\n    false,\r\n    \"privacyPolicyShow\"\r\n  );\r\n\r\n  const [offsetList, setOffsetList] = useStickyState(null, \"offsetList\");\r\n  const [calenarVisible, setCalenarVisible] = useState(false);\r\n  const [startDate, setStartDate] = useState(Date.now());\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    // dropzoneHook: yup.string().required(t(\"Photo ID is required\")),\r\n    dropzoneHook: yup.string().optional(),\r\n    terms: yup.array().required(t(\"Terms is required\")),\r\n    timezone: yup.string().required(t(\"Timezone at birth is required\")),\r\n    birthDate: yup\r\n      // .date()\r\n      .string()\r\n      .required(t(\"Date of birth is required\"))\r\n      // .max(new Date(), t(\"Date of birth must be today or earlier\"))\r\n      // .string()\r\n      // .matches(new RegExp(t(\"Date Regex\")), t(\"Wrong date format\"))\r\n      .test({\r\n        name: \"regex\",\r\n        exclusive: true,\r\n        params: {},\r\n        message: t(\"Date must be valid\"),\r\n        test: (value) => {\r\n          if (typeof value === \"undefined\") return false;\r\n\r\n          // Test regex\r\n          if (!RegExp(t(\"Date Regex\")).test(value)) return false;\r\n\r\n          const date2en = formatDate(\r\n            value,\r\n            { month: \"numeric\", day: \"numeric\", year: \"numeric\" },\r\n            false,\r\n            \"en-US\"\r\n          );\r\n\r\n          return _.isDate(new Date(date2en));\r\n        },\r\n      }),\r\n    // personalID: yup\r\n    //   .string()\r\n    //   .optional() // .required(t(\"Personal ID is required\"))\r\n    //   .matches(\r\n    //     new RegExp(t(\"Personal ID Regex\")),\r\n    //     t(\"Wrong Personal ID format\")\r\n    //   )\r\n    //   .test({\r\n    //     name: \"integrity\",\r\n    //     exclusive: true,\r\n    //     params: {},\r\n    //     message: t(\"PersonalID must be valid\"),\r\n    //     test: (value) => {\r\n    //       if (typeof value === \"undefined\") return false;\r\n    //       let pid = value\r\n    //         .replace(\"-\", \"\")\r\n    //         .split(\"\")\r\n    //         .map(function (n) {\r\n    //           return parseInt(n, 10);\r\n    //         });\r\n    //       let calc =\r\n    //         1 * pid[0] +\r\n    //         6 * pid[1] +\r\n    //         3 * pid[2] +\r\n    //         7 * pid[3] +\r\n    //         9 * pid[4] +\r\n    //         10 * pid[5] +\r\n    //         5 * pid[6] +\r\n    //         8 * pid[7] +\r\n    //         4 * pid[8] +\r\n    //         2 * pid[9];\r\n    //       let checksum = (1101 - calc) % 11;\r\n\r\n    //       return checksum === pid[10];\r\n    //     },\r\n    //   }),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n\r\n  /**\r\n   * Send account registration request\r\n   * @param {object} data\r\n   */\r\n  const sendAccountRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.email = userData.email;\r\n\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    if (sendAccountRegistrationRequest(data)) {\r\n      // Account registration request was submitted\r\n    }\r\n  };\r\n\r\n  // const timezones = 1;\r\n\r\n  const timezones_sorted = timezones.sort((a, b) =>\r\n    (a.Offset + 12) % 24 > (b.Offset + 12) % 24\r\n      ? 1\r\n      : (a.Offset + 12) % 24 === (b.Offset + 12) % 24\r\n      ? a.Name > b.Name\r\n        ? 1\r\n        : -1\r\n      : -1\r\n  );\r\n\r\n  const handleCalendarChange = (e) => {\r\n    console.log(\"handleCalendarChange\", e);\r\n  };\r\n\r\n  // console.log(timezones_sorted);\r\n\r\n  // console.log(map);\r\n\r\n  // tzNames.forEach(\r\n  //   (value, key) => (timezoneList += <option value={key}>{value}</option>)\r\n  // );\r\n  // console.log(timezoneList);\r\n\r\n  let timeZoneID = 0;\r\n  let prevTimeZoneID = 0;\r\n\r\n  const AccountRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    setFieldValue,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {false && (\r\n        <Form.Group controlId=\"validationFormikPhotoId\">\r\n          <Form.Label>{t(\"Photo ID\")}</Form.Label>\r\n\r\n          {false && (\r\n            <Form.Text>\r\n              <Trans i18nKey=\"AccountRegistration:Photo ID requirements\">\r\n                Photo of me holding my passport. The personal identification\r\n                number must be clearly legible.\r\n              </Trans>\r\n            </Form.Text>\r\n          )}\r\n\r\n          <br />\r\n          <Dropzone data={props} />\r\n        </Form.Group>\r\n      )}\r\n\r\n      {false && (\r\n        <Form.Group controlId=\"validationFormikDropzoneHook\">\r\n          <Form.Control\r\n            type=\"text\"\r\n            name=\"dropzoneHook\"\r\n            value={accountPhotoPath}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.dropzoneHook}\r\n            style={{ display: \"none\" }}\r\n          />\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.dropzoneHook}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n      )}\r\n\r\n      {false && (\r\n        <Form.Group controlId=\"validationFormikCountry\">\r\n          <Form.Label>{t(\"Country\")}</Form.Label>\r\n          <Form.Control as=\"select\" custom>\r\n            <option>Latvija</option>\r\n            <option>Deutschland</option>\r\n          </Form.Control>\r\n        </Form.Group>\r\n      )}\r\n\r\n      <Form.Group controlId=\"validationFormikBirthDate\">\r\n        <Form.Label>{t(\"Date of birth\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"yyyy-mm-dd\")}\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"birthDate\"\r\n            value={values.birthDate}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.birthDate && touched.birthDate}\r\n          />\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.birthDate}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationFormikTimezone\">\r\n        <Form.Label>{t(\"Timezone at birth\")}</Form.Label>\r\n        <Form.Control\r\n          as=\"select\"\r\n          custom\r\n          name=\"timezone\"\r\n          value={values.timezone}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.timezone && touched.timezone}\r\n        >\r\n          <option value=\"\">{t(\"Choose...\")}</option>\r\n          {timezones_sorted.map((element, key) => (\r\n            <option\r\n              key={key}\r\n              value={`${(((element.Offset + 12) % 24) + 1)\r\n                .toString()\r\n                .padStart(2, \"0\")} - ${element.Name}`}\r\n            >\r\n              {(((element.Offset + 12) % 24) + 1).toString().padStart(2, \"0\")} -{\" \"}\r\n              {element.Name}\r\n            </option>\r\n          ))}\r\n        </Form.Control>\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {errors.timezone}\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n\r\n      {false && (\r\n        <Form.Group controlId=\"validationFormikPersonalId\">\r\n          <Form.Label>{t(\"Personal ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder={t(\"XXXXXX-XXXXX\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"personalID\"\r\n              value={values.personalID}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.personalID && touched.personalID}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.personalID}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n      )}\r\n\r\n      <Form.Group>\r\n        <Form.Check\r\n          required\r\n          name=\"terms\"\r\n          label={t(\"Agree to terms and conditions\")}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.terms && touched.terms}\r\n          feedback={errors.terms}\r\n          id=\"validationFormik0\"\r\n        />\r\n      </Form.Group>\r\n\r\n      <Trans i18nKey=\"AccountRegistration:The User Agreement and the Privacy Policy\">\r\n        <KeyboardArrowRight style={{ color: \"var(--dark)\" }} />\r\n        <a href=\"#\" onMouseDown={() => setUserAgreementShow(true)}>\r\n          User Agreement\r\n        </a>\r\n\r\n        <br />\r\n\r\n        <KeyboardArrowRight style={{ color: \"var(--dark)\" }} />\r\n        <a href=\"#\" onMouseDown={() => setPrivacyPolicyShow(true)}>\r\n          Privacy Policy\r\n        </a>\r\n      </Trans>\r\n\r\n      <br />\r\n      <br />\r\n\r\n      <SubmitButton\r\n        {...args}\r\n        caption={t(\"Submit\")}\r\n        request={props.request}\r\n        namespace={props.namespace}\r\n      />\r\n    </Form>\r\n  );\r\n\r\n  if (signedIn === false)\r\n    return (\r\n      <>\r\n        <Alert variant=\"info\">\r\n          <Alert.Heading>{t(\"User not logged in\")}</Alert.Heading>\r\n          <p>\r\n            <Trans i18nKey=\"AccountRegistration:Please log in first\">\r\n              Please log in first.\r\n            </Trans>\r\n          </p>\r\n        </Alert>\r\n      </>\r\n    );\r\n\r\n  if (!debug && accountNumber !== null)\r\n    return (\r\n      <>\r\n        <Alert variant=\"info\">\r\n          <Alert.Heading>{t(\"Account successfully registered\")}</Alert.Heading>\r\n          <p>\r\n            <Trans\r\n              i18nKey=\"AccountRegistration:Account with your personal ID successfully registered\"\r\n              accountNumber={accountNumber}\r\n            >\r\n              Account with the personal ID\r\n              <strong>{{ accountNumber }}</strong>\r\n              successfully registered.\r\n            </Trans>\r\n          </p>\r\n        </Alert>\r\n      </>\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <ModalMessage\r\n        show={userAgreementShow}\r\n        file=\"en/UserAgreement\"\r\n        size=\"lg\"\r\n        centered={false}\r\n        title={t(\"User Agreement\")}\r\n        footer=\"\"\r\n        onHide={() => setUserAgreementShow(false)}\r\n      />\r\n\r\n      <ModalMessage\r\n        show={privacyPolicyShow}\r\n        file=\"en/PrivacyPolicy\"\r\n        size=\"lg\"\r\n        centered={false}\r\n        title={t(\"Privacy Policy\")}\r\n        footer=\"\"\r\n        onHide={() => setPrivacyPolicyShow(false)}\r\n      />\r\n\r\n      <Card title={t(\"Open account\")}>\r\n        <Formik\r\n          component={AccountRegistrationForm}\r\n          validationSchema={schema}\r\n          onSubmit={onSubmit}\r\n          initialValues={{\r\n            // personalID: \"\",\r\n            terms: \"\",\r\n            dropzoneHook: accountPhotoPath,\r\n            timezone: \"\",\r\n            birthDate: \"\",\r\n          }}\r\n        />\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\n// import { useTranslation } from \"react-i18next\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"Pagination\",\r\n    size: \"md\",\r\n    countItems: 0,\r\n    itemsPerPage: 5,\r\n    active: 0, // active page\r\n    onClick: () => {},\r\n    align: \"center\",\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  const pages = Math.ceil(props.countItems / props.itemsPerPage);\r\n\r\n  if (pages < 2) return <></>;\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  // const { t } = useTranslation([props.namespace]);\r\n\r\n  const onClick = (number) => {\r\n    // console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = props.active > 1 ? props.active - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          props.active < Math.ceil(props.countItems / props.itemsPerPage)\r\n            ? props.active + 1\r\n            : Math.ceil(props.countItems / props.itemsPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(props.countItems / props.itemsPerPage);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    // getBusinesses(number);\r\n    props.onClick(number);\r\n  };\r\n\r\n  const getPages = () => {\r\n    let items = [];\r\n    for (let number = 1; number <= pages; number++) {\r\n      if (\r\n        number === 1 ||\r\n        number === pages ||\r\n        (number >= props.active - 1 && number <= props.active + 1)\r\n      ) {\r\n        items.push(\r\n          <Pagination.Item\r\n            key={number}\r\n            active={number === props.active}\r\n            onClick={() => onClick(number)}\r\n          >\r\n            {number}\r\n          </Pagination.Item>\r\n        );\r\n      } else if (number === 2 || number === pages - 1) {\r\n        items.push(<Pagination.Ellipsis key={number} disabled />);\r\n      }\r\n    }\r\n    return items;\r\n  };\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    const { align } = props;\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          textAlign: `${align}`,\r\n          // backgroundColor: \"red\",\r\n        }}\r\n      >\r\n        <span style={{ display: \"inline-block\" }}>\r\n          <Pagination size={props.size} style={{ padding: 0, margin: 0 }}>\r\n            {pages > 5 && (\r\n              <>\r\n                <Pagination.First onClick={() => props.onClick(\"First\")} />\r\n                <Pagination.Prev onClick={() => props.onClick(\"Prev\")} />\r\n              </>\r\n            )}\r\n\r\n            {getPages()}\r\n\r\n            {pages > 5 && (\r\n              <>\r\n                <Pagination.Next onClick={() => props.onClick(\"Next\")} />\r\n                <Pagination.Last onClick={() => props.onClick(\"Last\")} />\r\n              </>\r\n            )}\r\n          </Pagination>\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport {\r\n  // Form,\r\n  // InputGroup,\r\n  // Button,\r\n  // Table,\r\n  ListGroup,\r\n  Badge,\r\n} from \"react-bootstrap\";\r\n// import { Formik } from \"formik\";\r\n// import * as yup from \"yup\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport { ArrowRightAlt } from \"@material-ui/icons\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Card from \"../card\";\r\n// import SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    request: \"get transactions\",\r\n    namespace: \"Transactions\",\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const {\r\n    transactions,\r\n    countTransactions,\r\n    activePageTransactions,\r\n    transactionsPerPage,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  // const { setActivePageTransactions } = props.barrelSetters;\r\n  const {\r\n    // getReviser,\r\n    // getWorkplace,\r\n    // sendRequest,\r\n    getTransactions,\r\n    format,\r\n    formatDate,\r\n    formatPerCent,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  const onPageSelect = (number) => {\r\n    // console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageTransactions > 1 ? activePageTransactions - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageTransactions <\r\n          Math.ceil(countTransactions / transactionsPerPage)\r\n            ? activePageTransactions + 1\r\n            : Math.ceil(countTransactions / transactionsPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countTransactions / transactionsPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getTransactions(number);\r\n  };\r\n\r\n  let cnt = 0;\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return (\r\n    <>\r\n      <ListGroup variant=\"flush\">\r\n        {transactions !== null &&\r\n          transactions.map((transaction, keyTransactions) => {\r\n            cnt++;\r\n\r\n            const {\r\n              // business_description,\r\n              // business_id,\r\n              // business_image,\r\n              // business_link,\r\n              // business_status,\r\n              business_title,\r\n              // comment,\r\n              conv_amount,\r\n              created,\r\n              // currency,\r\n              // exchange_rate,\r\n              sender_firstname,\r\n              sender_lastname,\r\n              // recipient_firstname,\r\n              // recipient_lastname,\r\n              // purpose_description,\r\n              purpose_id,\r\n              // purpose_image,\r\n              // purpose_link,\r\n              // purpose_status,\r\n              purpose_title,\r\n              recipient_id,\r\n              roles,\r\n              share,\r\n              share_per_cent,\r\n              // sender_id,\r\n              // sender_status,\r\n              // recipient_status,\r\n              from_account,\r\n              to_account,\r\n              type,\r\n            } = transaction;\r\n\r\n            // const i_am_sender = sender_id === accountNumber;\r\n            const i_am_recipient = recipient_id === accountNumber;\r\n            const t_from_account = t(from_account);\r\n            const t_to_account = t(to_account);\r\n\r\n            const roles_available =\r\n              roles !== null && roles !== \"-\" && typeof roles !== \"undefined\";\r\n            const arrRoles = roles_available ? roles.split(\",\") : [];\r\n\r\n            const shares_available =\r\n              typeof share !== \"undefined\" && share !== null && share !== \"-\";\r\n\r\n            if (type === \"transfer U2S\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {sender_firstname} {sender_lastname}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  <Trans\r\n                    i18nKey=\"Transactions:fromAccountToAccount\"\r\n                    t_from_account={t_from_account}\r\n                    t_to_account={t_to_account}\r\n                  >\r\n                    {{ t_from_account }}{\" \"}\r\n                    <ArrowRightAlt style={{ color: \"var(--dark)\" }} />{\" \"}\r\n                    {{ t_to_account }}\r\n                  </Trans>\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n            } else if (type === \"transfer U2U\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {sender_firstname} {sender_lastname}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n            } else if (type === \"transfer V2U\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {t(\"Daily allowance\")}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n            } else if (type === \"transfer U2B\") {\r\n              return (\r\n                <ListGroup.Item key={keyTransactions} action>\r\n                  {purpose_id}\r\n                  <span style={{ float: \"right\" }}>\r\n                    {i_am_recipient ? \"\" : \"-\"}\r\n                    {format(conv_amount)}\r\n                  </span>\r\n                  <br />\r\n                  {business_title} &middot; {purpose_title}\r\n                  <br />\r\n                  {sender_firstname} {sender_lastname}\r\n                  {roles_available && (\r\n                    <>\r\n                      <br />\r\n                      {arrRoles.map((role, key) => {\r\n                        return (\r\n                          <span key={key}>\r\n                            {\" \"}\r\n                            <Badge pill variant=\"secondary\">\r\n                              {role}\r\n                            </Badge>\r\n                          </span>\r\n                        );\r\n                      })}\r\n                    </>\r\n                  )}{\" \"}\r\n                  {shares_available && (\r\n                    <>\r\n                      <br />\r\n                      {share} {t(\"shares\")} ({formatPerCent(share_per_cent)})\r\n                    </>\r\n                  )}\r\n                  <br />\r\n                  <small>{formatDate(created)}</small>\r\n                </ListGroup.Item>\r\n              );\r\n\r\n              // TODO: check if this works\r\n            } else {\r\n              console.log(\"Unknown transfer type:\", type);\r\n\r\n              return <></>;\r\n            }\r\n          })}\r\n      </ListGroup>\r\n      {cnt === 0 && (\r\n        <p className=\"text-center text-muted\">{t(\"No transactions\")}</p>\r\n      )}\r\n      <br />\r\n\r\n      <Pagination\r\n        {...args}\r\n        size=\"sm\"\r\n        countItems={countTransactions}\r\n        itemsPerPage={transactionsPerPage}\r\n        active={activePageTransactions}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState, useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, Toast, Badge } from \"react-bootstrap\";\r\nimport { Settings } from \"@material-ui/icons\";\r\nimport _ from \"lodash\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"Shareholder\",\r\n    request: \"change share\",\r\n    purpose: null,\r\n    shareholder: null,\r\n    closeButton: true,\r\n    rangeControl: true,\r\n    sharePerCent: null,\r\n    businessTitle: null,\r\n    purposeTitle: null,\r\n    businessOwnerFirstname: null,\r\n    businessOwnerLastname: null,\r\n    sharesCreated: null,\r\n  };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { purposeShareholders } = props.barrelGetters;\r\n  const { setPurposeShareholders } = props.barrelSetters;\r\n  const { sendRequest, formatPerCent, formatDate } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const [userQuery, setUserQuery] = useState(props.share);\r\n  const delayedQuery = useRef(_.debounce((q) => sendQuery(q), 2000)).current;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  const onChange = (e) => {\r\n    setUserQuery(e.target.value);\r\n    delayedQuery(e.target.value);\r\n  };\r\n\r\n  const onClose = () => {\r\n    let data = {};\r\n    data.purpose_id = props.purpose;\r\n    data.shareholder_id = props.shareholder;\r\n    return sendRequest({ req: \"remove shareholder\", data });\r\n  };\r\n\r\n  const sendQuery = (delayedQuery) => {\r\n    const ps = purposeShareholders;\r\n    ps[props.id].share = delayedQuery;\r\n    setPurposeShareholders(JSON.stringify(ps));\r\n    let data = {};\r\n    data.purpose_id = props.purpose;\r\n    data.shareholder_id = props.shareholder;\r\n    data.share = delayedQuery;\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    const sharesLabelId = `sharesLabel${props.key}`;\r\n    return (\r\n      <Toast key={props.key} onClose={onClose} style={{ minWidth: \"100%\" }}>\r\n        <Toast.Header closeButton={props.closeButton}>\r\n          <strong className=\"mr-auto\">\r\n            {props.firstname} {props.lastname}{\" \"}\r\n            <small>\r\n              <Settings\r\n                hidden={true}\r\n                fontSize=\"small\"\r\n                style={{ color: \"var(--dark)\" }}\r\n              />\r\n            </small>\r\n          </strong>\r\n          <small>\r\n            <span id={sharesLabelId}>{userQuery}</span> {t(\"shares\")}\r\n          </small>\r\n        </Toast.Header>\r\n        <Toast.Body>\r\n          <Form>\r\n            <Form.Group controlId=\"formRoles\">\r\n              <div>\r\n                {props.roles.map((role, key) => {\r\n                  return (\r\n                    <span key={key}>\r\n                      <Badge pill variant=\"secondary\">\r\n                        {role}\r\n                      </Badge>{\" \"}\r\n                    </span>\r\n                  );\r\n                })}\r\n              </div>\r\n            </Form.Group>\r\n\r\n            {props.rangeControl && (\r\n              <Form.Group controlId=\"formBasicRange\">\r\n                <Form.Control\r\n                  type=\"range\"\r\n                  variant=\"light\"\r\n                  // value={share}\r\n                  defaultValue={userQuery}\r\n                  // value={userQuery}\r\n                  min={1}\r\n                  max={1000}\r\n                  step={1}\r\n                  // ref={this.input}\r\n                  onChange={onChange}\r\n                />\r\n              </Form.Group>\r\n            )}\r\n          </Form>\r\n          <span>\r\n            {props.sharePerCent !== null && formatPerCent(props.sharePerCent)}{\" \"}\r\n            {props.businessTitle !== null && props.businessTitle}{\" \"}\r\n            {props.businessTitle !== null && props.purposeTitle !== null && (\r\n              <> &middot; </>\r\n            )}\r\n            {props.purposeTitle !== null && props.purposeTitle}{\" \"}\r\n          </span>\r\n          {props.sharesCreated !== null && (\r\n            <>\r\n              <br />\r\n              {formatDate(props.sharesCreated, {\r\n                month: \"long\",\r\n                day: \"numeric\",\r\n                year: \"numeric\",\r\n              })}\r\n            </>\r\n          )}{\" \"}\r\n          {(props.businessOwnerFirstname !== null ||\r\n            props.businessOwnerLastname !== null) && <br />}\r\n          {props.businessOwnerFirstname !== null &&\r\n            props.businessOwnerFirstname}{\" \"}\r\n          {props.businessOwnerLastname !== null && props.businessOwnerLastname}{\" \"}\r\n        </Toast.Body>\r\n      </Toast>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\n// import { Form, InputGroup, Button, Table, ListGroup } from \"react-bootstrap\";\r\n// import { Formik } from \"formik\";\r\n// import * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n// import Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\n// import Card from \"../card\";\r\n// import SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\nimport Shareholder from \"../shareholder\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    request: \"get shares\",\r\n    namespace: \"Shares\",\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  const {\r\n    shares,\r\n    countShares,\r\n    activePageShares,\r\n    sharesPerPage,\r\n    // accountNumber,\r\n    userData,\r\n  } = props.barrelGetters;\r\n  // const {  } = props.barrelSetters;\r\n  const {\r\n    // getReviser,\r\n    // getWorkplace,\r\n    // sendRequest,\r\n    getShares,\r\n    // format,\r\n    // formatPerCent,\r\n    // formatDate,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n     * Functions\r\n     ============================================================================ */\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  const onPageSelect = (number) => {\r\n    console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageShares > 1 ? activePageShares - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageShares < Math.ceil(countShares / sharesPerPage)\r\n            ? activePageShares + 1\r\n            : Math.ceil(countShares / sharesPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countShares / sharesPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getShares(number);\r\n  };\r\n\r\n  let cnt = 0;\r\n\r\n  /**\r\n     * Return\r\n     ============================================================================ */\r\n  return (\r\n    <>\r\n      {shares !== null &&\r\n        shares.map((share, keyShares) => {\r\n          cnt++;\r\n\r\n          const {\r\n            // business_description,\r\n            // business_id,\r\n            // business_image,\r\n            // business_link,\r\n            // business_status,\r\n            business_title,\r\n            owner_firstname,\r\n            owner_lastname,\r\n            // owner_status,\r\n            // owner_uid,\r\n            // purpose_description,\r\n            purpose_id,\r\n            // purpose_image,\r\n            // purpose_link,\r\n            // purpose_status,\r\n            purpose_title,\r\n            shareholder_id,\r\n            shares_created,\r\n            // shares_description,\r\n            share_per_cent,\r\n            shares_roles,\r\n            shares_share,\r\n            // shares_status,\r\n            // shares_title,\r\n          } = share;\r\n\r\n          const arrRoles = shares_roles !== null ? shares_roles.split(\",\") : [];\r\n          // const content = `${owner_firstname} ${owner_lastname} / ${formatDate(\r\n          //   shares_created\r\n          // )}`;\r\n\r\n          // console.log(\"keyShares:\", keyShares);\r\n\r\n          return (\r\n            <Shareholder\r\n              {...args}\r\n              key={keyShares}\r\n              id={keyShares}\r\n              shareholder={shareholder_id}\r\n              purpose={purpose_id}\r\n              firstname={userData.firstname}\r\n              lastname={userData.lastname}\r\n              share={shares_share}\r\n              roles={arrRoles}\r\n              closeButton={false}\r\n              rangeControl={false}\r\n              sharePerCent={share_per_cent}\r\n              businessOwnerFirstname={owner_firstname}\r\n              businessOwnerLastname={owner_lastname}\r\n              businessTitle={business_title}\r\n              purposeTitle={purpose_title}\r\n              sharesCreated={shares_created}\r\n            />\r\n          );\r\n        })}\r\n\r\n      {cnt === 0 && <p className=\"text-center text-muted\">{t(\"No shares\")}</p>}\r\n\r\n      <Pagination\r\n        {...args}\r\n        size=\"md\"\r\n        countItems={countShares}\r\n        itemsPerPage={sharesPerPage}\r\n        active={activePageShares}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, Badge, Accordion, Card } from \"react-bootstrap\";\r\n// import { useAccordionToggle } from \"react-bootstrap/AccordionToggle\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import Octicon, { ChevronRight } from \"@primer/octicons-react\";\r\n// import AccessAlarmIcon from \"@material-ui/icons/AccessAlarm\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\n\r\n// import ZCard from \"../card\";\r\nimport Transactions from \"../transactions\";\r\nimport Shares from \"../shares\";\r\n\r\nexport default (args) => {\r\n  // let defaults = {};\r\n  // const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userData,\r\n    accountNumber,\r\n    accordionView,\r\n    // currencyAbbr,\r\n  } = props.barrelGetters;\r\n  const {\r\n    setAccountType,\r\n    setRedirectTo,\r\n    setAccordionView,\r\n  } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    getAccountData,\r\n    getTransactions,\r\n    getShares,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // const userData = props.data.userData;\r\n  // let format = props.format;\r\n  const { t } = useTranslation(\"Balance\");\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  // console.log(\"BALANCE DATA:\", props);\r\n  // console.log(\"BALANCE userData\", userData);\r\n  // const userDataParsed = JSON.parse(userData);\r\n  const userDataParsed = userData;\r\n\r\n  // let footer = <small className=\"text-muted\">Last updated 3 mins ago</small>;\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  // const gotoNextView = () => {\r\n  //   // console.log(props);\r\n\r\n  //   // props.data.setView(\"transfer\");\r\n  //   setRedirect(true);\r\n  // };\r\n\r\n  const onAccountTypeSelected = (type) => {\r\n    // console.log(type);\r\n\r\n    setAccountType(type);\r\n    setRedirectTo(\"/transfer\");\r\n  };\r\n\r\n  // console.log(userData);\r\n  const available =\r\n    userDataParsed !== null\r\n      ? format(\r\n          userDataParsed.acc_curr +\r\n            userDataParsed.acc_cred +\r\n            userDataParsed.acc_save\r\n        )\r\n      : null;\r\n  let acc_curr =\r\n    userDataParsed !== null ? format(userDataParsed.acc_curr) : null;\r\n  let acc_cred =\r\n    userDataParsed !== null ? format(userDataParsed.acc_cred) : null;\r\n  let acc_save =\r\n    userDataParsed !== null ? format(userDataParsed.acc_save) : null;\r\n\r\n  // if (props.data.view === \"transfer\") {\r\n  //   return <Redirect push to=\"/transfer\" />;\r\n  // }\r\n\r\n  // if (redirect) {\r\n  //   // props.data.setView(\"transfer\");\r\n  //   return <Redirect push to=\"/transfer\" />;\r\n  // }\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  const toggleView = (view) => {\r\n    const newView = accordionView !== view ? view : null;\r\n\r\n    setAccordionView(newView);\r\n\r\n    if (newView !== null) {\r\n      switch (view) {\r\n        case \"balance\":\r\n          getAccountData();\r\n          break;\r\n\r\n        case \"transactions\":\r\n          getTransactions(1);\r\n          break;\r\n\r\n        case \"shares\":\r\n          getShares(1);\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  // const ToggleAccountNumber = () => {\r\n  //   setAccordionView(\r\n  //     accordionView !== \"accountNumber\" ? \"accountNumber\" : null\r\n  //   );\r\n  // };\r\n\r\n  // const ToggleBalance = () => {\r\n  //   // console.log(\"decorate\");\r\n  //   setAccordionView(accordionView !== \"balance\" ? \"balance\" : null);\r\n  //   getAccountData();\r\n  // };\r\n\r\n  // const ToggleTransactions = () => {\r\n  //   // console.log(\"decorate\");\r\n  //   setAccordionView(\"transactions\");\r\n  //   getTransactions(1);\r\n  // };\r\n\r\n  // const ToggleShares = () => {\r\n  //   // console.log(\"decorate\");\r\n  //   setAccordionView(\"shares\");\r\n  //   getShares(1);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Accordion defaultActiveKey={accordionView}>\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"accountNumber\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => toggleView(\"accountNumber\")}\r\n          >\r\n            {t(\"Account number\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"accountNumber\">\r\n            <Card.Body>\r\n              <Card.Text>{accountNumber}</Card.Text>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"balance\"\r\n            style={{\r\n              cursor: \"pointer\",\r\n              // backgroundColor: \"#e8f6f3\",\r\n            }}\r\n            onClick={() => toggleView(\"balance\")}\r\n          >\r\n            {t(\"Balance\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"balance\">\r\n            <Card.Body>\r\n              <Form noValidate>\r\n                <Form.Group>\r\n                  <Form.Label>{t(\"Available\")}</Form.Label>\r\n\r\n                  <Form.Text>\r\n                    <div style={{ fontSize: \"3em\" }}>{available}</div>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Current account\")}</div>\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_curr\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_curr}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Credit account\")}</div>\r\n\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_cred\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_cred}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Savings account\")}</div>\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_save\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_save}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                  </ul>\r\n                </Form.Group>\r\n              </Form>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"transactions\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => toggleView(\"transactions\")}\r\n          >\r\n            {t(\"Transactions\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"transactions\">\r\n            <Card.Body>\r\n              <Transactions {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"shares\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => toggleView(\"shares\")}\r\n          >\r\n            {t(\"Shares\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"shares\">\r\n            <Card.Body>\r\n              <Shares {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"transfer U2S\",\r\n    namespace: \"Transfer\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER TO SELF DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    // request,\r\n    userData,\r\n    accountNumber,\r\n    accountType,\r\n    language,\r\n    currencyAbbr,\r\n  } = props.barrelGetters;\r\n  // const { setAccountType } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userData = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  // const { currency_abbr } = userData;\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    toAccount: yup.string().required(t(\"To Account is required\")),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} Form data\r\n   */\r\n  const transferToSelf = (data) => {\r\n    // console.log(\"TRANSFER U2S DATA:\", data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.amount = parseLocaleNumber(data.amount, language);\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n      useGrouping: false,\r\n    }).format(data.amount);\r\n    // console.log(\"BEFORE SEND\");\r\n\r\n    // onTransfer({ req: props.request, data: data });\r\n    sendRequest({ req: props.request, data: data });\r\n\r\n    // console.log(\"AFTER SEND\");\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    transferToSelf(data);\r\n  };\r\n\r\n  const TransferToSelfForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"validationToAccount\">\r\n          <Form.Label>{t(\"To account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"toAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.toAccount && touched.toAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option value=\"acc_curr\" hidden={accountType === \"acc_curr\"}>\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option value=\"acc_cred\" hidden={accountType === \"acc_cred\"}>\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option value=\"acc_save\" hidden={accountType === \"acc_save\"}>\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.toAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              // type=\"number\"\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              // onBlur={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request=\"transfer U2S\"\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={TransferToSelfForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        fromAccount: \"\",\r\n        toAccount: \"\",\r\n        amount: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\nimport Card from \"../card\";\r\nimport ModalMessage from \"../modalMessage\";\r\nimport { useStickyState } from \"../../utils/state\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"TanInput\",\r\n    request: \"submit tan\",\r\n    show: false,\r\n    size: \"lg\",\r\n  }; // TODO: Adjust this\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { tanRequired, userData } = props.barrelGetters;\r\n  const { setTanRequired } = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]); // adjust namespace\r\n\r\n  /** \r\n    * Yup schema\r\n    ============================================================================ */\r\n  const schema = yup.object({\r\n    tan: yup.string().required(t(\"TAN is required\")),\r\n  });\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const onSubmit = (data) => {\r\n    data.email = userData.email;\r\n    // console.log(data);\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n    * Form\r\n    ============================================================================ */\r\n  const ComponentForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <>\r\n      <div>\r\n        {t(\"A transaction number has been sent to your email account.\")}\r\n      </div>\r\n      <br />\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"validationFormikTAN\">\r\n          <Form.Label>{t(\"TAN\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"tan\"\r\n              value={values.tan}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.tan && touched.tan}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.tan}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </>\r\n  );\r\n\r\n  const message = (\r\n    <Formik\r\n      component={ComponentForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        tan: \"\",\r\n      }}\r\n    />\r\n  );\r\n\r\n  /**\r\n    * Formik return\r\n    ============================================================================ */\r\n  return (\r\n    <>\r\n      <ModalMessage\r\n        message={message}\r\n        show={tanRequired}\r\n        size={props.size}\r\n        centered={true}\r\n        onHide={() => setTanRequired(false)}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n * User imports\r\n */\r\nimport Card from \"../card\";\r\nimport TanInput from \"../tanInput\";\r\n\r\n/**\r\n * Component: TransferToPerson\r\n */\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"transfer U2U\", namespace: \"Transfer\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    // request,\r\n    userData,\r\n    accountNumber,\r\n    language,\r\n    accountType,\r\n    currencyAbbr,\r\n    tanRequired,\r\n  } = props.barrelGetters;\r\n  const { setTransferRequest } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  // const { onTransfer } = props.barrelEventHandlers;\r\n\r\n  /** \r\n   * Custom hooks\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /** \r\n   * Destructuring\r\n   ============================================================================ */\r\n  // const { currency_abbr } = userData;\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    toPersonalID: yup\r\n      .string()\r\n      .required(t(\"Recipients Personal ID is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Personal ID Regex\")),\r\n        t(\"Wrong Personal ID format\")\r\n      ),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const transferToPerson = (data) => {\r\n    // console.log(\"TRANSFER U2U DATA:\", data);\r\n    data.transferType = props.request;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.email = userData.email;\r\n    data.language = language;\r\n    data.amount = parseLocaleNumber(data.amount, language);\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n      useGrouping: false,\r\n    }).format(data.amount);\r\n\r\n    setTransferRequest(JSON.stringify(data));\r\n    data = { email: data.email, language: data.language };\r\n\r\n    sendRequest({ req: \"get tan\", data: data });\r\n    // onTransfer({ req: props.request, data: data });\r\n  };\r\n\r\n  // return <>test</>;\r\n\r\n  const onSubmit = (data) => {\r\n    transferToPerson(data);\r\n  };\r\n\r\n  const TransferToPersonForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        {/* Field: From account */}\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        {/* Field: Recipients Personal ID */}\r\n        <Form.Group controlId=\"validationFormikToPersonalID\">\r\n          <Form.Label>{t(\"To Personal ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder={t(\"XXXXXX-XXXXX\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"toPersonalID\"\r\n              value={values.toPersonalID}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.toPersonalID && touched.toPersonalID}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.toPersonalID}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Field: Description */}\r\n        <Form.Group\r\n          controlId=\"description\"\r\n          name=\"description\"\r\n          value={values.description}\r\n          onChange={handleChange}\r\n        >\r\n          <Form.Label>{t(\"Description\")}</Form.Label>\r\n          <Form.Control as=\"textarea\" rows=\"3\" />\r\n        </Form.Group>\r\n\r\n        {/* Field: Amount */}\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              // type=\"number\"\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              // onBlur={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Button: Next */}\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request=\"get tan\"\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <TanInput show={tanRequired} size=\"sm\" {...args} />\r\n      <Formik\r\n        component={TransferToPersonForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          fromAccount: \"\",\r\n          toPersonalID: \"\",\r\n          amount: \"\",\r\n          description: \"\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\n/**\r\n * User imports\r\n */\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\nimport TanInput from \"../tanInput\";\r\n\r\nexport default ({\r\n  args,\r\n  title,\r\n  navigation,\r\n  navigationdefaultActiveKey,\r\n  onNavigationClick,\r\n}) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"transfer U2B\", namespace: \"Transfer\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER TO SELF DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    // request,\r\n    userData,\r\n    accountNumber,\r\n    language,\r\n    accountType,\r\n    currencyAbbr,\r\n    tanRequired,\r\n  } = props.barrelGetters;\r\n  const { setTransferRequest } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  // const { onTransfer } = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /** \r\n   * Destructuring\r\n   ============================================================================ */\r\n  // const { currency_abbr } = userData;\r\n\r\n  const schema = yup.object({\r\n    fromAccount: yup.string().required(t(\"From Account is required\")),\r\n    // businessTitle: yup\r\n    //   .string()\r\n    //   .required(t(\"Recipients Business ID is required\")),\r\n    purposeID: yup.string().required(t(\"Purpose ID is required\")),\r\n    amount: yup\r\n      .string()\r\n      .required(t(\"Amount is required\"))\r\n      .matches(new RegExp(t(\"Amount Regex\")), t(\"Wrong amount format\")),\r\n  });\r\n\r\n  let acc_curr = \"\";\r\n  let acc_cred = \"\";\r\n  let acc_save = \"\";\r\n  if (userData !== null) {\r\n    acc_curr = \" (\" + format(userData.acc_curr) + \")\";\r\n    acc_cred = \" (\" + format(userData.acc_cred) + \")\";\r\n    acc_save = \" (\" + format(userData.acc_save) + \")\";\r\n  }\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const transferToBusiness = (data) => {\r\n    data.transferType = props.request;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.email = userData.email;\r\n    data.language = language;\r\n    data.currency = currencyAbbr;\r\n    data.amount = parseLocaleNumber(data.amount, language);\r\n    data.amount = new Intl.NumberFormat(\"en-US\", {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 2,\r\n      useGrouping: false,\r\n    }).format(data.amount);\r\n    // data.amount = parseFloat(data.amount);\r\n    // data.amount = Number(data.amount.replace(/[^0-9.-]+/g, \"\"));\r\n\r\n    setTransferRequest(JSON.stringify(data));\r\n    data = { email: data.email, language: data.language };\r\n\r\n    sendRequest({ req: \"get tan\", data: data });\r\n    // onTransfer({ req: props.request, data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    transferToBusiness(data);\r\n  };\r\n\r\n  const TransferToBusinessForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Card\r\n      title={title}\r\n      navigation={navigation}\r\n      navigationdefaultActiveKey={navigationdefaultActiveKey}\r\n      onNavigationClick={onNavigationClick}\r\n    >\r\n      {/* From account */}\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"validationFromAccount\">\r\n          <Form.Label>{t(\"From account\")}</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            custom\r\n            name=\"fromAccount\"\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.fromAccount && touched.fromAccount}\r\n          >\r\n            <option value=\"\">{t(\"Choose...\")}</option>\r\n            <option\r\n              value=\"acc_curr\"\r\n              hidden={accountType !== null && accountType !== \"acc_curr\"}\r\n            >\r\n              {t(\"Current account\")}\r\n              {acc_curr}\r\n            </option>\r\n            <option\r\n              value=\"acc_cred\"\r\n              hidden={accountType !== null && accountType !== \"acc_cred\"}\r\n            >\r\n              {t(\"Credit account\")}\r\n              {acc_cred}\r\n            </option>\r\n            <option\r\n              value=\"acc_save\"\r\n              hidden={accountType !== null && accountType !== \"acc_save\"}\r\n            >\r\n              {t(\"Savings account\")}\r\n              {acc_save}\r\n            </option>\r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.fromAccount}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        {/*\r\n        <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n          <Form.Label>{t(\"To Business ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"businessTitle\"\r\n              value={values.businessTitle}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.businessTitle && touched.businessTitle}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.businessTitle}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n        */}\r\n\r\n        {/* To purpose */}\r\n        <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n          <Form.Label>{t(\"To Purpose ID\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"purposeID\"\r\n              value={values.purposeID}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.purposeID && touched.purposeID}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.purposeID}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Field: Description */}\r\n        <Form.Group\r\n          controlId=\"description\"\r\n          name=\"description\"\r\n          value={values.description}\r\n          onChange={handleChange}\r\n        >\r\n          <Form.Label>{t(\"Description\")}</Form.Label>\r\n          <Form.Control as=\"textarea\" rows=\"3\" />\r\n        </Form.Group>\r\n\r\n        {/* Amount */}\r\n        <Form.Group controlId=\"validationFormikAmount\">\r\n          <Form.Label>{t(\"Amount\")}</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">\r\n                {currencyAbbr}\r\n              </InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              type=\"string\" // do NOT change to number!!\r\n              placeholder={format(0, \"\")}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"amount\"\r\n              value={values.amount}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.amount && touched.amount}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.amount}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Submit button */}\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request=\"get tan\"\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <TanInput show={tanRequired} size=\"sm\" {...args} />\r\n      <Formik\r\n        component={TransferToBusinessForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          fromAccount: \"\",\r\n          purposeID: \"\",\r\n          amount: \"\",\r\n          description: \"\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import Card from \"../card\";\r\n\r\n// import { useStickyState } from \"../../utils/state\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const {\r\n    // format,\r\n    // parseLocaleNumber,\r\n    sendRequest,\r\n    getReviser,\r\n    getWorkplace,\r\n  } = props.barrelFunctions;\r\n  const { onBusinessRegistration } = props.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([\"BusinessRegistration\"]);\r\n\r\n  // const [addOwnerAsShareholder, setAddOwnerAsShareholder] = useStickyState(\r\n  //   false,\r\n  //   \"addOwnerAsShareholder\"\r\n  // );\r\n\r\n  const schema = yup.object({\r\n    businessTitle: yup\r\n      .string()\r\n      .required(t(\"Business title is a required field\"))\r\n      .min(3, t(\"Business title too short\"))\r\n      .max(70, t(\"Business title too long\"))\r\n      .trim(),\r\n    businessDescription: yup.string().optional(),\r\n  });\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const registerBusiness = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n\r\n    // console.log(\"REGISTER BUSINESS DATA:\", data);\r\n\r\n    // onBusinessRegistration({ req: \"register business\", data: data });\r\n    sendRequest({ req: \"register business\", data: data });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    registerBusiness(data);\r\n    // setAddOwnerAsShareholder(true);\r\n  };\r\n\r\n  const RegisterBusinessForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Business Title (Business ID) */}\r\n      <Form.Group controlId=\"validationFormikDestinationAccountID\">\r\n        <Form.Label>{t(\"Business Title\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"\"\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"businessTitle\"\r\n            value={values.businessTitle}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.businessTitle && touched.businessTitle}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.businessTitle}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Business Description */}\r\n      <Form.Group\r\n        controlId=\"businessDescription\"\r\n        name=\"businessDescription\"\r\n        value={values.businessDescription}\r\n        onChange={handleChange}\r\n      >\r\n        <Form.Label>{t(\"Business Description\")}</Form.Label>\r\n        <Form.Control as=\"textarea\" rows=\"3\" />\r\n      </Form.Group>\r\n\r\n      {/* Submit button */}\r\n      <Button type=\"submit\" block>\r\n        {t(\"Submit\")}\r\n      </Button>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        component={RegisterBusinessForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          businessTitle: \"\",\r\n          businessDescription: \"\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","/**\r\n  * System imports\r\n  ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    businessID: null,\r\n    purposeID: null,\r\n    title: \"\",\r\n    description: \"\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"PURPOSE REGISTRATION PROPS:\", props);\r\n\r\n  const barrels = props;\r\n  const { businessID, purposeID, id } = props;\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber, language, businessPurposes } = barrels.barrelGetters;\r\n  const { setBusinessPurposes } = barrels.barrelSetters;\r\n  const { getReviser, getWorkplace } = barrels.barrelFunctions;\r\n  const { onPurposeRegistration } = barrels.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([\"PurposeRegistration\"]);\r\n\r\n  const schema = yup.object({\r\n    purposeTitle: yup\r\n      .string()\r\n      .required(t(\"Purpose title is a required field\"))\r\n      .min(3, t(\"Purpose title too short\"))\r\n      .max(70, t(\"Purpose title too long\"))\r\n      .trim(),\r\n    purposeDescription: yup.string().optional(),\r\n  });\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const RegisterPurpose = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.businessID = businessID;\r\n    data.id = id;\r\n    data.purposeID = purposeID;\r\n    data.uid = accountNumber;\r\n    data.language = language;\r\n\r\n    // console.log(\"REGISTER PURPOSE DATA:\", data);\r\n\r\n    onPurposeRegistration({\r\n      req:\r\n        props.purposeID === null\r\n          ? \"register purpose\"\r\n          : \"update purpose property\",\r\n      data: data,\r\n    });\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    RegisterPurpose(data);\r\n  };\r\n\r\n  const RegisterPurposeForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Purpose Title (Purpose ID) */}\r\n      <Form.Group controlId=\"validationFormikPurposeID\">\r\n        <Form.Label>{t(\"Purpose Title\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"\"\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"purposeTitle\"\r\n            value={values.purposeTitle}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.purposeTitle && touched.purposeTitle}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.purposeTitle}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Purpose Description */}\r\n      <Form.Group controlId=\"purposeDescription\">\r\n        <Form.Label>{t(\"Purpose Description\")}</Form.Label>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          rows=\"3\"\r\n          name=\"purposeDescription\"\r\n          value={values.purposeDescription}\r\n          onChange={handleChange}\r\n        />\r\n      </Form.Group>\r\n\r\n      {/* Submit button */}\r\n      <SubmitButton\r\n        {...args}\r\n        caption={t(props.purposeID === null ? \"Submit\" : \"Save\")}\r\n        request=\"register purpose\"\r\n        namespace={props.namespace}\r\n      />\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterPurposeForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        purposeTitle: props.title,\r\n        purposeDescription: props.description,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Toast } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n// import Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    request: \"register shareholder\",\r\n    namespace: \"ShareholderRegistration\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  const barrels = props;\r\n  const { purposeID } = props;\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber } = barrels.barrelGetters;\r\n  // const {} = barrels.barrelSetters;\r\n  const {\r\n    // format,\r\n    // parseLocaleNumber,\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n  } = barrels.barrelFunctions;\r\n  // const {} = barrels.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  // const thisRef = createRef();\r\n\r\n  const schema = yup.object({\r\n    // personalID: yup\r\n    //   .string()\r\n    //   .required(t(\"Personal ID is required\"))\r\n    //   .matches(\r\n    //     new RegExp(t(\"Personal ID Regex\")),\r\n    //     t(\"Wrong Personal ID format\")\r\n    //   ),\r\n    shareholderRoles: yup.string().optional(),\r\n    shares: yup\r\n      .number()\r\n      .typeError(t(\"Shares must be a number\"))\r\n      .required(t(\"Shares is required\"))\r\n      .min(1, t(\"Shares too few\"))\r\n      .max(1000, t(\"Shares too many\")),\r\n  });\r\n\r\n  /**\r\n   * Send shareholder registration request\r\n   * @param {object} data\r\n   */\r\n  const onSubmit = (data) => {\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.uid = accountNumber;\r\n    data.purposeID = purposeID;\r\n\r\n    // console.log(\"REGISTER SHAREHOLDER DATA:\", data);\r\n\r\n    // onShareholderRegistration({ req: props.request, data: data });\r\n    sendRequest({ req: props.request, data: data });\r\n  };\r\n\r\n  const RegisterShareholderForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* id=\"shareholderRegistrationForm\" */}\r\n      <Toast style={{ minWidth: \"100%\" }}>\r\n        {/*\r\n        <Toast.Header closeButton={false}>\r\n          <strong className=\"mr-auto\">{t(\"Add Shareholder\")}</strong>\r\n        </Toast.Header>\r\n        */}\r\n        <Toast.Body>\r\n          <Form.Group controlId=\"validationFormikShareholderPersonalID\">\r\n            <Form.Label>{t(\"Shareholder Personal ID\")}</Form.Label>\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text id=\"inputGroupPrepend\">ID</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"XXXXXX-XXXXX\")}\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"personalID\"\r\n                value={values.personalID}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.personalID && touched.personalID}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.personalID}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n          {/* Shareholder Roles */}\r\n          <Form.Group controlId=\"validationFormikShareholderRoles\">\r\n            <Form.Label>{t(\"Shareholder Roles\")}</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"\"\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"shareholderRoles\"\r\n                value={values.shareholderRoles}\r\n                onChange={handleChange}\r\n                isInvalid={\r\n                  !!errors.shareholderRoles && touched.shareholderRoles\r\n                }\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.shareholderRoles}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          {/* Shares */}\r\n          <Form.Group controlId=\"validationFormikShareholderRoles\">\r\n            <Form.Label>{t(\"Shares\")}</Form.Label>\r\n            <InputGroup>\r\n              <Form.Control\r\n                type=\"number\"\r\n                min={1}\r\n                max={1000}\r\n                step={1}\r\n                placeholder=\"\"\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                name=\"shares\"\r\n                value={values.shares}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.shares && touched.shares}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.shares}\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n\r\n          <SubmitButton\r\n            {...args}\r\n            caption={t(\"Submit\")}\r\n            request={props.request}\r\n            namespace={props.namespace}\r\n          />\r\n        </Toast.Body>\r\n      </Toast>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterShareholderForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        personalID: \"\",\r\n        shares: 1,\r\n        shareholderRoles: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useEffect } from \"react\";\r\nimport {\r\n  Accordion,\r\n  Card,\r\n  Tab,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  // Nav,\r\n  Form,\r\n  // Toast,\r\n  // Badge,\r\n  // Container,\r\n  // Button,\r\n} from \"react-bootstrap\";\r\n// import { useAccordionToggle } from \"react-bootstrap/AccordionToggle\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import Octicon, { Plus, PlusSmall, Gear } from \"@primer/octicons-react\";\r\nimport { Add, Extension, Store, Edit, Close } from \"@material-ui/icons\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import Dropzone from \"../dropzone\";\r\nimport BusinessRegistration from \"../businessRegistration\";\r\nimport PurposeRegistration from \"../purposeRegistration\";\r\nimport PurposeProperty from \"../purposeProperty\";\r\nimport ShareholderRegistration from \"../shareholderRegistration\";\r\n// import shareholderRegistration from \"../shareholderRegistration\";\r\nimport Shareholder from \"../shareholder\";\r\nimport Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"MyBusiness\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const {\r\n    userBusinesses,\r\n    countBusinesses,\r\n    businessesPerPage,\r\n    activePageBusinesses,\r\n    userBusinessesLoaded,\r\n    activeBusiness,\r\n    activeBusinessID,\r\n    businessPurposes,\r\n    countBusinessPurposes,\r\n    businessPurposesPerPage,\r\n    activePageBusinessPurposes,\r\n    activeBusinesPurpose,\r\n    activePurposeProperty,\r\n    purposeShareholders,\r\n    // purposeID,\r\n    activePurposeData,\r\n    language,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  const {\r\n    setRedirectTo,\r\n    setBusinessPurposes,\r\n    setActiveBusinesPurpose,\r\n    setActivePurposeProperty,\r\n    // setPurposeID,\r\n    setActivePurposeData,\r\n  } = props.barrelSetters;\r\n  const {\r\n    getBusinesses,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n    sendRequest,\r\n  } = props.barrelFunctions;\r\n  // const {  } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  // useEffect(() => {\r\n  //   // getBusinesses();\r\n  //   // getBusinesses();\r\n  //   // eslint-disable-next-line\r\n  // }, []);\r\n\r\n  /**\r\n   * Toggle business (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  const ToggleBusiness = ({ eventKey, businessID }) => {\r\n    getBusinessPurposes(businessID, eventKey, 1);\r\n  };\r\n\r\n  /**\r\n   * Toggle purpose (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  const TogglePurpose = ({ eventKey, purposeID }) => {\r\n    getPurposeShareholders(purposeID, eventKey);\r\n  };\r\n\r\n  /**\r\n   * Create:\r\n   * - business menu\r\n   * - business purposes menu\r\n   */\r\n  let menuItems = [];\r\n  let purposes = [];\r\n  let countShareholders = 0;\r\n  userBusinesses !== null &&\r\n    Object.keys(userBusinesses).map((business, keyBusiness) => {\r\n      menuItems[keyBusiness] = [];\r\n      purposes[keyBusiness] = [];\r\n      businessPurposes !== null &&\r\n        Object.keys(businessPurposes).map((purpose, keyPurpose) => {\r\n          if (\r\n            businessPurposes[purpose].business_id ===\r\n            userBusinesses[business].business_id\r\n          ) {\r\n            menuItems[keyBusiness][keyPurpose] = (\r\n              <ListGroup.Item\r\n                action\r\n                key={businessPurposes[purpose].purpose_id}\r\n                eventKey={businessPurposes[purpose].purpose_id}\r\n                onClick={() =>\r\n                  TogglePurpose({\r\n                    eventKey: keyPurpose,\r\n                    purposeID: businessPurposes[purpose].purpose_id,\r\n                  })\r\n                }\r\n              >\r\n                <span style={{ whiteSpace: \"nowrap\" }}>\r\n                  {businessPurposes[purpose].title}\r\n                </span>\r\n\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={(e) => {\r\n                      // setPurposeID(businessPurposes[purpose].purpose_id);\r\n                      // console.log(\"edit:\", businessPurposes[purpose]);\r\n\r\n                      setActivePurposeData(\r\n                        JSON.stringify(businessPurposes[purpose])\r\n                      );\r\n                      setActiveBusinesPurpose(\"addPurpose\");\r\n                      e.stopPropagation();\r\n                    }}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n              </ListGroup.Item>\r\n            );\r\n\r\n            purposes[keyBusiness][keyPurpose] = (\r\n              <Tab.Pane\r\n                key={businessPurposes[purpose].purpose_id}\r\n                eventKey={businessPurposes[purpose].purpose_id}\r\n              >\r\n                <Accordion\r\n                  defaultActiveKey={\r\n                    activePurposeProperty !== null\r\n                      ? activePurposeProperty\r\n                      : \"shareholders\"\r\n                  }\r\n                >\r\n                  {/* Purpose ID */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"purpose_id\"\r\n                      onClick={() => setActivePurposeProperty(\"purpose_id\")}\r\n                    >\r\n                      {t(\"Purpose ID\")}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"purpose_id\">\r\n                      <Card.Body>\r\n                        <Card.Text>\r\n                          {businessPurposes[purpose].purpose_id}\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n\r\n                  {/* Purpose title */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"default\" }}\r\n                      eventKey=\"title\"\r\n                      onClick={() => setActivePurposeProperty(\"title\")}\r\n                    >\r\n                      <span style={{ cursor: \"pointer\" }}>\r\n                        {t(\"Purpose Title\")}\r\n                      </span>\r\n                    </Accordion.Toggle>\r\n\r\n                    <Accordion.Collapse eventKey=\"title\">\r\n                      <Card.Body>\r\n                        <Card.Text>{businessPurposes[purpose].title}</Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n\r\n                  {/* Purpose description */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"default\" }}\r\n                      eventKey=\"description\"\r\n                      onClick={() => setActivePurposeProperty(\"description\")}\r\n                    >\r\n                      <span style={{ cursor: \"pointer\" }}>\r\n                        {t(\"Purpose Description\")}\r\n                      </span>\r\n                    </Accordion.Toggle>\r\n\r\n                    <Accordion.Collapse eventKey=\"description\">\r\n                      <Card.Body>\r\n                        <Card.Text>\r\n                          {businessPurposes[purpose].description}\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n\r\n                  {/* Purpose shareholders */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"default\" }}\r\n                      eventKey=\"shareholders\"\r\n                      onClick={() => setActivePurposeProperty(\"shareholders\")}\r\n                    >\r\n                      <span style={{ cursor: \"pointer\" }}>\r\n                        {t(\"Purpose Shareholders\")}\r\n                      </span>\r\n                      <span style={{ float: \"right\" }}>\r\n                        <Add\r\n                          onClick={(e) => {\r\n                            setActivePurposeProperty(\"addShareholder\");\r\n                            e.stopPropagation();\r\n                          }}\r\n                          fontSize=\"small\"\r\n                          style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                        />\r\n                      </span>\r\n                    </Accordion.Toggle>\r\n\r\n                    {/* Toggle: Add shareholder */}\r\n                    <Accordion.Collapse eventKey=\"addShareholder\">\r\n                      <Card.Body>\r\n                        <ShareholderRegistration\r\n                          {...args}\r\n                          purposeID={businessPurposes[purpose].purpose_id}\r\n                        />\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n\r\n                    {/* Toggle: Shareholders list */}\r\n                    <Accordion.Collapse eventKey=\"shareholders\">\r\n                      <Card.Body>\r\n                        {typeof purposeShareholders !== \"undefined\" &&\r\n                          purposeShareholders !== null &&\r\n                          Object.keys(purposeShareholders).map(\r\n                            (shareholder, keyShareholder) => {\r\n                              if (\r\n                                purposeShareholders[shareholder].purpose_id ===\r\n                                businessPurposes[purpose].purpose_id\r\n                              ) {\r\n                                const { purpose_id } = purposeShareholders[\r\n                                  shareholder\r\n                                ];\r\n                                const {\r\n                                  shareholder_id,\r\n                                  firstname,\r\n                                  lastname,\r\n                                  // email,\r\n                                  roles,\r\n                                  share,\r\n                                } = purposeShareholders[shareholder];\r\n\r\n                                countShareholders++;\r\n\r\n                                const arrRoles =\r\n                                  roles !== null ? roles.split(\",\") : [];\r\n\r\n                                return (\r\n                                  <Shareholder\r\n                                    {...args}\r\n                                    key={keyShareholder}\r\n                                    id={keyShareholder}\r\n                                    shareholder={shareholder_id}\r\n                                    purpose={purpose_id}\r\n                                    firstname={firstname}\r\n                                    lastname={lastname}\r\n                                    share={share}\r\n                                    roles={arrRoles}\r\n                                  />\r\n                                );\r\n                              } else {\r\n                                return \"\"; // TODO: check if this works\r\n                              }\r\n                            }\r\n                          )}\r\n                        {countShareholders === 0 && (\r\n                          <Card.Text className=\"text-muted\">\r\n                            {t(\"No shareholders\")}\r\n                          </Card.Text>\r\n                        )}\r\n\r\n                        {/* End shareholders list */}\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n\r\n                  {/* Product status */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      eventKey=\"productStatus\"\r\n                      onClick={() => setActivePurposeProperty(\"productStatus\")}\r\n                    >\r\n                      {t(\"Product Status\")}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"productStatus\">\r\n                      <Card.Body\r\n                        onClick={(e) => {\r\n                          console.log(\"Click\", e);\r\n\r\n                          const bp = businessPurposes;\r\n                          bp[purpose].status =\r\n                            businessPurposes[purpose].status === 0 ? 1 : 0;\r\n                          setBusinessPurposes(JSON.stringify(bp));\r\n\r\n                          let data = {};\r\n                          // data.business_id =\r\n                          //   businessPurposes[purpose].business_id;\r\n                          // data.language = language;\r\n                          data.purpose_id =\r\n                            businessPurposes[purpose].purpose_id;\r\n                          // data.purpose_title = businessPurposes[purpose].title;\r\n                          data.purpose_status =\r\n                            businessPurposes[purpose].status;\r\n                          return sendRequest({\r\n                            req: \"change purpose status\",\r\n                            data,\r\n                          });\r\n                        }}\r\n                      >\r\n                        <Form>\r\n                          {typeof purposeShareholders === \"undefined\" ||\r\n                            (purposeShareholders === null && (\r\n                              <Form.Text>\r\n                                {t(\r\n                                  \"To publish, please add at least one shareholder\"\r\n                                )}\r\n                                <br />\r\n                                <br />\r\n                              </Form.Text>\r\n                            ))}\r\n                          <Form.Check\r\n                            type=\"switch\"\r\n                            disabled={\r\n                              typeof purposeShareholders === \"undefined\" ||\r\n                              purposeShareholders === null\r\n                            }\r\n                            label={t(\r\n                              businessPurposes[purpose].status === 0\r\n                                ? \"Not published\"\r\n                                : \"Published\"\r\n                            )}\r\n                            checked={businessPurposes[purpose].status === 1}\r\n                            onChange={(e) => {\r\n                              console.log(e);\r\n                            }}\r\n                          />\r\n                        </Form>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n\r\n                  {/* DEL: Add shareholder*/}\r\n                  {false && (\r\n                    <Card bg=\"light\">\r\n                      <Accordion.Toggle\r\n                        as={Card.Header}\r\n                        style={{ cursor: \"pointer\" }}\r\n                        eventKey=\"addShareholder\"\r\n                        onClick={() =>\r\n                          setActivePurposeProperty(\"addShareholder\")\r\n                        }\r\n                      >\r\n                        <span style={{ whiteSpace: \"nowrap\" }}>\r\n                          <Add\r\n                            fontSize=\"small\"\r\n                            style={{ color: \"var(--dark)\" }}\r\n                          />\r\n                          &nbsp;{t(\"Add Shareholder\")}\r\n                        </span>\r\n                      </Accordion.Toggle>\r\n                      {/* Toggle */}\r\n                    </Card>\r\n                  )}\r\n                </Accordion>\r\n              </Tab.Pane>\r\n            );\r\n          }\r\n          countShareholders = 0;\r\n          return true;\r\n        });\r\n      return true;\r\n    });\r\n\r\n  const jsx = (\r\n    <>\r\n      <Accordion\r\n        defaultActiveKey={\r\n          activeBusiness !== null || !userBusinessesLoaded\r\n            ? activeBusiness\r\n            : \"myBusinesses\"\r\n        }\r\n      >\r\n        {/* Add business location top */}\r\n\r\n        {/* List user businesses */}\r\n        {userBusinesses !== null &&\r\n          Object.keys(userBusinesses).map((business, keyBusiness) => {\r\n            const date = new Date(userBusinesses[business].created);\r\n            const businessSince = new Intl.DateTimeFormat(language).format(\r\n              date\r\n            );\r\n            // keyBusiness[3] = userBusinesses[business].business_id;\r\n            return (\r\n              <Card key={keyBusiness}>\r\n                <Accordion.Toggle\r\n                  as={Card.Header}\r\n                  eventKey={keyBusiness}\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() =>\r\n                    ToggleBusiness({\r\n                      eventKey: keyBusiness,\r\n                      businessID: userBusinesses[business].business_id,\r\n                    })\r\n                  }\r\n                >\r\n                  <Store style={{ color: \"var(--dark)\" }} />{\" \"}\r\n                  {userBusinesses[business].title}\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={keyBusiness}>\r\n                  <Card.Body>\r\n                    <Tab.Container\r\n                      id=\"left-tabs-example\"\r\n                      defaultActiveKey={\r\n                        activeBusinesPurpose !== null\r\n                          ? activeBusinesPurpose\r\n                          : \"aboutBusiness\"\r\n                      }\r\n                    >\r\n                      <Row>\r\n                        {/* Layout: Left side - Menu */}\r\n                        <Col sm={5}>\r\n                          <ListGroup variant=\"flush\">\r\n                            {/* Menu item: About business */}\r\n                            <ListGroup.Item action eventKey=\"aboutBusiness\">\r\n                              <span style={{ whiteSpace: \"nowrap\" }}>\r\n                                {t(\"About\")}\r\n                              </span>\r\n                              <span style={{ float: \"right\" }}>\r\n                                <Add\r\n                                  onClick={(e) => {\r\n                                    // setPurposeID(null);\r\n                                    setActivePurposeData(null);\r\n                                    setActiveBusinesPurpose(\"addPurpose\");\r\n                                    e.stopPropagation();\r\n                                  }}\r\n                                  fontSize=\"small\"\r\n                                  style={{\r\n                                    color: \"var(--dark)\",\r\n                                    cursor: \"pointer\",\r\n                                  }}\r\n                                />\r\n                              </span>\r\n                            </ListGroup.Item>\r\n\r\n                            {/* Menu item: Add purpose */}\r\n                            {false && (\r\n                              <ListGroup.Item action eventKey=\"addPurpose\">\r\n                                <span style={{ whiteSpace: \"nowrap\" }}>\r\n                                  <Add\r\n                                    fontSize=\"small\"\r\n                                    style={{ color: \"var(--dark)\" }}\r\n                                  />\r\n                                  &nbsp;{t(\"Add Purpose\")}\r\n                                </span>\r\n                              </ListGroup.Item>\r\n                            )}\r\n\r\n                            {/* Menu items: Registered purposes */}\r\n                            {menuItems[keyBusiness]}\r\n\r\n                            {/* old add purpose */}\r\n                          </ListGroup>\r\n                          {countBusinessPurposes !== null && (\r\n                            <>\r\n                              <br />\r\n                              <Pagination\r\n                                {...args}\r\n                                size=\"sm\"\r\n                                countItems={countBusinessPurposes}\r\n                                itemsPerPage={businessPurposesPerPage}\r\n                                active={activePageBusinessPurposes}\r\n                                onClick={(number) =>\r\n                                  getBusinessPurposes(\r\n                                    activeBusinessID,\r\n                                    0,\r\n                                    number\r\n                                  )\r\n                                }\r\n                              />\r\n                            </>\r\n                          )}\r\n                        </Col>\r\n\r\n                        {/* Layout: Right side - Content */}\r\n                        <Col sm={7}>\r\n                          <Tab.Content>\r\n                            <Tab.Pane eventKey=\"aboutBusiness\">\r\n                              <Accordion defaultActiveKey=\"businessID\">\r\n                                {/* Business logo */}\r\n\r\n                                {/*\r\n                              <Card>\r\n                                <Accordion.Toggle\r\n                                  as={Card.Header}\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  eventKey=\"businessLogo\"\r\n                                >\r\n                                  [LOGO]\r\n                                </Accordion.Toggle>\r\n                                <Accordion.Collapse eventKey=\"businessLogo\">\r\n                                  <Card border=\"light\">\r\n                                    <Card.Body>\r\n                                      <Dropzone data={args} />\r\n                                    </Card.Body>\r\n                                  </Card>\r\n                                </Accordion.Collapse>\r\n                              </Card>\r\n                              */}\r\n\r\n                                {/* Business ID */}\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    eventKey=\"businessID\"\r\n                                  >\r\n                                    {t(\"Business ID\")}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"businessID\">\r\n                                    <Card border=\"light\">\r\n                                      <Card.Body>\r\n                                        <Card.Text>\r\n                                          {userBusinesses[business].business_id}\r\n                                        </Card.Text>\r\n                                      </Card.Body>\r\n                                    </Card>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n\r\n                                {/* Business description */}\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    eventKey=\"businessDescription\"\r\n                                  >\r\n                                    {t(\"Business Description\")}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"businessDescription\">\r\n                                    <Card border=\"light\">\r\n                                      <Card.Body>\r\n                                        <Card.Text>\r\n                                          {userBusinesses[business].description}\r\n                                        </Card.Text>\r\n                                      </Card.Body>\r\n                                    </Card>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n\r\n                                {/* Business Creation Date */}\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    eventKey=\"businessCreationDate\"\r\n                                  >\r\n                                    {t(\"Business Created\")}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"businessCreationDate\">\r\n                                    <Card border=\"light\">\r\n                                      <Card.Body>\r\n                                        <Card.Text>{businessSince}</Card.Text>\r\n                                      </Card.Body>\r\n                                    </Card>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n                              </Accordion>\r\n                            </Tab.Pane>\r\n\r\n                            {/* Start Business purposes */}\r\n                            {purposes[keyBusiness]}\r\n                            {/* End Business purposes */}\r\n\r\n                            {/* Add new purpose */}\r\n                            <Tab.Pane eventKey=\"addPurpose\">\r\n                              <Accordion defaultActiveKey=\"newPurpose\">\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    eventKey=\"newPurpose\"\r\n                                  >\r\n                                    {t(\r\n                                      activePurposeData === null\r\n                                        ? \"New Purpose\"\r\n                                        : \"Edit Purpose\"\r\n                                    )}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"newPurpose\">\r\n                                    <Card.Body>\r\n                                      <PurposeRegistration\r\n                                        {...args}\r\n                                        businessID={\r\n                                          userBusinesses[business].business_id\r\n                                        }\r\n                                        id={\r\n                                          activePurposeData !== null\r\n                                            ? activePurposeData.id\r\n                                            : null\r\n                                        }\r\n                                        purposeID={\r\n                                          activePurposeData !== null\r\n                                            ? activePurposeData.purpose_id\r\n                                            : null\r\n                                        }\r\n                                        title={\r\n                                          activePurposeData !== null\r\n                                            ? activePurposeData.title\r\n                                            : \"\"\r\n                                        }\r\n                                        description={\r\n                                          activePurposeData !== null\r\n                                            ? activePurposeData.description\r\n                                            : \"\"\r\n                                        }\r\n                                      />\r\n                                    </Card.Body>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n                              </Accordion>\r\n                            </Tab.Pane>\r\n                          </Tab.Content>\r\n                        </Col>\r\n                      </Row>\r\n                    </Tab.Container>\r\n                    {/* pagination prev */}\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            );\r\n            // console.log(\"BUSINESS:\", userBusinesses[business]);\r\n          })}\r\n\r\n        {/* Get business */}\r\n\r\n        {false && userBusinesses === null && (\r\n          <Card>\r\n            <Accordion.Toggle\r\n              as={Card.Header}\r\n              eventKey=\"myBusinesses\"\r\n              onClick={getBusinesses}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              <span>{t(\"My Businesses\")}</span>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"myBusinesses\">\r\n              <Card.Body>{t(\"No businesses\")}</Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        )}\r\n\r\n        {/* add business location bottom */}\r\n\r\n        {/* Add business */}\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"addBusiness\"\r\n            style={{ cursor: \"pointer\" }}\r\n          >\r\n            <span>\r\n              <Add fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n              &nbsp;\r\n              {t(\"Add Business\")}\r\n            </span>\r\n          </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey=\"addBusiness\">\r\n            <Card.Body>\r\n              <BusinessRegistration {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n      {userBusinesses !== null && (\r\n        <>\r\n          <br />\r\n\r\n          <Pagination\r\n            {...args}\r\n            size=\"md\"\r\n            countItems={countBusinesses}\r\n            itemsPerPage={businessesPerPage}\r\n            active={activePageBusinesses}\r\n            onClick={(number) => getBusinesses(number)}\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  return <>{jsx}</>;\r\n};\r\n","import \"./UserEditor.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ListGroup, Form, InputGroup } from \"react-bootstrap\";\r\nimport {\r\n  Visibility,\r\n  VisibilityOff,\r\n  Close,\r\n  Edit,\r\n  // Done,\r\n} from \"@material-ui/icons\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {\r\n    namespace: \"UserEditor\",\r\n    request: \"update user\",\r\n    mode: \"label\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"USER EDITOR PROPS:\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userData,\r\n    accountNumber,\r\n    // currencies,\r\n    // currencyAbbr,\r\n    // language,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest, getReviser, getWorkplace } = props.barrelFunctions;\r\n  // const {  } = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [editFirstname, setEditFirstname] = useState(false);\r\n  const [editLastname, setEditLastname] = useState(false);\r\n  const [editEmail, setEditEmail] = useState(false);\r\n  const [editPassword, setEditPassword] = useState(false);\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  const [submitButtonVisible, setSubmitButtonVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (editFirstname || editLastname || editEmail || editPassword) {\r\n      setSubmitButtonVisible(true);\r\n    } else {\r\n      setSubmitButtonVisible(false);\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [editFirstname, editLastname, editEmail, editPassword]);\r\n\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  const sendUserRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    // data.language = language;\r\n    // data.email = userData.email;\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    data.personalID = accountNumber;\r\n    if (!editFirstname) data.firstname = null;\r\n    if (!editLastname) data.lastname = null;\r\n    if (!editEmail) data.email = userData.email;\r\n    if (!editPassword) data.password = null;\r\n\r\n    // console.log(\"onSubmit:\", data);\r\n\r\n    if (sendUserRegistrationRequest(data)) {\r\n      // User registration request was submitted\r\n    }\r\n  };\r\n\r\n  const yupObject = {\r\n    firstName: editFirstname\r\n      ? yup.string().required(t(\"First name is required\"))\r\n      : yup.string().optional(),\r\n    lastName: editLastname\r\n      ? yup.string().required(t(\"Last name is required\"))\r\n      : yup.string().optional(),\r\n    email: editEmail\r\n      ? yup\r\n          .string()\r\n          .email(t(\"Invalid email address\"))\r\n          .required(t(\"Email is required\"))\r\n      : yup.string().optional(),\r\n    password: editPassword\r\n      ? yup\r\n          .string()\r\n          .required(t(\"No password provided\"))\r\n          .min(8, t(\"Password is too short\"))\r\n          // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n          .matches(\r\n            /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n            t(\"Password is too weak\")\r\n          )\r\n      : yup.string().optional(),\r\n  };\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object(yupObject);\r\n\r\n  /**\r\n   * Data consistency tests\r\n   */\r\n  if (userData === null) return <></>;\r\n\r\n  /**\r\n   * Destructuring\r\n   */\r\n  const { mode } = props;\r\n  const {\r\n    firstname,\r\n    lastname,\r\n    email,\r\n    // language,\r\n    // currency_name,\r\n    // currency_abbr,\r\n  } = userData;\r\n  // const currency = `${currency_name} (${currency_abbr})`;\r\n\r\n  const UserEditorForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <Card title={t(\"Profile\")}>\r\n        {/* First name */}\r\n        <ListGroup variant=\"flush\">\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"First name\")}</Form.Label>\r\n            {!editFirstname ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditFirstname(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n                <br />\r\n                <small>{firstname}</small>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditFirstname(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editFirstname && (\r\n              <Form.Group controlId=\"validationFormikFirstName\">\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Enter first name\")}\r\n                    name=\"firstName\"\r\n                    value={values.firstName}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.firstName && touched.firstName}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.firstName}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n            )}\r\n          </ListGroup.Item>\r\n\r\n          {/* Last name */}\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"Last name\")}</Form.Label>\r\n            {!editLastname ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditLastname(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n                <br />\r\n                <small>{lastname}</small>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditLastname(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editLastname && (\r\n              <Form.Group controlId=\"validationFormikLastName\">\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Enter last name\")}\r\n                    name=\"lastName\"\r\n                    value={values.lastName}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.lastName && touched.lastName}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.lastName}\r\n                  </Form.Control.Feedback>\r\n                </InputGroup>\r\n              </Form.Group>\r\n            )}\r\n          </ListGroup.Item>\r\n\r\n          {/* Email */}\r\n          {accountNumber !== null && (\r\n            <ListGroup.Item as=\"div\" action>\r\n              <Form.Label>{t(\"Email address\")}</Form.Label>\r\n              {!editEmail ? (\r\n                <>\r\n                  <span style={{ float: \"right\" }}>\r\n                    <Edit\r\n                      onClick={() => setEditEmail(true)}\r\n                      fontSize=\"small\"\r\n                      style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                    />\r\n                  </span>\r\n                  <br />\r\n                  <small>{email}</small>\r\n                </>\r\n              ) : (\r\n                <span style={{ float: \"right\" }}>\r\n                  <Close\r\n                    onClick={() => setEditEmail(false)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n              )}\r\n\r\n              {editEmail && (\r\n                <Form.Group controlId=\"validationFormikEmail\">\r\n                  <InputGroup>\r\n                    <Form.Control\r\n                      placeholder={t(\"Enter email\")}\r\n                      name=\"email\"\r\n                      value={values.email}\r\n                      onChange={handleChange}\r\n                      // onBlur={handleChange}\r\n                      isInvalid={!!errors.email && touched.email}\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.email}\r\n                    </Form.Control.Feedback>\r\n                  </InputGroup>\r\n                </Form.Group>\r\n              )}\r\n            </ListGroup.Item>\r\n          )}\r\n\r\n          {/* Password */}\r\n          <ListGroup.Item as=\"div\" action>\r\n            <Form.Label>{t(\"Password\")}</Form.Label>\r\n            {!editPassword ? (\r\n              <>\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={() => setEditPassword(true)}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n              </>\r\n            ) : (\r\n              <span style={{ float: \"right\" }}>\r\n                <Close\r\n                  onClick={() => setEditPassword(false)}\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                />\r\n              </span>\r\n            )}\r\n\r\n            {editPassword && (\r\n              <>\r\n                {/* New password */}\r\n                <Form.Group controlId=\"validationFormikPassword\">\r\n                  <InputGroup>\r\n                    <Form.Control\r\n                      type={passwordVisible ? \"text\" : \"password\"}\r\n                      placeholder={t(\"Enter new password\")}\r\n                      name=\"password\"\r\n                      value={values.password}\r\n                      onChange={handleChange}\r\n                      // onBlur={handleChange}\r\n                      isInvalid={!!errors.password && touched.password}\r\n                    />\r\n                    <InputGroup.Append>\r\n                      <InputGroup.Text\r\n                        id=\"inputGroupAppend\"\r\n                        onClick={togglePassword}\r\n                        style={{\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        {passwordVisible ? (\r\n                          <VisibilityOff\r\n                            fontSize=\"small\"\r\n                            style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                          />\r\n                        ) : (\r\n                          <Visibility\r\n                            fontSize=\"small\"\r\n                            style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                          />\r\n                        )}\r\n                      </InputGroup.Text>\r\n                    </InputGroup.Append>\r\n\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.password}\r\n                    </Form.Control.Feedback>\r\n                  </InputGroup>\r\n                </Form.Group>\r\n              </>\r\n            )}\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n\r\n        <Form.Group controlId=\"validationSubmitButton\">\r\n          <SubmitButton\r\n            {...args}\r\n            caption={t(\"Submit\")}\r\n            visible={submitButtonVisible}\r\n            marginTop={20}\r\n            request={props.request}\r\n            namespace={props.namespace}\r\n          />\r\n        </Form.Group>\r\n      </Card>\r\n    </Form>\r\n  );\r\n\r\n  const jsx =\r\n    mode === \"label\" ? (\r\n      <span style={{ whiteSpace: \"nowrap\" }}>\r\n        {firstname} {lastname}\r\n      </span>\r\n    ) : (\r\n      <Formik\r\n        component={UserEditorForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          firstName: userData.firstname,\r\n          lastName: userData.lastname,\r\n          email: userData.email,\r\n          password: \"\",\r\n        }}\r\n      />\r\n    );\r\n\r\n  return <>{jsx}</>;\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, Table } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\n// import * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\n// import settings from \"../../settings.json\";\r\n// import Card from \"../card\";\r\n// import SubmitButton from \"../submitButton\";\r\nimport Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {\r\n    request: \"register currency\",\r\n    namespace: \"Currencies\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    currencies,\r\n    settings,\r\n    countCurrencies,\r\n    activePageCurrencies,\r\n    currenciesPerPage,\r\n    currencyAbbr,\r\n    userData,\r\n  } = props.barrelGetters;\r\n  const { setCurrencyAbbr } = props.barrelSetters;\r\n  const {\r\n    // getReviser,\r\n    // getWorkplace,\r\n    sendRequest,\r\n    getCurrencies,\r\n    formatExchangeRate,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Destructured vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  const onCurrencySelected = (e) => {\r\n    setCurrencyAbbr(e.target.id);\r\n    sendRequest({\r\n      req: \"register user currency\",\r\n      data: { email: userData.email, currency_id: e.target.id },\r\n    });\r\n  };\r\n\r\n  const onPageSelect = (number) => {\r\n    // console.log(\"on page select\", number);\r\n    switch (number) {\r\n      case \"First\":\r\n        number = 1;\r\n        break;\r\n      case \"Prev\":\r\n        number = activePageCurrencies > 1 ? activePageCurrencies - 1 : 1;\r\n        break;\r\n      case \"Next\":\r\n        number =\r\n          activePageCurrencies < Math.ceil(countCurrencies / currenciesPerPage)\r\n            ? activePageCurrencies + 1\r\n            : Math.ceil(countCurrencies / currenciesPerPage);\r\n        break;\r\n      case \"Last\":\r\n        number = Math.ceil(countCurrencies / currenciesPerPage);\r\n        break;\r\n      default:\r\n        // number = number;\r\n        break;\r\n    }\r\n    getCurrencies(number);\r\n  };\r\n\r\n  /**\r\n   * Form\r\n   ============================================================================ */\r\n  const CurrenciesForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <>\r\n      <Table responsive striped bordered hover size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Select\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Abbr\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Name\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Region\")}</th>\r\n            <th style={{ textAlign: \"center\" }}>{t(\"Rate\")}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {currencies !== null &&\r\n            currencies.map((currency, keyCUrrency) => {\r\n              // console.log(\"CURRENCY\", currency);\r\n\r\n              const { name, abbr, rate, region } = currency;\r\n\r\n              if (\r\n                typeof settings[\"currencies\"] === \"undefined\" ||\r\n                settings[\"currencies\"] === null ||\r\n                settings[\"currencies\"].length === 0 ||\r\n                settings[\"currencies\"].includes(abbr)\r\n              ) {\r\n                // valid currency - continue\r\n              } else {\r\n                return; // invalid currency\r\n              }\r\n\r\n              return (\r\n                <tr key={keyCUrrency}>\r\n                  <td style={{ textAlign: \"center\" }}>\r\n                    <Form.Check\r\n                      type=\"radio\"\r\n                      checked={currencyAbbr === abbr}\r\n                      name=\"selected-currency\"\r\n                      id={abbr}\r\n                      aria-label=\"option 1\"\r\n                      onChange={onCurrencySelected}\r\n                    />\r\n                  </td>\r\n                  <td style={{ textAlign: \"center\" }}>{abbr}</td>\r\n                  <td style={{ textAlign: \"left\" }}>{name}</td>\r\n                  <td style={{ textAlign: \"left\" }}>{region}</td>\r\n                  <td style={{ textAlign: \"right\" }}>\r\n                    {formatExchangeRate(rate)}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </Table>\r\n      <Pagination\r\n        {...args}\r\n        pages={Math.ceil(countCurrencies / currenciesPerPage)}\r\n        active={activePageCurrencies}\r\n        onClick={onPageSelect}\r\n      />\r\n    </>\r\n  );\r\n\r\n  /**\r\n   * Formik return\r\n   ============================================================================ */\r\n  // onSubmit={onSubmit}\r\n  return (\r\n    <Formik\r\n      component={CurrenciesForm}\r\n      initialValues={{\r\n        curr_abbr: \"\",\r\n        curr_title: \"\",\r\n        curr_region: \"\",\r\n        curr_rate: 1.0,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","/**\r\n * CSS\r\n ============================================================================ */\r\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\n// import Card from \"../card\";\r\nimport SubmitButton from \"../submitButton\";\r\n// import Pagination from \"../pagination\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"CurrencyRegistration\",\r\n    request: \"register currency\",\r\n  };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  // const {\r\n  //   currencies,\r\n  //   countCurrencies,\r\n  //   activePageCurrencies,\r\n  //   currenciesPerPage,\r\n  // } = props.barrelGetters;\r\n  // const { setActivePageCurrencies } = props.barrelSetters;\r\n  const {\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n    // getCurrencies,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Destructured vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([\"CurrencyRegistration\"]);\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    curr_abbr: yup\r\n      .string()\r\n      .required(t(\"Currency abbreviation is required\"))\r\n      .min(3, t(\"Currency abbreviation is too short\"))\r\n      .max(5, t(\"Currency abbreviation is too long\")),\r\n    curr_title: yup\r\n      .string()\r\n      .required(t(\"Currency name is required\"))\r\n      .min(3, t(\"Currency name is too short\")) // must be at least 3 characters\r\n      .max(70, t(\"Currency name is too long\")), // must be at most 70 characters\r\n    curr_region: yup\r\n      .string()\r\n      .required(t(\"Currency region is required\"))\r\n      .min(3, t(\"Currency region is too short\")) // must be at least 3 characters\r\n      .max(70, t(\"Currency region is too long\")), // must be at most 70 characters\r\n    curr_rate: yup\r\n      .string()\r\n      .required(t(\"Exchange rate is required\"))\r\n      .matches(\r\n        new RegExp(t(\"Exchange Rate Regex\")),\r\n        t(\"Wrong exchange rate format\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n  const onSubmit = (data) => {\r\n    console.log(data);\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  // const indication = () => {\r\n  //   return \"THE TABLE IS EMPTY\";\r\n  // };\r\n\r\n  /**\r\n   * Form\r\n   ============================================================================ */\r\n  const CurrencyRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <>\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        {/* Currency abbreviation */}\r\n        <Form.Group controlId=\"validationFormikCurrAbbr\">\r\n          <Form.Label>{t(\"Abbreviation\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_abbr\"\r\n              value={values.curr_abbr}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_abbr && touched.curr_abbr}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_abbr}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Currency name */}\r\n        <Form.Group controlId=\"validationFormikCurrName\">\r\n          <Form.Label>{t(\"Currency Name\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_title\"\r\n              value={values.curr_title}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_title && touched.curr_title}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_title}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Currency region */}\r\n        <Form.Group controlId=\"validationFormikCurrRegion\">\r\n          <Form.Label>{t(\"Currency Region\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_region\"\r\n              value={values.curr_region}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_region && touched.curr_region}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_region}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Initial exchange rate */}\r\n        <Form.Group controlId=\"validationFormikCurrRate\">\r\n          <Form.Label>{t(\"Initial Exchange Rate\")}</Form.Label>\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"curr_rate\"\r\n              value={values.curr_rate}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.curr_rate && touched.curr_rate}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.curr_rate}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n        {/* Submit button */}\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </>\r\n  );\r\n\r\n  /**\r\n   * Formik return\r\n   ============================================================================ */\r\n  return (\r\n    <Formik\r\n      component={CurrencyRegistrationForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        curr_abbr: \"\",\r\n        curr_title: \"\",\r\n        curr_region: \"\",\r\n        curr_rate: 1.0,\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport const useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      if (delay > 0) savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { AvTimer } from \"@material-ui/icons\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\n\r\n//  let time = new Date().toLocaleString();\r\nimport { useInterval } from \"../../utils/useInterval\";\r\nimport { useEventListener } from \"../../utils/useEventListener\";\r\n\r\nimport ModalMessage from \"../modalMessage\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Constants\r\n     ============================================================================ */\r\n  const minute = 60; // seconds, for testing purposes > 60\r\n\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"IdleTimer\",\r\n    timeout: 5 * minute,\r\n    timestamp: null,\r\n    stage2: 60, // show seconds (vs minutes) in stage 2\r\n    stage3: 20, // show modal message on stage 3\r\n    onTick: () => {},\r\n    onTimerReset: () => {},\r\n    onTimeout: () => {},\r\n\r\n    events: [\"load\", \"mousemove\", \"mousedown\", \"click\", \"scroll\", \"keypress\"],\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { formatDate, updateLastSeenUser } = props.barrelFunctions;\r\n  const { onSessionTimeout } = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  const [seconds, setSeconds] = useState(props.timeout);\r\n  const [modalMessageShow, setModalMessageShow] = React.useState(false);\r\n\r\n  useInterval(() => {\r\n    // Your custom logic here\r\n\r\n    setSeconds(seconds - 1);\r\n    props.onTick(seconds);\r\n    // console.log(\"seconds\", seconds);\r\n  }, 1000);\r\n\r\n  useEventListener(() => {\r\n    setSeconds(props.timeout);\r\n    props.onTimerReset();\r\n    // updateLastSeenUser();\r\n  }, [\"mousedown\", \"click\", \"scroll\", \"keypress\"]); // \"click\",\r\n\r\n  useEffect(() => {\r\n    if (seconds === props.timeout) setModalMessageShow(false);\r\n    if (seconds === props.stage3) setModalMessageShow(true);\r\n    if (seconds === 0) onSessionTimeout();\r\n\r\n    // eslint-disable-next-line\r\n  }, [seconds]);\r\n\r\n  const getJSX = () => {\r\n    let currTime;\r\n    if (seconds > props.stage2) currTime = Math.ceil(seconds / minute);\r\n    else currTime = seconds;\r\n\r\n    const timeFormatted = formatDate(new Date(1970, 1, 1, 0, 0, currTime), {\r\n      minute: \"numeric\",\r\n      second: \"numeric\",\r\n    });\r\n\r\n    const onSessionContinue = () => {\r\n      // console.log(\"onSessionContinue\");\r\n      setSeconds(props.timeout);\r\n      setModalMessageShow(false);\r\n    };\r\n\r\n    const modalMessage = (\r\n      <>\r\n        <Trans\r\n          i18nKey=\"IdleTimer:Automatic logout\"\r\n          timeFormatted={timeFormatted}\r\n        >\r\n          <div className=\"text-center\">Automatic logout in</div>\r\n          <div\r\n            className=\"text-center\"\r\n            style={{ fontSize: \"4em\", fontWeight: \"bold\", color: \"#A93226\" }}\r\n          >\r\n            {{ timeFormatted }}\r\n          </div>\r\n          <div className=\"text-center\">\r\n            Do you want to continue the session?\r\n          </div>\r\n        </Trans>\r\n        <br />\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Continue now\")}\r\n          request=\"continue session\"\r\n          onSubmit={onSessionContinue}\r\n          namespace={props.namespace}\r\n        />\r\n      </>\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <ModalMessage\r\n          show={modalMessageShow}\r\n          message={modalMessage}\r\n          onHide={() => setModalMessageShow(false)}\r\n        />\r\n        <OverlayTrigger\r\n          placement=\"bottom\"\r\n          overlay={\r\n            <Tooltip>\r\n              {seconds > props.stage2 ? (\r\n                <Trans\r\n                  i18nKey=\"IdleTimer:Minutes to automatical log out\"\r\n                  currTime={currTime}\r\n                >\r\n                  You will be automatically logged out in {{ currTime }}{\" \"}\r\n                  minutes.\r\n                </Trans>\r\n              ) : (\r\n                <Trans\r\n                  i18nKey=\"IdleTimer:Seconds to automatical log out\"\r\n                  currTime={currTime}\r\n                >\r\n                  You will be automatically logged out in {{ currTime }}{\" \"}\r\n                  seconds.\r\n                </Trans>\r\n              )}\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <div style={{ whiteSpace: \"nowrap\", cursor: \"default\" }}>\r\n            <AvTimer style={{ color: \"var(--dark)\" }} />\r\n            &nbsp;\r\n            {seconds > props.stage2 ? (\r\n              <>\r\n                <span className=\"d-none d-sm-inline text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:minutes\" currTime={currTime}>\r\n                    {{ currTime }} minutes\r\n                  </Trans>\r\n                </span>\r\n                <span className=\"d-inline d-sm-none text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:min\" currTime={currTime}>\r\n                    {{ currTime }} min\r\n                  </Trans>\r\n                </span>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <span className=\"d-none d-sm-inline text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:seconds\" currTime={currTime}>\r\n                    {{ currTime }} seconds\r\n                  </Trans>\r\n                </span>\r\n                <span className=\"d-inline d-sm-none text-muted\">\r\n                  <Trans i18nKey=\"IdleTimer:sec\" currTime={currTime}>\r\n                    <span>{{ currTime }}</span> sec\r\n                  </Trans>\r\n                </span>\r\n              </>\r\n            )}\r\n          </div>\r\n        </OverlayTrigger>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport { useEffect } from \"react\";\r\n\r\nexport const useEventListener = (callback, events) => {\r\n  let defaults = {\r\n    namespace: \"EventListener\",\r\n\r\n    onTimeout: () => {},\r\n\r\n    events: [\"load\", \"mousemove\", \"mousedown\", \"click\", \"scroll\", \"keypress\"],\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, { events: events });\r\n\r\n  useEffect(() => {\r\n    const eventHandler = (e) => {\r\n      callback(e);\r\n    };\r\n\r\n    for (let i in props.events) {\r\n      window.addEventListener(props.events[i], eventHandler);\r\n    }\r\n\r\n    return () => {\r\n      for (let i in props.events) {\r\n        window.removeEventListener(props.events[i], eventHandler);\r\n      }\r\n    };\r\n    // eslint-disable-next-line\r\n  }, []);\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation, Trans } from \"react-i18next\";\r\nimport {\r\n  Form,\r\n  InputGroup,\r\n  // Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  // Spinner,\r\n} from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport SubmitButton from \"../submitButton\";\r\n// import Alert from \"../alert\";\r\n// import LanguageSelector from \"../language-selector\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { ip } = props.barrelGetters;\r\n  const { setLoggingIn, setUpdateInterval } = props.barrelSetters;\r\n  const {\r\n    getReviser,\r\n    getWorkplace,\r\n    sendRequest,\r\n    getUri,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"LogIn\");\r\n\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n    password: yup.string().required(t(\"No password provided\")),\r\n  });\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  const sendUserLogInRequest = (data) => {\r\n    // data.pw = data.password;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.ip = ip;\r\n    data.uri = getUri();\r\n    sendRequest({ req: \"sign in user\", data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    setUpdateInterval(-1);\r\n    setLoggingIn(true);\r\n    sendUserLogInRequest(data);\r\n  };\r\n\r\n  // const languageData = { language: \"en\" };\r\n\r\n  const UserLogInForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Sign In\")}</h3>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"Password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Remember me */}\r\n      {/*\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Check\r\n          required\r\n          name=\"rememberMe\"\r\n          label={t(\"Remember me\")}\r\n          onChange={handleChange}\r\n          isInvalid={!!errors.rememberMe}\r\n          feedback={errors.rememberMe}\r\n          id=\"validationFormik0\"\r\n        />\r\n      </Form.Group>\r\n      */}\r\n\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request=\"sign in user\"\r\n          namespace=\"LogIn\"\r\n        />\r\n      </Form.Group>\r\n\r\n      <Container fluid=\"md\">\r\n        <Row>\r\n          <Col>\r\n            <p className=\"other-options text-left\">\r\n              <Trans i18nKey=\"LogIn:Not yet registered\">\r\n                Not yet <a href=\"/sign-up\">registered?</a>\r\n              </Trans>\r\n            </p>\r\n          </Col>\r\n          <Col>\r\n            <p className=\"other-options text-right\">\r\n              <Trans i18nKey=\"LogIn:Forgot password\">\r\n                Forgot <a href=\"/reset\">password?</a>\r\n              </Trans>\r\n            </p>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Form>\r\n  );\r\n\r\n  // const onAlertClose = () => {\r\n  //   setAlertVisible(false);\r\n  //   authorizedData.hideError();\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        component={UserLogInForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          email: \"\",\r\n          password: \"\",\r\n          rememberMe: \"\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import { Redirect } from \"react-router-dom\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  useLocation,\r\n  // Redirect,\r\n} from \"react-router-dom\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  // Button,\r\n  // Breadcrumb,\r\n  // NavDropdown,\r\n  // Alert,\r\n} from \"react-bootstrap\";\r\n// import Octicon, { SignOut } from \"@primer/octicons-react\";\r\nimport { PowerSettingsNew } from \"@material-ui/icons\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import settings from \"../../../settings.json\";\r\nimport AccountRegistration from \"../../accountRegistration\";\r\n// import BusinessRegistration from \"../../businessRegistration\";\r\nimport { Balance, Transfer } from \"../../transfer\";\r\nimport MyBusiness from \"../../myBusiness\";\r\nimport UserEditor from \"../../userEditor\";\r\nimport CurrencyContainer from \"../../currencyContainer\";\r\nimport IdleTimer from \"../../idleTimer\";\r\nimport Login from \"../../login\";\r\n\r\n/**\r\n * Component: Summary\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { namespace: \"Summary\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    settings,\r\n    signedIn,\r\n    accountNumber,\r\n    sessionTimeout,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getBusinesses, sendRequest } = props.barrelFunctions;\r\n  const { onLastSeenUser } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  /**\r\n   * Data consistency tests\r\n   */\r\n  if (signedIn === false) {\r\n    // setRedirectTo(\"/sign-out\");\r\n    return <>User not logged in</>;\r\n  }\r\n\r\n  const location = useLocation();\r\n\r\n  const navigation = (\r\n    <>\r\n      <Container\r\n        fluid\r\n        style={{\r\n          paddingRight: \"0\",\r\n          paddingLeft: \"0\",\r\n        }}\r\n      >\r\n        <Row>\r\n          {/*\r\n           * Top Menu\r\n           */}\r\n          <Col>\r\n            <Navbar\r\n              // className=\"card-header\"\r\n              // className=\"navbar-trans\"\r\n              // bg=\"light\"\r\n              // variant=\"light\"\r\n              style={{\r\n                borderRadius: \"5px\",\r\n                // background: \"transparent !important\",\r\n                // color: \"#f7f7f7\",\r\n                backgroundColor: \"var(--light)\", // e8f6f3\r\n                boxShadow: \"none\",\r\n                // whiteSpace: \"nowrap\",\r\n              }}\r\n            >\r\n              <Navbar.Brand href=\"/\">\r\n                <img\r\n                  src={\r\n                    settings !== null && typeof settings[\"logo\"] !== \"undefined\"\r\n                      ? settings[\"logo\"]\r\n                      : \"gfx/zlogo_light.png\"\r\n                  }\r\n                  width=\"auto\"\r\n                  height=\"30\"\r\n                  className=\"d-inline-block align-top\"\r\n                  alt={t(\"Logo\")}\r\n                />\r\n              </Navbar.Brand>\r\n              <Nav className=\"mr-auto\">\r\n                <Nav.Link eventKey=\"profile\" href=\"/profile\">\r\n                  <UserEditor {...args} />\r\n                </Nav.Link>\r\n              </Nav>\r\n              <Nav>\r\n                <Nav.Link eventKey=\"sign-out\" href=\"/sign-out\">\r\n                  <span style={{ whiteSpace: \"nowrap\" }}>\r\n                    <span>\r\n                      <PowerSettingsNew style={{ color: \"var(--dark)\" }} />\r\n                    </span>\r\n\r\n                    <span className=\"d-none d-sm-inline\">\r\n                      &nbsp;\r\n                      {t(\"Sign out\")}\r\n                    </span>\r\n                  </span>\r\n                </Nav.Link>\r\n              </Nav>\r\n              {true && (\r\n                <Nav>\r\n                  <Nav.Item>\r\n                    <IdleTimer timeout={sessionTimeout} {...args} />\r\n                  </Nav.Item>\r\n                </Nav>\r\n              )}\r\n            </Navbar>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <div style={{ height: \"7px\" }}></div>\r\n            <Navbar\r\n              collapseOnSelect\r\n              expand=\"sm\"\r\n              // className=\"card-header\"\r\n              // className=\"navbar-trans\"\r\n              // bg=\"dark\"\r\n              variant=\"dark\"\r\n              style={{\r\n                borderRadius: \"5px\",\r\n                background: \"transparent !important\",\r\n                backgroundColor: \"var(--dark)\",\r\n                boxShadow: \"none\",\r\n              }}\r\n            >\r\n              <Nav>\r\n                <Nav.Link\r\n                  className=\"nav-link-2\"\r\n                  eventKey=\"balance\"\r\n                  href=\"/balance\"\r\n                  style={{\r\n                    fontWeight:\r\n                      location.pathname === \"/balance\" ? \"bold\" : \"normal\",\r\n                  }}\r\n                >\r\n                  {t(\"Balance\")}\r\n                </Nav.Link>\r\n              </Nav>\r\n              <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n              <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                  {accountNumber !== null && (\r\n                    <>\r\n                      <Nav.Link\r\n                        className=\"nav-link-2\"\r\n                        eventKey=\"transfer\"\r\n                        href=\"/transfer\"\r\n                        style={{\r\n                          fontWeight:\r\n                            location.pathname === \"/transfer\"\r\n                              ? \"bold\"\r\n                              : \"normal\",\r\n                        }}\r\n                      >\r\n                        {t(\"Transfer\")}\r\n                      </Nav.Link>\r\n                      <Nav.Link\r\n                        className=\"nav-link-2\"\r\n                        eventKey=\"my-business\"\r\n                        onClick={() => getBusinesses(1)}\r\n                        href=\"#\"\r\n                        style={{\r\n                          fontWeight:\r\n                            location.pathname === \"/my-business\"\r\n                              ? \"bold\"\r\n                              : \"normal\",\r\n                        }}\r\n                      >\r\n                        {t(\"Business\")}\r\n                      </Nav.Link>\r\n\r\n                      {/**\r\n                       * Currency\r\n                       */}\r\n                      {settings !== null &&\r\n                        typeof settings[\"currencies\"] !== \"undefined\" &&\r\n                        (settings[\"currencies\"] === null ||\r\n                          settings[\"currencies\"].length === 0 ||\r\n                          settings[\"currencies\"].length > 1) && (\r\n                          <Nav.Link\r\n                            className=\"nav-link-2\"\r\n                            eventKey=\"currency\"\r\n                            href=\"/currency\"\r\n                            style={{\r\n                              fontWeight:\r\n                                location.pathname === \"/currency\"\r\n                                  ? \"bold\"\r\n                                  : \"normal\",\r\n                            }}\r\n                          >\r\n                            {t(\"Currency\")}\r\n                          </Nav.Link>\r\n                        )}\r\n                    </>\r\n                  )}\r\n                </Nav>\r\n              </Navbar.Collapse>\r\n            </Navbar>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n\r\n  const viewBalanceOrTransfer = (\r\n    <Router>\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          component={() => {\r\n            return accountNumber !== null\r\n              ? Balance(args)\r\n              : AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/summary\"\r\n          component={() => {\r\n            return accountNumber !== null\r\n              ? Balance(args)\r\n              : AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/account-registration\"\r\n          component={() => {\r\n            return AccountRegistration(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/profile\"\r\n          component={() => {\r\n            return UserEditor({ ...args, mode: \"profile\" });\r\n          }}\r\n        />\r\n        {settings !== null &&\r\n          typeof settings[\"currencies\"] !== \"undefined\" &&\r\n          (settings[\"currencies\"] === null ||\r\n            settings[\"currencies\"].length === 0 ||\r\n            settings[\"currencies\"].length > 1) && (\r\n            <Route\r\n              exact\r\n              path=\"/currency\"\r\n              component={() => {\r\n                return CurrencyContainer({ ...args });\r\n              }}\r\n            />\r\n          )}\r\n        {/* \r\n        <Route\r\n          exact\r\n          path=\"/business-registration\"\r\n          component={() => {\r\n            return BusinessRegistration(args);\r\n          }}\r\n        />\r\n        */}\r\n        <Route\r\n          exact\r\n          path=\"/my-business\"\r\n          component={() => {\r\n            return MyBusiness(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/balance\"\r\n          component={() => {\r\n            return Balance(args);\r\n          }}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/transfer\"\r\n          component={() => {\r\n            return Transfer(args);\r\n          }}\r\n        />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {/* Header */}\r\n\r\n      {/* Content */}\r\n      {/*<h3>{t(\"Summary\")}</h3>*/}\r\n\r\n      <Container fluid=\"md\">\r\n        <Row>\r\n          <Col>\r\n            {navigation}\r\n            <div style={{ height: \"7px\" }}></div>\r\n          </Col>\r\n        </Row>\r\n        {/*\r\n        <Row>{viewAccountRegistration}</Row>\r\n        */}\r\n        <Row>\r\n          <Col>{viewBalanceOrTransfer}</Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Accordion, Card } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\n// import settings from \"../../settings.json\";\r\n// import Card from \"../card\";\r\nimport Currencies from \"../currencies\";\r\nimport CurrencyRegistration from \"../currencyRegistration\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"CurrencyContainer\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const {\r\n    settings,\r\n    accordionViewCurrency,\r\n    activePageCurrencies,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  const { setAccordionViewCurrency, setRedirectTo } = props.barrelSetters;\r\n  const { getCurrencies } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const ToggleCurrencies = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionViewCurrency(\"currencies\");\r\n    getCurrencies(activePageCurrencies);\r\n  };\r\n\r\n  const ToggleCurrencyRegistration = () => {\r\n    // console.log(\"decorate\");\r\n    setAccordionViewCurrency(\"currencyRegistration\");\r\n    // getTransactions(1);\r\n  };\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  if (\r\n    typeof settings[\"currencies\"] !== \"undefined\" &&\r\n    settings[\"currencies\"] !== null &&\r\n    settings[\"currencies\"].length < 2\r\n  ) {\r\n    return <></>; // currency creation is disabled\r\n  } else {\r\n    return (\r\n      <>\r\n        <Accordion defaultActiveKey={accordionViewCurrency}>\r\n          <Card>\r\n            <Accordion.Toggle\r\n              as={Card.Header}\r\n              eventKey=\"currencies\"\r\n              style={{ cursor: \"pointer\" }}\r\n              onClick={ToggleCurrencies}\r\n            >\r\n              {t(\"Currencies\")}\r\n            </Accordion.Toggle>\r\n\r\n            <Accordion.Collapse eventKey=\"currencies\">\r\n              <Card.Body>\r\n                <Currencies {...args} />\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n\r\n          {typeof settings[\"currencyCreationAllowed\"] !== \"undefined\" &&\r\n            settings[\"currencyCreationAllowed\"] && (\r\n              <Card>\r\n                <Accordion.Toggle\r\n                  as={Card.Header}\r\n                  eventKey=\"currencyRegistration\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={ToggleCurrencyRegistration}\r\n                >\r\n                  {t(\"Currency Registration\")}\r\n                </Accordion.Toggle>\r\n\r\n                <Accordion.Collapse eventKey=\"currencyRegistration\">\r\n                  <Card.Body>\r\n                    <CurrencyRegistration {...args} />\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            )}\r\n        </Accordion>\r\n      </>\r\n    );\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { TransferToSelf, TransferToPerson, TransferToBusiness } from \"./index\";\r\n// import { Alert } from \"react-bootstrap\";\r\n\r\n// const navigation = [\r\n//   {\r\n//     name: \"U2S\",\r\n//     link: \"#u2s\",\r\n//   },\r\n//   {\r\n//     name: \"U2U\",\r\n//     link: \"#u2u\",\r\n//   },\r\n//   {\r\n//     name: \"U2B\",\r\n//     link: \"#u2b\",\r\n//   },\r\n// ];\r\n\r\n/**\r\n * Component: Transfer\r\n */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"TRANSFER DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { accountNumber, transferType } = props.barrelGetters;\r\n  const { setRedirectTo } = props.barrelSetters;\r\n  const { format } = props.barrelFunctions;\r\n  const { onTransferTypeChange } = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"Transfer\");\r\n\r\n  const data = props.data;\r\n  const type = transferType;\r\n  // const onTypeChange = args.onTypeChange;\r\n\r\n  // console.log(\"TRANSFER DATA TYPE:\", type);\r\n\r\n  const [transferCard, setTransferCard] = useState(null);\r\n\r\n  const onNavigationClick = (id) => {\r\n    onTransferTypeChange(id);\r\n  };\r\n\r\n  const navigation = [\r\n    {\r\n      name: t(\"U2S\"),\r\n      link: \"#u2s\",\r\n    },\r\n    {\r\n      name: t(\"U2U\"),\r\n      link: \"#u2u\",\r\n    },\r\n    {\r\n      name: t(\"U2B\"),\r\n      link: \"#u2b\",\r\n    },\r\n  ];\r\n\r\n  // console.log(\"TRANSFER DATA\", data);\r\n  // const title = t(\"Transfer to account\");\r\n\r\n  useEffect(() => {\r\n    if (type === null) return;\r\n\r\n    // setTransferCard()\r\n    switch (type) {\r\n      case \"#u2s\": // User to self\r\n        setTransferCard(\r\n          <TransferToSelf\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      case \"#u2u\": // User to user\r\n        setTransferCard(\r\n          <TransferToPerson\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      case \"#u2b\": // User to business\r\n        setTransferCard(\r\n          <TransferToBusiness\r\n            title={t(\"Transfer to account\")}\r\n            args={props}\r\n            navigation={navigation}\r\n            navigationdefaultActiveKey={type}\r\n            onNavigationClick={onNavigationClick}\r\n          />\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [data, format, type]);\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  // return (\r\n  //   <>\r\n  //     <Alert variant=\"warning\">\r\n  //       <Alert.Heading>{t(\"Account not yet registered\")}</Alert.Heading>\r\n  //       <p>\r\n  //         <Trans i18nKey=\"Balance:Please set up your account first.\">\r\n  //           Please set up your account first. Use this{\" \"}\r\n  //           <a href=\"/account-registration\">link</a>.\r\n  //         </Trans>\r\n  //       </p>\r\n  //     </Alert>\r\n  //   </>\r\n  // );\r\n\r\n  return <>{transferCard}</>;\r\n};\r\n","// import { Redirect } from \"react-router-dom\";\r\n// import Octicon, { Eye, EyeClosed } from \"@primer/octicons-react\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport { Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport * as yup from \"yup\";\r\n// import LanguageSelector from \"../language-selector\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = { request: \"register user\", namespace: \"SignUp\" };\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { language } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { getReviser, getWorkplace, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // console.log(\"SIGN UP PROPS:\", props);\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    firstName: yup.string().required(t(\"First name is required\")),\r\n    lastName: yup.string().required(t(\"Last name is required\")),\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n    password: yup\r\n      .string()\r\n      .required(t(\"No password provided\"))\r\n      .min(8, t(\"Password is too short\"))\r\n      // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n      .matches(\r\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n        t(\"Password is too weak\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   */\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  /**\r\n   * Send user registration request\r\n   * @param {object} data\r\n   */\r\n  const sendUserRegistrationRequest = (data) => {\r\n    if (data === null) return false;\r\n    data.reviser = getReviser();\r\n    data.workplace = getWorkplace();\r\n    data.language = language;\r\n    data.validateEmail = true;\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    if (sendUserRegistrationRequest(data)) {\r\n      // User registration request was submitted\r\n    }\r\n  };\r\n\r\n  // const languageData = { language: \"en\" };\r\n\r\n  const UserRegistrationForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Sign Up\")}</h3>\r\n\r\n      {/* First name */}\r\n      <Form.Group controlId=\"validationFormikFirstName\">\r\n        <Form.Label>{t(\"First name\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"Enter first name\")}\r\n            name=\"firstName\"\r\n            value={values.firstName}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.firstName && touched.firstName}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.firstName}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Last name */}\r\n      <Form.Group controlId=\"validationFormikLastName\">\r\n        <Form.Label>{t(\"Last name\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t(\"Enter last name\")}\r\n            name=\"lastName\"\r\n            value={values.lastName}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.lastName && touched.lastName}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.lastName}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"Password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type={passwordVisible ? \"text\" : \"password\"}\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text\r\n              id=\"inputGroupAppend\"\r\n              onClick={togglePassword}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              {passwordVisible ? (\r\n                <VisibilityOff\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\" }}\r\n                />\r\n              ) : (\r\n                <Visibility fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n              )}\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationSubmitButton\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form.Group>\r\n\r\n      <p className=\"other-options text-right\">\r\n        <Trans i18nKey=\"SignUp:Already registered\">\r\n          Already registered <a href=\"/sign-in\">sign in?</a>\r\n        </Trans>\r\n      </p>\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={UserRegistrationForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args.data);\r\n\r\n  // console.log(\"ALERT DATA\", props);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { error, info } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  const { onAlertClose: onClose } = props.barrelEventHandlers;\r\n\r\n  // const autoClose = () => {\r\n  //   window.setTimeout(() => {\r\n  //     onClose();\r\n  //   }, 5000);\r\n  // };\r\n\r\n  if (error !== null) {\r\n    let { t } = useTranslation(\"Errors\");\r\n    return (\r\n      <Alert variant=\"danger\" onClose={() => onClose()} dismissible>\r\n        {t(error)}\r\n      </Alert>\r\n    );\r\n  } else if (info !== null) {\r\n    let { t } = useTranslation(\"Infos\");\r\n    // autoClose();\r\n    return (\r\n      <Alert variant=\"info\" onClose={() => onClose()} dismissible>\r\n        {t(info)}\r\n      </Alert>\r\n    );\r\n  }\r\n  return <></>;\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"../../translations/i18n\";\r\n// import { withNamespaces } from \"react-i18next\";\r\nimport { Form, Badge } from \"react-bootstrap\";\r\n\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"CurrencyContainer\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { userData } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  const { t } = useTranslation(\"LanguageSelector\");\r\n  const changeLanguage = (lng) => {\r\n    i18n.changeLanguage(lng);\r\n  };\r\n  const languages = [\r\n    { id: 1, language: \"Latviešu\", code: \"lv\" },\r\n    { id: 2, language: \"English\", code: \"en\" },\r\n  ];\r\n  const handleLanguageSelect = (e) => {\r\n    changeLanguage(e.target.value);\r\n  };\r\n  const selectLanguage = (language) => {\r\n    changeLanguage(language);\r\n\r\n    if (userData !== null) {\r\n      sendRequest({\r\n        req: \"register user language\",\r\n        data: { email: userData.email, language },\r\n      });\r\n    }\r\n  };\r\n\r\n  if (1) {\r\n    return (\r\n      <>\r\n        <div style={{ height: \"7px\" }}></div>\r\n        <Badge\r\n          pill\r\n          variant=\"light\"\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            selectLanguage(\"lv\");\r\n          }}\r\n        >\r\n          lv\r\n        </Badge>{\" \"}\r\n        <Badge\r\n          pill\r\n          variant=\"light\"\r\n          style={{ cursor: \"pointer\" }}\r\n          onClick={() => {\r\n            selectLanguage(\"en\");\r\n          }}\r\n        >\r\n          en\r\n        </Badge>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <Form.Control\r\n        as=\"select\"\r\n        id=\"languageSelector\"\r\n        onChange={handleLanguageSelect}\r\n        custom\r\n      >\r\n        <option key=\"0\" value={props.language}>\r\n          {t(\"Language\")}\r\n        </option>\r\n        {languages.map((el) => (\r\n          <option key={el.id} value={el.code}>\r\n            {el.language}\r\n          </option>\r\n        ))}\r\n      </Form.Control>\r\n    );\r\n  }\r\n};\r\n\r\n// function selectElement(id, valueToSelect) {\r\n//   let element = document.getElementById(id);\r\n//   if (!element) return;\r\n//   element.value = valueToSelect;\r\n// }\r\n\r\n// // catch the event and make changes accordingly\r\n// i18n.on(\"languageChanged\", function (lng) {\r\n//   selectElement(\"languageSelector\", lng);\r\n// });\r\n","/**\r\n * CSS\r\n */\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Main.css\";\r\n\r\n/**\r\n * System imports\r\n */\r\nimport React, { useEffect } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\n// import { useTranslation } from \"react-i18next\";\r\n// import moment from \"moment\";\r\n\r\n/**\r\n * User imports\r\n */\r\nimport Summary from \"../summary\";\r\n// import {\r\n//   useSocket,\r\n//   sendData,\r\n//   startSession,\r\n//   endSession,\r\n// } from \"../../../utils/sockets\";\r\n// import { useEventListener } from \"../../../utils/useEventListener\";\r\n// import { useEventListener } from \"../../../utils/useEventListener\";\r\n// import { useInterval } from \"../../../utils/useInterval\";\r\nimport Login from \"../../login\";\r\nimport Logout from \"../../logout\";\r\nimport SignUp from \"../../signup\";\r\nimport PasswordReset from \"../../passwordReset\";\r\n\r\nimport Alert from \"../../alert\";\r\nimport LanguageSelector from \"../../language-selector\";\r\nimport ValidateEmail from \"../../validateEmail\";\r\nimport ChangePassword from \"../../changePassword\";\r\nimport Auth from \"../../auth\";\r\n// import { useEventListener } from \"../../../utils/useEventListener\";\r\n\r\n/**\r\n * Component: Main\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"Main\" };\r\n\r\n  /**\r\n      * Properties\r\n      ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n  const barrels = args;\r\n\r\n  /**\r\n      * Barrels\r\n      ============================================================================ */\r\n  const {\r\n    session,\r\n    instance,\r\n    debug,\r\n    // secureSession,\r\n    signedIn,\r\n    accountNumber,\r\n    updateInterval,\r\n    externalRequest,\r\n    cartContent,\r\n    validateTokenEmail,\r\n    passwordResetTokenValidated,\r\n    validateTokenPasswordReset,\r\n    connected,\r\n    isExternalRequest,\r\n  } = props.barrelGetters;\r\n  const {\r\n    setUpdateInterval,\r\n    setSessionTimeoutApplied,\r\n    // setSecureSession,\r\n    setSignedIn,\r\n    setRedirectTo,\r\n    setIsExternalRequest,\r\n  } = props.barrelSetters;\r\n  const {\r\n    processResponse,\r\n    getIP,\r\n    getCart,\r\n    getCartPurposes,\r\n    updateLastSeenUser,\r\n    getAccountData,\r\n    sendRequest,\r\n    sendEmailValidationRequest,\r\n    sendPasswordResetRequest,\r\n    getContainerClass,\r\n    getRedirect,\r\n  } = props.barrelFunctions;\r\n  const {\r\n    onRedirect,\r\n    onSessionStart,\r\n    onSessionEnd,\r\n  } = props.barrelEventHandlers;\r\n\r\n  /** \r\n   * Custom hooks\r\n   ============================================================================ */\r\n\r\n  // useSocket((data) => {\r\n  //   processResponse({\r\n  //     args: data,\r\n  //     barrels: barrels,\r\n  //   });\r\n  // });\r\n\r\n  // useInterval(() => {\r\n  //   updateLastSeenUser();\r\n  //   setSessionTimeoutApplied(false);\r\n  //   // console.log(\"setSessionTimeoutApplied(false)\");\r\n  // }, updateInterval);\r\n\r\n  /** \r\n   * Effect hooks\r\n   ============================================================================ */\r\n\r\n  /**\r\n   * On mount / on unmount\r\n   */\r\n  useEffect(() => {\r\n    getIP();\r\n\r\n    getCart();\r\n\r\n    return () => {\r\n      // on unmount\r\n    };\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n   * On session ID change\r\n   */\r\n  useEffect(() => {\r\n    if (session === null) return;\r\n\r\n    // if (session.length > 40) {\r\n    //   // setSecureSession(true);\r\n    //   // } else {\r\n    //   //   setSecureSession(false);\r\n    // }\r\n\r\n    // start new session\r\n    // let data = {};\r\n    // data.request = \"hello\";\r\n    // data.instance = instance;\r\n    // startSession(data, session, debug);\r\n\r\n    onSessionStart();\r\n\r\n    // eslint-disable-next-line\r\n  }, [session]);\r\n\r\n  /**\r\n   * On connected\r\n   */\r\n  useEffect(() => {\r\n    // eslint-disable-next-line\r\n  }, [connected]);\r\n\r\n  /**\r\n   * On secure session start/end\r\n   */\r\n  // useEffect(() => {\r\n  //   if (!secureSession) return;\r\n  //   // console.log(\"SECURE SESSION STARTED\");\r\n\r\n  //   // if (!signedIn) {\r\n  //   //   setSignedIn(true);\r\n\r\n  //   //   // /**\r\n  //   //   //  * Handle external request\r\n  //   //   //  */\r\n  //   //   // let redirectTarget;\r\n  //   //   // if (accountNumber !== null) {\r\n  //   //   //   if (isExternalRequest) {\r\n  //   //   //     redirectTarget = \"/auth\";\r\n  //   //   //     setIsExternalRequest(false);\r\n  //   //   //   } else {\r\n  //   //   //     // Dispatch daily allowance\r\n\r\n  //   //   //     sendRequest({\r\n  //   //   //       req: \"dispatch daily allowance\",\r\n  //   //   //       data: { uid: accountNumber },\r\n  //   //   //     });\r\n\r\n  //   //   //     redirectTarget = \"/summary\";\r\n  //   //   //   }\r\n  //   //   // } else redirectTarget = \"/account-registration\";\r\n\r\n  //   //   // onRedirect(redirectTarget);\r\n  //   // }\r\n\r\n  //   // eslint-disable-next-line\r\n  // }, [secureSession]);\r\n\r\n  /**\r\n   * On signed in status change\r\n   */\r\n  useEffect(() => {\r\n    if (!signedIn) return;\r\n\r\n    setUpdateInterval(-1);\r\n    getAccountData();\r\n\r\n    // Dispatch daily allowance\r\n    if (accountNumber !== null) {\r\n      sendRequest({\r\n        req: \"dispatch daily allowance\",\r\n        data: { uid: accountNumber },\r\n      });\r\n    }\r\n\r\n    // /**\r\n    //  * Handle external request\r\n    //  */\r\n    // let redirectTarget;\r\n    // if (accountNumber !== null) {\r\n    //   if (isExternalRequest) {\r\n    //     redirectTarget = \"/auth\";\r\n    //     setIsExternalRequest(false);\r\n    //   } else {\r\n    //     // Dispatch daily allowance\r\n\r\n    //     sendRequest({\r\n    //       req: \"dispatch daily allowance\",\r\n    //       data: { uid: accountNumber },\r\n    //     });\r\n\r\n    //     redirectTarget = \"/summary\";\r\n    //   }\r\n    // } else redirectTarget = \"/account-registration\";\r\n\r\n    // onRedirect(redirectTarget);\r\n\r\n    // eslint-disable-next-line\r\n  }, [signedIn]);\r\n\r\n  /**\r\n   * On account number change\r\n   */\r\n  useEffect(() => {\r\n    if (accountNumber === null) return;\r\n\r\n    // eslint-disable-next-line\r\n  }, [accountNumber]);\r\n\r\n  /**\r\n   * On external request\r\n   */\r\n  useEffect(() => {\r\n    if (externalRequest === null) return;\r\n\r\n    const data = {\r\n      customer: accountNumber,\r\n      cart: externalRequest.cart,\r\n    };\r\n\r\n    sendRequest({ req: \"get cart\", data: data });\r\n\r\n    // eslint-disable-next-line\r\n  }, [JSON.stringify(externalRequest)]);\r\n\r\n  /**\r\n   * On cart content change\r\n   */\r\n  useEffect(() => {\r\n    if (cartContent === null) return;\r\n\r\n    getCartPurposes();\r\n\r\n    // eslint-disable-next-line\r\n  }, [JSON.stringify(cartContent)]);\r\n\r\n  /**\r\n   * On email validation token\r\n   */\r\n  useEffect(() => {\r\n    if (validateTokenEmail === null) return;\r\n\r\n    sendEmailValidationRequest(JSON.parse(validateTokenEmail));\r\n\r\n    // eslint-disable-next-line\r\n  }, [validateTokenEmail]);\r\n\r\n  /**\r\n   * On email validation token\r\n   */\r\n  useEffect(() => {\r\n    if (passwordResetTokenValidated === null) return;\r\n\r\n    onRedirect(\"/password\");\r\n\r\n    // eslint-disable-next-line\r\n  }, [passwordResetTokenValidated]);\r\n\r\n  /**\r\n   * On password reset validation token\r\n   */\r\n  useEffect(() => {\r\n    if (validateTokenPasswordReset === null) return;\r\n\r\n    sendPasswordResetRequest(JSON.parse(validateTokenPasswordReset));\r\n\r\n    // eslint-disable-next-line\r\n  }, [validateTokenPasswordReset]);\r\n\r\n  const { wrapperClass, innerClass } = getContainerClass(signedIn);\r\n\r\n  const appClass = signedIn ? \"App\" : \"App bg\";\r\n\r\n  // if (!signedIn) setRedirectTo(\"/sign-in\");\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        {getRedirect()}\r\n\r\n        <div className={appClass} style={{}}>\r\n          {/**\r\n           * Wrapper for the main window\r\n           */}\r\n          <div className={wrapperClass} style={{}}>\r\n            {/**\r\n             * Top margin of the main window (only for >= sm)\r\n             */}\r\n            <div className=\"d-none d-md-block\" style={{ height: \"1rem\" }}></div>\r\n\r\n            {/**\r\n             * The main window\r\n             */}\r\n            <div className={innerClass}>\r\n              {/**\r\n               * Top padding of the main window\r\n               */}\r\n              <div style={{ height: \"16px\" }}></div>\r\n\r\n              {/**\r\n               * The alert\r\n               */}\r\n              <div>\r\n                <Alert data={barrels} />\r\n              </div>\r\n\r\n              {/**\r\n               * Routes\r\n               */}\r\n              <Switch>\r\n                {/**\r\n                 * Route: Home\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/\"\r\n                  component={() => {\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Sign in\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-in\"\r\n                  component={() => {\r\n                    return Login(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Sign up\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-up\"\r\n                  component={() => {\r\n                    return SignUp(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Sign up\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/auth\"\r\n                  component={() => (signedIn ? Auth(barrels) : Login(barrels))}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Validate mail\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/validate-email\"\r\n                  component={() => {\r\n                    return ValidateEmail(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Change password\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/password\"\r\n                  component={() => {\r\n                    return ChangePassword(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: User profile\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/profile\"\r\n                  component={() => {\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Currency\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/currency\"\r\n                  component={() => {\r\n                    return signedIn ? Summary(barrels) : Login(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Sign out\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/sign-out\"\r\n                  component={() => {\r\n                    return Logout(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Password reset\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/reset\"\r\n                  component={() => {\r\n                    return PasswordReset(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Account registration\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/account-registration\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Business registration\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/business-registration\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: My business\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/my-business\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Balance\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/balance\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Transfer\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/transfer\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n\r\n                {/**\r\n                 * Route: Summary\r\n                 */}\r\n                <Route\r\n                  exact\r\n                  path=\"/summary\"\r\n                  component={() => {\r\n                    return Summary(barrels);\r\n                  }}\r\n                />\r\n              </Switch>\r\n\r\n              {/**\r\n               * Language selector\r\n               */}\r\n              <div className=\"text-center\">\r\n                <LanguageSelector {...barrels} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"Checkout\" }; // TODO: adjust namespace\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const {\r\n    externalRequest,\r\n    accountNumber,\r\n    cartContent,\r\n    cartPurposes,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest, format } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  const Cart = () => {\r\n    let priceTotal = 0;\r\n    let priceReal = 0;\r\n\r\n    return (\r\n      <>\r\n        {cartContent !== null &&\r\n          cartContent.map((element, key) => {\r\n            priceTotal += element.price * element.amount;\r\n            let product_found = \"N\";\r\n\r\n            if (cartPurposes !== null) {\r\n              let product = cartPurposes.find(\r\n                (products) => products.purpose_id === element.product\r\n              );\r\n\r\n              if (typeof product !== \"undefined\") {\r\n                product_found = \"Y\";\r\n                priceReal += element.price * element.amount;\r\n              }\r\n              // console.log(\"product:\", product);\r\n            }\r\n\r\n            //   if (typeof product !== \"undefined\") {\r\n            //     product_found = product.title;\r\n            //   }\r\n            // }\r\n            return (\r\n              <div key={key}>\r\n                <div>product: {element.product}</div>\r\n                <div>price: {element.price}</div>\r\n                <div>amount: {element.amount}</div>\r\n                <div>found: {product_found}</div>\r\n                <br />\r\n              </div>\r\n            );\r\n          })}\r\n\r\n        <div>Total: {format(priceTotal)}</div>\r\n        <div>Real: {format(priceReal)}</div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    // const cart = typeof externalRequest.cart ? externalRequest.cart : \"\";\r\n    // <div>External request: {JSON.stringify(externalRequest)}</div>\r\n    return (\r\n      <Card title={t(\"Checkout\")}>\r\n        <div>\r\n          <Cart />\r\n        </div>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { Spinner, Form } from \"react-bootstrap\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"ValidateEmail\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const {\r\n    validateTokenEmail,\r\n    validationTokenEmail,\r\n    validationTokenEmailResent,\r\n    language,\r\n  } = props.barrelGetters;\r\n  const { setValidateTokenEmail } = props.barrelSetters;\r\n  const { getUrlParam, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n    * Hooks\r\n    ============================================================================ */\r\n\r\n  // setToken(getUrlParam(\"token\"));\r\n  // setEmail(getUrlParam(\"email\"));\r\n\r\n  const token = getUrlParam(\"token\");\r\n  const email = getUrlParam(\"email\");\r\n\r\n  /**\r\n    * Effects\r\n    ============================================================================ */\r\n  useEffect(() => {\r\n    if (token === null || email === null) return;\r\n\r\n    setValidateTokenEmail(\r\n      JSON.stringify({\r\n        token,\r\n        email,\r\n      })\r\n    );\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handleSubmit = (data) => {\r\n    // const vte = JSON.parse(validateTokenEmail);\r\n    // if (vte === null) return;\r\n    // const { token, email } = vte;\r\n    // console.log(data, validationTokenEmail);\r\n    sendRequest({\r\n      req: \"resend validate email token\",\r\n      data: {\r\n        token: validationTokenEmail.token,\r\n        email: validationTokenEmail.email,\r\n        language,\r\n      },\r\n    });\r\n  };\r\n\r\n  /**\r\n    * Functions\r\n    ============================================================================ */\r\n  const getJSX = () => {\r\n    // const queryString = window.location.search;\r\n    // const urlParams = new URLSearchParams(queryString);\r\n\r\n    return token === null ? (\r\n      <>\r\n        <h4>{t(\"A verification link has been sent to your email account.\")}</h4>\r\n        <hr />\r\n        <p>\r\n          {t(\r\n            \"Please click on the link that has just been sent to your email account\"\r\n          )}\r\n        </p>\r\n        {validationTokenEmailResent < 5 && (\r\n          <>\r\n            <br />\r\n            <h5>{t(\"Didn't receive email?\")}</h5>\r\n\r\n            <SubmitButton\r\n              {...args}\r\n              caption={t(\"Submit\")}\r\n              visible={true}\r\n              marginTop={20}\r\n              request={\"resend validate email token\"}\r\n              namespace={props.namespace}\r\n              onSubmit={handleSubmit}\r\n            />\r\n          </>\r\n        )}\r\n      </>\r\n    ) : (\r\n      <div className=\"text-center\">\r\n        <Spinner\r\n          as=\"span\"\r\n          animation=\"border\"\r\n          size=\"sm\"\r\n          role=\"status\"\r\n          aria-hidden=\"true\"\r\n          hidden={false}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n    * Return\r\n    ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\n\r\n/**\r\n   * User imports\r\n   ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\n// import Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n     * Default Properties\r\n     ============================================================================ */\r\n  let defaults = {\r\n    namespace: \"ChangePassword\",\r\n    request: \"change password\",\r\n    email: null,\r\n  };\r\n\r\n  /**\r\n     * Properties\r\n     ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n     * Barrels\r\n     ============================================================================ */\r\n  const {\r\n    passwordResetTokenValidated,\r\n    passwordResetTokenEmail,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n     * Destructured vars\r\n     ============================================================================ */\r\n  const { t } = useTranslation([\r\n    passwordResetTokenValidated === true ? \"SignUp\" : \"ChangePassword\",\r\n  ]); // adjust namespace\r\n\r\n  /**\r\n   * Hooks\r\n   */\r\n  const [passwordVisible, setPasswordVisible] = useState(false);\r\n\r\n  /**\r\n     * Functions\r\n     ============================================================================ */\r\n  const onSubmit = (data) => {\r\n    data.email = passwordResetTokenEmail;\r\n    // console.log(data);\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  const togglePassword = () => {\r\n    setPasswordVisible(!passwordVisible);\r\n  };\r\n\r\n  /** \r\n     * Yup schema\r\n     ============================================================================ */\r\n  const schema = yup.object({\r\n    password: yup\r\n      .string()\r\n      .required(t(\"No password provided\"))\r\n      .min(8, t(\"Password is too short\"))\r\n      // .matches(/[a-zA-Z]/, \"Password can only contain Latin letters.\")\r\n      .matches(\r\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#_?&])[A-Za-z\\d@$!%*#_?&]{8,}$/,\r\n        t(\"Password is too weak\")\r\n      ),\r\n  });\r\n\r\n  /**\r\n     * Form\r\n     ============================================================================ */\r\n  const ChangePasswordForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Password */}\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <Form.Label>{t(\"New password\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            type={passwordVisible ? \"text\" : \"password\"}\r\n            placeholder={t(\"Enter password\")}\r\n            name=\"password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.password && touched.password}\r\n          />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text\r\n              id=\"inputGroupAppend\"\r\n              onClick={togglePassword}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              {passwordVisible ? (\r\n                <VisibilityOff\r\n                  fontSize=\"small\"\r\n                  style={{ color: \"var(--dark)\" }}\r\n                />\r\n              ) : (\r\n                <Visibility fontSize=\"small\" style={{ color: \"var(--dark)\" }} />\r\n              )}\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.password}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <SubmitButton\r\n        {...args}\r\n        caption={t(\"Submit\")}\r\n        request={props.request}\r\n        namespace={props.namespace}\r\n      />\r\n    </Form>\r\n  );\r\n\r\n  /**\r\n     * Return\r\n     ============================================================================ */\r\n  if (passwordResetTokenValidated === true) {\r\n    // if (true) {\r\n    return (\r\n      <Formik\r\n        component={ChangePasswordForm}\r\n        validationSchema={schema}\r\n        onSubmit={onSubmit}\r\n        initialValues={{\r\n          password: \"\",\r\n        }}\r\n      />\r\n    );\r\n  } else {\r\n    // if (passwordResetTokenValidated === false)\r\n    return <>{t(\"Awaiting validation\")}</>;\r\n    // } else {\r\n    //   // null\r\n    //   return <>How did you land here???</>;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Custom hooks\r\n   */\r\n  const { t } = useTranslation(\"Logout\");\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { error, info, language, sessionTimeoutApplied } = props.barrelGetters;\r\n  const { setLanguage, setSessionTimeoutApplied } = props.barrelSetters;\r\n  const { showMessage } = props.barrelFunctions;\r\n  const { onLogOut, onSessionStart } = props.barrelEventHandlers;\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * Save vars\r\n     */\r\n    const tempError = error;\r\n    const tempInfo = info;\r\n    const tempLanguage = language;\r\n    const tempSessionTimeoutApplied = sessionTimeoutApplied;\r\n\r\n    /**\r\n     * Log out\r\n     */\r\n    onLogOut();\r\n\r\n    /**\r\n     * Restore vars\r\n     */\r\n    setLanguage(tempLanguage);\r\n    setSessionTimeoutApplied(tempSessionTimeoutApplied);\r\n    // onSessionStart();\r\n    // onSessionReset();\r\n\r\n    if (tempError !== null) {\r\n      showMessage(tempError, \"error\");\r\n    } else {\r\n      if (tempInfo !== null) {\r\n        showMessage(tempInfo, \"info\");\r\n      }\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, []); // logOut\r\n\r\n  return (\r\n    <>\r\n      <h4>{t(\"See you soon\")}</h4>\r\n      <hr />\r\n\r\n      <br />\r\n      <p className=\"text-center\">\r\n        <a href=\"/\">{t(\"Sign in\")}</a>\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup, Spinner } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n  * Default export\r\n  ============================================================================ */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { namespace: \"ResetPassword\", request: \"reset password\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { language } = props.barrelGetters;\r\n  const { setValidateTokenPasswordReset } = props.barrelSetters;\r\n  const { sendRequest, getUrlParam } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n    * Destructured vars\r\n    ============================================================================ */\r\n  const { t } = useTranslation(props.namespace);\r\n\r\n  const token = getUrlParam(\"token\");\r\n  const email = getUrlParam(\"email\");\r\n\r\n  /**\r\n    * Effects\r\n    ============================================================================ */\r\n  useEffect(() => {\r\n    if (token === null || email === null) return;\r\n\r\n    setValidateTokenPasswordReset(\r\n      JSON.stringify({\r\n        token,\r\n        email,\r\n      })\r\n    );\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n    * Event listeners\r\n    ============================================================================ */\r\n\r\n  /**\r\n   * Event listener: On Form Submit\r\n   * @param {object} data Form data\r\n   */\r\n  const onSubmit = (data) => {\r\n    // console.log(data);\r\n    data.language = language;\r\n    sendRequest({\r\n      req: props.request,\r\n      data: data,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Yup schema\r\n   */\r\n  const schema = yup.object({\r\n    email: yup\r\n      .string()\r\n      .email(t(\"Invalid email address\"))\r\n      .required(t(\"Email is required\")),\r\n  });\r\n\r\n  const passwordResetForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <h3>{t(\"Reset password\")}</h3>\r\n\r\n      {/* Email */}\r\n      <Form.Group controlId=\"validationFormikEmail\">\r\n        <Form.Label>{t(\"Email address\")}</Form.Label>\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder={t(\"Enter email\")}\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            // onBlur={handleChange}\r\n            isInvalid={!!errors.email && touched.email}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.email}\r\n          </Form.Control.Feedback>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"validationFormikPassword\">\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n\r\n  // return (\r\n  //   <Formik\r\n  //     component={passwordResetForm}\r\n  //     validationSchema={schema}\r\n  //     onSubmit={onSubmit}\r\n  //     initialValues={{\r\n  //       email: \"\",\r\n  //     }}\r\n  //   />\r\n  // );\r\n\r\n  return token === null ? (\r\n    <Formik\r\n      component={passwordResetForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        email: \"\",\r\n      }}\r\n    />\r\n  ) : (\r\n    <div className=\"text-center\">\r\n      <Spinner\r\n        as=\"span\"\r\n        animation=\"border\"\r\n        size=\"sm\"\r\n        role=\"status\"\r\n        aria-hidden=\"true\"\r\n        hidden={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport config from \"./config\";\r\nimport openSocket from \"socket.io-client\";\r\n\r\nlet socket = openSocket.connect(config.uri.ENDPOINT, {\r\n  secure: true,\r\n  reconnect: true,\r\n});\r\n\r\n/**\r\n * Send request to the server\r\n * @param {*} param0\r\n */\r\nexport const sendData = (data, debug = false) => {\r\n  if (debug) console.log(`request: ${data.req}`, data);\r\n\r\n  // No data - do not send\r\n  // if (req.length === 0) return false;\r\n\r\n  socket.emit(`onDataReceived`, data);\r\n  return true;\r\n};\r\n\r\n// Start a session\r\nexport const startSession = (data, session, debug = false) => {\r\n  // console.log(\"startSession\");\r\n  if (debug) console.log(`request: start session`, data, session);\r\n\r\n  socket.emit(`start session`, {\r\n    data: data,\r\n    session: session,\r\n    req: \"start session\",\r\n  });\r\n};\r\n\r\n// End the session\r\nexport const endSession = (data, session, debug = false) => {\r\n  if (debug) console.log(`request: end session`, data, session);\r\n  socket.emit(`end session`, {\r\n    // char: data,\r\n    data: data,\r\n    // uid: uid,\r\n    session: session,\r\n    req: \"end session\",\r\n  });\r\n};\r\n\r\n// Custom hook: useSocket\r\nexport const useSocket = (callback) => {\r\n  const [responseData, setResponseData] = useState(null);\r\n  socket.on(`onDataReceived`, (data) => {\r\n    setResponseData(data);\r\n    // callback(data);\r\n  });\r\n\r\n  // useEventListener(() => {\r\n  //   socket.on(`onDataReceived`, (data) => {\r\n  //     setResponseData(data);\r\n  //     // callback(data);\r\n  //   });\r\n  // }, [\"focus\"]);\r\n\r\n  useEffect(() => {\r\n    if (responseData === null) return;\r\n\r\n    callback(responseData);\r\n    // eslint-disable-next-line\r\n  }, [responseData]);\r\n};\r\n","/**\r\n * System imports\r\n */\r\nimport React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport moment from \"moment\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\n/**\r\n * User imports\r\n */\r\nimport i18n from \"./translations/i18n\";\r\nimport { useStickyState } from \"./utils/state\";\r\nimport Main from \"./components/pages/main\";\r\nimport { useSocket, sendData, startSession, endSession } from \"./utils/sockets\";\r\nimport { useInterval } from \"./utils/useInterval\";\r\nimport requestHandler from \"./utils/requestHandler\";\r\nimport errorHandler from \"./utils/errorHandler\";\r\nimport responseHandler from \"./utils/responseHandler\";\r\n// import {\r\n//   useSocket,\r\n//   sendData,\r\n//   startSession,\r\n//   endSession,\r\n// } from \"../../../utils/sockets\";\r\n// import functions from \"./barrelFunctions\";\r\n\r\n/**\r\n * Component: Dispatcher\r\n */\r\nexport default () => {\r\n  /**\r\n   * Properties\r\n   */\r\n  // const userDataFetchInterval = 5000; // Test: 5000 | 30000;\r\n  const isLocalhost =\r\n    window.location.hostname === \"localhost\" ||\r\n    window.location.hostname === \"127.0.0.1\";\r\n\r\n  /** \r\n * Hooks\r\n ============================================================================ */\r\n  const [debug, setDebug] = useState(true);\r\n  const [loggingOut, setLoggingOut] = useState(false);\r\n  const [loggingIn, setLoggingIn] = useState(false);\r\n  const [pageLoading, setPageLoading] = useState(true);\r\n  // const [instance, setInstance] = useStickyState(0, \"instance\");\r\n  const [request, setRequest] = useStickyState(null, \"request\");\r\n  // const [requestTS, setRequestTS] = useState(null);\r\n  const [instance, setInstance] = useState(Date.now());\r\n  // const [idleTimerTick, setIdleTimerTick] = useState(null);\r\n  // const [lastRequest, setLastRequest] = useStickyState(null, \"lastRequest\");\r\n  const [session, setSession] = useStickyState(uuidv4(), \"session\");\r\n  // const [secureSession, setSecureSession] = useStickyState(\r\n  //   false,\r\n  //   \"secureSession\"\r\n  // );\r\n  const [settings, setSettings] = useStickyState(null, \"settings\");\r\n  const [sessionTimeout, setSessionTimeout] = useStickyState(\r\n    (!debug ? 5 : 120) * 60, // 30 | 5 * 60\r\n    \"sessionTimeout\"\r\n  );\r\n  const [sessionTimeoutApplied, setSessionTimeoutApplied] = useStickyState(\r\n    false,\r\n    \"sessionTimeoutApplied\"\r\n  );\r\n  // const [sessionInitialized, setSessionInitialized] = useState(false);\r\n  const [connected, setConnected] = useStickyState(false, \"connected\");\r\n  const [ip, setIP] = useStickyState(\"\", \"ip\");\r\n  const [signedIn, setSignedIn] = useStickyState(false, \"signedIn\");\r\n  const [isExternalRequest, setIsExternalRequest] = useStickyState(\r\n    false,\r\n    \"isExternalRequest\"\r\n  );\r\n  const [externalRequest, setExternalRequest] = useStickyState(\r\n    null,\r\n    \"externalRequest\"\r\n  );\r\n  const [cartContent, setCartContent] = useStickyState(null, \"cartContent\");\r\n  const [updateInterval, setUpdateInterval] = useStickyState(\r\n    -1,\r\n    \"updateInterval\"\r\n  );\r\n  const [currencyAbbr, setCurrencyAbbr] = useStickyState(\"Z\", \"currencyAbbr\");\r\n  const [currencyRate, setCurrencyRate] = useState(1, \"currencyRate\");\r\n  const [currencies, setCurrencies] = useStickyState(null, \"currencies\");\r\n  const [transactions, setTransactions] = useStickyState(null, \"transactions\");\r\n  const [shares, setShares] = useStickyState(null, \"shares\");\r\n  const [accordionView, setAccordionView] = useStickyState(\r\n    \"balance\",\r\n    \"accordionView\"\r\n  );\r\n  const [accordionViewCurrency, setAccordionViewCurrency] = useStickyState(\r\n    null,\r\n    \"accordionViewCurrency\"\r\n  );\r\n  const [countCurrencies, setCountCurrencies] = useStickyState(\r\n    null,\r\n    \"countCurrencies\"\r\n  );\r\n  const [countTransactions, setCountTransactions] = useStickyState(\r\n    null,\r\n    \"countTransactions\"\r\n  );\r\n  const [countShares, setCountShares] = useStickyState(null, \"countShares\");\r\n  const [activePageCurrencies, setActivePageCurrencies] = useStickyState(\r\n    1,\r\n    \"activePageCurrencies\"\r\n  );\r\n  const [activePageTransactions, setActivePageTransactions] = useStickyState(\r\n    1,\r\n    \"activePageTransactions\"\r\n  );\r\n  const [activePageShares, setActivePageShares] = useStickyState(\r\n    1,\r\n    \"activePageShares\"\r\n  );\r\n  const [currenciesPerPage, setCurrenciesPerPage] = useStickyState(\r\n    5,\r\n    \"currenciesPerPage\"\r\n  );\r\n  const [transactionsPerPage, setTransactionsPerPage] = useStickyState(\r\n    5,\r\n    \"transactionsPerPage\"\r\n  );\r\n  const [sharesPerPage, setSharesPerPage] = useStickyState(5, \"sharesPerPage\");\r\n  const [userData, setUserData] = useStickyState(null, \"userData\");\r\n  const [uid, setUID] = useStickyState(null, \"uid\");\r\n  const [accountNumber, setAccountNumber] = useStickyState(\r\n    null,\r\n    \"accountNumber\"\r\n  );\r\n  const [userSequence, setUserSequence] = useStickyState(null, \"userSequence\");\r\n  const [accountType, setAccountType] = useStickyState(null, \"accountType\");\r\n  const [userBusinesses, setUserBusinesses] = useStickyState(\r\n    null,\r\n    \"userBusinesses\"\r\n  );\r\n  const [countBusinesses, setCountBusinesses] = useStickyState(\r\n    null,\r\n    \"countBusinesses\"\r\n  );\r\n  const [businessesPerPage, setBusinessesPerPage] = useStickyState(\r\n    1,\r\n    \"businessesPerPage\"\r\n  );\r\n  const [activePageBusinesses, setActivePageBusinesses] = useStickyState(\r\n    1,\r\n    \"activePageBusinesses\"\r\n  );\r\n  const [userBusinessesLoaded, setUserBusinessesLoaded] = useStickyState(\r\n    false,\r\n    \"userBusinessesLoaded\"\r\n  );\r\n  const [activeBusiness, setActiveBusiness] = useStickyState(\r\n    null,\r\n    \"activeBusiness\"\r\n  );\r\n  const [activeBusinessID, setActiveBusinessID] = useStickyState(\r\n    null,\r\n    \"activeBusinessID\"\r\n  );\r\n\r\n  const [businessPurposes, setBusinessPurposes] = useStickyState(\r\n    null,\r\n    \"businessPurposes\"\r\n  );\r\n\r\n  const [cartPurposes, setCartPurposes] = useStickyState(null, \"cartPurposes\");\r\n\r\n  const [countBusinessPurposes, setCountBusinessPurposes] = useStickyState(\r\n    null,\r\n    \"countBusinessPurposes\"\r\n  );\r\n  const [businessPurposesPerPage, setBusinessPurposesPerPage] = useStickyState(\r\n    5,\r\n    \"businessPurposesPerPage\"\r\n  );\r\n  const [\r\n    activePageBusinessPurposes,\r\n    setActivePageBusinessPurposes,\r\n  ] = useStickyState(1, \"activePageBusinessPurposes\");\r\n\r\n  const [activeBusinesPurpose, setActiveBusinesPurpose] = useStickyState(\r\n    null,\r\n    \"activeBusinesPurpose\"\r\n  );\r\n\r\n  const [activePurposeData, setActivePurposeData] = useStickyState(\r\n    null,\r\n    \"activePurposeData\"\r\n  );\r\n\r\n  const [activePurposeProperty, setActivePurposeProperty] = useStickyState(\r\n    null,\r\n    \"activePurposeProperty\"\r\n  );\r\n\r\n  const [purposeShareholders, setPurposeShareholders] = useStickyState(\r\n    null,\r\n    \"purposeShareholders\"\r\n  );\r\n\r\n  // const [businessLoaded, setBusinessLoaded] = useState(null);\r\n  // const [redirect, setRedirect] = useState(false);\r\n  const [redirectTo, setRedirectTo] = useState(null);\r\n  const [lastInsertId, setLastInsertId] = useState(null);\r\n  // const [responseData, setResponseData] = useState(null);\r\n  const [validateTokenEmail, setValidateTokenEmail] = useState(null);\r\n  const [validateTokenPasswordReset, setValidateTokenPasswordReset] = useState(\r\n    null\r\n  );\r\n\r\n  // const [\r\n  //   passwordResetTokenValidated,\r\n  //   setPasswordResetTokenValidated,\r\n  // ] = useStickyState(\"none\", \"passwordResetTokenValidated\");\r\n\r\n  const [\r\n    passwordResetTokenValidated,\r\n    setPasswordResetTokenValidated,\r\n  ] = useState(null);\r\n  const [passwordResetTokenEmail, setPasswordResetTokenEmail] = useState(null);\r\n\r\n  const [tmrConnected] = useState(null);\r\n  const [validationTokenEmail, setValidationTokenEmail] = useStickyState(\r\n    null,\r\n    \"validationTokenEmail\"\r\n  ); //\r\n  const [\r\n    validationTokenEmailResent,\r\n    setValidationTokenEmailResent,\r\n  ] = useStickyState(0, \"validationTokenEmailResent\"); //\r\n  const [language, setLanguage] = useStickyState(\r\n    i18n.options.fallbackLng[0],\r\n    \"language\"\r\n  ); //\r\n  const [transferType, setTransferType] = useStickyState(\r\n    \"#u2s\",\r\n    \"transferType\"\r\n  );\r\n  const [transferRequest, setTransferRequest] = useStickyState(\r\n    null,\r\n    \"transferRequest\"\r\n  );\r\n  const [tanRequired, setTanRequired] = useStickyState(false, \"tanRequired\");\r\n  // const [transferSuccess, setTransferSuccess] = useStickyState(\r\n  //   false,\r\n  //   \"transferSuccess\"\r\n  // );\r\n  const [accountPhotoPath, setAccountPhotoPath] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n  const [info, setInfo] = useState(null);\r\n  // const [alertVisible, setAlertVisible] = useState(false);\r\n\r\n  // const gotEvent = useEventListener();\r\n  // console.log(gotEvent);\r\n\r\n  /**\r\n   * Barrel: Getters\r\n   */\r\n  const barrelGetters = {\r\n    debug,\r\n    // instance,\r\n    loggingOut,\r\n    loggingIn,\r\n    // timestamp,\r\n    // startTimestamp,\r\n    pageLoading,\r\n    request,\r\n    // requestTS,\r\n    instance,\r\n    // lastRequest,\r\n    session,\r\n    // secureSession,\r\n    sessionTimeout,\r\n    sessionTimeoutApplied,\r\n    settings: JSON.parse(settings),\r\n    ip,\r\n    updateInterval,\r\n    currencies: JSON.parse(currencies),\r\n    transactions: JSON.parse(transactions),\r\n    shares: JSON.parse(shares),\r\n    accordionView,\r\n    accordionViewCurrency,\r\n    countCurrencies,\r\n    countTransactions,\r\n    countShares,\r\n    activePageCurrencies,\r\n    activePageTransactions,\r\n    activePageShares,\r\n    currenciesPerPage,\r\n    transactionsPerPage,\r\n    sharesPerPage,\r\n    userData: JSON.parse(userData),\r\n    // redirect,\r\n    redirectTo,\r\n    lastInsertId,\r\n    connected,\r\n    signedIn,\r\n    isExternalRequest,\r\n    externalRequest: JSON.parse(externalRequest),\r\n    cartContent: JSON.parse(cartContent),\r\n    currencyAbbr,\r\n    currencyRate,\r\n    // currencyStatus,\r\n    accountNumber,\r\n    userSequence,\r\n    accountType,\r\n    uid,\r\n    userBusinesses: JSON.parse(userBusinesses),\r\n    countBusinesses,\r\n    businessesPerPage,\r\n    activePageBusinesses,\r\n    userBusinessesLoaded,\r\n    activeBusiness,\r\n    activeBusinessID,\r\n    businessPurposes: JSON.parse(businessPurposes),\r\n    cartPurposes: JSON.parse(cartPurposes),\r\n    countBusinessPurposes,\r\n    businessPurposesPerPage,\r\n    activePageBusinessPurposes,\r\n    activeBusinesPurpose,\r\n    activePurposeProperty,\r\n    // purposeID,\r\n    activePurposeData: JSON.parse(activePurposeData),\r\n    purposeShareholders: JSON.parse(purposeShareholders),\r\n    // businessLoaded,\r\n    tanRequired,\r\n    tmrConnected,\r\n    validateTokenEmail,\r\n    validateTokenPasswordReset,\r\n    passwordResetTokenValidated,\r\n    passwordResetTokenEmail,\r\n    validationTokenEmail,\r\n    validationTokenEmailResent,\r\n    transferRequest: JSON.parse(transferRequest),\r\n    language,\r\n    transferType,\r\n    // transferSuccess,\r\n    accountPhotoPath,\r\n    error,\r\n    info,\r\n    // alertVisible,\r\n  };\r\n\r\n  /**\r\n   * Barrel: Setters\r\n   */\r\n  const barrelSetters = {\r\n    setDebug,\r\n    // setInstance,\r\n    setLoggingOut,\r\n    setLoggingIn,\r\n    // setTimestamp,\r\n    // setStartTimestamp,\r\n    setPageLoading,\r\n    setRequest,\r\n    // setRequestTS,\r\n    setInstance,\r\n    // setLastRequest,\r\n    setSession,\r\n    // setSecureSession,\r\n    setSessionTimeout,\r\n    setSessionTimeoutApplied,\r\n    setSettings,\r\n    setIP,\r\n    setUpdateInterval,\r\n    setCurrencies,\r\n    setTransactions,\r\n    setShares,\r\n    setAccordionView,\r\n    setAccordionViewCurrency,\r\n    setCountCurrencies,\r\n    setCountTransactions,\r\n    setCountShares,\r\n    setActivePageCurrencies,\r\n    setActivePageTransactions,\r\n    setActivePageShares,\r\n    setCurrenciesPerPage,\r\n    setTransactionsPerPage,\r\n    setSharesPerPage,\r\n    setConnected,\r\n    setLanguage,\r\n    setUserData,\r\n    // sendRequest,\r\n    setSignedIn,\r\n    setIsExternalRequest,\r\n    setExternalRequest,\r\n    setCartContent,\r\n    setCurrencyAbbr,\r\n    setCurrencyRate,\r\n    // setCurrencyStatus,\r\n    setRedirectTo,\r\n    setLastInsertId,\r\n    setAccountNumber,\r\n    setUserSequence,\r\n    setAccountType,\r\n    setUID,\r\n    setUserBusinesses,\r\n    setCountBusinesses,\r\n    setBusinessesPerPage,\r\n    setActivePageBusinesses,\r\n    setUserBusinessesLoaded,\r\n    setActiveBusiness,\r\n    setActiveBusinessID,\r\n    setBusinessPurposes,\r\n    setCartPurposes,\r\n    setCountBusinessPurposes,\r\n    setBusinessPurposesPerPage,\r\n    setActivePageBusinessPurposes,\r\n    setActiveBusinesPurpose,\r\n    setActivePurposeProperty,\r\n    // setPurposeID,\r\n    setActivePurposeData,\r\n    setPurposeShareholders,\r\n    // setBusinessLoaded,\r\n    setAccountPhotoPath,\r\n    setValidateTokenEmail,\r\n    setValidateTokenPasswordReset,\r\n    setPasswordResetTokenValidated,\r\n    setPasswordResetTokenEmail,\r\n    setValidationTokenEmail,\r\n    setValidationTokenEmailResent,\r\n    setTransferRequest,\r\n    setTanRequired,\r\n    // setTransferSuccess,\r\n    // setRedirect,\r\n    // showMessage,\r\n  };\r\n\r\n  /** \r\n   * Functions\r\n   ============================================================================ */\r\n\r\n  /**\r\n   * Sends requests to the server\r\n   * @param {string} request Request name\r\n   * @param {object} data Request data\r\n   */\r\n  const sendRequest = ({ req, data = null }) => {\r\n    if (processRequest({ req, data, session, uid: \"STA\", barrels })) {\r\n      // request processed successfully\r\n      return true;\r\n    } else {\r\n      console.log(\"THIS SHOULD NEVER BE REACHED\");\r\n      return sendData({ req, uid: \"STA\", session, data }, debug);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Processes user request\r\n   * @param {*} param0\r\n   */\r\n  const processRequest = ({ req, data, session, uid, barrels }) => {\r\n    data.instance = instance;\r\n\r\n    if (req !== \"update last seen user\") {\r\n      setRequest(req);\r\n    }\r\n\r\n    return requestHandler({\r\n      req,\r\n      data,\r\n      session,\r\n      uid,\r\n      barrels,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Processes server response\r\n   *\r\n   * Chooses a handler depending on response status:\r\n   * Error or other (success | continue | finished | pending etc.)\r\n   *\r\n   * @param {*} param0\r\n   */\r\n  const processResponse = ({ args, barrels }) => {\r\n    return args.status === \"error\"\r\n      ? errorHandler({\r\n          args: args,\r\n          uid: uid,\r\n          barrels: barrels,\r\n        })\r\n      : responseHandler({\r\n          args: args,\r\n          uid: uid,\r\n          barrels: barrels,\r\n        });\r\n  };\r\n\r\n  /**\r\n   * Shows a messgae (error or info)\r\n   *\r\n   * @param {string} msg, Messgae text\r\n   * @param {string} type, Message type (\"error\" | \"info\")\r\n   */\r\n  const showMessage = (msg, type = \"error\") => {\r\n    type === \"error\" ? setError(msg) : setInfo(msg);\r\n  };\r\n\r\n  /**\r\n   * Hides the message\r\n   */\r\n  const hideMessage = () => {\r\n    setError(null);\r\n    setInfo(null);\r\n  };\r\n\r\n  /**\r\n   * Changes the website language\r\n   */\r\n  const changeLanguage = (lng) => {\r\n    i18n.changeLanguage(lng);\r\n    setLanguage(lng);\r\n  };\r\n\r\n  /**\r\n   * Format number\r\n   * @param {number} number\r\n   */\r\n  const format = (number, currency = currencyAbbr, useGrouping = true) => {\r\n    return (\r\n      new Intl.NumberFormat(language, {\r\n        notation: \"standard\",\r\n        minimumFractionDigits: 2,\r\n        useGrouping: useGrouping,\r\n      }).format(number * currencyRate) +\r\n      \" \" +\r\n      currency\r\n    );\r\n  };\r\n  //\r\n\r\n  /**\r\n   * Format per cent\r\n   * @param {number} number\r\n   */\r\n  const formatPerCent = (number) => {\r\n    return (\r\n      new Intl.NumberFormat(language, {\r\n        notation: \"standard\",\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 2,\r\n      }).format(number) + \"%\"\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Format per cent\r\n   * @param {number} number\r\n   */\r\n  const formatExchangeRate = (number) => {\r\n    return new Intl.NumberFormat(language, {\r\n      notation: \"standard\",\r\n      minimumFractionDigits: 5,\r\n      maximumFractionDigits: 5,\r\n    }).format(number);\r\n  };\r\n\r\n  const parseLocaleNumber = (stringNumber, locale) => {\r\n    let num = 123456.789,\r\n      fmt_local = new Intl.NumberFormat(locale, {\r\n        style: \"currency\",\r\n        currency: \"USD\",\r\n      }),\r\n      parts_local = fmt_local.formatToParts(num),\r\n      group = \"\",\r\n      decimal = \"\",\r\n      currency = \"\";\r\n\r\n    // separators\r\n    parts_local.forEach(function (i) {\r\n      switch (i.type) {\r\n        case \"group\":\r\n          group = i.value;\r\n          break;\r\n        case \"decimal\":\r\n          decimal = i.value;\r\n          break;\r\n        case \"currency\":\r\n          currency = i.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    return parseFloat(\r\n      stringNumber\r\n        .replace(new RegExp(\"\\\\\" + group, \"g\"), \"\")\r\n        .replace(new RegExp(\"\\\\\" + decimal), \".\")\r\n        .replace(new RegExp(\"\\\\\" + currency, \"g\"), \"\")\r\n    );\r\n  };\r\n\r\n  const formatDate = (\r\n    ts,\r\n    options = {\r\n      month: \"long\",\r\n      day: \"numeric\",\r\n      year: \"numeric\",\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n    },\r\n    isUTC = true,\r\n    locales = language\r\n  ) => {\r\n    let date = new Date(ts); // .toISOString()\r\n    if (isUTC) {\r\n      const diff = date.getTimezoneOffset();\r\n      date = moment(date).add(-diff, \"m\").toDate();\r\n    }\r\n    return new Intl.DateTimeFormat(locales, options).format(date);\r\n  };\r\n\r\n  /**\r\n   * Retrieves an URL parameter\r\n   */\r\n  const getUrlParam = (param) => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    return urlParams.get(param);\r\n  };\r\n\r\n  // /**\r\n  //  * Clear local storage (URL param ?reset)\r\n  //  */\r\n  // if (getUrlParam(\"reset\") !== null) {\r\n  //   console.log(\"Reset\");\r\n\r\n  //   window.localStorage.clear();\r\n  //   console.log(\"Local storage cleared\");\r\n  // }\r\n\r\n  const sendEmailValidationRequest = ({ token, email }) => {\r\n    // console.log(\"sendEmailValidationRequest:\", token, email);\r\n\r\n    sendRequest({\r\n      req: \"validate email token\",\r\n      data: { token, email },\r\n    });\r\n  };\r\n\r\n  const sendPasswordResetRequest = ({ token, email }) => {\r\n    // console.log(\"sendEmailValidationRequest:\", token, email);\r\n    setPasswordResetTokenEmail(email);\r\n    sendRequest({\r\n      req: \"validate password reset token\",\r\n      data: { token, email },\r\n    });\r\n  };\r\n\r\n  const getUri = () => {\r\n    // return `${window.location.protocol}//${window.location.hostname}`;\r\n    return `${window.location.hostname}`;\r\n  };\r\n\r\n  const getIP = () => {\r\n    if (debug) return;\r\n    fetch(\"https://dev.zime.lv/ip\", {\r\n      method: \"post\",\r\n      mode: \"no-cors\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((results) => results.json())\r\n      .then((data) => {\r\n        setIP(typeof data.ip === \"string\" ? data.ip : \"\");\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n      });\r\n  };\r\n\r\n  const getCart = () => {\r\n    const cart = getUrlParam(\"cart\");\r\n\r\n    // console.log(business, cart);\r\n\r\n    if (cart !== null) {\r\n      setExternalRequest(JSON.stringify({ cart }));\r\n      if (!signedIn) setIsExternalRequest(true);\r\n    }\r\n  };\r\n\r\n  const getCartPurposes = () => {\r\n    if (cartContent === null) return;\r\n\r\n    let cartPurposes = [];\r\n\r\n    barrelGetters.cartContent.map((element) => {\r\n      cartPurposes.push(element.product);\r\n    });\r\n\r\n    // purposes: '\"' + cartPurposes.join('\",\"') + '\"',\r\n\r\n    setCartPurposes(null);\r\n\r\n    sendRequest({\r\n      req: \"get cart purposes\",\r\n      data: {\r\n        purposes: JSON.stringify(cartPurposes),\r\n        language: language,\r\n        page: 1,\r\n        limit: 5,\r\n      },\r\n    });\r\n  };\r\n\r\n  const getCurrencies = (newPage) => {\r\n    setCurrencies(null);\r\n    sendRequest({\r\n      req: \"get currencies\",\r\n      data: { page: newPage, limit: currenciesPerPage },\r\n    });\r\n    setActivePageCurrencies(newPage);\r\n  };\r\n\r\n  const getTransactions = (newPage) => {\r\n    setTransactions(null);\r\n    sendRequest({\r\n      req: \"get transactions\",\r\n      data: {\r\n        page: newPage,\r\n        limit: transactionsPerPage,\r\n        uid: accountNumber,\r\n        language: language,\r\n      },\r\n    });\r\n    setActivePageTransactions(newPage);\r\n  };\r\n\r\n  const getShares = (newPage) => {\r\n    setShares(null);\r\n    sendRequest({\r\n      req: \"get shares\",\r\n      data: {\r\n        page: newPage,\r\n        limit: sharesPerPage,\r\n        uid: accountNumber,\r\n        language: language,\r\n      },\r\n    });\r\n    setActivePageShares(newPage);\r\n  };\r\n\r\n  const getBusinesses = (newPage = 1) => {\r\n    setUserBusinesses(null);\r\n    setCountBusinessPurposes(null);\r\n    setActivePageBusinessPurposes(1);\r\n    setActiveBusinessID(null);\r\n    sendRequest({\r\n      req: \"get user businesses\",\r\n      data: { uid: accountNumber, page: newPage, limit: businessesPerPage },\r\n    });\r\n    setActivePageBusinesses(newPage);\r\n  };\r\n\r\n  const getBusinessPurposes = (business_id, selected = null, newPage = 1) => {\r\n    // console.log(\"BUSINESS PURPOSES FOR ID \" + business_id, businessPurposes);\r\n\r\n    if (selected !== null) {\r\n      setActiveBusiness(selected);\r\n      setActiveBusinesPurpose(null);\r\n      setActivePurposeProperty(null);\r\n    }\r\n    setBusinessPurposes(null);\r\n    setCountBusinessPurposes(null);\r\n    setActivePageBusinessPurposes(newPage);\r\n    setActiveBusinessID(business_id);\r\n    return sendRequest({\r\n      req: \"get business purposes\",\r\n      data: {\r\n        business_id: business_id,\r\n        language: language,\r\n        page: newPage,\r\n        limit: businessPurposesPerPage,\r\n      },\r\n    });\r\n  };\r\n\r\n  const getPurposeShareholders = (purpose_id, selected = null) => {\r\n    if (selected !== null) {\r\n      setActiveBusinesPurpose(purpose_id);\r\n    }\r\n    setPurposeShareholders(null);\r\n    return sendRequest({\r\n      req: \"get purpose shareholders\",\r\n      data: { purpose_id: purpose_id },\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Get account data\r\n   */\r\n  const getAccountData = () => {\r\n    if (accountNumber === null) return;\r\n    sendRequest({\r\n      req: \"get account data\",\r\n      data: {\r\n        uid: accountNumber,\r\n        timeout: sessionTimeout,\r\n        checkTimeout: !sessionTimeoutApplied,\r\n      },\r\n      // data: { email: barrelGetters.userData.email },\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Get transaction by id\r\n   * @param {integer} id, The primary key\r\n   */\r\n  const getTransactionById = (id) => {\r\n    sendRequest({\r\n      req: \"get transaction by id\",\r\n      data: { id: id, language: language },\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Get conatainer class\r\n   *\r\n   * Returns object cantaining the classes for layout container appearance.\r\n   *\r\n   * @param {boolean} signedIn, True if user has signed in, otherwise false.\r\n   */\r\n  const getContainerClass = (signedIn) => {\r\n    return {\r\n      wrapperClass: signedIn\r\n        ? \"auth-wrapper auth-wrapper-summary\"\r\n        : \"auth-wrapper\",\r\n      innerClass: signedIn\r\n        ? \"auth-inner auth-inner-summary\"\r\n        : \"auth-inner autoWidth\",\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Get redirect\r\n   *\r\n   * Returns router redirect component.\r\n   */\r\n  const getRedirect = () => {\r\n    return redirectTo === null ? \"\" : <Redirect push to={redirectTo} />;\r\n  };\r\n\r\n  /**\r\n   * Update last seen user\r\n   *\r\n   * Sends a request to update the last-seen-user time\r\n   */\r\n  const updateLastSeenUser = () => {\r\n    let data = { email: barrelGetters.userData.email };\r\n    return sendRequest({ req: \"update last seen user\", data });\r\n  };\r\n\r\n  /**\r\n   * Sorts an object array by value of the property\r\n   * @param {array} array, the array\r\n   * @param {string} property, the property name\r\n   */\r\n  const sortObjectArray = (array, property) => {\r\n    return array.sort((a, b) =>\r\n      a[property] > b[property] ? 1 : b[property] > a[property] ? -1 : 0\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Returns an array index of the object\r\n   * containing the property with the certain value.\r\n   *\r\n   * @param {array} array\r\n   * @param {string} property\r\n   * @param {any} value\r\n   */\r\n  const getObjectArrayElementIndex = (array, property, value) => {\r\n    if (array === null) return -1;\r\n    return array\r\n      .map((properties) => {\r\n        return properties[property];\r\n      })\r\n      .indexOf(value);\r\n  };\r\n\r\n  const getReviser = () => {\r\n    return \"STA\";\r\n  };\r\n\r\n  const getWorkplace = () => {\r\n    return \"LAPSTA\";\r\n  };\r\n\r\n  const barrelFunctions = {\r\n    sendRequest,\r\n    processResponse,\r\n    showMessage,\r\n    hideMessage,\r\n    changeLanguage,\r\n    sortObjectArray,\r\n    getObjectArrayElementIndex,\r\n    format,\r\n    formatPerCent,\r\n    formatExchangeRate,\r\n    getContainerClass,\r\n    formatDate,\r\n    updateLastSeenUser,\r\n    sendEmailValidationRequest,\r\n    sendPasswordResetRequest,\r\n    getRedirect,\r\n    getUri,\r\n    getIP,\r\n    getCart,\r\n    getCartPurposes,\r\n    getUrlParam,\r\n    getAccountData,\r\n    getTransactionById,\r\n    getBusinesses,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n    getCurrencies,\r\n    getTransactions,\r\n    getShares,\r\n    parseLocaleNumber,\r\n    getReviser,\r\n    getWorkplace,\r\n    // updateTimestamp,\r\n  };\r\n\r\n  /** \r\n   * Event handlers\r\n   ============================================================================ */\r\n\r\n  /**\r\n   * On language change\r\n   */\r\n  i18n.on(\"languageChanged\", function (lng) {\r\n    setLanguage(lng);\r\n  });\r\n\r\n  /**\r\n   * On redirect\r\n   * @param {string} to Redirect path (e.g. \"/sign-in\")\r\n   */\r\n  const onRedirect = (to) => {\r\n    setRedirectTo(to);\r\n  };\r\n\r\n  const onSessionStart = () => {\r\n    // start new session\r\n    let data = {};\r\n    data.request = \"hello\";\r\n    data.instance = instance;\r\n    startSession(data, session, debug);\r\n  };\r\n\r\n  const onSessionEnd = () => {\r\n    // end current session\r\n    let data = {};\r\n    data.request = \"bye\";\r\n    data.instance = instance;\r\n    endSession(data, session, debug);\r\n  };\r\n\r\n  const onSessionReset = () => {\r\n    setSession(uuidv4());\r\n  };\r\n\r\n  /**\r\n   * On signup\r\n   * @param {object} data Signup data\r\n   */\r\n  const onSignUp = (data) => {\r\n    // console.log(\"SIGN UP (data):\", data);\r\n    /// setUserData(JSON.stringify(data));\r\n    return sendRequest({ req: \"register user\", data });\r\n  };\r\n\r\n  const onSessionTimeout = () => {\r\n    // if (debug) return;\r\n    console.log(\"Session timed out...\");\r\n    // endSession(\"bye\", session);\r\n    setLoggingOut(true);\r\n    setRedirectTo(\"/sign-out\");\r\n    // Logout();\r\n  };\r\n\r\n  // const onIdleTimerReset = () => {\r\n  //   // console.log(\"tick:\", tick);\r\n  //   setIdleTimerTS(Date.now() / 1000);\r\n  // };\r\n\r\n  /**\r\n   * On account registration\r\n   * @param {object} data The account registration data\r\n   */\r\n  // const onAccountRegistration = (data) => {\r\n  //   // console.log(\"ACCOUNT REGISTRATION (data):\", data);\r\n  //   // setAccountNumber(data.personalID);\r\n  //   return sendRequest({ req: \"register account\", data });\r\n  // };\r\n\r\n  /**\r\n   * On transfer type change\r\n   * @param {string} id The transfer type id (\"U2S\", \"U2U\", \"U2B\" etc.)\r\n   */\r\n  const onTransferTypeChange = (id) => {\r\n    // console.log(\"setTransferType: \" + id);\r\n    setTransferType(id);\r\n  };\r\n\r\n  const onTransferSuccess = () => {\r\n    // console.log(\"ON TRANSFER SUCCESS\", barrels);\r\n  };\r\n\r\n  /**\r\n   * On transfer\r\n   * @param {object} data Transfer data\r\n   */\r\n  const onTransfer = (data) => {\r\n    // console.log(\"ON TRANSFER (data):\", data);\r\n    // sendRequest({ req: \"register account\", data: data });\r\n    sendRequest(data);\r\n  };\r\n\r\n  // const onBusinessRegistration = (data) => {\r\n  //   // console.log(\"ON BUSINESS REGISTRATION (data):\", data);\r\n  //   // sendRequest({ req: \"register account\", data: data });\r\n  //   sendRequest(data);\r\n  // };\r\n\r\n  const onPurposeRegistration = (data) => {\r\n    sendRequest(data);\r\n  };\r\n\r\n  // const onShareholderRegistration = (data) => {\r\n  //   console.log(\"ON SHAREHOLDER REGISTRATION (data):\", data);\r\n  //   // sendRequest({ req: \"register account\", data: data });\r\n  //   sendRequest(data);\r\n  //   // getBusinesses();\r\n  // };\r\n\r\n  /**\r\n   * On logout\r\n   */\r\n  const onLogOut = () => {\r\n    // setSession(null);\r\n    setUpdateInterval(-1);\r\n\r\n    // TODO: refactor this to separate function (as well as the startSession)\r\n    // let data = {};\r\n    // data.request = \"bye\";\r\n    // data.instance = instance;\r\n    // endSession(data, session, debug);\r\n    onSessionEnd();\r\n    // setSession(uuidv4()); // DO NOT SET SESSION HERE - infinite loop!!\r\n    // setSecureSession(false);\r\n\r\n    setSignedIn(false);\r\n    setSettings(null);\r\n    setSessionTimeoutApplied(false);\r\n    setIsExternalRequest(false);\r\n    setCurrencies(null);\r\n    setTransactions(null);\r\n    setShares(null);\r\n    setAccordionView(\"balance\");\r\n    setAccordionViewCurrency(null);\r\n    setAccountNumber(null);\r\n    setAccountType(null);\r\n    setTransferType(\"#u2s\");\r\n    setTransferRequest(null);\r\n    setCountTransactions(null);\r\n    setUserData(null);\r\n    setUserBusinesses(null);\r\n    setUserBusinessesLoaded(false);\r\n    setActiveBusiness(null);\r\n    setBusinessPurposes(null);\r\n    setCartPurposes(null);\r\n    setActiveBusinesPurpose(null);\r\n    setActivePurposeProperty(null);\r\n    setPurposeShareholders(null);\r\n    setAccountPhotoPath(\"\");\r\n    setPasswordResetTokenValidated(null);\r\n    setPasswordResetTokenEmail(null);\r\n    setTanRequired(false);\r\n    setError(null);\r\n    setInfo(null);\r\n  };\r\n\r\n  const onAlertClose = () => {\r\n    hideMessage();\r\n  };\r\n\r\n  /**\r\n   * Barrel: Event handlers\r\n   */\r\n  const barrelEventHandlers = {\r\n    onRedirect,\r\n    onSignUp,\r\n    onSessionTimeout,\r\n    // onIdleTimerReset,\r\n    // onAccountRegistration,\r\n    onTransferTypeChange,\r\n    onTransferSuccess,\r\n    onTransfer,\r\n    onSessionStart,\r\n    onSessionEnd,\r\n    onSessionReset,\r\n    // onLastSeenUser,\r\n\r\n    // onBusinessRegistration,\r\n    onPurposeRegistration,\r\n    // onShareholderRegistration,\r\n    onLogOut,\r\n    onAlertClose,\r\n  };\r\n\r\n  /**\r\n   * Barrel of barrels\r\n   */\r\n  const barrels = {\r\n    barrelGetters,\r\n    barrelSetters,\r\n    barrelFunctions,\r\n    barrelEventHandlers,\r\n  };\r\n\r\n  /** \r\n   * Custom hooks\r\n   ============================================================================ */\r\n\r\n  useSocket((data) => {\r\n    processResponse({\r\n      args: data,\r\n      barrels: barrels,\r\n    });\r\n  });\r\n\r\n  useInterval(() => {\r\n    updateLastSeenUser();\r\n    setSessionTimeoutApplied(false);\r\n    // console.log(\"setSessionTimeoutApplied(false)\");\r\n  }, updateInterval);\r\n\r\n  return <Main {...barrels} />;\r\n};\r\n","import { sendData } from \"../utils/sockets\";\r\n\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n  const { req, data, session, uid, barrels } = props;\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const { debug, userData, userSequence } = barrels.barrelGetters;\r\n  const {\r\n    setUserData,\r\n    setUID,\r\n    setAccountNumber,\r\n    // setRequest,\r\n    // setUserBusinesses,\r\n  } = barrels.barrelSetters;\r\n  const { updateLastSeenUser } = barrels.barrelFunctions;\r\n  //   const {} = barrels.barrelEventHandlers;\r\n\r\n  let requestFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onRequest = (req, callback) => {\r\n    if (requestFound) return;\r\n    if (req === props.req || req === \"default\") {\r\n      callback();\r\n      requestFound = true;\r\n    }\r\n  };\r\n\r\n  /** \r\n   * Request handlers\r\n  ============================================================================ */\r\n\r\n  onRequest(\"sign in user\", () => {\r\n    setUserData(JSON.stringify(data));\r\n    sendData({ req, data, uid, session }, debug);\r\n  });\r\n\r\n  onRequest(\"get user sequence\", () => {\r\n    const dt = new Date(data.birthDate);\r\n    const fullyear = dt.getFullYear().toString();\r\n    const month = (dt.getMonth() + 1).toString().padStart(2, \"0\");\r\n    const day = dt.getDate().toString().padStart(2, \"0\");\r\n\r\n    data.birthDate = `${fullyear}-${month}-${day}`;\r\n\r\n    sendData({ req, data, uid, session }, debug);\r\n  });\r\n\r\n  onRequest(\"register account\", () => {\r\n    const dt = new Date(data.birthDate);\r\n    const fullyear = dt.getFullYear().toString();\r\n    const year = fullyear.slice(-2);\r\n    const month = (dt.getMonth() + 1).toString().padStart(2, \"0\");\r\n    const day = dt.getDate().toString().padStart(2, \"0\");\r\n    const birthDate = `${day}${month}${year}`;\r\n    const timezone = data.timezone.slice(0, 2);\r\n    const initial = userData.lastname.slice(0, 1).toUpperCase();\r\n    const icode = initial.charCodeAt(0).toString().padStart(5, \"0\");\r\n\r\n    data.scode = `${timezone}${birthDate}${initial}`;\r\n    data.tcode = `${timezone}${birthDate}${icode}`;\r\n    data.timezone = data.timezone.slice(5);\r\n    data.sequence = userSequence.toString().padStart(5, \"0\");\r\n    data.birthDate = `${fullyear}-${month}-${day}`;\r\n\r\n    setUID(data.personalID);\r\n    sendData({ req, data, uid, session }, debug);\r\n  });\r\n\r\n  onRequest(\"default\", () => {\r\n    sendData({ req, data, uid, session }, debug);\r\n\r\n    return true;\r\n  });\r\n\r\n  // onRequest(\"unknown\", () => {\r\n  //   showMessage(`UNKNOWN REQUEST ${req}`, \"info\");\r\n\r\n  //   return true;\r\n  // });\r\n\r\n  return requestFound;\r\n};\r\n","// import { useTranslation } from \"react-i18next\";\r\n\r\nexport default ({ args, barrels }) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const { debug } = barrels.barrelGetters;\r\n  const { setRequest, setUID, setAccountNumber } = barrels.barrelSetters;\r\n  const { showMessage } = barrels.barrelFunctions;\r\n  // const {} = barrels.barrelEventHandlers;\r\n\r\n  //   const { t } = useTranslation(\"Errors\");\r\n  const { req, error, context } = props;\r\n  if (debug) console.log(`ERROR: ${req}`, error, context, props, barrels);\r\n  // const { showMessage } = barrels.barrelFunctions;\r\n\r\n  let errorFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onError = (data, callback) => {\r\n    if (errorFound) return;\r\n    const [res, status] = data;\r\n    // console.log(res, status);\r\n\r\n    if (\r\n      (res === req && status === error.code) ||\r\n      res === \"*\" ||\r\n      res === \"unknown\"\r\n    ) {\r\n      callback();\r\n      setRequest(null);\r\n      errorFound = true;\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /** \r\n   * Response handlers\r\n  ============================================================================ */\r\n\r\n  /**\r\n   * Transfer errors\r\n   */\r\n  onError([\"transfer U2S\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"transfer U2U\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"transfer U2B\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_TRANSFER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"INVALID_USER_REGISTRATION\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user language\", \"NO_ROWS_CHANGED\"], () => {\r\n    // user selected the same language again - just ignore\r\n    return true;\r\n  });\r\n\r\n  onError([\"validate email token\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"TOKEN_VALIDATION_FAILED\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"validate password reset token\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"TOKEN_VALIDATION_FAILED\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"reset password\", \"NO_ROWS_CHANGED\"], () => {\r\n    // showMessage(\"REQUEST_ALREADY_SENT\", \"info\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user language\", \"NO_ROWS_CHANGED\"], () => {\r\n    // User selected the same language again - that's ok\r\n    return true;\r\n  });\r\n\r\n  onError([\"update user\", \"NO_ROWS_CHANGED\"], () => {\r\n    // User selected the same password again - that's ok\r\n    return true;\r\n  });\r\n\r\n  onError([\"update last seen user\", \"NO_ROWS_CHANGED\"], () => {\r\n    // Same last seen time was submitted (shouldn't be possible) - ignore for now\r\n    return true;\r\n  });\r\n\r\n  onError([\"sign in user\", \"NO_ROWS_CHANGED\"], () => {\r\n    showMessage(\"USER_NOT_FOUND\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"change password\", \"NO_ROWS_CHANGED\"], () => {\r\n    // User reset password to the actual password\r\n    showMessage(\"SAME_PASSWORD_RESET\", \"info\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"submit tan\", \"NO_ROWS_CHANGED\"], () => {\r\n    // User reset password to the actual password\r\n    showMessage(\"INVALID_TAN\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"get cart\", \"NO_ROWS_CHANGED\"], () => {\r\n    // User accessed the same cart again - it's fine\r\n    return true;\r\n  });\r\n\r\n  onError([\"transfer V2U\", \"NO_ROWS_CHANGED\"], () => {\r\n    // Allowance already dispatched today - totally fine\r\n    return true;\r\n  });\r\n\r\n  onError([\"register user currency\", \"NO_ROWS_CHANGED\"], () => {\r\n    // The same currency was selected again - no problem\r\n    return true;\r\n  });\r\n\r\n  onError([\"register account\", \"ER_DUP_ENTRY\"], () => {\r\n    setUID(null);\r\n    setAccountNumber(null);\r\n    showMessage(\"DUPLICATE_ACCOUNT_REGISTRATION\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError(\r\n    [\"register account\", \"ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO\"],\r\n    () => {\r\n      setUID(null);\r\n      setAccountNumber(null);\r\n      showMessage(\"DUPLICATE_ACCOUNT_REGISTRATION\", \"error\");\r\n      return true;\r\n    }\r\n  );\r\n\r\n  onError([\"register shareholder\", \"ER_NO_REFERENCED_ROW_2\"], () => {\r\n    showMessage(\"USER_NOT_FOUND\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"*\", \"ER_CANT_CREATE_THREAD\"], () => {\r\n    showMessage(\"NO_RESPONSE_FROM_SERVER\", \"error\");\r\n    return true;\r\n  });\r\n\r\n  onError([\"unknown\"], () => {\r\n    showMessage(error.code, \"error\");\r\n    return true;\r\n  });\r\n\r\n  return false;\r\n};\r\n","// import settings from \"../settings.json\";\r\n\r\nexport default ({ args, barrels }) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  // console.log(\"RESPONSE HANDLER: \", props, barrels);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    debug,\r\n    // requestTS,\r\n    session,\r\n    sessionTimeout,\r\n    settings,\r\n    loggingIn,\r\n    isExternalRequest,\r\n    instance,\r\n    currencies,\r\n    transactions,\r\n    transferRequest,\r\n    shares,\r\n    // transactionsPerPage,\r\n    // sharesPerPage,\r\n    userData,\r\n    accountNumber,\r\n    language,\r\n    // uid,\r\n    userBusinesses,\r\n    cartPurposes,\r\n    businessPurposes,\r\n    purposeShareholders,\r\n    activeBusinesPurpose,\r\n    lastInsertId,\r\n  } = barrels.barrelGetters;\r\n  const {\r\n    setRequest,\r\n    setSession,\r\n    setSessionTimeoutApplied,\r\n    setSettings,\r\n    setLoggingIn,\r\n    setUpdateInterval,\r\n    setCurrencies,\r\n    setTransactions,\r\n    setShares,\r\n    setCountCurrencies,\r\n    setCountTransactions,\r\n    setCountShares,\r\n    setConnected,\r\n    // setLanguage,\r\n    setUserData,\r\n    setSignedIn,\r\n    setIsExternalRequest,\r\n    setCartContent,\r\n    setCurrencyAbbr,\r\n    setCurrencyRate,\r\n    // setCurrencyStatus,\r\n    // setTransferSuccess,\r\n    setRedirectTo,\r\n    setLastInsertId,\r\n    setAccountNumber,\r\n    setUserSequence,\r\n    setUID,\r\n    setUserBusinesses,\r\n    setCountBusinesses,\r\n    setUserBusinessesLoaded,\r\n    setCartPurposes,\r\n    setBusinessPurposes,\r\n    setCountBusinessPurposes,\r\n    setPurposeShareholders,\r\n    // setBusinessLoaded,\r\n    setAccountPhotoPath,\r\n    setPasswordResetTokenValidated,\r\n    setPasswordResetTokenEmail,\r\n    setValidateTokenEmail,\r\n    setValidationTokenEmail,\r\n    setValidationTokenEmailResent,\r\n    setActivePurposeData,\r\n    setTanRequired,\r\n    // setRedirect,\r\n  } = barrels.barrelSetters;\r\n  const {\r\n    sendRequest,\r\n    // processResponse,\r\n    getBusinesses,\r\n    getAccountData,\r\n    getTransactionById,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n    showMessage,\r\n    changeLanguage,\r\n    sortObjectArray,\r\n    getObjectArrayElementIndex,\r\n    // endSession,\r\n    updateLastSeenUser,\r\n    showTanInput,\r\n    // updateTimestamp,\r\n    // hideMessage,\r\n  } = barrels.barrelFunctions;\r\n  const {\r\n    // onTransferSuccess,\r\n    onRedirect,\r\n    onSessionTimeout,\r\n    onSessionEnd,\r\n    // onLogOut,\r\n  } = barrels.barrelEventHandlers;\r\n\r\n  /**\r\n   * Hooks\r\n   ============================================================================ */\r\n  const { req } = props; // req, status\r\n  // const { userData, accountNumber } = barrels.barrelGetters;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  // console.log(\"USER DATA PARSED:\", userDataParsed);\r\n\r\n  /**\r\n   * Log response\r\n   */\r\n  if (debug) console.log(`response: ${req} (${props.status})`, props, barrels);\r\n\r\n  let responseFound = false;\r\n\r\n  /** \r\n   * Request event dispatcher\r\n   ============================================================================ */\r\n  const onResponse = (data, callback) => {\r\n    if (responseFound) return;\r\n    const [res, status] = data;\r\n    // console.log(\"INSTANCE: \", instance, props.reqData.instance);\r\n\r\n    // if (instance !== props.reqData.instance)\r\n    //   console.log(\"WRONG INSTANCE:\", instance, props.reqData.instance);\r\n\r\n    if (\r\n      (instance === props.reqData.instance &&\r\n        res === props.req &&\r\n        status === props.status) ||\r\n      res === \"unknown\"\r\n    ) {\r\n      if (callback()) {\r\n        setRequest(null);\r\n      }\r\n      responseFound = true;\r\n      // return true;\r\n    }\r\n    // return false;\r\n  };\r\n\r\n  /** \r\n   * Response handlers\r\n  ============================================================================ */\r\n\r\n  /**\r\n   * Start session (success)\r\n   */\r\n  onResponse([\"start session\", \"success\"], () => {\r\n    setConnected(true);\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * End session (success)\r\n   */\r\n  onResponse([\"end session\", \"success\"], () => {\r\n    // console.log(\"ON END SESSION\");\r\n\r\n    setConnected(false);\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"get user sequence\", \"continue\"], () => {\r\n    if (props.name === \"SELECT FROM users\") {\r\n      setUserSequence(props.results.sequence);\r\n      return false;\r\n    }\r\n  });\r\n\r\n  onResponse([\"get user sequence\", \"success\"], () => {\r\n    // register user\r\n    sendRequest({ req: \"register account\", data: props.reqData });\r\n  });\r\n\r\n  onResponse([\"get tan\", \"success\"], () => {\r\n    // register user\r\n    // sendRequest({ req: \"register account\", data: props.reqData });\r\n    // Show the TAN input dialog\r\n    setTanRequired(true);\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"get cart\", \"continue\"], () => {\r\n    if (props.name === \"SELECT carts\") {\r\n      setCartContent(props.results.content);\r\n    }\r\n  });\r\n\r\n  onResponse([\"submit tan\", \"finished\"], () => {\r\n    if (props.name === \"UPDATE tans\") {\r\n      if (props.queryCnt > 0) {\r\n        return false;\r\n      } else {\r\n        setTanRequired(false);\r\n        return true;\r\n      }\r\n    }\r\n  });\r\n\r\n  onResponse([\"submit tan\", \"success\"], () => {\r\n    // register user\r\n    // sendRequest({ req: \"register account\", data: props.reqData });\r\n    // Show the TAN input dialog\r\n\r\n    sendRequest({ req: transferRequest.transferType, data: transferRequest });\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register user (pending)\r\n   */\r\n  onResponse([\"register user\", \"pending\"], () => {\r\n    // Might show some user feedback\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register user\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO users\") {\r\n      if (props.results.insertId > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    } else if (props.name === \"INSERT INTO validation_tokens\") {\r\n      // const { token, email } = props.tags;\r\n      // setValidateTokenEmail(\r\n      //   JSON.stringify({\r\n      //     token,\r\n      //     email,\r\n      //   })\r\n      // );\r\n      setValidationTokenEmail({\r\n        token: props.tags.token,\r\n        email: props.tags.email,\r\n      });\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register user (success)\r\n   */\r\n  onResponse([\"register user\", \"success\"], () => {\r\n    // console.log(\"REGISTER USER PROPS:\", props);\r\n    const noEmailValidation = false;\r\n\r\n    if (noEmailValidation) {\r\n      setSignedIn(true);\r\n      setSession(props.email); // TODO: Might restore\r\n      onRedirect(\"/account-registration\");\r\n      sendRequest({ req: \"get user\", data: { email: props.email } }); // to not require a log in\r\n      return false;\r\n    } else {\r\n      onRedirect(\"/validate-email\");\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"resend validate email token\", \"continue\"], () => {\r\n    if (props.name === \"SELECT validation_tokens\") {\r\n      setValidationTokenEmailResent(props.results.resent);\r\n      return false;\r\n    }\r\n  });\r\n\r\n  onResponse([\"resend validate email token\", \"success\"], () => {\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"validate email token\", \"continue\"], () => {\r\n    if (props.name === \"UPDATE validation tokens\") {\r\n      if (props.results.affectedRows > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        // onRedirect(\"/sign-in\");\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if (props.name === \"UPDATE users\") {\r\n      if (props.results.affectedRows > 0) {\r\n        // setLastInsertId(props.results.insertId);\r\n        onRedirect(\"/sign-in\");\r\n        return true;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"validate email token\", \"success\"], () => {\r\n    setValidateTokenEmail(null); // email validation token not needed any more + prevent the unnecessary resend\r\n    return true;\r\n  });\r\n\r\n  // onResponse([\"validate password reset token\", \"continue\"], () => {\r\n  //   if (props.name === \"UPDATE validation tokens\") {\r\n  //     if (props.results.affectedRows > 0) {\r\n  //       // onRedirect(\"/password\");\r\n  //       setPasswordResetTokenValidated(true);\r\n  //       return true;\r\n  //     } else {\r\n  //       // No row was inserted - an error was returned\r\n  //       return true;\r\n  //     }\r\n  //   }\r\n\r\n  //   return false;\r\n  // });\r\n\r\n  onResponse([\"validate password reset token\", \"success\"], () => {\r\n    setPasswordResetTokenValidated(true);\r\n\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get URI settings (continue)\r\n   */\r\n  onResponse([\"get uri settings\", \"continue\"], () => {\r\n    if (props.name === \"SELECT FROM uri_settings\") {\r\n      const results = JSON.parse(props.results.settings);\r\n\r\n      // console.log(\"results.settings\", results);\r\n\r\n      setSettings(JSON.stringify(results));\r\n\r\n      // Force single currency\r\n      if (\r\n        typeof results[\"currency\"] !== \"undefined\" &&\r\n        results[\"currency\"] !== null\r\n      ) {\r\n        const abbr = results[\"currency\"];\r\n        // setCurrencyAbbr(abbr);\r\n        sendRequest({\r\n          req: \"register user currency\",\r\n          data: { email: userData.email, currency_id: abbr },\r\n        });\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register user currency (success)\r\n   */\r\n  onResponse([\"register user currency\", \"success\"], () => {\r\n    setCurrencyAbbr(props.reqData.currency_id);\r\n    // return false;\r\n  });\r\n\r\n  /**\r\n   * Sign in user (continue)\r\n   */\r\n  onResponse([\"sign in user\", \"continue\"], () => {\r\n    if (props.name === \"SELECT users\") {\r\n      /**\r\n       * Validated user\r\n       */\r\n      if (props.results.status === 1) {\r\n        setUserData(JSON.stringify(props.results));\r\n        setAccountNumber(props.results.uid);\r\n        // setSession(props.results.email); // TODO: Might restore\r\n        setCurrencyAbbr(props.results.currency_abbr);\r\n        setCurrencyRate(\r\n          isNaN(props.results.currency_rate) ? 1 : props.results.currency_rate\r\n        );\r\n\r\n        changeLanguage(props.results.language);\r\n\r\n        // setSignedIn(true);\r\n\r\n        // /**\r\n        //  * Handle external request\r\n        //  */\r\n        // let redirectTarget;\r\n        // if (props.results.uid !== null) {\r\n        //   if (isExternalRequest) {\r\n        //     redirectTarget = \"/auth\";\r\n        //     setIsExternalRequest(false);\r\n        //   } else redirectTarget = \"/summary\";\r\n        // } else redirectTarget = \"/account-registration\";\r\n\r\n        // onRedirect(redirectTarget);\r\n\r\n        return false;\r\n\r\n        /**\r\n         * Not yet validated user\r\n         */\r\n      } else if (props.results.status === 0) {\r\n        onRedirect(\"/validate-email\");\r\n        return true;\r\n\r\n        /**\r\n         * Suspended user\r\n         */\r\n      } else if (props.results.status === 2) {\r\n        setRedirectTo(\"/sign-out\");\r\n        showMessage(\"ACCOUNT_SUSPENDED\", \"error\");\r\n        return true;\r\n\r\n        /**\r\n         * Deleted user\r\n         */\r\n      } else if (props.results.status === 3) {\r\n        setRedirectTo(\"/sign-out\");\r\n        showMessage(\"ACCOUNT_DELETED\", \"error\");\r\n        return true;\r\n      }\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Sign in user (finished)\r\n   */\r\n  onResponse([\"sign in user\", \"finished\"], () => {\r\n    if (props.name === \"SELECT users\") {\r\n      if (props.queryCnt > 0) {\r\n        return false;\r\n      } else {\r\n        showMessage(\"INVALID_SIGN_IN\", \"error\");\r\n        setRedirectTo(\"/sign-out\");\r\n        return true;\r\n      }\r\n    }\r\n  });\r\n\r\n  onResponse([\"sign in user\", \"success\"], () => {\r\n    setSignedIn(true);\r\n    setLoggingIn(false);\r\n    onSessionEnd();\r\n    setSession(props.token);\r\n\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"update last seen user\", \"success\"], () => {\r\n    onSessionEnd();\r\n    setSession(props.token); // TODO: Might restore\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Update user (success)\r\n   */\r\n  onResponse([\"update user\", \"success\"], () => {\r\n    sendRequest({ req: \"get user\", data: { email: userData.email } });\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get user (continue)\r\n   */\r\n  onResponse([\"get user\", \"continue\"], () => {\r\n    if (props.name === \"SELECT users\") {\r\n      setUserData(JSON.stringify(props.results));\r\n      setUID(props.results.uid);\r\n      setAccountNumber(props.results.uid);\r\n      if (accountNumber === null && props.results.uid !== null) {\r\n        setRedirectTo(\"/summary\");\r\n      }\r\n      return false;\r\n    }\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get user (finished)\r\n   */\r\n  onResponse([\"get user\", \"finished\"], () => {\r\n    if (props.name === \"SELECT users\") {\r\n      if (props.queryCnt === 1) {\r\n        // exactly one user found - all is good\r\n        return false;\r\n      } else if (props.queryCnt === 0) {\r\n        // Something wrong with (accessing) the user data\r\n        // Probable causes:\r\n        // - user was deleted from the DB\r\n        // - user status was set to >= 2\r\n        // - multiple users with the same email address, most improbable (db constraint)\r\n        // - user changed the email address or password\r\n        setRedirectTo(\"/sign-out\");\r\n        // showMessage(\"INVALID_DATA\", \"error\");\r\n        return true;\r\n      }\r\n      return true;\r\n    }\r\n    // if (props.rowNum === 1) {\r\n    //   return true;\r\n    // } else {\r\n    //   // Something wrong with (accessing) the user data\r\n    //   // Probable causes:\r\n    //   // - user was deleted from the DB\r\n    //   // - user status was set to >= 2\r\n    //   // - multiple users with the same email address, most improbable (db constraint)\r\n    //   // - user changed the email address or password\r\n    //   // onLogOut();\r\n    //   setRedirectTo(\"/sign-out\");\r\n    //   // showMessage(\"INVALID_DATA\", \"error\");\r\n    //   return true;\r\n    // }\r\n  });\r\n\r\n  onResponse([\"get user\", \"success\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get user businesses (continue)\r\n   */\r\n  onResponse([\"get user businesses\", \"continue\"], () => {\r\n    if (props.name === \"SELECT businesses\") {\r\n      const business = props.results;\r\n      const { business_id } = business;\r\n      if (userBusinesses === null) {\r\n        setUserBusinesses(JSON.stringify([business]));\r\n        getBusinessPurposes(business_id, 0, 1);\r\n      } else {\r\n        setUserBusinesses(JSON.stringify([...userBusinesses, business]));\r\n      }\r\n    } else if (props.name === \"COUNT businesses\") {\r\n      setCountBusinesses(props.results.count_businesses);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get user businesses (finished)\r\n   */\r\n  onResponse([\"get user businesses\", \"finished\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n    setUserBusinessesLoaded(true);\r\n    setRedirectTo(\"/my-business\");\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"get user businesses\", \"success\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get cart purposes (continue)\r\n   */\r\n  onResponse([\"get cart purposes\", \"continue\"], () => {\r\n    if (props.name === \"SELECT purposes\") {\r\n      if (cartPurposes === null) {\r\n        setCartPurposes(JSON.stringify([props.results]));\r\n      } else {\r\n        setCartPurposes(JSON.stringify([...cartPurposes, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT purposes\") {\r\n      // setCartPurposes(props.results.count_purposes);\r\n    }\r\n\r\n    // getPurposeShareholders(props.results.purpose_id);\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get cart purposes (success)\r\n   */\r\n  onResponse([\"get cart purposes\", \"success\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get business purposes (continue)\r\n   */\r\n  onResponse([\"get business purposes\", \"continue\"], () => {\r\n    if (props.name === \"SELECT purposes\") {\r\n      if (businessPurposes === null) {\r\n        setBusinessPurposes(JSON.stringify([props.results]));\r\n      } else {\r\n        setBusinessPurposes(\r\n          JSON.stringify([...businessPurposes, props.results])\r\n        );\r\n      }\r\n    } else if (props.name === \"COUNT purposes\") {\r\n      setCountBusinessPurposes(props.results.count_purposes);\r\n    }\r\n\r\n    // getPurposeShareholders(props.results.purpose_id);\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get business purposes (finished)\r\n   */\r\n  onResponse([\"get business purposes\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get purpose shareholders (continue)\r\n   */\r\n  onResponse([\"get purpose shareholders\", \"continue\"], () => {\r\n    if (props.name === \"SELECT shares\") {\r\n      if (purposeShareholders === null) {\r\n        setPurposeShareholders(JSON.stringify([props.results]));\r\n      } else {\r\n        setPurposeShareholders(\r\n          JSON.stringify([...purposeShareholders, props.results])\r\n        );\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get purpose shareholders (finished)\r\n   */\r\n  onResponse([\"get purpose shareholders\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get user business by id (continue)\r\n   */\r\n  // onResponse([\"get business by id\", \"continue\"], () => {\r\n  //   if (userBusinesses === null) {\r\n  //     setUserBusinesses(JSON.stringify([props.results]));\r\n  //   } else {\r\n  //     setUserBusinesses(JSON.stringify([...userBusinesses, props.results]));\r\n  //   }\r\n\r\n  //   return false;\r\n  // });\r\n\r\n  onResponse([\"get business by id\", \"continue\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n\r\n    if (props.name === \"SELECT businesses\") {\r\n      if (userBusinesses === null) {\r\n        setUserBusinesses(JSON.stringify([props.results]));\r\n      } else {\r\n        setUserBusinesses(JSON.stringify([...userBusinesses, props.results]));\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get business by id (finished)\r\n   */\r\n  onResponse([\"get business by id\", \"finished\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n\r\n    if (props.queryCnt > 0) {\r\n      // getting business was successful - query returned results\r\n      return false;\r\n    } else {\r\n      console.log(\"Error getting business by id\");\r\n\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"get business by id\", \"success\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get purpose by id (continue)\r\n   */\r\n  onResponse([\"get purpose by id\", \"continue\"], () => {\r\n    /**\r\n     * Replace the purpose if it is already there\r\n     */\r\n    const index = getObjectArrayElementIndex(\r\n      businessPurposes,\r\n      \"purpose_id\",\r\n      props.results.purpose_id\r\n    );\r\n    if (index > -1) {\r\n      businessPurposes.splice(index, 1);\r\n      let temp = [...businessPurposes, props.results];\r\n      temp = sortObjectArray(temp, \"title\");\r\n      setBusinessPurposes(JSON.stringify(temp));\r\n      setActivePurposeData(JSON.stringify(props.results));\r\n\r\n      /**\r\n       * ... otherwise add the purpose\r\n       */\r\n    } else {\r\n      if (props.name === \"SELECT purposes\") {\r\n        if (businessPurposes === null) {\r\n          setBusinessPurposes(JSON.stringify([props.results]));\r\n        } else {\r\n          setBusinessPurposes(\r\n            JSON.stringify([...businessPurposes, props.results])\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get purpose by id (finished)\r\n   */\r\n  onResponse([\"get purpose by id\", \"finished\"], () => {\r\n    if (props.queryCnt < 1) {\r\n      // Something went wrong\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get purpose by id (success)\r\n   */\r\n  onResponse([\"get purpose by id\", \"success\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get shareholder by id (continue)\r\n   */\r\n  onResponse([\"get shareholder by id\", \"continue\"], () => {\r\n    if (purposeShareholders === null) {\r\n      setPurposeShareholders(JSON.stringify([props.results]));\r\n    } else {\r\n      setPurposeShareholders(\r\n        JSON.stringify([...purposeShareholders, props.results])\r\n      );\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get shareholder by id (finished)\r\n   */\r\n  onResponse([\"get shareholder by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Upload file (ready)\r\n   */\r\n  onResponse([\"upload file\", \"continue\"], () => {\r\n    // console.log(\"UPLOAD FILE =========== \");\r\n\r\n    // if (props.name === \"SELECT 1\") {\r\n    // setAccountPhotoPath(props + \"?r=\" + Math.random());\r\n    setAccountPhotoPath(Date.now()); // ok\r\n    return false;\r\n    // }\r\n    // return true;\r\n  });\r\n\r\n  onResponse([\"upload file\", \"finished\"], () => {\r\n    if (props.name === \"SELECT 1\") {\r\n      if (props.queryCnt === 0) {\r\n        // something went wrong\r\n        // setAccountPhotoPath(\"ok\");\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"upload file\", \"success\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Register account (success)\r\n   */\r\n  onResponse([\"register account\", \"continue\"], () => {\r\n    if (props.results.affectedRows < 1) {\r\n      // error registering account\r\n      setUID(null);\r\n      setAccountNumber(null);\r\n      showMessage(\"INVALID_DATA\", \"error\");\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register account (success)\r\n   */\r\n  onResponse([\"register account\", \"success\"], () => {\r\n    // getAccountData();\r\n    sendRequest({ req: \"get user\", data: { email: props.email } });\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get account data (continue)\r\n   */\r\n  onResponse([\"get account data\", \"continue\"], () => {\r\n    if (props.name === \"SELECT users\") {\r\n      setUID(props.results.uid);\r\n      setUserData(JSON.stringify(props.results));\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get account data (finished)\r\n   */\r\n  onResponse([\"get account data\", \"finished\"], () => {\r\n    if (props.name === \"SELECT users\") {\r\n      if (props.queryCnt === 0) {\r\n        // Account not reachable\r\n        // - user session timed out\r\n        showMessage(\"SESSION_TIMED_OUT\", \"info\");\r\n        setRedirectTo(\"/sign-out\");\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"get account data\", \"success\"], () => {\r\n    if (userData === null) return true;\r\n\r\n    if (!loggingIn && userData.seconds_since_last_seen >= sessionTimeout) {\r\n      setSessionTimeoutApplied(true);\r\n      setUpdateInterval(-1);\r\n      onSessionTimeout();\r\n    } else {\r\n      setUpdateInterval(60000); // 30000 | 60000 = 1 minute\r\n    }\r\n\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2S\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (continue)\r\n   */\r\n  onResponse([\"transfer U2S\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2S (success)\r\n   */\r\n  onResponse([\"transfer U2S\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2U\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (continue)\r\n   */\r\n  onResponse([\"transfer U2U\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2U (success)\r\n   */\r\n  onResponse([\"transfer U2U\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    setTanRequired(false);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (pending)\r\n   ============================================================================================*/\r\n  onResponse([\"transfer U2B\", \"pending\"], () => {\r\n    // might show some pending state feedback\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (continue)\r\n   */\r\n  onResponse([\"transfer U2B\", \"continue\"], () => {\r\n    if (props.name === \"INSERT INTO transactions\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Transfer U2B (success)\r\n   */\r\n  onResponse([\"transfer U2B\", \"success\"], () => {\r\n    getTransactionById(lastInsertId);\r\n    setTanRequired(false);\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Register business\r\n   ============================================================================================*/\r\n  onResponse([\"register business\", \"continue\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n    if (props.name === \"INSERT INTO businesses\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        // No row was inserted - an error was returned\r\n        return true;\r\n      }\r\n    }\r\n  });\r\n\r\n  onResponse([\"register business\", \"success\"], () => {\r\n    // if (instance !== props.reqData.instance) return true;\r\n    // console.log(\"RESPONSE register business:\", props);\r\n\r\n    // <ModalConfirm\r\n    //   title=\"Add Shareholders\"\r\n    //   message=\"Do you want to add yourself as a shareholder?\"\r\n    // />;\r\n\r\n    sendRequest({\r\n      req: \"get business by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    // getBusinesses();\r\n    return false;\r\n    // return true;\r\n  });\r\n\r\n  onResponse([\"register currency\", \"continue\"], () => {\r\n    // console.log(\"RESPONSE register business:\", props);\r\n\r\n    if (props.results.insertId > 0) {\r\n      setLastInsertId(props.results.insertId);\r\n\r\n      return false;\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register currency\", \"success\"], () => {\r\n    sendRequest({\r\n      req: \"get currency by id\",\r\n      data: { id: lastInsertId },\r\n    });\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currencies (continue)\r\n   */\r\n  onResponse([\"get currencies\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT currencies\") {\r\n      if (currencies === null) {\r\n        setCurrencies(JSON.stringify([props.results]));\r\n      } else {\r\n        setCurrencies(JSON.stringify([...currencies, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT currencies\") {\r\n      setCountCurrencies(props.results.count_currencies);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currencies (finished)\r\n   */\r\n  onResponse([\"get currencies\", \"finished\"], () => {\r\n    setRedirectTo(\"/currency\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (continue)\r\n   */\r\n  onResponse([\"get currency by id\", \"continue\"], () => {\r\n    if (props.name === \"SELECT currencies\") {\r\n      if (currencies === null) {\r\n        setCurrencies(JSON.stringify([props.results]));\r\n      } else {\r\n        setCurrencies(JSON.stringify([...currencies, props.results]));\r\n      }\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (finished)\r\n   */\r\n  onResponse([\"get currency by id\", \"finished\"], () => {\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get transactions (continue)\r\n   */\r\n  onResponse([\"get transactions\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT transactions\") {\r\n      if (transactions === null) {\r\n        setTransactions(JSON.stringify([props.results]));\r\n      } else {\r\n        setTransactions(JSON.stringify([...transactions, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT transactions\") {\r\n      setCountTransactions(props.results.count_transaction_positions);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get transactions (finished)\r\n   */\r\n  onResponse([\"get transactions\", \"finished\"], () => {\r\n    setRedirectTo(\"/balance\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get shares (continue)\r\n   */\r\n  onResponse([\"get shares\", \"continue\"], () => {\r\n    // console.log(\"PROPS NAME:\", props.name);\r\n\r\n    if (props.name === \"SELECT shares\") {\r\n      if (shares === null) {\r\n        setShares(JSON.stringify([props.results]));\r\n      } else {\r\n        setShares(JSON.stringify([...shares, props.results]));\r\n      }\r\n    } else if (props.name === \"COUNT shares\") {\r\n      setCountShares(props.results.count_shares);\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get shares (finished)\r\n   */\r\n  onResponse([\"get shares\", \"finished\"], () => {\r\n    // setRedirectTo(\"/balance\");\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * Get transaction by id (continue)\r\n   */\r\n  onResponse([\"get transaction by id\", \"continue\"], () => {\r\n    if (transactions === null) {\r\n      setTransactions(JSON.stringify([props.results]));\r\n    } else {\r\n      setTransactions(JSON.stringify([...transactions, props.results]));\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  /**\r\n   * Get currency by id (finished)\r\n   */\r\n  onResponse([\"get transaction by id\", \"finished\"], () => {\r\n    getAccountData();\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register purpose\", \"continue\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get purpose by id\",\r\n    //   data: { id: props.results.insertId },\r\n    // });\r\n    if (props.name === \"INSERT INTO purposes\") {\r\n      if (props.results.insertId > 0) {\r\n        setLastInsertId(props.results.insertId);\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    }\r\n  });\r\n\r\n  onResponse([\"register purpose\", \"success\"], () => {\r\n    sendRequest({\r\n      req: \"get purpose by id\",\r\n      data: { id: lastInsertId, language: language },\r\n    });\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"update purpose property\", \"success\"], () => {\r\n    sendRequest({\r\n      req: \"get purpose by id\",\r\n      data: { id: props.reqData.id, language: language },\r\n    });\r\n    // getBusinessPurposes(props.reqData.business_id, 0, 1);\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"register shareholder\", \"continue\"], () => {\r\n    if (props.results.insertId > 0) {\r\n      // showMessage(\"REGISTER_SHAREHOLDER_SUCCESS\", \"info\");\r\n\r\n      // return sendRequest({\r\n      //   req: \"get shareholder by id\",\r\n      //   data: { id: props.results.insertId },\r\n      // });\r\n      setLastInsertId(props.results.insertId);\r\n    } else {\r\n      // No row was inserted - an error was returned\r\n      return true;\r\n    }\r\n  });\r\n\r\n  onResponse([\"register shareholder\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    getPurposeShareholders(activeBusinesPurpose);\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"change share\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    // getPurposeShareholders(activeBusinesPurpose);\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"remove shareholder\", \"success\"], () => {\r\n    // sendRequest({\r\n    //   req: \"get shareholder by id\",\r\n    //   data: { id: lastInsertId },\r\n    // });\r\n\r\n    getPurposeShareholders(activeBusinesPurpose);\r\n    return false;\r\n  });\r\n\r\n  onResponse([\"reset password\", \"success\"], () => {\r\n    setPasswordResetTokenValidated(false);\r\n    return true;\r\n  });\r\n\r\n  onResponse([\"change password\", \"success\"], () => {\r\n    // TOTO: If NO_ROWS_CHANGE - probably the currently saved password was submitted\r\n    setPasswordResetTokenValidated(null);\r\n    setPasswordResetTokenEmail(null);\r\n    onRedirect(\"/sign-in\");\r\n    showMessage(\"PASSWORD_CHANGE_SUCCESS\", \"info\");\r\n    return true;\r\n  });\r\n\r\n  // onResponse([\"unknown\"], () => {\r\n  //   if (\r\n  //     status === \"pending\" ||\r\n  //     status === \"continue\" ||\r\n  //     status === \"finished\" ||\r\n  //     status === \"success\"\r\n  //   ) {\r\n  //     return false;\r\n  //   } else {\r\n  //     showMessage(`${req}: ${status}`, \"info\");\r\n  //     return true;\r\n  //   }\r\n  // });\r\n\r\n  onResponse([\"unknown\"], () => {\r\n    return false;\r\n  });\r\n\r\n  return responseFound;\r\n};\r\n","// import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Loading.css\";\r\nimport React from \"react\";\r\n// import MainSkeleton from \"../pages/main\";\r\n\r\nexport default () => {\r\n  //\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"lds-hourglass\"></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./normalize.css\";\r\nimport \"./index.css\";\r\nimport \"./user.css\";\r\n// import UnderConstruction from \"./components/pages/underConstruction\";\r\n// import Main from \"./components/pages/main\";\r\nimport Dispatcher from \"./Dispatcher\";\r\nimport Loading from \"./components/loading\";\r\n\r\n/**\r\n * Retrieves an URL parameter\r\n */\r\nconst getUrlParam = (param) => {\r\n  const queryString = window.location.search;\r\n  const urlParams = new URLSearchParams(queryString);\r\n  return urlParams.get(param);\r\n};\r\n\r\n/**\r\n * Clear local storage (URL param ?reset)\r\n */\r\nif (getUrlParam(\"reset\") !== null) {\r\n  window.localStorage.clear();\r\n  console.log(\"Local storage cleared\");\r\n}\r\n\r\n// const Main = React.lazy(() => import(\"./components/pages/main\"));\r\n\r\nReactDOM.render(\r\n  <Suspense fallback={<Loading />}>\r\n    <Dispatcher />\r\n  </Suspense>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}